// Copyright 2017 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package grpc.testing;

message SimpleRequest {
  int32 id = 2;
}

message SimpleResponse {
  int32 id = 3;
}

// A simple test service.
service TestService {
  // One request followed by one response.
  // The server returns the client id as-is.
  rpc UnaryCall(SimpleRequest) returns (SimpleResponse);

  // A sequence of requests with each request served by the server immediately.
  // As one request could lead to multiple responses, this interface
  // demonstrates the idea of full duplexing.
  rpc FullDuplexCall(stream SimpleRequest) returns (stream SimpleResponse);

  // Client stream 
  rpc ClientStreamCall(stream SimpleRequest) returns (SimpleResponse);

  // Server stream
  rpc ServerStreamCall(SimpleRequest) returns (stream SimpleResponse);
}
