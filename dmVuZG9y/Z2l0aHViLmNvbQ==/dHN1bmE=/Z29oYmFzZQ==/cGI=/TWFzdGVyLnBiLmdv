// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Master.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MasterSwitchType int32

const (
	MasterSwitchType_SPLIT MasterSwitchType = 0
	MasterSwitchType_MERGE MasterSwitchType = 1
)

var MasterSwitchType_name = map[int32]string{
	0: "SPLIT",
	1: "MERGE",
}
var MasterSwitchType_value = map[string]int32{
	"SPLIT": 0,
	"MERGE": 1,
}

func (x MasterSwitchType) Enum() *MasterSwitchType {
	p := new(MasterSwitchType)
	*p = x
	return p
}
func (x MasterSwitchType) String() string {
	return proto.EnumName(MasterSwitchType_name, int32(x))
}
func (x *MasterSwitchType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MasterSwitchType_value, data, "MasterSwitchType")
	if err != nil {
		return err
	}
	*x = MasterSwitchType(value)
	return nil
}
func (MasterSwitchType) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

type GetProcedureResultResponse_State int32

const (
	GetProcedureResultResponse_NOT_FOUND GetProcedureResultResponse_State = 0
	GetProcedureResultResponse_RUNNING   GetProcedureResultResponse_State = 1
	GetProcedureResultResponse_FINISHED  GetProcedureResultResponse_State = 2
)

var GetProcedureResultResponse_State_name = map[int32]string{
	0: "NOT_FOUND",
	1: "RUNNING",
	2: "FINISHED",
}
var GetProcedureResultResponse_State_value = map[string]int32{
	"NOT_FOUND": 0,
	"RUNNING":   1,
	"FINISHED":  2,
}

func (x GetProcedureResultResponse_State) Enum() *GetProcedureResultResponse_State {
	p := new(GetProcedureResultResponse_State)
	*p = x
	return p
}
func (x GetProcedureResultResponse_State) String() string {
	return proto.EnumName(GetProcedureResultResponse_State_name, int32(x))
}
func (x *GetProcedureResultResponse_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GetProcedureResultResponse_State_value, data, "GetProcedureResultResponse_State")
	if err != nil {
		return err
	}
	*x = GetProcedureResultResponse_State(value)
	return nil
}
func (GetProcedureResultResponse_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{95, 0}
}

type SecurityCapabilitiesResponse_Capability int32

const (
	SecurityCapabilitiesResponse_SIMPLE_AUTHENTICATION SecurityCapabilitiesResponse_Capability = 0
	SecurityCapabilitiesResponse_SECURE_AUTHENTICATION SecurityCapabilitiesResponse_Capability = 1
	SecurityCapabilitiesResponse_AUTHORIZATION         SecurityCapabilitiesResponse_Capability = 2
	SecurityCapabilitiesResponse_CELL_AUTHORIZATION    SecurityCapabilitiesResponse_Capability = 3
	SecurityCapabilitiesResponse_CELL_VISIBILITY       SecurityCapabilitiesResponse_Capability = 4
)

var SecurityCapabilitiesResponse_Capability_name = map[int32]string{
	0: "SIMPLE_AUTHENTICATION",
	1: "SECURE_AUTHENTICATION",
	2: "AUTHORIZATION",
	3: "CELL_AUTHORIZATION",
	4: "CELL_VISIBILITY",
}
var SecurityCapabilitiesResponse_Capability_value = map[string]int32{
	"SIMPLE_AUTHENTICATION": 0,
	"SECURE_AUTHENTICATION": 1,
	"AUTHORIZATION":         2,
	"CELL_AUTHORIZATION":    3,
	"CELL_VISIBILITY":       4,
}

func (x SecurityCapabilitiesResponse_Capability) Enum() *SecurityCapabilitiesResponse_Capability {
	p := new(SecurityCapabilitiesResponse_Capability)
	*p = x
	return p
}
func (x SecurityCapabilitiesResponse_Capability) String() string {
	return proto.EnumName(SecurityCapabilitiesResponse_Capability_name, int32(x))
}
func (x *SecurityCapabilitiesResponse_Capability) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SecurityCapabilitiesResponse_Capability_value, data, "SecurityCapabilitiesResponse_Capability")
	if err != nil {
		return err
	}
	*x = SecurityCapabilitiesResponse_Capability(value)
	return nil
}
func (SecurityCapabilitiesResponse_Capability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{106, 0}
}

type AddColumnRequest struct {
	TableName        *TableName          `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	ColumnFamilies   *ColumnFamilySchema `protobuf:"bytes,2,req,name=column_families,json=columnFamilies" json:"column_families,omitempty"`
	NonceGroup       *uint64             `protobuf:"varint,3,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce            *uint64             `protobuf:"varint,4,opt,name=nonce,def=0" json:"nonce,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *AddColumnRequest) Reset()                    { *m = AddColumnRequest{} }
func (m *AddColumnRequest) String() string            { return proto.CompactTextString(m) }
func (*AddColumnRequest) ProtoMessage()               {}
func (*AddColumnRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

const Default_AddColumnRequest_NonceGroup uint64 = 0
const Default_AddColumnRequest_Nonce uint64 = 0

func (m *AddColumnRequest) GetTableName() *TableName {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *AddColumnRequest) GetColumnFamilies() *ColumnFamilySchema {
	if m != nil {
		return m.ColumnFamilies
	}
	return nil
}

func (m *AddColumnRequest) GetNonceGroup() uint64 {
	if m != nil && m.NonceGroup != nil {
		return *m.NonceGroup
	}
	return Default_AddColumnRequest_NonceGroup
}

func (m *AddColumnRequest) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return Default_AddColumnRequest_Nonce
}

type AddColumnResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *AddColumnResponse) Reset()                    { *m = AddColumnResponse{} }
func (m *AddColumnResponse) String() string            { return proto.CompactTextString(m) }
func (*AddColumnResponse) ProtoMessage()               {}
func (*AddColumnResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{1} }

type DeleteColumnRequest struct {
	TableName        *TableName `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	ColumnName       []byte     `protobuf:"bytes,2,req,name=column_name,json=columnName" json:"column_name,omitempty"`
	NonceGroup       *uint64    `protobuf:"varint,3,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce            *uint64    `protobuf:"varint,4,opt,name=nonce,def=0" json:"nonce,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *DeleteColumnRequest) Reset()                    { *m = DeleteColumnRequest{} }
func (m *DeleteColumnRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteColumnRequest) ProtoMessage()               {}
func (*DeleteColumnRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{2} }

const Default_DeleteColumnRequest_NonceGroup uint64 = 0
const Default_DeleteColumnRequest_Nonce uint64 = 0

func (m *DeleteColumnRequest) GetTableName() *TableName {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *DeleteColumnRequest) GetColumnName() []byte {
	if m != nil {
		return m.ColumnName
	}
	return nil
}

func (m *DeleteColumnRequest) GetNonceGroup() uint64 {
	if m != nil && m.NonceGroup != nil {
		return *m.NonceGroup
	}
	return Default_DeleteColumnRequest_NonceGroup
}

func (m *DeleteColumnRequest) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return Default_DeleteColumnRequest_Nonce
}

type DeleteColumnResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DeleteColumnResponse) Reset()                    { *m = DeleteColumnResponse{} }
func (m *DeleteColumnResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteColumnResponse) ProtoMessage()               {}
func (*DeleteColumnResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{3} }

type ModifyColumnRequest struct {
	TableName        *TableName          `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	ColumnFamilies   *ColumnFamilySchema `protobuf:"bytes,2,req,name=column_families,json=columnFamilies" json:"column_families,omitempty"`
	NonceGroup       *uint64             `protobuf:"varint,3,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce            *uint64             `protobuf:"varint,4,opt,name=nonce,def=0" json:"nonce,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *ModifyColumnRequest) Reset()                    { *m = ModifyColumnRequest{} }
func (m *ModifyColumnRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyColumnRequest) ProtoMessage()               {}
func (*ModifyColumnRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{4} }

const Default_ModifyColumnRequest_NonceGroup uint64 = 0
const Default_ModifyColumnRequest_Nonce uint64 = 0

func (m *ModifyColumnRequest) GetTableName() *TableName {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *ModifyColumnRequest) GetColumnFamilies() *ColumnFamilySchema {
	if m != nil {
		return m.ColumnFamilies
	}
	return nil
}

func (m *ModifyColumnRequest) GetNonceGroup() uint64 {
	if m != nil && m.NonceGroup != nil {
		return *m.NonceGroup
	}
	return Default_ModifyColumnRequest_NonceGroup
}

func (m *ModifyColumnRequest) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return Default_ModifyColumnRequest_Nonce
}

type ModifyColumnResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ModifyColumnResponse) Reset()                    { *m = ModifyColumnResponse{} }
func (m *ModifyColumnResponse) String() string            { return proto.CompactTextString(m) }
func (*ModifyColumnResponse) ProtoMessage()               {}
func (*ModifyColumnResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{5} }

type MoveRegionRequest struct {
	Region           *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	DestServerName   *ServerName      `protobuf:"bytes,2,opt,name=dest_server_name,json=destServerName" json:"dest_server_name,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *MoveRegionRequest) Reset()                    { *m = MoveRegionRequest{} }
func (m *MoveRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*MoveRegionRequest) ProtoMessage()               {}
func (*MoveRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{6} }

func (m *MoveRegionRequest) GetRegion() *RegionSpecifier {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *MoveRegionRequest) GetDestServerName() *ServerName {
	if m != nil {
		return m.DestServerName
	}
	return nil
}

type MoveRegionResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *MoveRegionResponse) Reset()                    { *m = MoveRegionResponse{} }
func (m *MoveRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*MoveRegionResponse) ProtoMessage()               {}
func (*MoveRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{7} }

// *
// Dispatch merging the specified regions.
type DispatchMergingRegionsRequest struct {
	RegionA          *RegionSpecifier `protobuf:"bytes,1,req,name=region_a,json=regionA" json:"region_a,omitempty"`
	RegionB          *RegionSpecifier `protobuf:"bytes,2,req,name=region_b,json=regionB" json:"region_b,omitempty"`
	Forcible         *bool            `protobuf:"varint,3,opt,name=forcible,def=0" json:"forcible,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *DispatchMergingRegionsRequest) Reset()                    { *m = DispatchMergingRegionsRequest{} }
func (m *DispatchMergingRegionsRequest) String() string            { return proto.CompactTextString(m) }
func (*DispatchMergingRegionsRequest) ProtoMessage()               {}
func (*DispatchMergingRegionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{8} }

const Default_DispatchMergingRegionsRequest_Forcible bool = false

func (m *DispatchMergingRegionsRequest) GetRegionA() *RegionSpecifier {
	if m != nil {
		return m.RegionA
	}
	return nil
}

func (m *DispatchMergingRegionsRequest) GetRegionB() *RegionSpecifier {
	if m != nil {
		return m.RegionB
	}
	return nil
}

func (m *DispatchMergingRegionsRequest) GetForcible() bool {
	if m != nil && m.Forcible != nil {
		return *m.Forcible
	}
	return Default_DispatchMergingRegionsRequest_Forcible
}

type DispatchMergingRegionsResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DispatchMergingRegionsResponse) Reset()                    { *m = DispatchMergingRegionsResponse{} }
func (m *DispatchMergingRegionsResponse) String() string            { return proto.CompactTextString(m) }
func (*DispatchMergingRegionsResponse) ProtoMessage()               {}
func (*DispatchMergingRegionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{9} }

type AssignRegionRequest struct {
	Region           *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *AssignRegionRequest) Reset()                    { *m = AssignRegionRequest{} }
func (m *AssignRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*AssignRegionRequest) ProtoMessage()               {}
func (*AssignRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{10} }

func (m *AssignRegionRequest) GetRegion() *RegionSpecifier {
	if m != nil {
		return m.Region
	}
	return nil
}

type AssignRegionResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *AssignRegionResponse) Reset()                    { *m = AssignRegionResponse{} }
func (m *AssignRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*AssignRegionResponse) ProtoMessage()               {}
func (*AssignRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{11} }

type UnassignRegionRequest struct {
	Region           *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	Force            *bool            `protobuf:"varint,2,opt,name=force,def=0" json:"force,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *UnassignRegionRequest) Reset()                    { *m = UnassignRegionRequest{} }
func (m *UnassignRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*UnassignRegionRequest) ProtoMessage()               {}
func (*UnassignRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{12} }

const Default_UnassignRegionRequest_Force bool = false

func (m *UnassignRegionRequest) GetRegion() *RegionSpecifier {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *UnassignRegionRequest) GetForce() bool {
	if m != nil && m.Force != nil {
		return *m.Force
	}
	return Default_UnassignRegionRequest_Force
}

type UnassignRegionResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *UnassignRegionResponse) Reset()                    { *m = UnassignRegionResponse{} }
func (m *UnassignRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*UnassignRegionResponse) ProtoMessage()               {}
func (*UnassignRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{13} }

type OfflineRegionRequest struct {
	Region           *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *OfflineRegionRequest) Reset()                    { *m = OfflineRegionRequest{} }
func (m *OfflineRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*OfflineRegionRequest) ProtoMessage()               {}
func (*OfflineRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{14} }

func (m *OfflineRegionRequest) GetRegion() *RegionSpecifier {
	if m != nil {
		return m.Region
	}
	return nil
}

type OfflineRegionResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *OfflineRegionResponse) Reset()                    { *m = OfflineRegionResponse{} }
func (m *OfflineRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*OfflineRegionResponse) ProtoMessage()               {}
func (*OfflineRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{15} }

type CreateTableRequest struct {
	TableSchema      *TableSchema `protobuf:"bytes,1,req,name=table_schema,json=tableSchema" json:"table_schema,omitempty"`
	SplitKeys        [][]byte     `protobuf:"bytes,2,rep,name=split_keys,json=splitKeys" json:"split_keys,omitempty"`
	NonceGroup       *uint64      `protobuf:"varint,3,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce            *uint64      `protobuf:"varint,4,opt,name=nonce,def=0" json:"nonce,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *CreateTableRequest) Reset()                    { *m = CreateTableRequest{} }
func (m *CreateTableRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTableRequest) ProtoMessage()               {}
func (*CreateTableRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{16} }

const Default_CreateTableRequest_NonceGroup uint64 = 0
const Default_CreateTableRequest_Nonce uint64 = 0

func (m *CreateTableRequest) GetTableSchema() *TableSchema {
	if m != nil {
		return m.TableSchema
	}
	return nil
}

func (m *CreateTableRequest) GetSplitKeys() [][]byte {
	if m != nil {
		return m.SplitKeys
	}
	return nil
}

func (m *CreateTableRequest) GetNonceGroup() uint64 {
	if m != nil && m.NonceGroup != nil {
		return *m.NonceGroup
	}
	return Default_CreateTableRequest_NonceGroup
}

func (m *CreateTableRequest) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return Default_CreateTableRequest_Nonce
}

type CreateTableResponse struct {
	ProcId           *uint64 `protobuf:"varint,1,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateTableResponse) Reset()                    { *m = CreateTableResponse{} }
func (m *CreateTableResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTableResponse) ProtoMessage()               {}
func (*CreateTableResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{17} }

func (m *CreateTableResponse) GetProcId() uint64 {
	if m != nil && m.ProcId != nil {
		return *m.ProcId
	}
	return 0
}

type DeleteTableRequest struct {
	TableName        *TableName `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	NonceGroup       *uint64    `protobuf:"varint,2,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce            *uint64    `protobuf:"varint,3,opt,name=nonce,def=0" json:"nonce,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *DeleteTableRequest) Reset()                    { *m = DeleteTableRequest{} }
func (m *DeleteTableRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTableRequest) ProtoMessage()               {}
func (*DeleteTableRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{18} }

const Default_DeleteTableRequest_NonceGroup uint64 = 0
const Default_DeleteTableRequest_Nonce uint64 = 0

func (m *DeleteTableRequest) GetTableName() *TableName {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *DeleteTableRequest) GetNonceGroup() uint64 {
	if m != nil && m.NonceGroup != nil {
		return *m.NonceGroup
	}
	return Default_DeleteTableRequest_NonceGroup
}

func (m *DeleteTableRequest) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return Default_DeleteTableRequest_Nonce
}

type DeleteTableResponse struct {
	ProcId           *uint64 `protobuf:"varint,1,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DeleteTableResponse) Reset()                    { *m = DeleteTableResponse{} }
func (m *DeleteTableResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteTableResponse) ProtoMessage()               {}
func (*DeleteTableResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{19} }

func (m *DeleteTableResponse) GetProcId() uint64 {
	if m != nil && m.ProcId != nil {
		return *m.ProcId
	}
	return 0
}

type TruncateTableRequest struct {
	TableName        *TableName `protobuf:"bytes,1,req,name=tableName" json:"tableName,omitempty"`
	PreserveSplits   *bool      `protobuf:"varint,2,opt,name=preserveSplits,def=0" json:"preserveSplits,omitempty"`
	NonceGroup       *uint64    `protobuf:"varint,3,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce            *uint64    `protobuf:"varint,4,opt,name=nonce,def=0" json:"nonce,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *TruncateTableRequest) Reset()                    { *m = TruncateTableRequest{} }
func (m *TruncateTableRequest) String() string            { return proto.CompactTextString(m) }
func (*TruncateTableRequest) ProtoMessage()               {}
func (*TruncateTableRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{20} }

const Default_TruncateTableRequest_PreserveSplits bool = false
const Default_TruncateTableRequest_NonceGroup uint64 = 0
const Default_TruncateTableRequest_Nonce uint64 = 0

func (m *TruncateTableRequest) GetTableName() *TableName {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *TruncateTableRequest) GetPreserveSplits() bool {
	if m != nil && m.PreserveSplits != nil {
		return *m.PreserveSplits
	}
	return Default_TruncateTableRequest_PreserveSplits
}

func (m *TruncateTableRequest) GetNonceGroup() uint64 {
	if m != nil && m.NonceGroup != nil {
		return *m.NonceGroup
	}
	return Default_TruncateTableRequest_NonceGroup
}

func (m *TruncateTableRequest) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return Default_TruncateTableRequest_Nonce
}

type TruncateTableResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *TruncateTableResponse) Reset()                    { *m = TruncateTableResponse{} }
func (m *TruncateTableResponse) String() string            { return proto.CompactTextString(m) }
func (*TruncateTableResponse) ProtoMessage()               {}
func (*TruncateTableResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{21} }

type EnableTableRequest struct {
	TableName        *TableName `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	NonceGroup       *uint64    `protobuf:"varint,2,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce            *uint64    `protobuf:"varint,3,opt,name=nonce,def=0" json:"nonce,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *EnableTableRequest) Reset()                    { *m = EnableTableRequest{} }
func (m *EnableTableRequest) String() string            { return proto.CompactTextString(m) }
func (*EnableTableRequest) ProtoMessage()               {}
func (*EnableTableRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{22} }

const Default_EnableTableRequest_NonceGroup uint64 = 0
const Default_EnableTableRequest_Nonce uint64 = 0

func (m *EnableTableRequest) GetTableName() *TableName {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *EnableTableRequest) GetNonceGroup() uint64 {
	if m != nil && m.NonceGroup != nil {
		return *m.NonceGroup
	}
	return Default_EnableTableRequest_NonceGroup
}

func (m *EnableTableRequest) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return Default_EnableTableRequest_Nonce
}

type EnableTableResponse struct {
	ProcId           *uint64 `protobuf:"varint,1,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EnableTableResponse) Reset()                    { *m = EnableTableResponse{} }
func (m *EnableTableResponse) String() string            { return proto.CompactTextString(m) }
func (*EnableTableResponse) ProtoMessage()               {}
func (*EnableTableResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{23} }

func (m *EnableTableResponse) GetProcId() uint64 {
	if m != nil && m.ProcId != nil {
		return *m.ProcId
	}
	return 0
}

type DisableTableRequest struct {
	TableName        *TableName `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	NonceGroup       *uint64    `protobuf:"varint,2,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce            *uint64    `protobuf:"varint,3,opt,name=nonce,def=0" json:"nonce,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *DisableTableRequest) Reset()                    { *m = DisableTableRequest{} }
func (m *DisableTableRequest) String() string            { return proto.CompactTextString(m) }
func (*DisableTableRequest) ProtoMessage()               {}
func (*DisableTableRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{24} }

const Default_DisableTableRequest_NonceGroup uint64 = 0
const Default_DisableTableRequest_Nonce uint64 = 0

func (m *DisableTableRequest) GetTableName() *TableName {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *DisableTableRequest) GetNonceGroup() uint64 {
	if m != nil && m.NonceGroup != nil {
		return *m.NonceGroup
	}
	return Default_DisableTableRequest_NonceGroup
}

func (m *DisableTableRequest) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return Default_DisableTableRequest_Nonce
}

type DisableTableResponse struct {
	ProcId           *uint64 `protobuf:"varint,1,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DisableTableResponse) Reset()                    { *m = DisableTableResponse{} }
func (m *DisableTableResponse) String() string            { return proto.CompactTextString(m) }
func (*DisableTableResponse) ProtoMessage()               {}
func (*DisableTableResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{25} }

func (m *DisableTableResponse) GetProcId() uint64 {
	if m != nil && m.ProcId != nil {
		return *m.ProcId
	}
	return 0
}

type ModifyTableRequest struct {
	TableName        *TableName   `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableSchema      *TableSchema `protobuf:"bytes,2,req,name=table_schema,json=tableSchema" json:"table_schema,omitempty"`
	NonceGroup       *uint64      `protobuf:"varint,3,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce            *uint64      `protobuf:"varint,4,opt,name=nonce,def=0" json:"nonce,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ModifyTableRequest) Reset()                    { *m = ModifyTableRequest{} }
func (m *ModifyTableRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyTableRequest) ProtoMessage()               {}
func (*ModifyTableRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{26} }

const Default_ModifyTableRequest_NonceGroup uint64 = 0
const Default_ModifyTableRequest_Nonce uint64 = 0

func (m *ModifyTableRequest) GetTableName() *TableName {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *ModifyTableRequest) GetTableSchema() *TableSchema {
	if m != nil {
		return m.TableSchema
	}
	return nil
}

func (m *ModifyTableRequest) GetNonceGroup() uint64 {
	if m != nil && m.NonceGroup != nil {
		return *m.NonceGroup
	}
	return Default_ModifyTableRequest_NonceGroup
}

func (m *ModifyTableRequest) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return Default_ModifyTableRequest_Nonce
}

type ModifyTableResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ModifyTableResponse) Reset()                    { *m = ModifyTableResponse{} }
func (m *ModifyTableResponse) String() string            { return proto.CompactTextString(m) }
func (*ModifyTableResponse) ProtoMessage()               {}
func (*ModifyTableResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{27} }

type CreateNamespaceRequest struct {
	NamespaceDescriptor *NamespaceDescriptor `protobuf:"bytes,1,req,name=namespaceDescriptor" json:"namespaceDescriptor,omitempty"`
	NonceGroup          *uint64              `protobuf:"varint,2,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce               *uint64              `protobuf:"varint,3,opt,name=nonce,def=0" json:"nonce,omitempty"`
	XXX_unrecognized    []byte               `json:"-"`
}

func (m *CreateNamespaceRequest) Reset()                    { *m = CreateNamespaceRequest{} }
func (m *CreateNamespaceRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNamespaceRequest) ProtoMessage()               {}
func (*CreateNamespaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{28} }

const Default_CreateNamespaceRequest_NonceGroup uint64 = 0
const Default_CreateNamespaceRequest_Nonce uint64 = 0

func (m *CreateNamespaceRequest) GetNamespaceDescriptor() *NamespaceDescriptor {
	if m != nil {
		return m.NamespaceDescriptor
	}
	return nil
}

func (m *CreateNamespaceRequest) GetNonceGroup() uint64 {
	if m != nil && m.NonceGroup != nil {
		return *m.NonceGroup
	}
	return Default_CreateNamespaceRequest_NonceGroup
}

func (m *CreateNamespaceRequest) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return Default_CreateNamespaceRequest_Nonce
}

type CreateNamespaceResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CreateNamespaceResponse) Reset()                    { *m = CreateNamespaceResponse{} }
func (m *CreateNamespaceResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateNamespaceResponse) ProtoMessage()               {}
func (*CreateNamespaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{29} }

type DeleteNamespaceRequest struct {
	NamespaceName    *string `protobuf:"bytes,1,req,name=namespaceName" json:"namespaceName,omitempty"`
	NonceGroup       *uint64 `protobuf:"varint,2,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce            *uint64 `protobuf:"varint,3,opt,name=nonce,def=0" json:"nonce,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DeleteNamespaceRequest) Reset()                    { *m = DeleteNamespaceRequest{} }
func (m *DeleteNamespaceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteNamespaceRequest) ProtoMessage()               {}
func (*DeleteNamespaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{30} }

const Default_DeleteNamespaceRequest_NonceGroup uint64 = 0
const Default_DeleteNamespaceRequest_Nonce uint64 = 0

func (m *DeleteNamespaceRequest) GetNamespaceName() string {
	if m != nil && m.NamespaceName != nil {
		return *m.NamespaceName
	}
	return ""
}

func (m *DeleteNamespaceRequest) GetNonceGroup() uint64 {
	if m != nil && m.NonceGroup != nil {
		return *m.NonceGroup
	}
	return Default_DeleteNamespaceRequest_NonceGroup
}

func (m *DeleteNamespaceRequest) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return Default_DeleteNamespaceRequest_Nonce
}

type DeleteNamespaceResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DeleteNamespaceResponse) Reset()                    { *m = DeleteNamespaceResponse{} }
func (m *DeleteNamespaceResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteNamespaceResponse) ProtoMessage()               {}
func (*DeleteNamespaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{31} }

type ModifyNamespaceRequest struct {
	NamespaceDescriptor *NamespaceDescriptor `protobuf:"bytes,1,req,name=namespaceDescriptor" json:"namespaceDescriptor,omitempty"`
	NonceGroup          *uint64              `protobuf:"varint,2,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce               *uint64              `protobuf:"varint,3,opt,name=nonce,def=0" json:"nonce,omitempty"`
	XXX_unrecognized    []byte               `json:"-"`
}

func (m *ModifyNamespaceRequest) Reset()                    { *m = ModifyNamespaceRequest{} }
func (m *ModifyNamespaceRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyNamespaceRequest) ProtoMessage()               {}
func (*ModifyNamespaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{32} }

const Default_ModifyNamespaceRequest_NonceGroup uint64 = 0
const Default_ModifyNamespaceRequest_Nonce uint64 = 0

func (m *ModifyNamespaceRequest) GetNamespaceDescriptor() *NamespaceDescriptor {
	if m != nil {
		return m.NamespaceDescriptor
	}
	return nil
}

func (m *ModifyNamespaceRequest) GetNonceGroup() uint64 {
	if m != nil && m.NonceGroup != nil {
		return *m.NonceGroup
	}
	return Default_ModifyNamespaceRequest_NonceGroup
}

func (m *ModifyNamespaceRequest) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return Default_ModifyNamespaceRequest_Nonce
}

type ModifyNamespaceResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ModifyNamespaceResponse) Reset()                    { *m = ModifyNamespaceResponse{} }
func (m *ModifyNamespaceResponse) String() string            { return proto.CompactTextString(m) }
func (*ModifyNamespaceResponse) ProtoMessage()               {}
func (*ModifyNamespaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{33} }

type GetNamespaceDescriptorRequest struct {
	NamespaceName    *string `protobuf:"bytes,1,req,name=namespaceName" json:"namespaceName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetNamespaceDescriptorRequest) Reset()                    { *m = GetNamespaceDescriptorRequest{} }
func (m *GetNamespaceDescriptorRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNamespaceDescriptorRequest) ProtoMessage()               {}
func (*GetNamespaceDescriptorRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{34} }

func (m *GetNamespaceDescriptorRequest) GetNamespaceName() string {
	if m != nil && m.NamespaceName != nil {
		return *m.NamespaceName
	}
	return ""
}

type GetNamespaceDescriptorResponse struct {
	NamespaceDescriptor *NamespaceDescriptor `protobuf:"bytes,1,req,name=namespaceDescriptor" json:"namespaceDescriptor,omitempty"`
	XXX_unrecognized    []byte               `json:"-"`
}

func (m *GetNamespaceDescriptorResponse) Reset()         { *m = GetNamespaceDescriptorResponse{} }
func (m *GetNamespaceDescriptorResponse) String() string { return proto.CompactTextString(m) }
func (*GetNamespaceDescriptorResponse) ProtoMessage()    {}
func (*GetNamespaceDescriptorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{35}
}

func (m *GetNamespaceDescriptorResponse) GetNamespaceDescriptor() *NamespaceDescriptor {
	if m != nil {
		return m.NamespaceDescriptor
	}
	return nil
}

type ListNamespaceDescriptorsRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ListNamespaceDescriptorsRequest) Reset()         { *m = ListNamespaceDescriptorsRequest{} }
func (m *ListNamespaceDescriptorsRequest) String() string { return proto.CompactTextString(m) }
func (*ListNamespaceDescriptorsRequest) ProtoMessage()    {}
func (*ListNamespaceDescriptorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{36}
}

type ListNamespaceDescriptorsResponse struct {
	NamespaceDescriptor []*NamespaceDescriptor `protobuf:"bytes,1,rep,name=namespaceDescriptor" json:"namespaceDescriptor,omitempty"`
	XXX_unrecognized    []byte                 `json:"-"`
}

func (m *ListNamespaceDescriptorsResponse) Reset()         { *m = ListNamespaceDescriptorsResponse{} }
func (m *ListNamespaceDescriptorsResponse) String() string { return proto.CompactTextString(m) }
func (*ListNamespaceDescriptorsResponse) ProtoMessage()    {}
func (*ListNamespaceDescriptorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{37}
}

func (m *ListNamespaceDescriptorsResponse) GetNamespaceDescriptor() []*NamespaceDescriptor {
	if m != nil {
		return m.NamespaceDescriptor
	}
	return nil
}

type ListTableDescriptorsByNamespaceRequest struct {
	NamespaceName    *string `protobuf:"bytes,1,req,name=namespaceName" json:"namespaceName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ListTableDescriptorsByNamespaceRequest) Reset() {
	*m = ListTableDescriptorsByNamespaceRequest{}
}
func (m *ListTableDescriptorsByNamespaceRequest) String() string { return proto.CompactTextString(m) }
func (*ListTableDescriptorsByNamespaceRequest) ProtoMessage()    {}
func (*ListTableDescriptorsByNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{38}
}

func (m *ListTableDescriptorsByNamespaceRequest) GetNamespaceName() string {
	if m != nil && m.NamespaceName != nil {
		return *m.NamespaceName
	}
	return ""
}

type ListTableDescriptorsByNamespaceResponse struct {
	TableSchema      []*TableSchema `protobuf:"bytes,1,rep,name=tableSchema" json:"tableSchema,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ListTableDescriptorsByNamespaceResponse) Reset() {
	*m = ListTableDescriptorsByNamespaceResponse{}
}
func (m *ListTableDescriptorsByNamespaceResponse) String() string { return proto.CompactTextString(m) }
func (*ListTableDescriptorsByNamespaceResponse) ProtoMessage()    {}
func (*ListTableDescriptorsByNamespaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{39}
}

func (m *ListTableDescriptorsByNamespaceResponse) GetTableSchema() []*TableSchema {
	if m != nil {
		return m.TableSchema
	}
	return nil
}

type ListTableNamesByNamespaceRequest struct {
	NamespaceName    *string `protobuf:"bytes,1,req,name=namespaceName" json:"namespaceName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ListTableNamesByNamespaceRequest) Reset()         { *m = ListTableNamesByNamespaceRequest{} }
func (m *ListTableNamesByNamespaceRequest) String() string { return proto.CompactTextString(m) }
func (*ListTableNamesByNamespaceRequest) ProtoMessage()    {}
func (*ListTableNamesByNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{40}
}

func (m *ListTableNamesByNamespaceRequest) GetNamespaceName() string {
	if m != nil && m.NamespaceName != nil {
		return *m.NamespaceName
	}
	return ""
}

type ListTableNamesByNamespaceResponse struct {
	TableName        []*TableName `protobuf:"bytes,1,rep,name=tableName" json:"tableName,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ListTableNamesByNamespaceResponse) Reset()         { *m = ListTableNamesByNamespaceResponse{} }
func (m *ListTableNamesByNamespaceResponse) String() string { return proto.CompactTextString(m) }
func (*ListTableNamesByNamespaceResponse) ProtoMessage()    {}
func (*ListTableNamesByNamespaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{41}
}

func (m *ListTableNamesByNamespaceResponse) GetTableName() []*TableName {
	if m != nil {
		return m.TableName
	}
	return nil
}

type ShutdownRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ShutdownRequest) Reset()                    { *m = ShutdownRequest{} }
func (m *ShutdownRequest) String() string            { return proto.CompactTextString(m) }
func (*ShutdownRequest) ProtoMessage()               {}
func (*ShutdownRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{42} }

type ShutdownResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ShutdownResponse) Reset()                    { *m = ShutdownResponse{} }
func (m *ShutdownResponse) String() string            { return proto.CompactTextString(m) }
func (*ShutdownResponse) ProtoMessage()               {}
func (*ShutdownResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{43} }

type StopMasterRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *StopMasterRequest) Reset()                    { *m = StopMasterRequest{} }
func (m *StopMasterRequest) String() string            { return proto.CompactTextString(m) }
func (*StopMasterRequest) ProtoMessage()               {}
func (*StopMasterRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{44} }

type StopMasterResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *StopMasterResponse) Reset()                    { *m = StopMasterResponse{} }
func (m *StopMasterResponse) String() string            { return proto.CompactTextString(m) }
func (*StopMasterResponse) ProtoMessage()               {}
func (*StopMasterResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{45} }

type BalanceRequest struct {
	Force            *bool  `protobuf:"varint,1,opt,name=force" json:"force,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BalanceRequest) Reset()                    { *m = BalanceRequest{} }
func (m *BalanceRequest) String() string            { return proto.CompactTextString(m) }
func (*BalanceRequest) ProtoMessage()               {}
func (*BalanceRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{46} }

func (m *BalanceRequest) GetForce() bool {
	if m != nil && m.Force != nil {
		return *m.Force
	}
	return false
}

type BalanceResponse struct {
	BalancerRan      *bool  `protobuf:"varint,1,req,name=balancer_ran,json=balancerRan" json:"balancer_ran,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BalanceResponse) Reset()                    { *m = BalanceResponse{} }
func (m *BalanceResponse) String() string            { return proto.CompactTextString(m) }
func (*BalanceResponse) ProtoMessage()               {}
func (*BalanceResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{47} }

func (m *BalanceResponse) GetBalancerRan() bool {
	if m != nil && m.BalancerRan != nil {
		return *m.BalancerRan
	}
	return false
}

type SetBalancerRunningRequest struct {
	On               *bool  `protobuf:"varint,1,req,name=on" json:"on,omitempty"`
	Synchronous      *bool  `protobuf:"varint,2,opt,name=synchronous" json:"synchronous,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SetBalancerRunningRequest) Reset()                    { *m = SetBalancerRunningRequest{} }
func (m *SetBalancerRunningRequest) String() string            { return proto.CompactTextString(m) }
func (*SetBalancerRunningRequest) ProtoMessage()               {}
func (*SetBalancerRunningRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{48} }

func (m *SetBalancerRunningRequest) GetOn() bool {
	if m != nil && m.On != nil {
		return *m.On
	}
	return false
}

func (m *SetBalancerRunningRequest) GetSynchronous() bool {
	if m != nil && m.Synchronous != nil {
		return *m.Synchronous
	}
	return false
}

type SetBalancerRunningResponse struct {
	PrevBalanceValue *bool  `protobuf:"varint,1,opt,name=prev_balance_value,json=prevBalanceValue" json:"prev_balance_value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SetBalancerRunningResponse) Reset()                    { *m = SetBalancerRunningResponse{} }
func (m *SetBalancerRunningResponse) String() string            { return proto.CompactTextString(m) }
func (*SetBalancerRunningResponse) ProtoMessage()               {}
func (*SetBalancerRunningResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{49} }

func (m *SetBalancerRunningResponse) GetPrevBalanceValue() bool {
	if m != nil && m.PrevBalanceValue != nil {
		return *m.PrevBalanceValue
	}
	return false
}

type IsBalancerEnabledRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *IsBalancerEnabledRequest) Reset()                    { *m = IsBalancerEnabledRequest{} }
func (m *IsBalancerEnabledRequest) String() string            { return proto.CompactTextString(m) }
func (*IsBalancerEnabledRequest) ProtoMessage()               {}
func (*IsBalancerEnabledRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{50} }

type IsBalancerEnabledResponse struct {
	Enabled          *bool  `protobuf:"varint,1,req,name=enabled" json:"enabled,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IsBalancerEnabledResponse) Reset()                    { *m = IsBalancerEnabledResponse{} }
func (m *IsBalancerEnabledResponse) String() string            { return proto.CompactTextString(m) }
func (*IsBalancerEnabledResponse) ProtoMessage()               {}
func (*IsBalancerEnabledResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{51} }

func (m *IsBalancerEnabledResponse) GetEnabled() bool {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return false
}

type SetSplitOrMergeEnabledRequest struct {
	Enabled          *bool              `protobuf:"varint,1,req,name=enabled" json:"enabled,omitempty"`
	Synchronous      *bool              `protobuf:"varint,2,opt,name=synchronous" json:"synchronous,omitempty"`
	SwitchTypes      []MasterSwitchType `protobuf:"varint,3,rep,name=switch_types,json=switchTypes,enum=pb.MasterSwitchType" json:"switch_types,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *SetSplitOrMergeEnabledRequest) Reset()                    { *m = SetSplitOrMergeEnabledRequest{} }
func (m *SetSplitOrMergeEnabledRequest) String() string            { return proto.CompactTextString(m) }
func (*SetSplitOrMergeEnabledRequest) ProtoMessage()               {}
func (*SetSplitOrMergeEnabledRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{52} }

func (m *SetSplitOrMergeEnabledRequest) GetEnabled() bool {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return false
}

func (m *SetSplitOrMergeEnabledRequest) GetSynchronous() bool {
	if m != nil && m.Synchronous != nil {
		return *m.Synchronous
	}
	return false
}

func (m *SetSplitOrMergeEnabledRequest) GetSwitchTypes() []MasterSwitchType {
	if m != nil {
		return m.SwitchTypes
	}
	return nil
}

type SetSplitOrMergeEnabledResponse struct {
	PrevValue        []bool `protobuf:"varint,1,rep,name=prev_value,json=prevValue" json:"prev_value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SetSplitOrMergeEnabledResponse) Reset()         { *m = SetSplitOrMergeEnabledResponse{} }
func (m *SetSplitOrMergeEnabledResponse) String() string { return proto.CompactTextString(m) }
func (*SetSplitOrMergeEnabledResponse) ProtoMessage()    {}
func (*SetSplitOrMergeEnabledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{53}
}

func (m *SetSplitOrMergeEnabledResponse) GetPrevValue() []bool {
	if m != nil {
		return m.PrevValue
	}
	return nil
}

type IsSplitOrMergeEnabledRequest struct {
	SwitchType       *MasterSwitchType `protobuf:"varint,1,req,name=switch_type,json=switchType,enum=pb.MasterSwitchType" json:"switch_type,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *IsSplitOrMergeEnabledRequest) Reset()                    { *m = IsSplitOrMergeEnabledRequest{} }
func (m *IsSplitOrMergeEnabledRequest) String() string            { return proto.CompactTextString(m) }
func (*IsSplitOrMergeEnabledRequest) ProtoMessage()               {}
func (*IsSplitOrMergeEnabledRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{54} }

func (m *IsSplitOrMergeEnabledRequest) GetSwitchType() MasterSwitchType {
	if m != nil && m.SwitchType != nil {
		return *m.SwitchType
	}
	return MasterSwitchType_SPLIT
}

type IsSplitOrMergeEnabledResponse struct {
	Enabled          *bool  `protobuf:"varint,1,req,name=enabled" json:"enabled,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IsSplitOrMergeEnabledResponse) Reset()                    { *m = IsSplitOrMergeEnabledResponse{} }
func (m *IsSplitOrMergeEnabledResponse) String() string            { return proto.CompactTextString(m) }
func (*IsSplitOrMergeEnabledResponse) ProtoMessage()               {}
func (*IsSplitOrMergeEnabledResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{55} }

func (m *IsSplitOrMergeEnabledResponse) GetEnabled() bool {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return false
}

type NormalizeRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *NormalizeRequest) Reset()                    { *m = NormalizeRequest{} }
func (m *NormalizeRequest) String() string            { return proto.CompactTextString(m) }
func (*NormalizeRequest) ProtoMessage()               {}
func (*NormalizeRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{56} }

type NormalizeResponse struct {
	NormalizerRan    *bool  `protobuf:"varint,1,req,name=normalizer_ran,json=normalizerRan" json:"normalizer_ran,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *NormalizeResponse) Reset()                    { *m = NormalizeResponse{} }
func (m *NormalizeResponse) String() string            { return proto.CompactTextString(m) }
func (*NormalizeResponse) ProtoMessage()               {}
func (*NormalizeResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{57} }

func (m *NormalizeResponse) GetNormalizerRan() bool {
	if m != nil && m.NormalizerRan != nil {
		return *m.NormalizerRan
	}
	return false
}

type SetNormalizerRunningRequest struct {
	On               *bool  `protobuf:"varint,1,req,name=on" json:"on,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SetNormalizerRunningRequest) Reset()                    { *m = SetNormalizerRunningRequest{} }
func (m *SetNormalizerRunningRequest) String() string            { return proto.CompactTextString(m) }
func (*SetNormalizerRunningRequest) ProtoMessage()               {}
func (*SetNormalizerRunningRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{58} }

func (m *SetNormalizerRunningRequest) GetOn() bool {
	if m != nil && m.On != nil {
		return *m.On
	}
	return false
}

type SetNormalizerRunningResponse struct {
	PrevNormalizerValue *bool  `protobuf:"varint,1,opt,name=prev_normalizer_value,json=prevNormalizerValue" json:"prev_normalizer_value,omitempty"`
	XXX_unrecognized    []byte `json:"-"`
}

func (m *SetNormalizerRunningResponse) Reset()                    { *m = SetNormalizerRunningResponse{} }
func (m *SetNormalizerRunningResponse) String() string            { return proto.CompactTextString(m) }
func (*SetNormalizerRunningResponse) ProtoMessage()               {}
func (*SetNormalizerRunningResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{59} }

func (m *SetNormalizerRunningResponse) GetPrevNormalizerValue() bool {
	if m != nil && m.PrevNormalizerValue != nil {
		return *m.PrevNormalizerValue
	}
	return false
}

type IsNormalizerEnabledRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *IsNormalizerEnabledRequest) Reset()                    { *m = IsNormalizerEnabledRequest{} }
func (m *IsNormalizerEnabledRequest) String() string            { return proto.CompactTextString(m) }
func (*IsNormalizerEnabledRequest) ProtoMessage()               {}
func (*IsNormalizerEnabledRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{60} }

type IsNormalizerEnabledResponse struct {
	Enabled          *bool  `protobuf:"varint,1,req,name=enabled" json:"enabled,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IsNormalizerEnabledResponse) Reset()                    { *m = IsNormalizerEnabledResponse{} }
func (m *IsNormalizerEnabledResponse) String() string            { return proto.CompactTextString(m) }
func (*IsNormalizerEnabledResponse) ProtoMessage()               {}
func (*IsNormalizerEnabledResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{61} }

func (m *IsNormalizerEnabledResponse) GetEnabled() bool {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return false
}

type RunCatalogScanRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *RunCatalogScanRequest) Reset()                    { *m = RunCatalogScanRequest{} }
func (m *RunCatalogScanRequest) String() string            { return proto.CompactTextString(m) }
func (*RunCatalogScanRequest) ProtoMessage()               {}
func (*RunCatalogScanRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{62} }

type RunCatalogScanResponse struct {
	ScanResult       *int32 `protobuf:"varint,1,opt,name=scan_result,json=scanResult" json:"scan_result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RunCatalogScanResponse) Reset()                    { *m = RunCatalogScanResponse{} }
func (m *RunCatalogScanResponse) String() string            { return proto.CompactTextString(m) }
func (*RunCatalogScanResponse) ProtoMessage()               {}
func (*RunCatalogScanResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{63} }

func (m *RunCatalogScanResponse) GetScanResult() int32 {
	if m != nil && m.ScanResult != nil {
		return *m.ScanResult
	}
	return 0
}

type EnableCatalogJanitorRequest struct {
	Enable           *bool  `protobuf:"varint,1,req,name=enable" json:"enable,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EnableCatalogJanitorRequest) Reset()                    { *m = EnableCatalogJanitorRequest{} }
func (m *EnableCatalogJanitorRequest) String() string            { return proto.CompactTextString(m) }
func (*EnableCatalogJanitorRequest) ProtoMessage()               {}
func (*EnableCatalogJanitorRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{64} }

func (m *EnableCatalogJanitorRequest) GetEnable() bool {
	if m != nil && m.Enable != nil {
		return *m.Enable
	}
	return false
}

type EnableCatalogJanitorResponse struct {
	PrevValue        *bool  `protobuf:"varint,1,opt,name=prev_value,json=prevValue" json:"prev_value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EnableCatalogJanitorResponse) Reset()                    { *m = EnableCatalogJanitorResponse{} }
func (m *EnableCatalogJanitorResponse) String() string            { return proto.CompactTextString(m) }
func (*EnableCatalogJanitorResponse) ProtoMessage()               {}
func (*EnableCatalogJanitorResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{65} }

func (m *EnableCatalogJanitorResponse) GetPrevValue() bool {
	if m != nil && m.PrevValue != nil {
		return *m.PrevValue
	}
	return false
}

type IsCatalogJanitorEnabledRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *IsCatalogJanitorEnabledRequest) Reset()         { *m = IsCatalogJanitorEnabledRequest{} }
func (m *IsCatalogJanitorEnabledRequest) String() string { return proto.CompactTextString(m) }
func (*IsCatalogJanitorEnabledRequest) ProtoMessage()    {}
func (*IsCatalogJanitorEnabledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{66}
}

type IsCatalogJanitorEnabledResponse struct {
	Value            *bool  `protobuf:"varint,1,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IsCatalogJanitorEnabledResponse) Reset()         { *m = IsCatalogJanitorEnabledResponse{} }
func (m *IsCatalogJanitorEnabledResponse) String() string { return proto.CompactTextString(m) }
func (*IsCatalogJanitorEnabledResponse) ProtoMessage()    {}
func (*IsCatalogJanitorEnabledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{67}
}

func (m *IsCatalogJanitorEnabledResponse) GetValue() bool {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return false
}

type SnapshotRequest struct {
	Snapshot         *SnapshotDescription `protobuf:"bytes,1,req,name=snapshot" json:"snapshot,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *SnapshotRequest) Reset()                    { *m = SnapshotRequest{} }
func (m *SnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*SnapshotRequest) ProtoMessage()               {}
func (*SnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{68} }

func (m *SnapshotRequest) GetSnapshot() *SnapshotDescription {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

type SnapshotResponse struct {
	ExpectedTimeout  *int64 `protobuf:"varint,1,req,name=expected_timeout,json=expectedTimeout" json:"expected_timeout,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SnapshotResponse) Reset()                    { *m = SnapshotResponse{} }
func (m *SnapshotResponse) String() string            { return proto.CompactTextString(m) }
func (*SnapshotResponse) ProtoMessage()               {}
func (*SnapshotResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{69} }

func (m *SnapshotResponse) GetExpectedTimeout() int64 {
	if m != nil && m.ExpectedTimeout != nil {
		return *m.ExpectedTimeout
	}
	return 0
}

type GetCompletedSnapshotsRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetCompletedSnapshotsRequest) Reset()                    { *m = GetCompletedSnapshotsRequest{} }
func (m *GetCompletedSnapshotsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCompletedSnapshotsRequest) ProtoMessage()               {}
func (*GetCompletedSnapshotsRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{70} }

type GetCompletedSnapshotsResponse struct {
	Snapshots        []*SnapshotDescription `protobuf:"bytes,1,rep,name=snapshots" json:"snapshots,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *GetCompletedSnapshotsResponse) Reset()                    { *m = GetCompletedSnapshotsResponse{} }
func (m *GetCompletedSnapshotsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCompletedSnapshotsResponse) ProtoMessage()               {}
func (*GetCompletedSnapshotsResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{71} }

func (m *GetCompletedSnapshotsResponse) GetSnapshots() []*SnapshotDescription {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

type DeleteSnapshotRequest struct {
	Snapshot         *SnapshotDescription `protobuf:"bytes,1,req,name=snapshot" json:"snapshot,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *DeleteSnapshotRequest) Reset()                    { *m = DeleteSnapshotRequest{} }
func (m *DeleteSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteSnapshotRequest) ProtoMessage()               {}
func (*DeleteSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{72} }

func (m *DeleteSnapshotRequest) GetSnapshot() *SnapshotDescription {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

type DeleteSnapshotResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DeleteSnapshotResponse) Reset()                    { *m = DeleteSnapshotResponse{} }
func (m *DeleteSnapshotResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteSnapshotResponse) ProtoMessage()               {}
func (*DeleteSnapshotResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{73} }

type RestoreSnapshotRequest struct {
	Snapshot         *SnapshotDescription `protobuf:"bytes,1,req,name=snapshot" json:"snapshot,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *RestoreSnapshotRequest) Reset()                    { *m = RestoreSnapshotRequest{} }
func (m *RestoreSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*RestoreSnapshotRequest) ProtoMessage()               {}
func (*RestoreSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{74} }

func (m *RestoreSnapshotRequest) GetSnapshot() *SnapshotDescription {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

type RestoreSnapshotResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *RestoreSnapshotResponse) Reset()                    { *m = RestoreSnapshotResponse{} }
func (m *RestoreSnapshotResponse) String() string            { return proto.CompactTextString(m) }
func (*RestoreSnapshotResponse) ProtoMessage()               {}
func (*RestoreSnapshotResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{75} }

// if you don't send the snapshot, then you will get it back
// in the response (if the snapshot is done) so you can check the snapshot
type IsSnapshotDoneRequest struct {
	Snapshot         *SnapshotDescription `protobuf:"bytes,1,opt,name=snapshot" json:"snapshot,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *IsSnapshotDoneRequest) Reset()                    { *m = IsSnapshotDoneRequest{} }
func (m *IsSnapshotDoneRequest) String() string            { return proto.CompactTextString(m) }
func (*IsSnapshotDoneRequest) ProtoMessage()               {}
func (*IsSnapshotDoneRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{76} }

func (m *IsSnapshotDoneRequest) GetSnapshot() *SnapshotDescription {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

type IsSnapshotDoneResponse struct {
	Done             *bool                `protobuf:"varint,1,opt,name=done,def=0" json:"done,omitempty"`
	Snapshot         *SnapshotDescription `protobuf:"bytes,2,opt,name=snapshot" json:"snapshot,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *IsSnapshotDoneResponse) Reset()                    { *m = IsSnapshotDoneResponse{} }
func (m *IsSnapshotDoneResponse) String() string            { return proto.CompactTextString(m) }
func (*IsSnapshotDoneResponse) ProtoMessage()               {}
func (*IsSnapshotDoneResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{77} }

const Default_IsSnapshotDoneResponse_Done bool = false

func (m *IsSnapshotDoneResponse) GetDone() bool {
	if m != nil && m.Done != nil {
		return *m.Done
	}
	return Default_IsSnapshotDoneResponse_Done
}

func (m *IsSnapshotDoneResponse) GetSnapshot() *SnapshotDescription {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

type IsRestoreSnapshotDoneRequest struct {
	Snapshot         *SnapshotDescription `protobuf:"bytes,1,opt,name=snapshot" json:"snapshot,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *IsRestoreSnapshotDoneRequest) Reset()                    { *m = IsRestoreSnapshotDoneRequest{} }
func (m *IsRestoreSnapshotDoneRequest) String() string            { return proto.CompactTextString(m) }
func (*IsRestoreSnapshotDoneRequest) ProtoMessage()               {}
func (*IsRestoreSnapshotDoneRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{78} }

func (m *IsRestoreSnapshotDoneRequest) GetSnapshot() *SnapshotDescription {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

type IsRestoreSnapshotDoneResponse struct {
	Done             *bool  `protobuf:"varint,1,opt,name=done,def=0" json:"done,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IsRestoreSnapshotDoneResponse) Reset()                    { *m = IsRestoreSnapshotDoneResponse{} }
func (m *IsRestoreSnapshotDoneResponse) String() string            { return proto.CompactTextString(m) }
func (*IsRestoreSnapshotDoneResponse) ProtoMessage()               {}
func (*IsRestoreSnapshotDoneResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{79} }

const Default_IsRestoreSnapshotDoneResponse_Done bool = false

func (m *IsRestoreSnapshotDoneResponse) GetDone() bool {
	if m != nil && m.Done != nil {
		return *m.Done
	}
	return Default_IsRestoreSnapshotDoneResponse_Done
}

type GetSchemaAlterStatusRequest struct {
	TableName        *TableName `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *GetSchemaAlterStatusRequest) Reset()                    { *m = GetSchemaAlterStatusRequest{} }
func (m *GetSchemaAlterStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSchemaAlterStatusRequest) ProtoMessage()               {}
func (*GetSchemaAlterStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{80} }

func (m *GetSchemaAlterStatusRequest) GetTableName() *TableName {
	if m != nil {
		return m.TableName
	}
	return nil
}

type GetSchemaAlterStatusResponse struct {
	YetToUpdateRegions *uint32 `protobuf:"varint,1,opt,name=yet_to_update_regions,json=yetToUpdateRegions" json:"yet_to_update_regions,omitempty"`
	TotalRegions       *uint32 `protobuf:"varint,2,opt,name=total_regions,json=totalRegions" json:"total_regions,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *GetSchemaAlterStatusResponse) Reset()                    { *m = GetSchemaAlterStatusResponse{} }
func (m *GetSchemaAlterStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSchemaAlterStatusResponse) ProtoMessage()               {}
func (*GetSchemaAlterStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{81} }

func (m *GetSchemaAlterStatusResponse) GetYetToUpdateRegions() uint32 {
	if m != nil && m.YetToUpdateRegions != nil {
		return *m.YetToUpdateRegions
	}
	return 0
}

func (m *GetSchemaAlterStatusResponse) GetTotalRegions() uint32 {
	if m != nil && m.TotalRegions != nil {
		return *m.TotalRegions
	}
	return 0
}

type GetTableDescriptorsRequest struct {
	TableNames       []*TableName `protobuf:"bytes,1,rep,name=table_names,json=tableNames" json:"table_names,omitempty"`
	Regex            *string      `protobuf:"bytes,2,opt,name=regex" json:"regex,omitempty"`
	IncludeSysTables *bool        `protobuf:"varint,3,opt,name=include_sys_tables,json=includeSysTables,def=0" json:"include_sys_tables,omitempty"`
	Namespace        *string      `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *GetTableDescriptorsRequest) Reset()                    { *m = GetTableDescriptorsRequest{} }
func (m *GetTableDescriptorsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTableDescriptorsRequest) ProtoMessage()               {}
func (*GetTableDescriptorsRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{82} }

const Default_GetTableDescriptorsRequest_IncludeSysTables bool = false

func (m *GetTableDescriptorsRequest) GetTableNames() []*TableName {
	if m != nil {
		return m.TableNames
	}
	return nil
}

func (m *GetTableDescriptorsRequest) GetRegex() string {
	if m != nil && m.Regex != nil {
		return *m.Regex
	}
	return ""
}

func (m *GetTableDescriptorsRequest) GetIncludeSysTables() bool {
	if m != nil && m.IncludeSysTables != nil {
		return *m.IncludeSysTables
	}
	return Default_GetTableDescriptorsRequest_IncludeSysTables
}

func (m *GetTableDescriptorsRequest) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

type GetTableDescriptorsResponse struct {
	TableSchema      []*TableSchema `protobuf:"bytes,1,rep,name=table_schema,json=tableSchema" json:"table_schema,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *GetTableDescriptorsResponse) Reset()                    { *m = GetTableDescriptorsResponse{} }
func (m *GetTableDescriptorsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTableDescriptorsResponse) ProtoMessage()               {}
func (*GetTableDescriptorsResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{83} }

func (m *GetTableDescriptorsResponse) GetTableSchema() []*TableSchema {
	if m != nil {
		return m.TableSchema
	}
	return nil
}

type GetTableNamesRequest struct {
	Regex            *string `protobuf:"bytes,1,opt,name=regex" json:"regex,omitempty"`
	IncludeSysTables *bool   `protobuf:"varint,2,opt,name=include_sys_tables,json=includeSysTables,def=0" json:"include_sys_tables,omitempty"`
	Namespace        *string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetTableNamesRequest) Reset()                    { *m = GetTableNamesRequest{} }
func (m *GetTableNamesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTableNamesRequest) ProtoMessage()               {}
func (*GetTableNamesRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{84} }

const Default_GetTableNamesRequest_IncludeSysTables bool = false

func (m *GetTableNamesRequest) GetRegex() string {
	if m != nil && m.Regex != nil {
		return *m.Regex
	}
	return ""
}

func (m *GetTableNamesRequest) GetIncludeSysTables() bool {
	if m != nil && m.IncludeSysTables != nil {
		return *m.IncludeSysTables
	}
	return Default_GetTableNamesRequest_IncludeSysTables
}

func (m *GetTableNamesRequest) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

type GetTableNamesResponse struct {
	TableNames       []*TableName `protobuf:"bytes,1,rep,name=table_names,json=tableNames" json:"table_names,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *GetTableNamesResponse) Reset()                    { *m = GetTableNamesResponse{} }
func (m *GetTableNamesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTableNamesResponse) ProtoMessage()               {}
func (*GetTableNamesResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{85} }

func (m *GetTableNamesResponse) GetTableNames() []*TableName {
	if m != nil {
		return m.TableNames
	}
	return nil
}

type GetClusterStatusRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetClusterStatusRequest) Reset()                    { *m = GetClusterStatusRequest{} }
func (m *GetClusterStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*GetClusterStatusRequest) ProtoMessage()               {}
func (*GetClusterStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{86} }

type GetClusterStatusResponse struct {
	ClusterStatus    *ClusterStatus `protobuf:"bytes,1,req,name=cluster_status,json=clusterStatus" json:"cluster_status,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *GetClusterStatusResponse) Reset()                    { *m = GetClusterStatusResponse{} }
func (m *GetClusterStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*GetClusterStatusResponse) ProtoMessage()               {}
func (*GetClusterStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{87} }

func (m *GetClusterStatusResponse) GetClusterStatus() *ClusterStatus {
	if m != nil {
		return m.ClusterStatus
	}
	return nil
}

type IsMasterRunningRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *IsMasterRunningRequest) Reset()                    { *m = IsMasterRunningRequest{} }
func (m *IsMasterRunningRequest) String() string            { return proto.CompactTextString(m) }
func (*IsMasterRunningRequest) ProtoMessage()               {}
func (*IsMasterRunningRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{88} }

type IsMasterRunningResponse struct {
	IsMasterRunning  *bool  `protobuf:"varint,1,req,name=is_master_running,json=isMasterRunning" json:"is_master_running,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IsMasterRunningResponse) Reset()                    { *m = IsMasterRunningResponse{} }
func (m *IsMasterRunningResponse) String() string            { return proto.CompactTextString(m) }
func (*IsMasterRunningResponse) ProtoMessage()               {}
func (*IsMasterRunningResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{89} }

func (m *IsMasterRunningResponse) GetIsMasterRunning() bool {
	if m != nil && m.IsMasterRunning != nil {
		return *m.IsMasterRunning
	}
	return false
}

type ExecProcedureRequest struct {
	Procedure        *ProcedureDescription `protobuf:"bytes,1,req,name=procedure" json:"procedure,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *ExecProcedureRequest) Reset()                    { *m = ExecProcedureRequest{} }
func (m *ExecProcedureRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecProcedureRequest) ProtoMessage()               {}
func (*ExecProcedureRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{90} }

func (m *ExecProcedureRequest) GetProcedure() *ProcedureDescription {
	if m != nil {
		return m.Procedure
	}
	return nil
}

type ExecProcedureResponse struct {
	ExpectedTimeout  *int64 `protobuf:"varint,1,opt,name=expected_timeout,json=expectedTimeout" json:"expected_timeout,omitempty"`
	ReturnData       []byte `protobuf:"bytes,2,opt,name=return_data,json=returnData" json:"return_data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExecProcedureResponse) Reset()                    { *m = ExecProcedureResponse{} }
func (m *ExecProcedureResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecProcedureResponse) ProtoMessage()               {}
func (*ExecProcedureResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{91} }

func (m *ExecProcedureResponse) GetExpectedTimeout() int64 {
	if m != nil && m.ExpectedTimeout != nil {
		return *m.ExpectedTimeout
	}
	return 0
}

func (m *ExecProcedureResponse) GetReturnData() []byte {
	if m != nil {
		return m.ReturnData
	}
	return nil
}

type IsProcedureDoneRequest struct {
	Procedure        *ProcedureDescription `protobuf:"bytes,1,opt,name=procedure" json:"procedure,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *IsProcedureDoneRequest) Reset()                    { *m = IsProcedureDoneRequest{} }
func (m *IsProcedureDoneRequest) String() string            { return proto.CompactTextString(m) }
func (*IsProcedureDoneRequest) ProtoMessage()               {}
func (*IsProcedureDoneRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{92} }

func (m *IsProcedureDoneRequest) GetProcedure() *ProcedureDescription {
	if m != nil {
		return m.Procedure
	}
	return nil
}

type IsProcedureDoneResponse struct {
	Done             *bool                 `protobuf:"varint,1,opt,name=done,def=0" json:"done,omitempty"`
	Snapshot         *ProcedureDescription `protobuf:"bytes,2,opt,name=snapshot" json:"snapshot,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *IsProcedureDoneResponse) Reset()                    { *m = IsProcedureDoneResponse{} }
func (m *IsProcedureDoneResponse) String() string            { return proto.CompactTextString(m) }
func (*IsProcedureDoneResponse) ProtoMessage()               {}
func (*IsProcedureDoneResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{93} }

const Default_IsProcedureDoneResponse_Done bool = false

func (m *IsProcedureDoneResponse) GetDone() bool {
	if m != nil && m.Done != nil {
		return *m.Done
	}
	return Default_IsProcedureDoneResponse_Done
}

func (m *IsProcedureDoneResponse) GetSnapshot() *ProcedureDescription {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

type GetProcedureResultRequest struct {
	ProcId           *uint64 `protobuf:"varint,1,req,name=proc_id,json=procId" json:"proc_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetProcedureResultRequest) Reset()                    { *m = GetProcedureResultRequest{} }
func (m *GetProcedureResultRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProcedureResultRequest) ProtoMessage()               {}
func (*GetProcedureResultRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{94} }

func (m *GetProcedureResultRequest) GetProcId() uint64 {
	if m != nil && m.ProcId != nil {
		return *m.ProcId
	}
	return 0
}

type GetProcedureResultResponse struct {
	State            *GetProcedureResultResponse_State `protobuf:"varint,1,req,name=state,enum=pb.GetProcedureResultResponse_State" json:"state,omitempty"`
	StartTime        *uint64                           `protobuf:"varint,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	LastUpdate       *uint64                           `protobuf:"varint,3,opt,name=last_update,json=lastUpdate" json:"last_update,omitempty"`
	Result           []byte                            `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
	Exception        *ForeignExceptionMessage          `protobuf:"bytes,5,opt,name=exception" json:"exception,omitempty"`
	XXX_unrecognized []byte                            `json:"-"`
}

func (m *GetProcedureResultResponse) Reset()                    { *m = GetProcedureResultResponse{} }
func (m *GetProcedureResultResponse) String() string            { return proto.CompactTextString(m) }
func (*GetProcedureResultResponse) ProtoMessage()               {}
func (*GetProcedureResultResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{95} }

func (m *GetProcedureResultResponse) GetState() GetProcedureResultResponse_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return GetProcedureResultResponse_NOT_FOUND
}

func (m *GetProcedureResultResponse) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *GetProcedureResultResponse) GetLastUpdate() uint64 {
	if m != nil && m.LastUpdate != nil {
		return *m.LastUpdate
	}
	return 0
}

func (m *GetProcedureResultResponse) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetProcedureResultResponse) GetException() *ForeignExceptionMessage {
	if m != nil {
		return m.Exception
	}
	return nil
}

type AbortProcedureRequest struct {
	ProcId                *uint64 `protobuf:"varint,1,req,name=proc_id,json=procId" json:"proc_id,omitempty"`
	MayInterruptIfRunning *bool   `protobuf:"varint,2,opt,name=mayInterruptIfRunning,def=1" json:"mayInterruptIfRunning,omitempty"`
	XXX_unrecognized      []byte  `json:"-"`
}

func (m *AbortProcedureRequest) Reset()                    { *m = AbortProcedureRequest{} }
func (m *AbortProcedureRequest) String() string            { return proto.CompactTextString(m) }
func (*AbortProcedureRequest) ProtoMessage()               {}
func (*AbortProcedureRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{96} }

const Default_AbortProcedureRequest_MayInterruptIfRunning bool = true

func (m *AbortProcedureRequest) GetProcId() uint64 {
	if m != nil && m.ProcId != nil {
		return *m.ProcId
	}
	return 0
}

func (m *AbortProcedureRequest) GetMayInterruptIfRunning() bool {
	if m != nil && m.MayInterruptIfRunning != nil {
		return *m.MayInterruptIfRunning
	}
	return Default_AbortProcedureRequest_MayInterruptIfRunning
}

type AbortProcedureResponse struct {
	IsProcedureAborted *bool  `protobuf:"varint,1,req,name=is_procedure_aborted,json=isProcedureAborted" json:"is_procedure_aborted,omitempty"`
	XXX_unrecognized   []byte `json:"-"`
}

func (m *AbortProcedureResponse) Reset()                    { *m = AbortProcedureResponse{} }
func (m *AbortProcedureResponse) String() string            { return proto.CompactTextString(m) }
func (*AbortProcedureResponse) ProtoMessage()               {}
func (*AbortProcedureResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{97} }

func (m *AbortProcedureResponse) GetIsProcedureAborted() bool {
	if m != nil && m.IsProcedureAborted != nil {
		return *m.IsProcedureAborted
	}
	return false
}

type ListProceduresRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ListProceduresRequest) Reset()                    { *m = ListProceduresRequest{} }
func (m *ListProceduresRequest) String() string            { return proto.CompactTextString(m) }
func (*ListProceduresRequest) ProtoMessage()               {}
func (*ListProceduresRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{98} }

type ListProceduresResponse struct {
	Procedure        []*Procedure `protobuf:"bytes,1,rep,name=procedure" json:"procedure,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ListProceduresResponse) Reset()                    { *m = ListProceduresResponse{} }
func (m *ListProceduresResponse) String() string            { return proto.CompactTextString(m) }
func (*ListProceduresResponse) ProtoMessage()               {}
func (*ListProceduresResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{99} }

func (m *ListProceduresResponse) GetProcedure() []*Procedure {
	if m != nil {
		return m.Procedure
	}
	return nil
}

type SetQuotaRequest struct {
	UserName         *string          `protobuf:"bytes,1,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	UserGroup        *string          `protobuf:"bytes,2,opt,name=user_group,json=userGroup" json:"user_group,omitempty"`
	Namespace        *string          `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	TableName        *TableName       `protobuf:"bytes,4,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	RemoveAll        *bool            `protobuf:"varint,5,opt,name=remove_all,json=removeAll" json:"remove_all,omitempty"`
	BypassGlobals    *bool            `protobuf:"varint,6,opt,name=bypass_globals,json=bypassGlobals" json:"bypass_globals,omitempty"`
	Throttle         *ThrottleRequest `protobuf:"bytes,7,opt,name=throttle" json:"throttle,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *SetQuotaRequest) Reset()                    { *m = SetQuotaRequest{} }
func (m *SetQuotaRequest) String() string            { return proto.CompactTextString(m) }
func (*SetQuotaRequest) ProtoMessage()               {}
func (*SetQuotaRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{100} }

func (m *SetQuotaRequest) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *SetQuotaRequest) GetUserGroup() string {
	if m != nil && m.UserGroup != nil {
		return *m.UserGroup
	}
	return ""
}

func (m *SetQuotaRequest) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *SetQuotaRequest) GetTableName() *TableName {
	if m != nil {
		return m.TableName
	}
	return nil
}

func (m *SetQuotaRequest) GetRemoveAll() bool {
	if m != nil && m.RemoveAll != nil {
		return *m.RemoveAll
	}
	return false
}

func (m *SetQuotaRequest) GetBypassGlobals() bool {
	if m != nil && m.BypassGlobals != nil {
		return *m.BypassGlobals
	}
	return false
}

func (m *SetQuotaRequest) GetThrottle() *ThrottleRequest {
	if m != nil {
		return m.Throttle
	}
	return nil
}

type SetQuotaResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SetQuotaResponse) Reset()                    { *m = SetQuotaResponse{} }
func (m *SetQuotaResponse) String() string            { return proto.CompactTextString(m) }
func (*SetQuotaResponse) ProtoMessage()               {}
func (*SetQuotaResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{101} }

type MajorCompactionTimestampRequest struct {
	TableName        *TableName `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *MajorCompactionTimestampRequest) Reset()         { *m = MajorCompactionTimestampRequest{} }
func (m *MajorCompactionTimestampRequest) String() string { return proto.CompactTextString(m) }
func (*MajorCompactionTimestampRequest) ProtoMessage()    {}
func (*MajorCompactionTimestampRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{102}
}

func (m *MajorCompactionTimestampRequest) GetTableName() *TableName {
	if m != nil {
		return m.TableName
	}
	return nil
}

type MajorCompactionTimestampForRegionRequest struct {
	Region           *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *MajorCompactionTimestampForRegionRequest) Reset() {
	*m = MajorCompactionTimestampForRegionRequest{}
}
func (m *MajorCompactionTimestampForRegionRequest) String() string { return proto.CompactTextString(m) }
func (*MajorCompactionTimestampForRegionRequest) ProtoMessage()    {}
func (*MajorCompactionTimestampForRegionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{103}
}

func (m *MajorCompactionTimestampForRegionRequest) GetRegion() *RegionSpecifier {
	if m != nil {
		return m.Region
	}
	return nil
}

type MajorCompactionTimestampResponse struct {
	CompactionTimestamp *int64 `protobuf:"varint,1,req,name=compaction_timestamp,json=compactionTimestamp" json:"compaction_timestamp,omitempty"`
	XXX_unrecognized    []byte `json:"-"`
}

func (m *MajorCompactionTimestampResponse) Reset()         { *m = MajorCompactionTimestampResponse{} }
func (m *MajorCompactionTimestampResponse) String() string { return proto.CompactTextString(m) }
func (*MajorCompactionTimestampResponse) ProtoMessage()    {}
func (*MajorCompactionTimestampResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{104}
}

func (m *MajorCompactionTimestampResponse) GetCompactionTimestamp() int64 {
	if m != nil && m.CompactionTimestamp != nil {
		return *m.CompactionTimestamp
	}
	return 0
}

type SecurityCapabilitiesRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SecurityCapabilitiesRequest) Reset()                    { *m = SecurityCapabilitiesRequest{} }
func (m *SecurityCapabilitiesRequest) String() string            { return proto.CompactTextString(m) }
func (*SecurityCapabilitiesRequest) ProtoMessage()               {}
func (*SecurityCapabilitiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{105} }

type SecurityCapabilitiesResponse struct {
	Capabilities     []SecurityCapabilitiesResponse_Capability `protobuf:"varint,1,rep,name=capabilities,enum=pb.SecurityCapabilitiesResponse_Capability" json:"capabilities,omitempty"`
	XXX_unrecognized []byte                                    `json:"-"`
}

func (m *SecurityCapabilitiesResponse) Reset()                    { *m = SecurityCapabilitiesResponse{} }
func (m *SecurityCapabilitiesResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityCapabilitiesResponse) ProtoMessage()               {}
func (*SecurityCapabilitiesResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{106} }

func (m *SecurityCapabilitiesResponse) GetCapabilities() []SecurityCapabilitiesResponse_Capability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func init() {
	proto.RegisterType((*AddColumnRequest)(nil), "pb.AddColumnRequest")
	proto.RegisterType((*AddColumnResponse)(nil), "pb.AddColumnResponse")
	proto.RegisterType((*DeleteColumnRequest)(nil), "pb.DeleteColumnRequest")
	proto.RegisterType((*DeleteColumnResponse)(nil), "pb.DeleteColumnResponse")
	proto.RegisterType((*ModifyColumnRequest)(nil), "pb.ModifyColumnRequest")
	proto.RegisterType((*ModifyColumnResponse)(nil), "pb.ModifyColumnResponse")
	proto.RegisterType((*MoveRegionRequest)(nil), "pb.MoveRegionRequest")
	proto.RegisterType((*MoveRegionResponse)(nil), "pb.MoveRegionResponse")
	proto.RegisterType((*DispatchMergingRegionsRequest)(nil), "pb.DispatchMergingRegionsRequest")
	proto.RegisterType((*DispatchMergingRegionsResponse)(nil), "pb.DispatchMergingRegionsResponse")
	proto.RegisterType((*AssignRegionRequest)(nil), "pb.AssignRegionRequest")
	proto.RegisterType((*AssignRegionResponse)(nil), "pb.AssignRegionResponse")
	proto.RegisterType((*UnassignRegionRequest)(nil), "pb.UnassignRegionRequest")
	proto.RegisterType((*UnassignRegionResponse)(nil), "pb.UnassignRegionResponse")
	proto.RegisterType((*OfflineRegionRequest)(nil), "pb.OfflineRegionRequest")
	proto.RegisterType((*OfflineRegionResponse)(nil), "pb.OfflineRegionResponse")
	proto.RegisterType((*CreateTableRequest)(nil), "pb.CreateTableRequest")
	proto.RegisterType((*CreateTableResponse)(nil), "pb.CreateTableResponse")
	proto.RegisterType((*DeleteTableRequest)(nil), "pb.DeleteTableRequest")
	proto.RegisterType((*DeleteTableResponse)(nil), "pb.DeleteTableResponse")
	proto.RegisterType((*TruncateTableRequest)(nil), "pb.TruncateTableRequest")
	proto.RegisterType((*TruncateTableResponse)(nil), "pb.TruncateTableResponse")
	proto.RegisterType((*EnableTableRequest)(nil), "pb.EnableTableRequest")
	proto.RegisterType((*EnableTableResponse)(nil), "pb.EnableTableResponse")
	proto.RegisterType((*DisableTableRequest)(nil), "pb.DisableTableRequest")
	proto.RegisterType((*DisableTableResponse)(nil), "pb.DisableTableResponse")
	proto.RegisterType((*ModifyTableRequest)(nil), "pb.ModifyTableRequest")
	proto.RegisterType((*ModifyTableResponse)(nil), "pb.ModifyTableResponse")
	proto.RegisterType((*CreateNamespaceRequest)(nil), "pb.CreateNamespaceRequest")
	proto.RegisterType((*CreateNamespaceResponse)(nil), "pb.CreateNamespaceResponse")
	proto.RegisterType((*DeleteNamespaceRequest)(nil), "pb.DeleteNamespaceRequest")
	proto.RegisterType((*DeleteNamespaceResponse)(nil), "pb.DeleteNamespaceResponse")
	proto.RegisterType((*ModifyNamespaceRequest)(nil), "pb.ModifyNamespaceRequest")
	proto.RegisterType((*ModifyNamespaceResponse)(nil), "pb.ModifyNamespaceResponse")
	proto.RegisterType((*GetNamespaceDescriptorRequest)(nil), "pb.GetNamespaceDescriptorRequest")
	proto.RegisterType((*GetNamespaceDescriptorResponse)(nil), "pb.GetNamespaceDescriptorResponse")
	proto.RegisterType((*ListNamespaceDescriptorsRequest)(nil), "pb.ListNamespaceDescriptorsRequest")
	proto.RegisterType((*ListNamespaceDescriptorsResponse)(nil), "pb.ListNamespaceDescriptorsResponse")
	proto.RegisterType((*ListTableDescriptorsByNamespaceRequest)(nil), "pb.ListTableDescriptorsByNamespaceRequest")
	proto.RegisterType((*ListTableDescriptorsByNamespaceResponse)(nil), "pb.ListTableDescriptorsByNamespaceResponse")
	proto.RegisterType((*ListTableNamesByNamespaceRequest)(nil), "pb.ListTableNamesByNamespaceRequest")
	proto.RegisterType((*ListTableNamesByNamespaceResponse)(nil), "pb.ListTableNamesByNamespaceResponse")
	proto.RegisterType((*ShutdownRequest)(nil), "pb.ShutdownRequest")
	proto.RegisterType((*ShutdownResponse)(nil), "pb.ShutdownResponse")
	proto.RegisterType((*StopMasterRequest)(nil), "pb.StopMasterRequest")
	proto.RegisterType((*StopMasterResponse)(nil), "pb.StopMasterResponse")
	proto.RegisterType((*BalanceRequest)(nil), "pb.BalanceRequest")
	proto.RegisterType((*BalanceResponse)(nil), "pb.BalanceResponse")
	proto.RegisterType((*SetBalancerRunningRequest)(nil), "pb.SetBalancerRunningRequest")
	proto.RegisterType((*SetBalancerRunningResponse)(nil), "pb.SetBalancerRunningResponse")
	proto.RegisterType((*IsBalancerEnabledRequest)(nil), "pb.IsBalancerEnabledRequest")
	proto.RegisterType((*IsBalancerEnabledResponse)(nil), "pb.IsBalancerEnabledResponse")
	proto.RegisterType((*SetSplitOrMergeEnabledRequest)(nil), "pb.SetSplitOrMergeEnabledRequest")
	proto.RegisterType((*SetSplitOrMergeEnabledResponse)(nil), "pb.SetSplitOrMergeEnabledResponse")
	proto.RegisterType((*IsSplitOrMergeEnabledRequest)(nil), "pb.IsSplitOrMergeEnabledRequest")
	proto.RegisterType((*IsSplitOrMergeEnabledResponse)(nil), "pb.IsSplitOrMergeEnabledResponse")
	proto.RegisterType((*NormalizeRequest)(nil), "pb.NormalizeRequest")
	proto.RegisterType((*NormalizeResponse)(nil), "pb.NormalizeResponse")
	proto.RegisterType((*SetNormalizerRunningRequest)(nil), "pb.SetNormalizerRunningRequest")
	proto.RegisterType((*SetNormalizerRunningResponse)(nil), "pb.SetNormalizerRunningResponse")
	proto.RegisterType((*IsNormalizerEnabledRequest)(nil), "pb.IsNormalizerEnabledRequest")
	proto.RegisterType((*IsNormalizerEnabledResponse)(nil), "pb.IsNormalizerEnabledResponse")
	proto.RegisterType((*RunCatalogScanRequest)(nil), "pb.RunCatalogScanRequest")
	proto.RegisterType((*RunCatalogScanResponse)(nil), "pb.RunCatalogScanResponse")
	proto.RegisterType((*EnableCatalogJanitorRequest)(nil), "pb.EnableCatalogJanitorRequest")
	proto.RegisterType((*EnableCatalogJanitorResponse)(nil), "pb.EnableCatalogJanitorResponse")
	proto.RegisterType((*IsCatalogJanitorEnabledRequest)(nil), "pb.IsCatalogJanitorEnabledRequest")
	proto.RegisterType((*IsCatalogJanitorEnabledResponse)(nil), "pb.IsCatalogJanitorEnabledResponse")
	proto.RegisterType((*SnapshotRequest)(nil), "pb.SnapshotRequest")
	proto.RegisterType((*SnapshotResponse)(nil), "pb.SnapshotResponse")
	proto.RegisterType((*GetCompletedSnapshotsRequest)(nil), "pb.GetCompletedSnapshotsRequest")
	proto.RegisterType((*GetCompletedSnapshotsResponse)(nil), "pb.GetCompletedSnapshotsResponse")
	proto.RegisterType((*DeleteSnapshotRequest)(nil), "pb.DeleteSnapshotRequest")
	proto.RegisterType((*DeleteSnapshotResponse)(nil), "pb.DeleteSnapshotResponse")
	proto.RegisterType((*RestoreSnapshotRequest)(nil), "pb.RestoreSnapshotRequest")
	proto.RegisterType((*RestoreSnapshotResponse)(nil), "pb.RestoreSnapshotResponse")
	proto.RegisterType((*IsSnapshotDoneRequest)(nil), "pb.IsSnapshotDoneRequest")
	proto.RegisterType((*IsSnapshotDoneResponse)(nil), "pb.IsSnapshotDoneResponse")
	proto.RegisterType((*IsRestoreSnapshotDoneRequest)(nil), "pb.IsRestoreSnapshotDoneRequest")
	proto.RegisterType((*IsRestoreSnapshotDoneResponse)(nil), "pb.IsRestoreSnapshotDoneResponse")
	proto.RegisterType((*GetSchemaAlterStatusRequest)(nil), "pb.GetSchemaAlterStatusRequest")
	proto.RegisterType((*GetSchemaAlterStatusResponse)(nil), "pb.GetSchemaAlterStatusResponse")
	proto.RegisterType((*GetTableDescriptorsRequest)(nil), "pb.GetTableDescriptorsRequest")
	proto.RegisterType((*GetTableDescriptorsResponse)(nil), "pb.GetTableDescriptorsResponse")
	proto.RegisterType((*GetTableNamesRequest)(nil), "pb.GetTableNamesRequest")
	proto.RegisterType((*GetTableNamesResponse)(nil), "pb.GetTableNamesResponse")
	proto.RegisterType((*GetClusterStatusRequest)(nil), "pb.GetClusterStatusRequest")
	proto.RegisterType((*GetClusterStatusResponse)(nil), "pb.GetClusterStatusResponse")
	proto.RegisterType((*IsMasterRunningRequest)(nil), "pb.IsMasterRunningRequest")
	proto.RegisterType((*IsMasterRunningResponse)(nil), "pb.IsMasterRunningResponse")
	proto.RegisterType((*ExecProcedureRequest)(nil), "pb.ExecProcedureRequest")
	proto.RegisterType((*ExecProcedureResponse)(nil), "pb.ExecProcedureResponse")
	proto.RegisterType((*IsProcedureDoneRequest)(nil), "pb.IsProcedureDoneRequest")
	proto.RegisterType((*IsProcedureDoneResponse)(nil), "pb.IsProcedureDoneResponse")
	proto.RegisterType((*GetProcedureResultRequest)(nil), "pb.GetProcedureResultRequest")
	proto.RegisterType((*GetProcedureResultResponse)(nil), "pb.GetProcedureResultResponse")
	proto.RegisterType((*AbortProcedureRequest)(nil), "pb.AbortProcedureRequest")
	proto.RegisterType((*AbortProcedureResponse)(nil), "pb.AbortProcedureResponse")
	proto.RegisterType((*ListProceduresRequest)(nil), "pb.ListProceduresRequest")
	proto.RegisterType((*ListProceduresResponse)(nil), "pb.ListProceduresResponse")
	proto.RegisterType((*SetQuotaRequest)(nil), "pb.SetQuotaRequest")
	proto.RegisterType((*SetQuotaResponse)(nil), "pb.SetQuotaResponse")
	proto.RegisterType((*MajorCompactionTimestampRequest)(nil), "pb.MajorCompactionTimestampRequest")
	proto.RegisterType((*MajorCompactionTimestampForRegionRequest)(nil), "pb.MajorCompactionTimestampForRegionRequest")
	proto.RegisterType((*MajorCompactionTimestampResponse)(nil), "pb.MajorCompactionTimestampResponse")
	proto.RegisterType((*SecurityCapabilitiesRequest)(nil), "pb.SecurityCapabilitiesRequest")
	proto.RegisterType((*SecurityCapabilitiesResponse)(nil), "pb.SecurityCapabilitiesResponse")
	proto.RegisterEnum("pb.MasterSwitchType", MasterSwitchType_name, MasterSwitchType_value)
	proto.RegisterEnum("pb.GetProcedureResultResponse_State", GetProcedureResultResponse_State_name, GetProcedureResultResponse_State_value)
	proto.RegisterEnum("pb.SecurityCapabilitiesResponse_Capability", SecurityCapabilitiesResponse_Capability_name, SecurityCapabilitiesResponse_Capability_value)
}

func init() { proto.RegisterFile("Master.proto", fileDescriptor11) }

var fileDescriptor11 = []byte{
	// 3408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5b, 0xdd, 0x6f, 0x1b, 0x47,
	0x92, 0x0f, 0x25, 0xcb, 0x16, 0x8b, 0xfa, 0xa0, 0x5a, 0x24, 0x45, 0x8d, 0x3e, 0x3d, 0x71, 0x72,
	0x3a, 0x3b, 0x51, 0x12, 0x25, 0xbe, 0x24, 0x3e, 0x24, 0x81, 0xbe, 0x2c, 0xd3, 0xd1, 0x87, 0x33,
	0x94, 0x1c, 0xf8, 0x60, 0x60, 0x30, 0x1a, 0xb6, 0xa8, 0x49, 0x46, 0x33, 0xbc, 0xe9, 0xa6, 0x63,
	0xe6, 0x80, 0xcb, 0xe1, 0x9e, 0xee, 0xf1, 0x1e, 0xee, 0xf9, 0x90, 0x5d, 0xec, 0xfb, 0x3e, 0x2c,
	0xf6, 0x75, 0x81, 0xfd, 0x4b, 0xf6, 0x9f, 0xd8, 0x3f, 0x60, 0xd1, 0x1f, 0xf3, 0xdd, 0x43, 0xda,
	0x56, 0x80, 0xec, 0xbe, 0x89, 0x55, 0xd5, 0xd5, 0x55, 0xdd, 0xd5, 0xd5, 0x35, 0xbf, 0x2e, 0xc1,
	0xd4, 0x91, 0x45, 0x28, 0x0e, 0x36, 0x7b, 0x81, 0x4f, 0x7d, 0x34, 0xd6, 0x3b, 0xd7, 0x2a, 0x8f,
	0x76, 0x2c, 0x82, 0x05, 0x41, 0x9b, 0xda, 0x75, 0x1d, 0xec, 0x51, 0xf9, 0x6b, 0x7e, 0xd7, 0xed,
	0x33, 0xe9, 0x36, 0xb5, 0x68, 0x9f, 0x84, 0xc4, 0xfd, 0x20, 0xf0, 0x83, 0x47, 0x96, 0xd7, 0x71,
	0x1d, 0xaf, 0x2b, 0x89, 0xb3, 0x4f, 0x02, 0xdf, 0xc6, 0x9d, 0x7e, 0x10, 0x2a, 0xaa, 0x7c, 0xd3,
	0xf7, 0xa9, 0x25, 0x7e, 0xe8, 0x7f, 0x2a, 0x41, 0x75, 0xbb, 0xd3, 0xd9, 0xf5, 0xdd, 0xfe, 0x95,
	0x67, 0xe0, 0x7f, 0xef, 0x63, 0x42, 0xd1, 0x7b, 0x00, 0xd4, 0x3a, 0x77, 0xb1, 0xe9, 0x59, 0x57,
	0xb8, 0x59, 0x5a, 0x1f, 0xdb, 0xa8, 0x6c, 0x4d, 0x6f, 0xf6, 0xce, 0x37, 0x4f, 0x19, 0xf5, 0xd8,
	0xba, 0xc2, 0x46, 0x99, 0x86, 0x7f, 0xa2, 0xaf, 0x60, 0xd6, 0xe6, 0xc3, 0xcd, 0x0b, 0xeb, 0xca,
	0x71, 0x1d, 0x4c, 0x9a, 0x63, 0x7c, 0x48, 0x83, 0x0d, 0x11, 0x9a, 0x1f, 0x32, 0xce, 0xa0, 0x6d,
	0x5f, 0xe2, 0x2b, 0xcb, 0x98, 0xb1, 0x63, 0x9a, 0x83, 0x09, 0xd2, 0xa1, 0xe2, 0xf9, 0x9e, 0x8d,
	0xcd, 0x6e, 0xe0, 0xf7, 0x7b, 0xcd, 0xf1, 0xf5, 0xd2, 0xc6, 0x8d, 0x07, 0xa5, 0x0f, 0x0d, 0xe0,
	0xd4, 0x03, 0x46, 0x44, 0x0b, 0x30, 0xc1, 0x7f, 0x35, 0x6f, 0x84, 0x5c, 0xf1, 0x5b, 0x9f, 0x87,
	0xb9, 0x84, 0xfd, 0xa4, 0xe7, 0x7b, 0x04, 0xeb, 0xbf, 0x29, 0xc1, 0xfc, 0x1e, 0x76, 0x31, 0xc5,
	0xd7, 0x71, 0x6c, 0x0d, 0x2a, 0xd2, 0x31, 0x2e, 0xce, 0x9c, 0x9a, 0x32, 0x40, 0x90, 0xb8, 0xc0,
	0xb5, 0x0c, 0x6f, 0x40, 0x2d, 0x6d, 0xa2, 0xb4, 0xfd, 0xcf, 0x25, 0x98, 0x3f, 0xf2, 0x3b, 0xce,
	0xc5, 0xe0, 0x1f, 0x77, 0x53, 0x1a, 0x50, 0x4b, 0xbb, 0x20, 0x7d, 0xfb, 0x11, 0xe6, 0x8e, 0xfc,
	0x17, 0xd8, 0xc0, 0x5d, 0xc7, 0x8f, 0x1c, 0xbb, 0x07, 0x37, 0x03, 0x4e, 0x90, 0x4e, 0xcd, 0x33,
	0x0b, 0x85, 0x48, 0xbb, 0x87, 0x6d, 0xe7, 0xc2, 0xc1, 0x81, 0x21, 0x45, 0xd0, 0x67, 0x50, 0xed,
	0x60, 0x42, 0x4d, 0x82, 0x83, 0x17, 0x38, 0x08, 0x37, 0xa6, 0xb4, 0x51, 0xd9, 0x9a, 0x61, 0xc3,
	0xda, 0x9c, 0xcc, 0x17, 0x63, 0x86, 0xc9, 0xc5, 0xbf, 0xf5, 0x1a, 0xa0, 0xe4, 0xdc, 0xd2, 0xa2,
	0xdf, 0x96, 0x60, 0x65, 0xcf, 0x21, 0x3d, 0x8b, 0xda, 0x97, 0x47, 0x38, 0xe8, 0x3a, 0x5e, 0x57,
	0x48, 0x90, 0xd0, 0xbc, 0x4d, 0x98, 0x14, 0x73, 0x9b, 0xd6, 0x30, 0x03, 0x6f, 0x09, 0xa1, 0xed,
	0x84, 0xfc, 0xb9, 0x5c, 0xf2, 0x61, 0xf2, 0x3b, 0xe8, 0x36, 0x4c, 0x5e, 0xf8, 0x81, 0xed, 0x9c,
	0xbb, 0x98, 0xaf, 0xf2, 0xe4, 0x83, 0x89, 0x0b, 0xcb, 0x25, 0xd8, 0x88, 0xc8, 0xfa, 0x3a, 0xac,
	0x16, 0xd9, 0x28, 0xdd, 0xd8, 0x81, 0xf9, 0x6d, 0x42, 0x9c, 0xae, 0xf7, 0xe6, 0x4b, 0xcb, 0x36,
	0x2d, 0xad, 0x43, 0xea, 0xb6, 0xa0, 0x7e, 0xe6, 0x59, 0xd7, 0xd4, 0x8e, 0x96, 0x60, 0x82, 0xf9,
	0x23, 0x76, 0x2b, 0xf2, 0x51, 0xd0, 0xf4, 0x26, 0x34, 0xb2, 0x53, 0xc8, 0xc9, 0x77, 0xa1, 0x76,
	0x72, 0x71, 0xe1, 0x3a, 0xde, 0x35, 0x82, 0x46, 0x5f, 0x80, 0x7a, 0x46, 0x89, 0xd4, 0xfe, 0xbb,
	0x12, 0xa0, 0xdd, 0x00, 0x5b, 0x14, 0xf3, 0x43, 0x14, 0x2a, 0xdf, 0x82, 0x29, 0x71, 0xd4, 0x08,
	0x3f, 0x1b, 0x72, 0x8a, 0xd9, 0xe8, 0xb0, 0xc9, 0x23, 0x53, 0xa1, 0xf1, 0x0f, 0xb4, 0x02, 0x40,
	0x7a, 0xae, 0x43, 0xcd, 0xef, 0xf1, 0x80, 0x9d, 0xb5, 0xf1, 0x8d, 0x29, 0xa3, 0xcc, 0x29, 0x5f,
	0xe3, 0xc1, 0x35, 0x8f, 0xd3, 0x26, 0xcc, 0xa7, 0xac, 0x14, 0xd6, 0xa3, 0x05, 0xb8, 0xd5, 0x0b,
	0x7c, 0xdb, 0x74, 0x3a, 0xcd, 0x12, 0x1b, 0x61, 0xdc, 0x64, 0x3f, 0x5b, 0x1d, 0xfd, 0x27, 0x40,
	0x22, 0xb5, 0xa4, 0xbc, 0x7a, 0xbd, 0x04, 0x92, 0x31, 0x78, 0x6c, 0xa8, 0xc1, 0xe3, 0x79, 0x83,
	0x53, 0x06, 0x8c, 0x32, 0xf8, 0xf7, 0x25, 0xa8, 0x9d, 0x06, 0x7d, 0xcf, 0xce, 0xee, 0xc4, 0x3d,
	0x88, 0x4d, 0x1a, 0x69, 0xf2, 0xfb, 0x30, 0xd3, 0x0b, 0x30, 0xcf, 0x0c, 0x6d, 0xb6, 0xf0, 0x24,
	0x1d, 0x6b, 0x19, 0xe6, 0xf5, 0xb6, 0x64, 0x01, 0xea, 0x19, 0x83, 0x65, 0x48, 0xfd, 0x04, 0x68,
	0xdf, 0x63, 0x94, 0x5f, 0x71, 0xed, 0x53, 0x06, 0x8c, 0x5a, 0xfb, 0xff, 0x62, 0x77, 0xa5, 0x43,
	0x7e, 0x4d, 0x93, 0x3f, 0x80, 0x5a, 0xda, 0x82, 0x51, 0x36, 0xff, 0xa1, 0xc4, 0x92, 0x39, 0xbb,
	0x60, 0xae, 0x61, 0x72, 0xf6, 0x94, 0x8f, 0xbd, 0xc2, 0x29, 0xbf, 0x56, 0xcc, 0xd4, 0xc3, 0x8b,
	0x3d, 0x1d, 0x31, 0x3f, 0x97, 0xa0, 0x21, 0x8e, 0x37, 0x33, 0x8b, 0xf4, 0x2c, 0x3b, 0x72, 0xa8,
	0x05, 0xf3, 0x5e, 0x48, 0xdb, 0xc3, 0xc4, 0x0e, 0x9c, 0x1e, 0xf5, 0x03, 0xe9, 0xd9, 0x02, 0xb3,
	0xf4, 0x38, 0xcf, 0x36, 0x54, 0x63, 0xae, 0xb7, 0x41, 0x8b, 0xb0, 0x90, 0xb3, 0x50, 0x5a, 0xff,
	0x1f, 0xd0, 0x10, 0x47, 0x3d, 0x67, 0xfc, 0x1d, 0x98, 0x8e, 0x0c, 0x89, 0xce, 0x6f, 0xd9, 0x48,
	0x13, 0xaf, 0x6d, 0x57, 0x6e, 0xf2, 0xc4, 0xaa, 0x8a, 0xd5, 0xfe, 0x7b, 0x5e, 0xd5, 0x9c, 0x85,
	0xd2, 0xfa, 0x7d, 0x58, 0x39, 0xc0, 0x54, 0x65, 0xc6, 0xeb, 0x2c, 0xae, 0xfe, 0x3d, 0xac, 0x16,
	0xa9, 0x91, 0x47, 0xec, 0x97, 0x5b, 0x0b, 0xfd, 0x36, 0xac, 0x1d, 0x3a, 0x44, 0x35, 0x5b, 0x58,
	0x4b, 0xe9, 0x57, 0xb0, 0x5e, 0x2c, 0x32, 0xca, 0xa2, 0xf1, 0xd7, 0xb6, 0xe8, 0x18, 0xde, 0x65,
	0xd3, 0xf1, 0xe3, 0x96, 0x98, 0x6a, 0x67, 0xf0, 0x66, 0xb1, 0xaa, 0x3f, 0x87, 0x7f, 0x1a, 0xa9,
	0x4f, 0x7a, 0xf1, 0x11, 0x24, 0xf3, 0x86, 0xb4, 0x7e, 0x68, 0x6e, 0xd1, 0x1f, 0x89, 0xc5, 0x89,
	0x72, 0xd5, 0x9b, 0xdb, 0xf9, 0x04, 0x6e, 0x0f, 0xd1, 0x24, 0x2d, 0xcc, 0x5c, 0xad, 0xe3, 0xc3,
	0x72, 0xa5, 0x3e, 0x07, 0xb3, 0xed, 0xcb, 0x3e, 0xed, 0xf8, 0x3f, 0x84, 0x15, 0x98, 0x8e, 0xa0,
	0x1a, 0x93, 0x64, 0xd8, 0xce, 0xc3, 0x5c, 0x9b, 0xfa, 0x3d, 0xf1, 0x21, 0x1b, 0x0a, 0xd6, 0x00,
	0x25, 0x89, 0x52, 0xf4, 0x5d, 0x98, 0xd9, 0xb1, 0x5c, 0xcb, 0x8b, 0x7d, 0xab, 0x85, 0x15, 0x22,
	0xcb, 0xf5, 0x93, 0x61, 0x69, 0xf8, 0x09, 0xcc, 0x46, 0x72, 0xd2, 0xf2, 0xdb, 0x30, 0x75, 0x2e,
	0x48, 0x81, 0x19, 0x58, 0xa2, 0x02, 0x9c, 0x34, 0x2a, 0x21, 0xcd, 0xb0, 0x3c, 0xfd, 0x08, 0x16,
	0xdb, 0x98, 0xee, 0x84, 0x94, 0xbe, 0xe7, 0xf1, 0xa2, 0x59, 0x4c, 0x34, 0x03, 0x63, 0x7e, 0x38,
	0x6a, 0xcc, 0xf7, 0xd0, 0x3a, 0x54, 0xc8, 0xc0, 0xb3, 0x2f, 0x03, 0xdf, 0xf3, 0xfb, 0xb2, 0x68,
	0x30, 0x92, 0x24, 0xfd, 0x31, 0x68, 0x2a, 0x75, 0xd2, 0x9e, 0xf7, 0x00, 0xf5, 0x02, 0xfc, 0xc2,
	0x94, 0x06, 0x98, 0x2f, 0x2c, 0xb7, 0x1f, 0x7a, 0x51, 0x65, 0x1c, 0x39, 0xf0, 0x29, 0xa3, 0xeb,
	0x1a, 0x34, 0x5b, 0x24, 0x54, 0x25, 0x6e, 0xea, 0x4e, 0xb8, 0x54, 0xf7, 0x61, 0x51, 0xc1, 0x93,
	0xd3, 0x34, 0xe1, 0x16, 0x16, 0x24, 0x69, 0x7b, 0xf8, 0x53, 0xff, 0xbf, 0x12, 0xac, 0xb4, 0x31,
	0xe5, 0x75, 0xcd, 0x49, 0xc0, 0x3e, 0x11, 0x70, 0x5a, 0x71, 0xf1, 0xd8, 0xd1, 0xce, 0xa3, 0x4f,
	0x61, 0x8a, 0xfc, 0xe0, 0x50, 0xfb, 0xd2, 0xa4, 0x83, 0x1e, 0x26, 0xcd, 0xf1, 0xf5, 0xf1, 0x8d,
	0x99, 0xad, 0x1a, 0x8b, 0x15, 0xb1, 0xa7, 0x6d, 0xce, 0x3d, 0x1d, 0xf4, 0xb0, 0x51, 0x21, 0xd1,
	0xdf, 0x44, 0xff, 0x0a, 0x56, 0x8b, 0xac, 0x92, 0x2e, 0xad, 0x00, 0xf0, 0x95, 0x0b, 0x57, 0x6c,
	0x7c, 0x63, 0xd2, 0x28, 0x33, 0x8a, 0x58, 0xaa, 0x33, 0x58, 0x6e, 0x91, 0x21, 0x5e, 0xdd, 0x87,
	0x4a, 0xc2, 0x32, 0xee, 0x59, 0x91, 0x61, 0x10, 0x1b, 0xa6, 0x7f, 0x0e, 0x2b, 0x05, 0x6a, 0x47,
	0xae, 0x34, 0x82, 0xea, 0xb1, 0x1f, 0x5c, 0x59, 0xae, 0xf3, 0x63, 0x18, 0xb7, 0xfa, 0x03, 0x98,
	0x4b, 0xd0, 0xa4, 0x8a, 0x77, 0x60, 0xc6, 0x0b, 0x89, 0xc9, 0x28, 0x9d, 0x8e, 0xa9, 0x2c, 0x4e,
	0xdf, 0x87, 0xa5, 0x36, 0xa6, 0xc7, 0x31, 0x6d, 0x68, 0xa4, 0xea, 0x06, 0x2c, 0xab, 0xc5, 0xe5,
	0xac, 0x5b, 0x50, 0xe7, 0xeb, 0x99, 0x98, 0x3a, 0x19, 0x8c, 0xf3, 0x8c, 0x19, 0x8f, 0x16, 0x8b,
	0xbc, 0x0c, 0x5a, 0x8b, 0xc4, 0xc4, 0x4c, 0x44, 0x7e, 0x0a, 0x4b, 0x4a, 0xee, 0xc8, 0x95, 0x5a,
	0x80, 0xba, 0xd1, 0xf7, 0x76, 0x2d, 0x6a, 0xb9, 0x7e, 0xb7, 0x6d, 0x5b, 0x51, 0xde, 0xf8, 0x1c,
	0x1a, 0x59, 0x86, 0x54, 0xb6, 0x06, 0x15, 0x62, 0x5b, 0x9e, 0x19, 0x60, 0xd2, 0x77, 0x29, 0xb7,
	0x79, 0xc2, 0x00, 0x22, 0x44, 0xfa, 0x2e, 0x3b, 0x1e, 0x4b, 0xc2, 0x00, 0x39, 0xfa, 0xb1, 0xe5,
	0x39, 0x89, 0x3b, 0xb1, 0x01, 0x37, 0xc5, 0xec, 0xd2, 0x16, 0xf9, 0x4b, 0xff, 0x02, 0x96, 0xd5,
	0xc3, 0x0a, 0xa2, 0xb0, 0x94, 0x8e, 0xc2, 0x75, 0x58, 0x6d, 0x91, 0xf4, 0xd0, 0xdc, 0x22, 0xad,
	0x15, 0x4a, 0xc8, 0x39, 0x6a, 0x30, 0x11, 0xaa, 0x67, 0xa6, 0x89, 0x1f, 0xfa, 0x43, 0x98, 0x6d,
	0x7b, 0x56, 0x8f, 0x5c, 0xfa, 0x34, 0x74, 0xe2, 0x63, 0x98, 0x24, 0x92, 0x94, 0xbc, 0x85, 0x43,
	0xb1, 0xf0, 0xda, 0x61, 0x5f, 0xb1, 0x91, 0xa0, 0xfe, 0x05, 0x54, 0x63, 0x3d, 0x72, 0xc6, 0x7f,
	0x86, 0x2a, 0x7e, 0xd9, 0xc3, 0x36, 0xc5, 0x1d, 0x93, 0x3a, 0x57, 0xd8, 0xef, 0x0b, 0x85, 0xe3,
	0xc6, 0x6c, 0x48, 0x3f, 0x15, 0x64, 0x7d, 0x15, 0x96, 0x0f, 0x30, 0xdd, 0xf5, 0xaf, 0x7a, 0xac,
	0x96, 0xea, 0x84, 0xaa, 0xa2, 0x6b, 0xfb, 0x29, 0xaf, 0x46, 0x54, 0x7c, 0x39, 0xd7, 0x7d, 0x28,
	0x87, 0xb6, 0x90, 0xe4, 0x4d, 0xad, 0xb2, 0x3a, 0x96, 0xd4, 0x0f, 0xa1, 0x2e, 0xca, 0xb7, 0x5f,
	0x64, 0x11, 0x9a, 0x61, 0x25, 0x9a, 0x5d, 0x0a, 0xfd, 0x08, 0x1a, 0x06, 0x26, 0xd4, 0x0f, 0x7e,
	0x99, 0x89, 0x16, 0x61, 0x21, 0xa7, 0x4e, 0xce, 0x74, 0x08, 0xf5, 0x16, 0x89, 0x46, 0xfb, 0x1e,
	0x56, 0x4f, 0x54, 0x7a, 0xb5, 0x89, 0x2e, 0xa1, 0x91, 0xd5, 0x26, 0x17, 0x7c, 0x11, 0x6e, 0x74,
	0x7c, 0x4f, 0x06, 0x6b, 0xf8, 0x81, 0xcb, 0x49, 0xa9, 0x99, 0xc6, 0x5e, 0x75, 0xa6, 0x36, 0xcb,
	0xb4, 0x19, 0xa7, 0xae, 0x6d, 0xfe, 0x03, 0x96, 0x67, 0x95, 0x4a, 0x47, 0x7a, 0xa1, 0x7f, 0x0d,
	0x4b, 0x07, 0x98, 0x8a, 0xca, 0x68, 0xdb, 0x8d, 0x80, 0xee, 0x37, 0xfa, 0xd2, 0xd3, 0x5f, 0xf0,
	0xf8, 0x56, 0x28, 0x8b, 0x8a, 0xb5, 0xfa, 0x00, 0x53, 0x93, 0xfa, 0x66, 0xbf, 0xd7, 0xb1, 0x28,
	0x36, 0x05, 0x6e, 0x44, 0xb8, 0x61, 0xd3, 0x06, 0x1a, 0x60, 0x7a, 0xea, 0x9f, 0x71, 0x96, 0x04,
	0xde, 0xd0, 0xdb, 0x30, 0x4d, 0x7d, 0x6a, 0xb9, 0x91, 0xe8, 0x18, 0x17, 0x9d, 0xe2, 0x44, 0x29,
	0xa4, 0xff, 0xb1, 0x04, 0xda, 0x01, 0xce, 0xd5, 0x8b, 0x31, 0xb2, 0x58, 0x89, 0x9d, 0x20, 0xea,
	0x1a, 0x0c, 0x22, 0x2f, 0x08, 0xcb, 0x21, 0x01, 0xee, 0xe2, 0x97, 0x7c, 0xae, 0xb2, 0x21, 0x7e,
	0xa0, 0x8f, 0x01, 0x39, 0x9e, 0xed, 0xf6, 0x3b, 0xd8, 0x24, 0x03, 0x62, 0x72, 0x79, 0x92, 0x46,
	0x12, 0xab, 0x52, 0xa0, 0x3d, 0x20, 0x5c, 0x33, 0x41, 0xcb, 0x50, 0x8e, 0x4a, 0x46, 0xfe, 0x9d,
	0x5a, 0x36, 0x62, 0x82, 0xfe, 0x0d, 0x5f, 0xfc, 0xbc, 0xd9, 0xd1, 0x2d, 0x93, 0x85, 0xc7, 0x46,
	0x17, 0xb7, 0x3f, 0x41, 0x2d, 0x54, 0xc9, 0x9d, 0x49, 0x14, 0x7d, 0xc2, 0xa7, 0xd2, 0x68, 0x9f,
	0xc6, 0x5e, 0xc3, 0xa7, 0xf1, 0xac, 0x4f, 0x07, 0x50, 0xcf, 0x18, 0x20, 0xbd, 0x79, 0xcd, 0x5d,
	0x60, 0xa7, 0x9f, 0x25, 0xc3, 0xe4, 0xf3, 0x4b, 0x98, 0x27, 0x4f, 0xa1, 0x99, 0x67, 0xc9, 0x69,
	0x3e, 0x83, 0x19, 0x5b, 0x30, 0x4c, 0xc2, 0x39, 0x32, 0x6a, 0xe7, 0x38, 0x1e, 0x9f, 0x1a, 0x32,
	0x6d, 0x27, 0x7f, 0xb2, 0xbc, 0xd6, 0x22, 0xb2, 0x7a, 0x4e, 0x95, 0x07, 0xfa, 0x3e, 0x2c, 0xe4,
	0x38, 0x72, 0xba, 0xbb, 0x30, 0xe7, 0x10, 0xf3, 0x8a, 0xf3, 0xcc, 0x40, 0x30, 0xe5, 0xdd, 0x33,
	0xeb, 0xa4, 0xc7, 0xe8, 0xc7, 0x50, 0xdb, 0x7f, 0x89, 0xed, 0xe8, 0x9d, 0x28, 0xdc, 0x9b, 0x7f,
	0x81, 0x72, 0x2f, 0xa4, 0x49, 0x6b, 0x9b, 0xcc, 0xda, 0x48, 0x30, 0x95, 0xd6, 0x23, 0x51, 0xdd,
	0x86, 0x7a, 0x46, 0xdf, 0xd0, 0x2b, 0xa9, 0xa4, 0xb8, 0x92, 0x58, 0x2d, 0x10, 0x60, 0xda, 0x0f,
	0x3c, 0xb3, 0x63, 0x51, 0x8b, 0x6f, 0xfd, 0x94, 0x01, 0x82, 0xb4, 0x67, 0x51, 0x4b, 0x7f, 0xc2,
	0x56, 0x25, 0xb6, 0x24, 0x91, 0xab, 0x32, 0x66, 0x97, 0x5e, 0xd5, 0xec, 0xef, 0xd8, 0x6a, 0x66,
	0x34, 0x8e, 0x4e, 0xb7, 0x9f, 0xe4, 0xd2, 0x6d, 0xf1, 0x64, 0x71, 0x6a, 0xfc, 0x04, 0x16, 0x0f,
	0x30, 0x4d, 0xae, 0x50, 0xdf, 0x8d, 0x2e, 0xa5, 0x14, 0xec, 0x35, 0x96, 0x80, 0xbd, 0xfe, 0x7f,
	0x8c, 0xe7, 0x93, 0xdc, 0x30, 0x69, 0xe5, 0x03, 0x98, 0x60, 0xa1, 0x15, 0x16, 0xc2, 0x77, 0x98,
	0x1d, 0xc5, 0xe2, 0x9b, 0x2c, 0xbc, 0xb0, 0x21, 0x86, 0x70, 0xf8, 0x9a, 0x5a, 0x01, 0xe5, 0xfb,
	0x22, 0x70, 0x0c, 0xa3, 0xcc, 0x29, 0x6c, 0x47, 0xd8, 0x76, 0xb8, 0x16, 0xa1, 0x32, 0x3f, 0x0a,
	0x24, 0xc3, 0x00, 0x46, 0x12, 0x69, 0x91, 0xd5, 0x5e, 0xb2, 0x6c, 0xbb, 0xc1, 0xb7, 0x4a, 0xfe,
	0x42, 0x9f, 0x43, 0x19, 0xbf, 0xb4, 0x31, 0xf7, 0xbf, 0x39, 0xc1, 0xd7, 0x67, 0x89, 0xd9, 0xf5,
	0xd0, 0x0f, 0xb0, 0xd3, 0xf5, 0xf6, 0x43, 0xde, 0x11, 0x26, 0xc4, 0xea, 0x62, 0x23, 0x96, 0xd6,
	0x3f, 0x82, 0x09, 0x6e, 0x22, 0x9a, 0x86, 0xf2, 0xf1, 0xc9, 0xa9, 0xf9, 0xf0, 0xe4, 0xec, 0x78,
	0xaf, 0xfa, 0x16, 0xaa, 0xc0, 0x2d, 0xe3, 0xec, 0xf8, 0xb8, 0x75, 0x7c, 0x50, 0x2d, 0xa1, 0x29,
	0x98, 0x7c, 0xd8, 0x3a, 0x6e, 0xb5, 0x1f, 0xed, 0xef, 0x55, 0xc7, 0x74, 0x17, 0xea, 0xdb, 0xe7,
	0x7e, 0x40, 0x73, 0xa1, 0x5c, 0xb4, 0xa4, 0xe8, 0x01, 0xd4, 0xaf, 0xac, 0x41, 0xcb, 0xa3, 0x38,
	0x08, 0xfa, 0x3d, 0xda, 0xba, 0x90, 0x87, 0x42, 0x26, 0x9b, 0x1b, 0x34, 0xe8, 0x63, 0x43, 0x2d,
	0xa2, 0x3f, 0x86, 0x46, 0x76, 0x36, 0xb9, 0x13, 0x1f, 0x42, 0xcd, 0x21, 0x66, 0x14, 0x5a, 0xa6,
	0xc5, 0xc4, 0xa2, 0x1a, 0x19, 0x39, 0x71, 0x98, 0x6d, 0x0b, 0x0e, 0x2b, 0x97, 0xd9, 0x27, 0x7b,
	0x44, 0x27, 0xf1, 0x19, 0x6f, 0x64, 0x19, 0xf1, 0x07, 0x7c, 0x32, 0xce, 0xa3, 0xb4, 0x15, 0x9b,
	0x93, 0x08, 0xee, 0xff, 0x1d, 0x83, 0xd9, 0x36, 0xa6, 0xfc, 0xe9, 0x37, 0x5c, 0x94, 0x25, 0x28,
	0xf7, 0x49, 0xf8, 0x88, 0x26, 0xf2, 0xef, 0x24, 0x23, 0x70, 0x5c, 0x6e, 0x05, 0x80, 0x33, 0x63,
	0x60, 0xab, 0x6c, 0x70, 0x71, 0x01, 0x6a, 0x0d, 0x4d, 0xb6, 0x99, 0xeb, 0xf9, 0x06, 0xdf, 0xf6,
	0x62, 0x20, 0x76, 0x05, 0x20, 0xc0, 0x57, 0xfe, 0x0b, 0x6c, 0x5a, 0xae, 0xcb, 0x83, 0x64, 0xd2,
	0x28, 0x0b, 0xca, 0xb6, 0xeb, 0xb2, 0x4f, 0xa9, 0xf3, 0x41, 0xcf, 0x22, 0xc4, 0xec, 0xba, 0xfe,
	0xb9, 0xe5, 0x92, 0xe6, 0x4d, 0x2e, 0x32, 0x2d, 0xa8, 0x07, 0x82, 0x88, 0x3e, 0x80, 0x49, 0x7a,
	0x19, 0xf8, 0x94, 0xba, 0xb8, 0x79, 0x8b, 0xcf, 0xc8, 0xdf, 0x84, 0x4e, 0x25, 0x4d, 0x3a, 0x6d,
	0x44, 0x42, 0x1c, 0xc0, 0x88, 0x56, 0x44, 0xd6, 0x6f, 0x27, 0xb0, 0x76, 0x64, 0x7d, 0xe7, 0x07,
	0xac, 0xd6, 0xb5, 0x6c, 0x16, 0x86, 0x2c, 0xfc, 0x09, 0xb5, 0xae, 0x7a, 0x6f, 0x56, 0x7a, 0x7c,
	0x0b, 0x1b, 0x45, 0x0a, 0x1f, 0xb2, 0x4f, 0x90, 0x37, 0x7e, 0xd3, 0x3a, 0x83, 0xf5, 0x62, 0x4b,
	0xa3, 0xba, 0xa6, 0x66, 0x47, 0x6c, 0x7e, 0xb2, 0x39, 0x5f, 0x7e, 0x06, 0xcc, 0xdb, 0xf9, 0xa1,
	0xfa, 0x0a, 0xfb, 0x20, 0xb5, 0xfb, 0x81, 0x43, 0x07, 0xbb, 0x56, 0xcf, 0x3a, 0x77, 0x5c, 0x87,
	0x3a, 0x71, 0x34, 0xfe, 0xb5, 0xc4, 0xbe, 0x40, 0x55, 0x7c, 0x39, 0xe5, 0x09, 0x4c, 0xd9, 0x09,
	0x3a, 0x8f, 0xcb, 0x99, 0xad, 0x7b, 0xe2, 0x6d, 0xb6, 0x78, 0xdc, 0x66, 0x44, 0x1c, 0x18, 0x29,
	0x05, 0xfa, 0x7f, 0x97, 0x00, 0x62, 0x26, 0x5a, 0x84, 0x7a, 0xbb, 0x75, 0xf4, 0xe4, 0x70, 0xdf,
	0xdc, 0x3e, 0x3b, 0x7d, 0xb4, 0x7f, 0x7c, 0xda, 0xda, 0xdd, 0x3e, 0x6d, 0x9d, 0x1c, 0x57, 0xdf,
	0xe2, 0xac, 0xfd, 0xdd, 0x33, 0x23, 0xc7, 0x2a, 0xa1, 0x39, 0x98, 0x66, 0xb4, 0x13, 0xa3, 0xf5,
	0x6f, 0x82, 0x34, 0x86, 0x1a, 0x80, 0x76, 0xf7, 0x0f, 0x0f, 0xcd, 0x34, 0x7d, 0x1c, 0xcd, 0xc3,
	0x2c, 0xa7, 0x3f, 0x6d, 0xb5, 0x5b, 0x3b, 0xad, 0xc3, 0xd6, 0xe9, 0xb3, 0xea, 0x8d, 0xbb, 0x1b,
	0x50, 0xcd, 0x22, 0x0a, 0xa8, 0x0c, 0x13, 0xed, 0x27, 0x87, 0xad, 0xd3, 0xea, 0x5b, 0xec, 0xcf,
	0xa3, 0x7d, 0xe3, 0x60, 0xbf, 0x5a, 0xda, 0xfa, 0x8b, 0x0e, 0xd3, 0x52, 0x14, 0x07, 0x2f, 0x1c,
	0x1b, 0xa3, 0x67, 0xbc, 0xf2, 0xc9, 0x15, 0x9f, 0x68, 0x4d, 0xa6, 0xe7, 0xa2, 0x1a, 0x57, 0x5b,
	0x2f, 0x16, 0x90, 0x8b, 0xfd, 0x14, 0xe6, 0x15, 0x75, 0x1a, 0x5a, 0x95, 0x03, 0x0b, 0xea, 0x4e,
	0x6d, 0xad, 0x90, 0x2f, 0xf5, 0xee, 0xc1, 0x74, 0xaa, 0x56, 0x42, 0xcd, 0xe4, 0x88, 0x64, 0xfd,
	0xa6, 0x2d, 0x2a, 0x38, 0x52, 0xcb, 0x11, 0x54, 0xb3, 0xd5, 0x10, 0x5a, 0x92, 0xe2, 0xaa, 0xf2,
	0x49, 0x5b, 0x56, 0x33, 0xa5, 0xba, 0xc7, 0x30, 0x9b, 0x29, 0x76, 0x90, 0xc6, 0x06, 0xa8, 0x6b,
	0x23, 0x6d, 0x49, 0xc9, 0x8b, 0x8a, 0xb1, 0x72, 0xd4, 0x34, 0x82, 0x38, 0x60, 0x94, 0xed, 0x81,
	0xd1, 0xea, 0x19, 0xaa, 0x1c, 0xb9, 0x0d, 0x53, 0xc9, 0xae, 0x0d, 0xc4, 0x3f, 0x83, 0x14, 0xad,
	0x26, 0x5a, 0x33, 0xcf, 0x88, 0x55, 0x24, 0x9b, 0x23, 0x84, 0x0a, 0x45, 0xc7, 0x87, 0x50, 0xa1,
	0xea, 0xa3, 0x40, 0xff, 0x0a, 0x10, 0xf7, 0x32, 0xa0, 0xba, 0x90, 0xcb, 0xf4, 0x55, 0x68, 0x8d,
	0x2c, 0x59, 0x0e, 0x36, 0xa1, 0xa1, 0xee, 0x26, 0x40, 0xb7, 0xb9, 0xcd, 0xc3, 0xba, 0x21, 0x34,
	0x7d, 0x98, 0x48, 0xec, 0x60, 0xb2, 0x91, 0x40, 0x38, 0xa8, 0x68, 0x4f, 0x10, 0x0e, 0xaa, 0x7a,
	0x0e, 0xd0, 0x01, 0xcc, 0xa4, 0x1b, 0x02, 0x10, 0x0f, 0x34, 0x65, 0x1f, 0x82, 0xa6, 0xa9, 0x58,
	0x71, 0x28, 0xa7, 0x9e, 0xfe, 0x45, 0x28, 0xab, 0x5a, 0x0a, 0x44, 0x28, 0x2b, 0xfb, 0x04, 0xd0,
	0x97, 0x50, 0x49, 0xbc, 0x67, 0xa3, 0x46, 0xbc, 0xb7, 0xc9, 0xf7, 0x47, 0x6d, 0x21, 0x47, 0x8f,
	0xad, 0xa0, 0xc9, 0xd7, 0x62, 0x61, 0x85, 0xea, 0xc5, 0x5b, 0x58, 0xa1, 0x7c, 0x5a, 0x66, 0x56,
	0x24, 0x5e, 0x76, 0x85, 0x15, 0xf9, 0xb7, 0x66, 0x61, 0x85, 0xea, 0x09, 0x98, 0xc5, 0x6e, 0xe2,
	0x99, 0x55, 0xc6, 0x6e, 0xfe, 0xe9, 0x57, 0xc6, 0xae, 0xea, 0x45, 0xf6, 0x4b, 0xa8, 0x24, 0x9e,
	0x30, 0x51, 0x23, 0x8e, 0xd0, 0xbc, 0x09, 0x8a, 0xb7, 0x4e, 0x36, 0x3e, 0xd1, 0xc9, 0x20, 0xc6,
	0xe7, 0x1b, 0x30, 0xc4, 0x78, 0x55, 0xcb, 0xc3, 0x7d, 0x98, 0x0c, 0x1f, 0x1d, 0x10, 0xbf, 0x1e,
	0x33, 0xaf, 0x12, 0x5a, 0x2d, 0x4d, 0x8c, 0xcf, 0x4b, 0xfc, 0x04, 0x21, 0xce, 0x4b, 0xee, 0x9d,
	0x42, 0x9c, 0x97, 0xfc, 0x4b, 0x05, 0xda, 0x82, 0x5b, 0x12, 0x92, 0x47, 0x88, 0x89, 0xa4, 0x9f,
	0x2d, 0xb4, 0xf9, 0x14, 0x4d, 0x8e, 0x69, 0x03, 0xca, 0x3f, 0x18, 0xa0, 0x15, 0x71, 0x0d, 0x16,
	0xbc, 0x4b, 0x68, 0xab, 0x45, 0x6c, 0xa9, 0xf4, 0x09, 0xcc, 0xe5, 0x5e, 0x07, 0xd0, 0xb2, 0xc8,
	0x73, 0xea, 0x07, 0x05, 0x6d, 0xa5, 0x80, 0x1b, 0xa7, 0x02, 0x35, 0x42, 0x2f, 0x52, 0xc1, 0xd0,
	0x37, 0x05, 0x91, 0x0a, 0x46, 0x00, 0xfc, 0xcf, 0x39, 0x1e, 0xa6, 0xd0, 0xbf, 0x2e, 0x0c, 0x1b,
	0xa2, 0xfe, 0xf6, 0x10, 0x89, 0x38, 0x8d, 0x47, 0xd0, 0xb4, 0x48, 0xe3, 0x59, 0x70, 0x5e, 0xa4,
	0xf1, 0x3c, 0x3c, 0xff, 0x0c, 0x6a, 0x2a, 0x20, 0x5d, 0x5c, 0xca, 0x43, 0x10, 0x79, 0x71, 0x29,
	0x0f, 0xc5, 0xe0, 0x9f, 0xc2, 0xbc, 0x02, 0x31, 0x17, 0x97, 0x72, 0x31, 0xd0, 0x2e, 0x2e, 0xe5,
	0x61, 0x50, 0xfb, 0x01, 0xcc, 0xa4, 0x71, 0x73, 0x91, 0x12, 0x95, 0x20, 0xbb, 0x48, 0x89, 0x05,
	0x30, 0xfb, 0x33, 0xa8, 0xa9, 0xe0, 0x70, 0xe1, 0xfb, 0x10, 0x7c, 0x5d, 0xf8, 0x3e, 0x14, 0x49,
	0x3f, 0x67, 0x9f, 0xd0, 0x4a, 0x20, 0x1c, 0xe9, 0xc2, 0xbf, 0x61, 0x38, 0xba, 0xf6, 0xf6, 0x50,
	0x19, 0x39, 0x87, 0x01, 0x73, 0xfb, 0x2f, 0xb1, 0x9d, 0x2e, 0xb2, 0x56, 0x44, 0x57, 0x23, 0xff,
	0xde, 0x21, 0xc4, 0x0f, 0xe9, 0xa9, 0x93, 0xa5, 0x62, 0x27, 0xd2, 0x8a, 0xfc, 0x34, 0x97, 0x69,
	0x25, 0x8d, 0x13, 0xcb, 0xb4, 0x92, 0x85, 0xd8, 0x9f, 0x73, 0x4c, 0x29, 0x8f, 0x8b, 0xa3, 0xb0,
	0x74, 0x2b, 0x84, 0xd4, 0x45, 0x74, 0x0f, 0x07, 0xd5, 0x0f, 0x60, 0x26, 0x8d, 0x67, 0x8b, 0x0d,
	0x57, 0x22, 0xe6, 0x62, 0xc3, 0xd5, 0xf0, 0x37, 0x53, 0x94, 0x86, 0x91, 0x85, 0x22, 0x25, 0x50,
	0xad, 0x69, 0x2a, 0x56, 0x5c, 0x82, 0x65, 0xe0, 0x5c, 0x51, 0x82, 0xa9, 0xc1, 0x75, 0x51, 0x82,
	0x15, 0x20, 0xe5, 0x22, 0x33, 0x28, 0xc0, 0xe1, 0x30, 0x33, 0x14, 0x83, 0xd1, 0x61, 0x66, 0x18,
	0x86, 0x2c, 0xef, 0xc1, 0x74, 0x0a, 0x82, 0x12, 0x17, 0xae, 0x0a, 0xe5, 0x12, 0x17, 0xae, 0x1a,
	0xaf, 0xfa, 0x3a, 0x03, 0x8c, 0x7d, 0xeb, 0xd0, 0x4b, 0x03, 0xd3, 0x37, 0x53, 0xc6, 0xeb, 0xd7,
	0x14, 0xbc, 0x14, 0xd6, 0xaf, 0x2a, 0x14, 0x2b, 0xac, 0x5f, 0xd5, 0x78, 0xd4, 0x63, 0x98, 0xcd,
	0x74, 0x8e, 0x08, 0x5d, 0xea, 0x86, 0x17, 0xa1, 0xab, 0xa0, 0xd5, 0x84, 0xe9, 0xca, 0xf4, 0xf6,
	0x08, 0x5d, 0xea, 0x96, 0x24, 0xa1, 0xab, 0xa0, 0x19, 0x88, 0xe9, 0xca, 0xf4, 0xe3, 0xa0, 0x44,
	0x60, 0xaa, 0x75, 0x15, 0x34, 0xf0, 0xb0, 0xbb, 0x49, 0xdd, 0xbb, 0x82, 0xc2, 0xb3, 0x53, 0xdc,
	0x1e, 0x23, 0xee, 0xa6, 0x11, 0xad, 0x2f, 0x18, 0x9a, 0x45, 0xcd, 0x28, 0x88, 0x67, 0xa2, 0x11,
	0xdd, 0x2c, 0xda, 0x9d, 0xe1, 0x42, 0x72, 0x9a, 0x1f, 0x45, 0x5b, 0xcc, 0x90, 0xa6, 0x11, 0x74,
	0x37, 0x54, 0x34, 0xba, 0x53, 0x45, 0xbb, 0xf7, 0x4a, 0xb2, 0x72, 0xee, 0x4b, 0x58, 0x2c, 0x6c,
	0x04, 0x41, 0x77, 0x52, 0x9a, 0x0a, 0x3a, 0x4e, 0xb4, 0x77, 0x46, 0x48, 0x25, 0x32, 0xa8, 0x04,
	0x53, 0x64, 0x06, 0x4d, 0x83, 0x4d, 0x32, 0x83, 0x66, 0xf0, 0x16, 0xe4, 0xc2, 0x5a, 0x17, 0xd3,
	0x43, 0x8b, 0xd0, 0x22, 0x30, 0x43, 0x6c, 0xc5, 0x08, 0x50, 0x46, 0x6c, 0xc5, 0x48, 0x3c, 0xe4,
	0x3f, 0x61, 0x63, 0xc4, 0x6c, 0x11, 0x26, 0x83, 0xde, 0x1b, 0xa6, 0x31, 0x0b, 0xdd, 0xbc, 0xe2,
	0xfc, 0x6d, 0x40, 0xdd, 0x1c, 0x1e, 0x2b, 0xee, 0xae, 0x42, 0x34, 0x58, 0x5b, 0x1d, 0x0e, 0xe3,
	0xa2, 0xe7, 0xb0, 0xd0, 0xc5, 0x54, 0x05, 0xae, 0x84, 0xd5, 0x4c, 0x21, 0x9c, 0x13, 0x56, 0x33,
	0x43, 0xf0, 0x9c, 0x03, 0x98, 0x49, 0x63, 0x9c, 0xe2, 0xee, 0x50, 0xa2, 0xac, 0xe2, 0xee, 0x28,
	0x80, 0x44, 0x0f, 0x60, 0x26, 0x8d, 0x63, 0x0a, 0x45, 0x4a, 0xd0, 0x53, 0x28, 0x52, 0xc3, 0x9e,
	0x3b, 0x3b, 0x70, 0xd7, 0x0f, 0xba, 0x9b, 0x56, 0xcf, 0xb2, 0x2f, 0xf1, 0xe6, 0xa5, 0xd5, 0xf1,
	0xfd, 0xde, 0xe6, 0xe5, 0x79, 0xf4, 0x8f, 0x32, 0xe7, 0xfd, 0x8b, 0xcd, 0x2e, 0xf6, 0x70, 0x60,
	0x51, 0xdc, 0xd9, 0x91, 0xff, 0x54, 0xf3, 0x84, 0x71, 0xc8, 0xa3, 0xd2, 0xff, 0x94, 0x4a, 0x3f,
	0x97, 0x4a, 0x7f, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x3f, 0x51, 0x27, 0x6b, 0x33, 0x00, 0x00,
}
