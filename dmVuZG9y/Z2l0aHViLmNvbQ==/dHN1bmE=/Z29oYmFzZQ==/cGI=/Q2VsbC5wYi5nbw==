// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Cell.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// *
// The type of the key in a Cell
type CellType int32

const (
	CellType_MINIMUM       CellType = 0
	CellType_PUT           CellType = 4
	CellType_DELETE        CellType = 8
	CellType_DELETE_COLUMN CellType = 12
	CellType_DELETE_FAMILY CellType = 14
	// MAXIMUM is used when searching; you look from maximum on down.
	CellType_MAXIMUM CellType = 255
)

var CellType_name = map[int32]string{
	0:   "MINIMUM",
	4:   "PUT",
	8:   "DELETE",
	12:  "DELETE_COLUMN",
	14:  "DELETE_FAMILY",
	255: "MAXIMUM",
}
var CellType_value = map[string]int32{
	"MINIMUM":       0,
	"PUT":           4,
	"DELETE":        8,
	"DELETE_COLUMN": 12,
	"DELETE_FAMILY": 14,
	"MAXIMUM":       255,
}

func (x CellType) Enum() *CellType {
	p := new(CellType)
	*p = x
	return p
}
func (x CellType) String() string {
	return proto.EnumName(CellType_name, int32(x))
}
func (x *CellType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CellType_value, data, "CellType")
	if err != nil {
		return err
	}
	*x = CellType(value)
	return nil
}
func (CellType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// *
// Protocol buffer version of Cell.
type Cell struct {
	Row              []byte    `protobuf:"bytes,1,opt,name=row" json:"row,omitempty"`
	Family           []byte    `protobuf:"bytes,2,opt,name=family" json:"family,omitempty"`
	Qualifier        []byte    `protobuf:"bytes,3,opt,name=qualifier" json:"qualifier,omitempty"`
	Timestamp        *uint64   `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	CellType         *CellType `protobuf:"varint,5,opt,name=cell_type,json=cellType,enum=pb.CellType" json:"cell_type,omitempty"`
	Value            []byte    `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
	Tags             []byte    `protobuf:"bytes,7,opt,name=tags" json:"tags,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Cell) Reset()                    { *m = Cell{} }
func (m *Cell) String() string            { return proto.CompactTextString(m) }
func (*Cell) ProtoMessage()               {}
func (*Cell) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Cell) GetRow() []byte {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *Cell) GetFamily() []byte {
	if m != nil {
		return m.Family
	}
	return nil
}

func (m *Cell) GetQualifier() []byte {
	if m != nil {
		return m.Qualifier
	}
	return nil
}

func (m *Cell) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Cell) GetCellType() CellType {
	if m != nil && m.CellType != nil {
		return *m.CellType
	}
	return CellType_MINIMUM
}

func (m *Cell) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Cell) GetTags() []byte {
	if m != nil {
		return m.Tags
	}
	return nil
}

// *
// Protocol buffer version of KeyValue.
// It doesn't have those transient parameters
type KeyValue struct {
	Row              []byte    `protobuf:"bytes,1,req,name=row" json:"row,omitempty"`
	Family           []byte    `protobuf:"bytes,2,req,name=family" json:"family,omitempty"`
	Qualifier        []byte    `protobuf:"bytes,3,req,name=qualifier" json:"qualifier,omitempty"`
	Timestamp        *uint64   `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	KeyType          *CellType `protobuf:"varint,5,opt,name=key_type,json=keyType,enum=pb.CellType" json:"key_type,omitempty"`
	Value            []byte    `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
	Tags             []byte    `protobuf:"bytes,7,opt,name=tags" json:"tags,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *KeyValue) GetRow() []byte {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *KeyValue) GetFamily() []byte {
	if m != nil {
		return m.Family
	}
	return nil
}

func (m *KeyValue) GetQualifier() []byte {
	if m != nil {
		return m.Qualifier
	}
	return nil
}

func (m *KeyValue) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *KeyValue) GetKeyType() CellType {
	if m != nil && m.KeyType != nil {
		return *m.KeyType
	}
	return CellType_MINIMUM
}

func (m *KeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *KeyValue) GetTags() []byte {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*Cell)(nil), "pb.Cell")
	proto.RegisterType((*KeyValue)(nil), "pb.KeyValue")
	proto.RegisterEnum("pb.CellType", CellType_name, CellType_value)
}

func init() { proto.RegisterFile("Cell.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0x87, 0xdf, 0x2d, 0x85, 0x96, 0x79, 0x2b, 0xa9, 0x1b, 0x63, 0xf6, 0xe0, 0x81, 0x70, 0x11,
	0x39, 0xec, 0xc1, 0xbb, 0x07, 0x40, 0x8c, 0x44, 0x8a, 0x84, 0x80, 0xd1, 0x13, 0x6e, 0x61, 0x80,
	0x86, 0xc5, 0xae, 0x6d, 0xd1, 0xf4, 0xdb, 0xf8, 0x55, 0x8c, 0x1f, 0x4c, 0xd3, 0x05, 0xc5, 0x83,
	0x1c, 0xb8, 0xfd, 0xe6, 0x99, 0xfd, 0x33, 0x4f, 0x32, 0x00, 0x4d, 0x94, 0x92, 0xab, 0x28, 0x4c,
	0x42, 0x6a, 0x28, 0xbf, 0xf2, 0x4e, 0xc0, 0xcc, 0x10, 0x75, 0x21, 0x17, 0x85, 0xaf, 0x8c, 0x94,
	0x49, 0xd5, 0xe9, 0x67, 0x91, 0x1e, 0x43, 0x61, 0x2a, 0x96, 0x81, 0x4c, 0x99, 0xa1, 0xe1, 0xa6,
	0xa2, 0x27, 0x50, 0x7c, 0x5e, 0x09, 0x19, 0x4c, 0x03, 0x8c, 0x58, 0x4e, 0xb7, 0xb6, 0x20, 0xeb,
	0x26, 0xc1, 0x12, 0xe3, 0x44, 0x2c, 0x15, 0x33, 0xcb, 0xa4, 0x6a, 0xf6, 0xb7, 0x80, 0x9e, 0x41,
	0x71, 0x8c, 0x52, 0x8e, 0x92, 0x54, 0x21, 0xcb, 0x97, 0x49, 0xb5, 0x74, 0xee, 0x70, 0xe5, 0xf3,
	0x6c, 0x84, 0x41, 0xaa, 0xb0, 0x6f, 0x8f, 0x37, 0x89, 0x1e, 0x41, 0xfe, 0x45, 0xc8, 0x15, 0xb2,
	0x82, 0xfe, 0x62, 0x5d, 0x50, 0x0a, 0x66, 0x22, 0x66, 0x31, 0xb3, 0x34, 0xd4, 0xb9, 0xf2, 0x41,
	0xc0, 0xbe, 0xc1, 0xf4, 0x4e, 0x1f, 0xf8, 0xf1, 0x30, 0xfe, 0xf2, 0x30, 0x76, 0x7b, 0x18, 0xfb,
	0x78, 0x9c, 0x82, 0xbd, 0xc0, 0x74, 0xb7, 0x86, 0xb5, 0xc0, 0x74, 0x3f, 0x8b, 0xda, 0x23, 0xd8,
	0xdf, 0xd7, 0xe9, 0x7f, 0xb0, 0xbc, 0x76, 0xb7, 0xed, 0x0d, 0x3d, 0xf7, 0x1f, 0xb5, 0x20, 0xd7,
	0x1b, 0x0e, 0x5c, 0x93, 0x02, 0x14, 0x2e, 0x5b, 0x9d, 0xd6, 0xa0, 0xe5, 0xda, 0xf4, 0x10, 0x0e,
	0xd6, 0x79, 0xd4, 0xbc, 0xed, 0x0c, 0xbd, 0xae, 0xeb, 0xfc, 0x42, 0x57, 0x75, 0xaf, 0xdd, 0x79,
	0x70, 0x4b, 0xd4, 0x01, 0xcb, 0xab, 0xdf, 0xeb, 0x77, 0x3e, 0x49, 0xe3, 0x02, 0x6a, 0x61, 0x34,
	0xe3, 0x42, 0x89, 0xf1, 0x1c, 0xf9, 0x5c, 0x4c, 0xc2, 0x50, 0xf1, 0xb9, 0x2f, 0x62, 0x5c, 0x2f,
	0x84, 0xbf, 0x9a, 0xf2, 0x19, 0x3e, 0x61, 0x24, 0x12, 0x9c, 0x34, 0xf4, 0xa6, 0xf4, 0x32, 0x1e,
	0x5f, 0x93, 0x37, 0x42, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xa7, 0x5d, 0xd4, 0x3b, 0x02,
	0x00, 0x00,
}
