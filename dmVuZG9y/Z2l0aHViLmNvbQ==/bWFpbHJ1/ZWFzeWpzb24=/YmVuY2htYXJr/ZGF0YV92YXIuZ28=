package benchmark

var largeStructData = LargeStruct{
	SearchMetadata: SearchMetadata{
		CompletedIn: 0.035,
		Count:       4,
		MaxID:       250126199840518145,
		MaxIDStr:    "250126199840518145",
		NextResults: "?max_id=249279667666817023&q=%23freebandnames&count=4&include_entities=1&result_type=mixed",
		Query:       "%23freebandnames",
		RefreshURL:  "?since_id=250126199840518145&q=%23freebandnames&result_type=mixed&include_entities=1",
		SinceID:     24012619984051000,
		SinceIDStr:  "24012619984051000",
	},
	Statuses: []Status{
		{
			Contributors: nil,
			Coordinates:  nil,
			CreatedAt:    "Mon Sep 24 03:35:21 +0000 2012",
			Entities: Entities{
				Hashtags: []Hashtag{{
					Indices: []int{20, 34},
					Text:    "freebandnames"},
				},
				Urls:         []*string{},
				UserMentions: []*string{},
			},
			Favorited:            false,
			Geo:                  nil,
			ID:                   250075927172759552,
			IDStr:                "250075927172759552",
			InReplyToScreenName:  nil,
			InReplyToStatusID:    nil,
			InReplyToStatusIDStr: nil,
			InReplyToUserID:      nil,
			InReplyToUserIDStr:   nil,
			Metadata: StatusMetadata{
				IsoLanguageCode: "en",
				ResultType:      "recent",
			},
			Place:        nil,
			RetweetCount: 0,
			Retweeted:    false,
			Source:       "<a href=\"//itunes.apple.com/us/app/twitter/id409789998?mt=12%5C%22\" rel=\"\\\"nofollow\\\"\">Twitter for Mac</a>",
			Text:         "Aggressive Ponytail #freebandnames",
			Truncated:    false,
			User: User{
				ContributorsEnabled: false,
				CreatedAt:           "Mon Apr 26 06:01:55 +0000 2010",
				DefaultProfile:      true,
				DefaultProfileImage: false,
				Description:         "Born 330 Live 310",
				Entities: UserEntities{
					Description: UserEntityDescription{
						Urls: []*string{},
					},
					URL: UserEntityURL{
						Urls: []URL{{
							ExpandedURL: nil,
							Indices:     []int{0, 0},
							URL:         "",
						}},
					},
				},
				FavouritesCount:                0,
				FollowRequestSent:              nil,
				FollowersCount:                 70,
				Following:                      nil,
				FriendsCount:                   110,
				GeoEnabled:                     true,
				ID:                             137238150,
				IDStr:                          "137238150",
				IsTranslator:                   false,
				Lang:                           "en",
				ListedCount:                    2,
				Location:                       "LA, CA",
				Name:                           "Sean Cummings",
				Notifications:                  nil,
				ProfileBackgroundColor:         "C0DEED",
				ProfileBackgroundImageURL:      "http://a0.twimg.com/images/themes/theme1/bg.png",
				ProfileBackgroundImageURLHTTPS: "https://si0.twimg.com/images/themes/theme1/bg.png",
				ProfileBackgroundTile:          false,
				ProfileImageURL:                "http://a0.twimg.com/profile_images/2359746665/1v6zfgqo8g0d3mk7ii5s_normal.jpeg",
				ProfileImageURLHTTPS:           "https://si0.twimg.com/profile_images/2359746665/1v6zfgqo8g0d3mk7ii5s_normal.jpeg",
				ProfileLinkColor:               "0084B4",
				ProfileSidebarBorderColor:      "C0DEED",
				ProfileSidebarFillColor:        "DDEEF6",
				ProfileTextColor:               "333333",
				ProfileUseBackgroundImage:      true,
				Protected:                      false,
				ScreenName:                     "sean_cummings",
				ShowAllInlineMedia:             false,
				StatusesCount:                  579,
				TimeZone:                       "Pacific Time (US & Canada)",
				URL:                            nil,
				UtcOffset:                      -28800,
				Verified:                       false,
			},
		},
		{
			Contributors: nil,
			Coordinates:  nil,
			CreatedAt:    "Fri Sep 21 23:40:54 +0000 2012",
			Entities: Entities{
				Hashtags: []Hashtag{{
					Indices: []int{20, 34},
					Text:    "FreeBandNames",
				}},
				Urls:         []*string{},
				UserMentions: []*string{},
			},
			Favorited:            false,
			Geo:                  nil,
			ID:                   249292149810667520,
			IDStr:                "249292149810667520",
			InReplyToScreenName:  nil,
			InReplyToStatusID:    nil,
			InReplyToStatusIDStr: nil,
			InReplyToUserID:      nil,
			InReplyToUserIDStr:   nil,
			Metadata: StatusMetadata{
				IsoLanguageCode: "pl",
				ResultType:      "recent",
			},
			Place:        nil,
			RetweetCount: 0,
			Retweeted:    false,
			Source:       "web",
			Text:         "Thee Namaste Nerdz. #FreeBandNames",
			Truncated:    false,
			User: User{
				ContributorsEnabled: false,
				CreatedAt:           "Tue Apr 07 19:05:07 +0000 2009",
				DefaultProfile:      false,
				DefaultProfileImage: false,
				Description:         "You will come to Durham, North Carolina. I will sell you some records then, here in Durham, North Carolina. Fun will happen.",
				Entities: UserEntities{
					Description: UserEntityDescription{Urls: []*string{}},
					URL: UserEntityURL{
						Urls: []URL{{
							ExpandedURL: nil,
							Indices:     []int{0, 32},
							URL:         "http://bullcityrecords.com/wnng/"}},
					},
				},
				FavouritesCount:                8,
				FollowRequestSent:              nil,
				FollowersCount:                 2052,
				Following:                      nil,
				FriendsCount:                   348,
				GeoEnabled:                     false,
				ID:                             29516238,
				IDStr:                          "29516238",
				IsTranslator:                   false,
				Lang:                           "en",
				ListedCount:                    118,
				Location:                       "Durham, NC",
				Name:                           "Chaz Martenstein",
				Notifications:                  nil,
				ProfileBackgroundColor:         "9AE4E8",
				ProfileBackgroundImageURL:      "http://a0.twimg.com/profile_background_images/9423277/background_tile.bmp",
				ProfileBackgroundImageURLHTTPS: "https://si0.twimg.com/profile_background_images/9423277/background_tile.bmp",
				ProfileBackgroundTile:          true,
				ProfileImageURL:                "http://a0.twimg.com/profile_images/447958234/Lichtenstein_normal.jpg",
				ProfileImageURLHTTPS:           "https://si0.twimg.com/profile_images/447958234/Lichtenstein_normal.jpg",
				ProfileLinkColor:               "0084B4",
				ProfileSidebarBorderColor:      "BDDCAD",
				ProfileSidebarFillColor:        "DDFFCC",
				ProfileTextColor:               "333333",
				ProfileUseBackgroundImage:      true,
				Protected:                      false,
				ScreenName:                     "bullcityrecords",
				ShowAllInlineMedia:             true,
				StatusesCount:                  7579,
				TimeZone:                       "Eastern Time (US & Canada)",
				URL:                            nil,
				UtcOffset:                      -18000,
				Verified:                       false,
			},
		},
		Status{
			Contributors: nil,
			Coordinates:  nil,
			CreatedAt:    "Fri Sep 21 23:30:20 +0000 2012",
			Entities: Entities{
				Hashtags: []Hashtag{{
					Indices: []int{29, 43},
					Text:    "freebandnames",
				}},
				Urls:         []*string{},
				UserMentions: []*string{},
			},
			Favorited:            false,
			Geo:                  nil,
			ID:                   249289491129438208,
			IDStr:                "249289491129438208",
			InReplyToScreenName:  nil,
			InReplyToStatusID:    nil,
			InReplyToStatusIDStr: nil,
			InReplyToUserID:      nil,
			InReplyToUserIDStr:   nil,
			Metadata: StatusMetadata{
				IsoLanguageCode: "en",
				ResultType:      "recent",
			},
			Place:        nil,
			RetweetCount: 0,
			Retweeted:    false,
			Source:       "web",
			Text:         "Mexican Heaven, Mexican Hell #freebandnames",
			Truncated:    false,
			User: User{
				ContributorsEnabled: false,
				CreatedAt:           "Tue Sep 01 21:21:35 +0000 2009",
				DefaultProfile:      false,
				DefaultProfileImage: false,
				Description:         "Science Fiction Writer, sort of. Likes Superheroes, Mole People, Alt. Timelines.",
				Entities: UserEntities{
					Description: UserEntityDescription{
						Urls: nil,
					},
					URL: UserEntityURL{
						Urls: []URL{{
							ExpandedURL: nil,
							Indices:     []int{0, 0},
							URL:         "",
						}},
					},
				},
				FavouritesCount:                19,
				FollowRequestSent:              nil,
				FollowersCount:                 63,
				Following:                      nil,
				FriendsCount:                   63,
				GeoEnabled:                     false,
				ID:                             70789458,
				IDStr:                          "70789458",
				IsTranslator:                   false,
				Lang:                           "en",
				ListedCount:                    1,
				Location:                       "Kingston New York",
				Name:                           "Thomas John Wakeman",
				Notifications:                  nil,
				ProfileBackgroundColor:         "352726",
				ProfileBackgroundImageURL:      "http://a0.twimg.com/images/themes/theme5/bg.gif",
				ProfileBackgroundImageURLHTTPS: "https://si0.twimg.com/images/themes/theme5/bg.gif",
				ProfileBackgroundTile:          false,
				ProfileImageURL:                "http://a0.twimg.com/profile_images/2219333930/Froggystyle_normal.png",
				ProfileImageURLHTTPS:           "https://si0.twimg.com/profile_images/2219333930/Froggystyle_normal.png",
				ProfileLinkColor:               "D02B55",
				ProfileSidebarBorderColor:      "829D5E",
				ProfileSidebarFillColor:        "99CC33",
				ProfileTextColor:               "3E4415",
				ProfileUseBackgroundImage:      true,
				Protected:                      false,
				ScreenName:                     "MonkiesFist",
				ShowAllInlineMedia:             false,
				StatusesCount:                  1048,
				TimeZone:                       "Eastern Time (US & Canada)",
				URL:                            nil,
				UtcOffset:                      -18000,
				Verified:                       false,
			},
		},
		Status{
			Contributors: nil,
			Coordinates:  nil,
			CreatedAt:    "Fri Sep 21 22:51:18 +0000 2012",
			Entities: Entities{
				Hashtags: []Hashtag{{
					Indices: []int{20, 34},
					Text:    "freebandnames",
				}},
				Urls:         []*string{},
				UserMentions: []*string{},
			},
			Favorited:            false,
			Geo:                  nil,
			ID:                   249279667666817024,
			IDStr:                "249279667666817024",
			InReplyToScreenName:  nil,
			InReplyToStatusID:    nil,
			InReplyToStatusIDStr: nil,
			InReplyToUserID:      nil,
			InReplyToUserIDStr:   nil,
			Metadata: StatusMetadata{
				IsoLanguageCode: "en",
				ResultType:      "recent",
			},
			Place:        nil,
			RetweetCount: 0,
			Retweeted:    false,
			Source:       "<a href=\"//twitter.com/download/iphone%5C%22\" rel=\"\\\"nofollow\\\"\">Twitter for iPhone</a>",
			Text:         "The Foolish Mortals #freebandnames",
			Truncated:    false,
			User: User{
				ContributorsEnabled: false,
				CreatedAt:           "Mon May 04 00:05:00 +0000 2009",
				DefaultProfile:      false,
				DefaultProfileImage: false,
				Description:         "Cartoonist, Illustrator, and T-Shirt connoisseur",
				Entities: UserEntities{
					Description: UserEntityDescription{
						Urls: []*string{},
					},
					URL: UserEntityURL{
						Urls: []URL{{
							ExpandedURL: nil,
							Indices:     []int{0, 24},
							URL:         "http://www.omnitarian.me",
						}},
					},
				},
				FavouritesCount:                647,
				FollowRequestSent:              nil,
				FollowersCount:                 608,
				Following:                      nil,
				FriendsCount:                   249,
				GeoEnabled:                     false,
				ID:                             37539828,
				IDStr:                          "37539828",
				IsTranslator:                   false,
				Lang:                           "en",
				ListedCount:                    52,
				Location:                       "Wisconsin, USA",
				Name:                           "Marty Elmer",
				Notifications:                  nil,
				ProfileBackgroundColor:         "EEE3C4",
				ProfileBackgroundImageURL:      "http://a0.twimg.com/profile_background_images/106455659/rect6056-9.png",
				ProfileBackgroundImageURLHTTPS: "https://si0.twimg.com/profile_background_images/106455659/rect6056-9.png",
				ProfileBackgroundTile:          true,
				ProfileImageURL:                "http://a0.twimg.com/profile_images/1629790393/shrinker_2000_trans_normal.png",
				ProfileImageURLHTTPS:           "https://si0.twimg.com/profile_images/1629790393/shrinker_2000_trans_normal.png",
				ProfileLinkColor:               "3B2A26",
				ProfileSidebarBorderColor:      "615A44",
				ProfileSidebarFillColor:        "BFAC83",
				ProfileTextColor:               "000000",
				ProfileUseBackgroundImage:      true,
				Protected:                      false,
				ScreenName:                     "Omnitarian",
				ShowAllInlineMedia:             true,
				StatusesCount:                  3575,
				TimeZone:                       "Central Time (US & Canada)",
				URL:                            nil,
				UtcOffset:                      -21600,
				Verified:                       false,
			},
		},
	},
}
