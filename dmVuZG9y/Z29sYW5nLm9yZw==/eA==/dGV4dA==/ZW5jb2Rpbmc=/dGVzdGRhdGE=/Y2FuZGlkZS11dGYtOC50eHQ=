This file was derived from
http://www.gutenberg.org/cache/epub/4650/pg4650.txt
--------

                            CANDIDE,

                               ou

                          L'OPTIMISME,

                      TRADUIT DE L'ALLEMAND

                     DE M. LE DOCTEUR RALPH,

                       AVEC LES ADDITIONS

   QU'ON A TROUVÉES DANS LA POCHE DU DOCTEUR, LORSQU'IL MOURUT

                  À MINDEN, L'AN DE GRÂCE 1759

                              1759



CHAPITRE I.

Comment Candide fut élevé dans un beau château, et comment il fut
chassé d'icelui.

Il y avait en Vestphalie, dans le château de M. le baron de
Thunder-ten-tronckh, un jeune garçon à qui la nature avait donné
les moeurs les plus douces.  Sa physionomie annonçait son âme.
Il avait le jugement assez droit, avec l'esprit le plus simple;
c'est, je crois, pour cette raison qu'on le nommait Candide.  Les
anciens domestiques de la maison soupçonnaient qu'il était fils
de la soeur de monsieur le baron et d'un bon et honnête
gentilhomme du voisinage, que cette demoiselle ne voulut jamais
épouser parce qu'il n'avait pu prouver que soixante et onze
quartiers, et que le reste de son arbre généalogique avait été
perdu par l'injure du temps.

Monsieur le baron était un des plus puissants seigneurs de la
Westphalie, car son château avait une porte et des fenêtres.  Sa
grande salle même était ornée d'une tapisserie.  Tous les chiens
de ses basses-cours composaient une meute dans le besoin; ses
palefreniers étaient ses piqueurs; le vicaire du village était
son grand-aumônier.  Ils l'appelaient tous monseigneur, et ils
riaient quand il fesait des contes.

Madame la baronne, qui pesait environ trois cent cinquante
livres, s'attirait par là une très grande considération, et
fesait les honneurs de la maison avec une dignité qui la rendait
encore plus respectable.  Sa fille Cunégonde, âgée de dix-sept
ans, était haute en couleur, fraîche, grasse, appétissante.  Le
fils du baron paraissait en tout digne de son père.  Le
précepteur Pangloss[1] était l'oracle de la maison, et le petit
Candide écoutait ses leçons avec toute la bonne foi de son âge et
de son caractère.

  [1] De _pan_, tout, et _glossa_, langue.  B.


Pangloss enseignait la métaphysico-théologo-cosmolonigologie.  Il
prouvait admirablement qu'il n'y a point d'effet sans cause, et
que, dans ce meilleur des mondes possibles, le château de
monseigneur le baron était le plus beau des châteaux, et madame
la meilleure des baronnes possibles.

Il est démontré, disait-il, que les choses ne peuvent être
autrement; car tout étant fait pour une fin, tout est
nécessairement pour la meilleure fin.  Remarquez bien que les nez
ont été faits pour porter des lunettes; aussi avons-nous des
lunettes[2].  Les jambes sont visiblement instituées pour être
chaussées, et nous avons des chausses.  Les pierres ont été
formées pour être taillées et pour en faire des châteaux; aussi
monseigneur a un très beau château: le plus grand baron de la
province doit être le mieux logé; et les cochons étant faits pour
être mangés, nous mangeons du porc toute l'année: par conséquent,
ceux qui ont avancé que tout est bien ont dit une sottise; il
fallait dire que tout est au mieux.

  [2] Voyez tome XXVII, page 528; et dans les _Mélanges_, année
  1738, le chapitre XI de la troisième partie des _Éléments de la
  philosophie de Newton_; et année 1768, le chapitre X des
  _Singularités de la nature_.  B.


Candide écoutait attentivement, et croyait innocemment; car il
trouvait mademoiselle Cunégonde extrêmement belle, quoiqu'il ne
prît jamais la hardiesse de le lui dire.  Il concluait qu'après
le bonheur d'être né baron de Thunder-ten-tronckh, le second
degré de bonheur était d'être mademoiselle Cunégonde; le
troisième, de la voir tous les jours; et le quatrième, d'entendre
maître Pangloss, le plus grand philosophe de la province, et par
conséquent de toute la terre.

Un jour Cunégonde, en se promenant auprès du château, dans le
petit bois qu'on appelait parc, vit entre des broussailles le
docteur Pangloss qui donnait une leçon de physique expérimentale
à la femme de chambre de sa mère, petite brune très jolie et très
docile.  Comme mademoiselle Cunégonde avait beaucoup de
disposition pour les sciences, elle observa, sans souffler, les
expériences réitérées dont elle fut témoin; elle vit clairement
la raison suffisante du docteur, les effets et les causes, et
s'en retourna tout agitée, toute pensive, toute remplie du désir
d'être savante, songeant qu'elle pourrait bien être la raison
suffisante du jeune Candide, qui pouvait aussi être la sienne.

Elle rencontra Candide en revenant au château, et rougit: Candide
rougit aussi .  Elle lui dit bonjour d'une voix entrecoupée; et
Candide lui parla sans savoir ce qu'il disait.  Le lendemain,
après le dîner, comme on sortait de table, Cunégonde et Candide
se trouvèrent derrière un paravent; Cunégonde laissa tomber son
mouchoir, Candide le ramassa; elle lui prit innocemment la main;
le jeune homme baisa innocemment la main de la jeune demoiselle
avec une vivacité, une sensibilité, une grâce toute particulière;
leurs bouches se rencontrèrent, leurs yeux s'enflammèrent, leurs
genoux tremblèrent, leurs mains s'égarèrent.  M. le baron de
Thunder-ten-tronckh passa auprès du paravent, et voyant cette
cause et cet effet, chassa Candide du château à grands coups de
pied dans le derrière.  Cunégonde s'évanouit: elle fut souffletée
par madame la baronne dès qu'elle fut revenue à elle-même; et
tout fut consterné dans le plus beau et le plus agréable des
châteaux possibles.



CHAPITRE II

Ce que devint Candide parmi les Bulgares.


Candide, chassé du paradis terrestre, marcha longtemps sans
savoir où, pleurant, levant les yeux au ciel, les tournant
souvent vers le plus beau des châteaux qui renfermait la plus
belle des baronnettes; il se coucha sans souper au milieu des
champs entre deux sillons; la neige tombait à gros flocons.
Candide, tout transi, se traîna le lendemain vers la ville
voisine, qui s'appelle _Valdberghoff-trarbk-dikdorff_, n'ayant
point d'argent, mourant de faim et de lassitude.  Il s'arrêta
tristement à la porte d'un cabaret.  Deux hommes habillés de bleu
le remarquèrent: Camarade, dit l'un, voilà un jeune homme très
bien fait, et qui a la taille requise; ils s'avancèrent vers
Candide et le prièrent à dîner très civilement.--Messieurs, leur
dit Candide avec une modestie charmante, vous me faites beaucoup
d'honneur, mais je n'ai pas de quoi payer mon écot.--Ah!
monsieur, lui dit un des bleus, les personnes de votre figure et
de votre mérite ne paient jamais rien: n'avez-vous pas cinq pieds
cinq pouces de haut?--Oui, messieurs, c'est ma taille, dit-il en
fesant la révérence.--Ah!  monsieur, mettez-vous à table; non
seulement nous vous défraierons, mais nous ne souffrirons jamais
qu'un homme comme vous manque d'argent; les hommes ne sont faits
que pour se secourir les uns les autres.--Vous avez raison, dit
Candide; c'est ce que M. Pangloss m'a toujours dit, et je vois
bien que tout est au mieux.  On le prie d'accepter quelques écus,
il les prend et veut faire son billet; on n'en veut point, on se
met à table.  N'aimez-vous pas tendrement?....--Oh!  oui,
répond-il, j'aime tendrement mademoiselle Cunégonde.--Non, dit
l'un de ces messieurs, nous vous demandons si vous n'aimez pas
tendrement le roi des Bulgares?--Point du tout, dit-il, car je ne
l'ai jamais vu.--Comment! c'est le plus charmant des rois, et il
faut boire à sa santé.--Oh! très volontiers, messieurs.  Et il
boit.  C'en est assez, lui dit-on, vous voilà l'appui, le
soutien, le défenseur, le héros des Bulgares; votre fortune est
faite, et votre gloire est assurée.  On lui met sur-le-champ les
fers aux pieds, et on le mène au régiment.  On le fait tourner à
droite, à gauche, hausser la baguette, remettre la baguette,
coucher en joue, tirer, doubler le pas, et on lui donne trente
coups de bâton; le lendemain, il fait l'exercice un peu moins
mal, et il ne reçoit que vingt coups; le surlendemain, on ne lui
en donne que dix, et il est regardé par ses camarades comme un
prodige.

Candide, tout stupéfait, ne démêlait pas encore trop bien comment
il était un héros.  Il s'avisa un beau jour de printemps de
s'aller promener, marchant tout droit devant lui, croyant que
c'était un privilège de l'espèce humaine, comme de l'espèce
animale, de se servir de ses jambes à son plaisir.  Il n'eut pas
fait deux lieues que voilà quatre autres héros de six pieds qui
l'atteignent, qui le lient, qui le mènent dans un cachot.  On lui
demanda juridiquement ce qu'il aimait le mieux d'être fustigé
trente-six fois par tout le régiment, ou de recevoir à-la-fois
douze balles de plomb dans la cervelle.  Il eut beau dire que les
volontés sont libres, et qu'il ne voulait ni l'un ni l'autre, il
fallut faire un choix; il se détermina, en vertu du don de Dieu
qu'on nomme _liberté_, à passer trente-six fois par les
baguettes; il essuya deux promenades.  Le régiment était composé
de deux mille hommes; cela lui composa quatre mille coups de
baguette, qui, depuis la nuque du cou jusqu'au cul, lui
découvrirent les muscles et les nerfs.  Comme on allait procéder
à la troisième course, Candide, n'en pouvant plus, demanda en
grâce qu'on voulût bien avoir la bonté de lui casser la tête; il
obtint cette faveur; on lui bande les yeux; on le fait mettre à
genoux.  Le roi des Bulgares passe dans ce moment, s'informe du
crime du patient; et comme ce roi avait un grand génie, il
comprit, par tout ce qu'il apprit de Candide, que c'était un
jeune métaphysicien fort ignorant des choses de ce monde, et il
lui accorda sa grâce avec une clémence qui sera louée dans tous
les journaux et dans tous les siècles.  Un brave chirurgien
guérit Candide en trois semaines avec les émollients enseignés
par Dioscoride.  Il avait déjà un peu de peau et pouvait marcher,
quand le roi des Bulgares livra bataille au roi des Abares.



CHAPITRE III.

Comment Candide se sauva d'entre les Bulgares, et ce qu'il
devint.


Rien n'était si beau, si leste, si brillant, si bien ordonné que
les deux armées.  Les trompettes, les fifres, les hautbois, les
tambours, les canons; formaient une harmonie telle qu'il n'y en
eut jamais en enfer.  Les canons renversèrent d'abord à peu près
six mille hommes de chaque côté; ensuite la mousqueterie ôta du
meilleur des mondes environ neuf à dix mille coquins qui en
infectaient la surface.  La baïonnette fut aussi la raison
suffisante de la mort de quelques milliers d'hommes.  Le tout
pouvait bien se monter à une trentaine de mille âmes.  Candide,
qui tremblait comme un philosophe, se cacha du mieux qu'il put
pendant cette boucherie héroïque.

Enfin, tandis que les deux rois fesaient chanter des _Te Deum_,
chacun dans son camp, il prit le parti d'aller raisonner ailleurs
des effets et des causes.  Il passa par-dessus des tas de morts
et de mourants, et gagna d'abord un village voisin; il était en
cendres: c'était un village abare que les Bulgares avaient brûlé,
selon les lois du droit public.  Ici des vieillards criblés de
coups regardaient mourir leurs femmes égorgées, qui tenaient
leurs enfants à leurs mamelles sanglantes; là des filles
éventrées après avoir assouvi les besoins naturels de quelques
héros, rendaient les derniers soupirs; d'autres à demi brûlées
criaient qu'on achevât de leur donner la mort.  Des cervelles
étaient répandues sur la terre à côté de bras et de jambes
coupés.

Candide s'enfuit au plus vite dans un autre village: il
appartenait à des Bulgares, et les héros abares l'avaient traité
de même.  Candide, toujours marchant sur des membres palpitants
ou à travers des ruines, arriva enfin hors du théâtre de la
guerre, portant quelques petites provisions dans son bissac, et
n'oubliant jamais mademoiselle Cunégonde.  Ses provisions lui
manquèrent quand il fut en Hollande; mais ayant entendu dire que
tout le monde était riche dans ce pays-là, et qu'on y était
chrétien, il ne douta pas qu'on ne le traitât aussi bien qu'il
l'avait été dans le château de M. le baron, avant qu'il en eût
été chassé pour les beaux yeux de mademoiselle Cunégonde.

Il demanda l'aumône à plusieurs graves personnages, qui lui
répondirent tous que, s'il continuait à faire ce métier, on
l'enfermerait dans une maison de correction pour lui apprendre à
vivre.

Il s'adressa ensuite à un homme qui venait de parler tout seul
une heure de suite sur la charité dans une grande assemblée.  Cet
orateur le regardant de travers lui dit: Que venez-vous faire
ici? y êtes-vous pour la bonne cause? Il n'y a point d'effet sans
cause, répondit modestement Candide; tout est enchaîné
nécessairement et arrangé pour le mieux.  Il a fallu que je fusse
chassé d'auprès de mademoiselle Cunégonde, que j'aie passé par
les baguettes, et il faut que je demande mon pain, jusqu'à ce que
je puisse en gagner; tout cela ne pouvait être autrement.  Mon
ami, lui dit l'orateur, croyez-vous que le pape soit
l'antechrist? Je ne l'avais pas encore entendu dire, répondit
Candide: mais qu'il le soit, ou qu'il ne le soit pas, je manque
de pain.  Tu ne mérites pas d'en manger, dit l'autre: va, coquin,
va, misérable, ne m'approche de ta vie.  La femme de l'orateur
ayant mis la tête à la fenêtre, et avisant un homme qui doutait
que le pape fût antechrist, lui répandit sur le chef un
plein.....  O ciel!  à quel excès se porte le zèle de la religion
dans les dames!

Un homme qui n'avait point été baptisé, un bon anabaptiste, nommé
Jacques, vit la manière cruelle et ignominieuse dont on traitait
ainsi un de ses frères, un être à deux pieds sans plumes, qui
avait une âme; il l'amena chez lui, le nettoya, lui donna du pain
et de la bière, lui fit présent de deux florins, et voulut même
lui apprendre à travailler dans ses manufactures aux étoffes de
Perse qu'on fabrique en Hollande.  Candide se prosternant presque
devant lui, s'écriait: Maître Pangloss me l'avait bien dit que
tout est au mieux dans ce monde, car je suis infiniment plus
touché de votre extrême générosité que de la dureté de ce
monsieur à manteau noir, et de madame son épouse.

Le lendemain, en se promenant, il rencontra un gueux tout couvert
de pustules, les yeux morts, le bout du nez rongé, la bouche de
travers, les dents noires, et parlant de la gorge, tourmenté
d'une toux violente, et crachant une dent à chaque effort.



CHAPITRE IV.

Comment Candide rencontra son ancien maître de philosophie, le
docteur Pangloss, et ce qui en advint.


Candide, plus ému encore de compassion que d'horreur, donna à cet
épouvantable gueux les deux florins qu'il avait reçus de son
honnête anabaptiste Jacques.  Le fantôme le regarda fixement,
versa des larmes, et sauta à son cou.  Candide effrayé recule.
Hélas! dit le misérable à l'autre misérable, ne reconnaissez-vous
plus votre cher Pangloss? Qu'entends-je? vous, mon cher maître!
vous, dans cet état horrible! quel malheur vous est-il donc
arrivé? pourquoi n'êtes-vous plus dans le plus beau des châteaux?
qu'est devenue mademoiselle Cunégonde, la perle des filles, le
chef-d'oeuvre de la nature? Je n'en peux plus, dit Pangloss.
Aussitôt Candide le mena dans l'étable de l'anabaptiste, où il
lui fit manger un peu de pain; et quand Pangloss fut refait: Eh
bien! lui dit-il, Cunégonde? Elle est morte, reprit l'autre.
Candide s'évanouit à ce mot: son ami rappela ses sens avec un peu
de mauvais vinaigre qui se trouva par hasard dans l'étable.
Candide rouvre les yeux.  Cunégonde est morte! Ah!  meilleur des
mondes, où êtes-vous? Mais de quelle maladie est-elle morte? ne
serait-ce point de m'avoir vu chasser du beau château de monsieur
son père à grands coups de pied? Non, dit Pangloss, elle a été
éventrée par des soldats bulgares, après avoir été violée autant
qu'on peut l'être; ils ont cassé la tête à monsieur le baron qui
voulait la défendre; madame la baronne a été coupée en morceaux;
mon pauvre pupille traité précisément comme sa soeur; et quant au
château, il n'est pas resté pierre sur pierre, pas une grange,
pas un mouton, pas un canard, pas un arbre; mais nous avons été
bien vengés, car les Abares en ont fait autant dans une baronnie
voisine qui appartenait à un seigneur bulgare.

A ce discours, Candide s'évanouit encore; mais revenu à soi, et
ayant dit tout ce qu'il devait dire, il s'enquit de la cause et
de l'effet, et de la raison suffisante qui avait mis Pangloss
dans un si piteux état.  Hélas! dit l'autre, c'est l'amour:
l'amour, le consolateur du genre humain, le conservateur de
l'univers, l'âme de tous les êtres sensibles, le tendre amour.
Hélas! dit Candide, je l'ai connu cet amour, ce souverain des
coeurs, cette âme de notre âme; il ne m'a jamais valu qu'un
baiser et vingt coups de pied au cul.  Comment cette belle cause
a-t-elle pu produire en vous un effet si abominable?

Pangloss répondit en ces termes: O mon cher Candide! vous avez
connu Paquette, cette jolie suivante de notre auguste baronne:
j'ai goûté dans ses bras les délices du paradis, qui ont produit
ces tourments d'enfer dont vous me voyez dévoré; elle en était
infectée, elle en est peut-être morte.  Paquette tenait ce
présent d'un cordelier très savant qui avait remonté à la source,
car il l'avait eu d'une vieille comtesse, qui l'avait reçu d'un
capitaine de cavalerie, qui le devait à une marquise, qui le
tenait d'un page, qui l'avait reçu d'un jésuite, qui, étant
novice, l'avait eu en droite ligne d'un des compagnons de
Christophe Colomb.  Pour moi, je ne le donnerai à personne, car
je me meurs.

O Pangloss! s'écria Candide, voilà une étrange généalogie!
n'est-ce pas le diable qui en fut la souche?  Point du tout,
répliqua ce grand homme; c'était une chose indispensable dans le
meilleur des mondes, un ingrédient nécessaire; car si Colomb
n'avait pas attrapé dans une île de l'Amérique cette maladie[1]
qui empoisonne la source de la génération, qui souvent même
empêche la génération, et qui est évidemment l'opposé du grand
but de la nature, nous n'aurions ni le chocolat ni la cochenille;
il faut encore observer que jusqu'aujourd'hui, dans notre
continent, cette maladie nous est particulière, comme la
controverse.  Les Turcs, les Indiens, les Persans, les Chinois,
les Siamois, les Japonais, ne la connaissent pas encore; mais il
y a une raison suffisante pour qu'ils la connaissent à leur tour
dans quelques siècles.  En attendant elle a fait un merveilleux
progrès parmi nous, et surtout dans ces grandes armées composées
d'honnêtes stipendiaires bien élevés, qui décident du destin des
états; on peut assurer que, quand trente mille hommes combattent
en bataille rangée contre des troupes égales en nombre, il y a
environ vingt mille vérolés de chaque côté.

  [1] Voyez tome XXXI, page 7.  B.


Voilà qui est admirable, dit Candide; mais il faut vous faire
guérir.  Et comment le puis-je? dit Pangloss; je n'ai pas le sou,
mon ami, et dans toute l'étendue de ce globe on ne peut ni se
faire saigner, ni prendre un lavement sans payer, ou sans qu'il y
ait quelqu'un qui paie pour nous.

Ce dernier discours détermina Candide; il alla se jeter aux pieds
de son charitable anabaptiste Jacques, et lui fit une peinture si
touchante de l'état où son ami était réduit, que le bon-homme
n'hésita pas à recueillir le docteur Pangloss; il le fit guérir à
ses dépens.  Pangloss, dans la cure, ne perdit qu'un oeil et une
oreille.  Il écrivait bien, et savait parfaitement
l'arithmétique.  L'anabaptiste Jacques en fit son teneur de
livres.  Au bout de deux mois, étant obligé d'aller à Lisbonne
pour les affaires de son commerce, il mena dans son vaisseau ses
deux philosophes.  Pangloss lui expliqua comment tout était on ne
peut mieux.  Jacques n'était pas de cet avis.  Il faut bien,
disait-il, que les hommes aient un peu corrompu la nature, car
ils ne sont point nés loups, et ils sont devenus loups.  Dieu ne
leur a donné ni canons de vingt-quatre, ni baïonnettes, et ils se
sont fait des baïonnettes et des canons pour se détruire.  Je
pourrais mettre en ligne de compte les banqueroutes, et la
justice qui s'empare des biens des banqueroutiers pour en
frustrer les créanciers.  Tout cela était indispensable,
répliquait le docteur borgne, et les malheurs particuliers font
le bien général; de sorte que plus il y a de malheurs
particuliers, et plus tout est bien.  Tandis qu'il raisonnait,
l'air s'obscurcit, les vents soufflèrent des quatre coins du
monde, et le vaisseau fut assailli de la plus horrible tempête, à
la vue du port de Lisbonne.


CHAPITRE V.

Tempête, naufrage, tremblement de terre, et ce qui advint du
docteur Pangloss, de Candide, et de l'anabaptiste Jacques.

La moitié des passagers affaiblis, expirants de ces angoisses
inconcevables que le roulis d'un vaisseau porte dans les nerfs et
dans toutes les humeurs du corps agitées en sens contraires,
n'avait pas même la force de s'inquiéter du danger.  L'autre
moitié jetait des cris et fesait des prières; les voiles étaient
déchirées, les mâts brisés, le vaisseau entr'ouvert.  Travaillait
qui pouvait, personne ne s'entendait, personne ne commandait.
L'anabaptiste aidait un peu à la manoeuvre; il était sur le
tillac; un matelot furieux le frappe rudement et l'étend sur les
planches; mais du coup qu'il lui donna, il eut lui-même une si
violente secousse, qu'il tomba hors du vaisseau, la tête la
première.  Il restait suspendu et accroché à une partie de mât
rompu.  Le bon Jacques court à son secours, l'aide à remonter, et
de l'effort qu'il fait, il est précipité dans la mer à la vue du
matelot, qui le laissa périr sans daigner seulement le regarder.
Candide approche, voit son bienfaiteur qui reparaît un moment, et
qui est englouti pour jamais.  Il veut se jeter après lui dans la
mer: le philosophe Pangloss l'en empêche, en lui prouvant que la
rade de Lisbonne avait été formée exprès pour que cet anabaptiste
s'y noyât.  Tandis qu'il le prouvait _à priori_, le vaisseau
s'entr'ouvre, tout périt à la réserve de Pangloss, de Candide, et
de ce brutal de matelot qui avait noyé le vertueux anabaptiste;
le coquin nagea heureusement jusqu'au rivage, où Pangloss et
Candide furent portés sur une planche.

Quand ils furent revenus un peu à eux, ils marchèrent vers
Lisbonne; il leur restait quelque argent, avec lequel ils
espéraient se sauver de la faim après avoir échappé à la tempête.

A peine ont-ils mis le pied dans la ville, en pleurant la mort de
leur bienfaiteur, qu'ils sentent la terre trembler sous leurs
pas[1]; la mer s'élève en bouillonnant dans le port, et brise les
vaisseaux qui sont à l'ancre.  Des tourbillons de flammes et de
cendres couvrent les rues et les places publiques; les maisons
s'écroulent, les toits sont renversés sur les fondements, et les
fondements se dispersent; trente mille habitants de tout âge et
de tout sexe sont écrasés sous des ruines.  Le matelot disait en
sifflant et en jurant: il y aura quelque chose à gagner ici.
Quelle peut être la raison suffisante de ce phénomène? disait
Pangloss.  Voici le dernier jour du monde!  s'écriait Candide.
Le matelot court incontinent au milieu des débris, affronte la
mort pour trouver de l'argent, en trouve, s'en empare, s'enivre,
et ayant cuvé son vin, achète les faveurs de la première fille de
bonne volonté qu'il rencontre sur les ruines des maisons
détruites, et au milieu des mourants et des morts.  Pangloss le
tirait cependant par la manche: Mon ami, lui disait-il, cela
n'est pas bien, vous manquez à la raison universelle, vous prenez
mal votre temps.  Tête et sang, répondit l'autre, je suis matelot
et né à Batavia; j'ai marché quatre fois sur le crucifix dans
quatre voyages au Japon[2]; tu as bien trouvé ton homme avec ta
raison universelle!


  [1] Le tremblement de terre de Lisbonne est du 1er novembre 1755.
  B.

  [2] Voyez tome XVIII, page 470.  B.


Quelques éclats de pierre avaient blessé Candide; il était étendu
dans la rue et couvert de débris.  Il disait à Pangloss: Hélas!
procure-moi un peu de vin et d'huile; je me meurs.  Ce
tremblement de terre n'est pas une chose nouvelle, répondit
Pangloss; la ville de Lima éprouva les mêmes secousses en
Amérique l'année passée; mêmes causes, mêmes effets; il y a
certainement une traînée de soufre sous terre depuis Lima jusqu'à
Lisbonne.  Rien n'est plus probable, dit Candide; mais, pour
Dieu, un peu d'huile et de vin.  Comment probable?  répliqua le
philosophe, je soutiens que la chose est démontrée.  Candide
perdit connaissance, et Pangloss lui apporta un peu d'eau d'une
fontaine voisine.

Le lendemain, ayant trouvé quelques provisions de bouche en se
glissant à travers des décombres, ils réparèrent un peu leurs
forces.  Ensuite ils travaillèrent comme les autres à soulager
les habitants échappés à la mort.  Quelques citoyens, secourus
par eux, leur donnèrent un aussi bon dîner qu'on le pouvait dans
un tel désastre: il est vrai que le repas était triste; les
convives arrosaient leur pain de leurs larmes; mais Pangloss les
consola, en les assurant que les choses ne pouvaient être
autrement: Car, dit-il, tout ceci est ce qu'il y a de mieux; car
s'il y a un volcan à Lisbonne, il ne pouvait être ailleurs; car
il est impossible que les choses ne soient pas où elles sont, car
tout est bien.

Un petit homme noir, familier de l'inquisition, lequel était à
côté de lui, prit poliment la parole et dit: Apparemment que
monsieur ne croit pas au péché originel; car si tout est au
mieux, il n'y a donc eu ni chute ni punition.

Je demande très humblement pardon à votre excellence, répondit
Pangloss encore plus poliment, car la chute de l'homme et la
malédiction entraient nécessairement dans le meilleur des mondes
possibles.  Monsieur ne croit donc pas à la liberté? dit le
familier.  Votre excellence m'excusera, dit Pangloss; la liberté
peut subsister avec la nécessité absolue; car il était nécessaire
que nous fussions libres; car enfin la volonté déterminée......
Pangloss était au milieu de sa phrase, quand Je familier fit un
signe de tête à son estafier qui lui servait à boire du vin de
Porto ou d'Oporto.
