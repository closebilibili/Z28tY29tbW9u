// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kfc.proto

package kfc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BnjKfcCoupon struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Mid                  int64                       `protobuf:"varint,2,opt,name=Mid,proto3" json:"mid"`
	CouponCode           string                      `protobuf:"bytes,3,opt,name=Coupon_code,json=CouponCode,proto3" json:"coupon_code"`
	Desc                 string                      `protobuf:"bytes,4,opt,name=Desc,proto3" json:"desc"`
	State                int64                       `protobuf:"varint,5,opt,name=State,proto3" json:"state"`
	DeleteTime           go_common_library_time.Time `protobuf:"varint,6,opt,name=Delete_time,json=DeleteTime,proto3,casttype=go-common/library/time.Time" json:"-"`
	Ctime                go_common_library_time.Time `protobuf:"varint,7,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"-"`
	Mtime                go_common_library_time.Time `protobuf:"varint,8,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *BnjKfcCoupon) Reset()         { *m = BnjKfcCoupon{} }
func (m *BnjKfcCoupon) String() string { return proto.CompactTextString(m) }
func (*BnjKfcCoupon) ProtoMessage()    {}
func (*BnjKfcCoupon) Descriptor() ([]byte, []int) {
	return fileDescriptor_kfc_398e27aa918bebb1, []int{0}
}
func (m *BnjKfcCoupon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BnjKfcCoupon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BnjKfcCoupon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BnjKfcCoupon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BnjKfcCoupon.Merge(dst, src)
}
func (m *BnjKfcCoupon) XXX_Size() int {
	return m.Size()
}
func (m *BnjKfcCoupon) XXX_DiscardUnknown() {
	xxx_messageInfo_BnjKfcCoupon.DiscardUnknown(m)
}

var xxx_messageInfo_BnjKfcCoupon proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BnjKfcCoupon)(nil), "activity.service.BnjKfcCoupon")
}
func (m *BnjKfcCoupon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BnjKfcCoupon) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKfc(dAtA, i, uint64(m.ID))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintKfc(dAtA, i, uint64(m.Mid))
	}
	if len(m.CouponCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintKfc(dAtA, i, uint64(len(m.CouponCode)))
		i += copy(dAtA[i:], m.CouponCode)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintKfc(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.State != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintKfc(dAtA, i, uint64(m.State))
	}
	if m.DeleteTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintKfc(dAtA, i, uint64(m.DeleteTime))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintKfc(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintKfc(dAtA, i, uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintKfc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BnjKfcCoupon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovKfc(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovKfc(uint64(m.Mid))
	}
	l = len(m.CouponCode)
	if l > 0 {
		n += 1 + l + sovKfc(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovKfc(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovKfc(uint64(m.State))
	}
	if m.DeleteTime != 0 {
		n += 1 + sovKfc(uint64(m.DeleteTime))
	}
	if m.Ctime != 0 {
		n += 1 + sovKfc(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovKfc(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovKfc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozKfc(x uint64) (n int) {
	return sovKfc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BnjKfcCoupon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKfc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BnjKfcCoupon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BnjKfcCoupon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKfc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKfc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKfc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKfc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKfc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKfc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKfc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteTime", wireType)
			}
			m.DeleteTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKfc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKfc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKfc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKfc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKfc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKfc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKfc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKfc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKfc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthKfc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowKfc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipKfc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthKfc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKfc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("kfc.proto", fileDescriptor_kfc_398e27aa918bebb1) }

var fileDescriptor_kfc_398e27aa918bebb1 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x3d, 0x6f, 0xea, 0x30,
	0x14, 0x86, 0x71, 0x42, 0xf8, 0x30, 0x57, 0xba, 0x57, 0x1e, 0xae, 0xd2, 0xaf, 0x18, 0x55, 0x1d,
	0x58, 0x48, 0x2a, 0x75, 0xeb, 0x18, 0xd2, 0x01, 0x55, 0x2c, 0x69, 0xa7, 0x2e, 0x88, 0x38, 0x4e,
	0xea, 0x42, 0x30, 0x4a, 0x0c, 0x12, 0xff, 0xa4, 0x3f, 0x89, 0x91, 0x5f, 0x60, 0x15, 0xba, 0x65,
	0xeb, 0xda, 0xa9, 0xca, 0xc9, 0xd0, 0x99, 0xed, 0x9c, 0xd7, 0xcf, 0xf3, 0x7a, 0x38, 0xb8, 0x3b,
	0x4f, 0x98, 0xbb, 0xca, 0xa5, 0x92, 0xe4, 0xdf, 0x8c, 0x29, 0xb1, 0x11, 0x6a, 0xeb, 0x16, 0x3c,
	0xdf, 0x08, 0xc6, 0xcf, 0x87, 0xa9, 0x50, 0xaf, 0xeb, 0xc8, 0x65, 0x32, 0xf3, 0x52, 0x99, 0x4a,
	0x0f, 0xc0, 0x68, 0x9d, 0xc0, 0x06, 0x0b, 0x4c, 0x75, 0xc1, 0xf5, 0x97, 0x81, 0xff, 0xf8, 0xcb,
	0xb7, 0xc7, 0x84, 0x8d, 0xe4, 0x7a, 0x25, 0x97, 0xe4, 0x3f, 0x36, 0xc6, 0x81, 0x8d, 0xfa, 0x68,
	0x60, 0xfa, 0xad, 0x52, 0x53, 0x43, 0xc4, 0xa1, 0x31, 0x0e, 0xc8, 0x19, 0x36, 0x27, 0x22, 0xb6,
	0x0d, 0x78, 0x68, 0x97, 0x9a, 0x9a, 0x99, 0x88, 0xc3, 0x2a, 0x23, 0xb7, 0xb8, 0x57, 0xcb, 0x53,
	0x26, 0x63, 0x6e, 0x9b, 0x7d, 0x34, 0xe8, 0xfa, 0x7f, 0x4b, 0x4d, 0x7b, 0xec, 0x37, 0x0e, 0x71,
	0xcd, 0x8c, 0x64, 0xcc, 0xc9, 0x25, 0x6e, 0x06, 0xbc, 0x60, 0x76, 0x13, 0xd0, 0x4e, 0xa9, 0x69,
	0x33, 0xe6, 0x05, 0x0b, 0x21, 0x25, 0x14, 0x5b, 0x4f, 0x6a, 0xa6, 0xb8, 0x6d, 0xc1, 0x67, 0xdd,
	0x52, 0x53, 0xab, 0xa8, 0x82, 0xb0, 0xce, 0xc9, 0x03, 0xee, 0x05, 0x7c, 0xc1, 0x15, 0x9f, 0x2a,
	0x91, 0x71, 0xbb, 0x05, 0xd8, 0x4d, 0xa9, 0x29, 0x1a, 0x7e, 0x6b, 0x7a, 0x91, 0xca, 0x21, 0x93,
	0x59, 0x26, 0x97, 0xde, 0x42, 0x44, 0xf9, 0x2c, 0xdf, 0x7a, 0x15, 0xe6, 0x3e, 0x8b, 0x8c, 0x87,
	0xb8, 0x16, 0xab, 0x99, 0xdc, 0x63, 0x6b, 0x04, 0x05, 0xed, 0x13, 0x0a, 0x6a, 0xa5, 0x72, 0x27,
	0xe0, 0x76, 0x4e, 0x71, 0x41, 0xf1, 0xaf, 0x76, 0x07, 0xa7, 0xb1, 0x3f, 0x38, 0x8d, 0xdd, 0xd1,
	0x41, 0xfb, 0xa3, 0x83, 0x3e, 0x8e, 0x0e, 0x7a, 0xff, 0x74, 0x1a, 0x2f, 0xe6, 0x3c, 0x61, 0x51,
	0x0b, 0x2e, 0x73, 0xf7, 0x13, 0x00, 0x00, 0xff, 0xff, 0x98, 0x5a, 0x85, 0xb0, 0xe7, 0x01, 0x00,
	0x00,
}
