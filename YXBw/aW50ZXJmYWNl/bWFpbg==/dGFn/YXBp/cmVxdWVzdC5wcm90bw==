// main.community.tag grpc api proto file.
// discovery id: main.community.tag.
// version: v1.
syntax = "proto3";
package main.community.tag.v1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "v1";

message TagReq {
    int64 tid = 1;
    int64 mid = 2;
}

message TagsReq {
    repeated int64 tids = 1;
    int64 mid = 2;
}

message TagByNameReq {
    string tname = 1;
    int64 mid = 2;
}

message TagByNamesReq {
    repeated string tnames = 1;
    int64 mid = 2;
}

message ChannelCategoryReq {
    int32 from = 1;
}

message ChanneListReq {
    int64 id = 1;
    int64 mid = 2;
    int32 from = 3;
}

message ChannelDiscoveryReq {
    int64 mid = 1;
    int32 from = 2;
}

message ChannelRecommendReq {
    int64 mid = 1;
    int32 from = 2;
}

message ChannelSquareReq {
    int64 mid = 1;
    int32 tag_number = 2;
    int32 resource_number = 3;
    int32 type = 4;
    string buvid = 5;
    int32 build = 6;
    int32 login_event = 7;
    int32 display_id = 8;
    int32 plat = 9;
    int32 from = 10;
}

message ChannelResourcesReq {
    int64 tid = 1;
    string tname = 2;
    int64 mid = 3;
    int32 plat = 4;
    int32 login_event = 5;
    int32 request_cnt = 6;
    int32 display_id = 7;
    int32 from = 8;
    int32 type = 9;
    string buvid = 10;
    int32 build = 11;
}

message ChannelCheckBackReq {
    repeated int64 oids = 1;
    int32 type = 2;
}

message ChannelReq {
    int64 mid = 1;
    int64 tid = 2;
    string tname = 3;
    int32 from = 4;
}
