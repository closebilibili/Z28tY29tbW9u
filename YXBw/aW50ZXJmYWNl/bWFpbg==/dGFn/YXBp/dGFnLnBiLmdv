// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/interface/main/tag/api/tag.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Tag struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name                 string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Type                 int32                       `protobuf:"varint,3,opt,name=type,proto3" json:"type"`
	Cover                string                      `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover"`
	HeadCover            string                      `protobuf:"bytes,5,opt,name=head_cover,json=headCover,proto3" json:"head_cover"`
	Content              string                      `protobuf:"bytes,6,opt,name=content,proto3" json:"content"`
	ShortContent         string                      `protobuf:"bytes,7,opt,name=short_content,json=shortContent,proto3" json:"short_content"`
	Verify               int32                       `protobuf:"varint,8,opt,name=verify,proto3" json:"-"`
	Attention            int32                       `protobuf:"varint,10,opt,name=attention,proto3" json:"attention"`
	State                int32                       `protobuf:"varint,11,opt,name=state,proto3" json:"-"`
	Sub                  int64                       `protobuf:"varint,12,opt,name=sub,proto3" json:"sub"`
	Bind                 int64                       `protobuf:"varint,13,opt,name=bind,proto3" json:"bind"`
	Likes                int64                       `protobuf:"varint,14,opt,name=likes,proto3" json:"likes"`
	Hates                int64                       `protobuf:"varint,15,opt,name=hates,proto3" json:"hates"`
	Liked                int32                       `protobuf:"varint,16,opt,name=liked,proto3" json:"liked"`
	Hated                int32                       `protobuf:"varint,17,opt,name=hated,proto3" json:"hated"`
	Ctime                go_common_library_time.Time `protobuf:"varint,18,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,19,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_tag_1db473c1b7dbc81b, []int{0}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(dst, src)
}
func (m *Tag) XXX_Size() int {
	return m.Size()
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Tag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tag) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Tag) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *Tag) GetHeadCover() string {
	if m != nil {
		return m.HeadCover
	}
	return ""
}

func (m *Tag) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Tag) GetShortContent() string {
	if m != nil {
		return m.ShortContent
	}
	return ""
}

func (m *Tag) GetVerify() int32 {
	if m != nil {
		return m.Verify
	}
	return 0
}

func (m *Tag) GetAttention() int32 {
	if m != nil {
		return m.Attention
	}
	return 0
}

func (m *Tag) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Tag) GetSub() int64 {
	if m != nil {
		return m.Sub
	}
	return 0
}

func (m *Tag) GetBind() int64 {
	if m != nil {
		return m.Bind
	}
	return 0
}

func (m *Tag) GetLikes() int64 {
	if m != nil {
		return m.Likes
	}
	return 0
}

func (m *Tag) GetHates() int64 {
	if m != nil {
		return m.Hates
	}
	return 0
}

func (m *Tag) GetLiked() int32 {
	if m != nil {
		return m.Liked
	}
	return 0
}

func (m *Tag) GetHated() int32 {
	if m != nil {
		return m.Hated
	}
	return 0
}

func (m *Tag) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *Tag) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func init() {
	proto.RegisterType((*Tag)(nil), "main.community.tag.v1.Tag")
}
func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTag(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Type))
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTag(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.HeadCover) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTag(dAtA, i, uint64(len(m.HeadCover)))
		i += copy(dAtA[i:], m.HeadCover)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTag(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.ShortContent) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTag(dAtA, i, uint64(len(m.ShortContent)))
		i += copy(dAtA[i:], m.ShortContent)
	}
	if m.Verify != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Verify))
	}
	if m.Attention != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Attention))
	}
	if m.State != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.State))
	}
	if m.Sub != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Sub))
	}
	if m.Bind != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Bind))
	}
	if m.Likes != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Likes))
	}
	if m.Hates != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Hates))
	}
	if m.Liked != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Liked))
	}
	if m.Hated != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Hated))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTag(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Tag) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTag(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTag(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTag(uint64(m.Type))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovTag(uint64(l))
	}
	l = len(m.HeadCover)
	if l > 0 {
		n += 1 + l + sovTag(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovTag(uint64(l))
	}
	l = len(m.ShortContent)
	if l > 0 {
		n += 1 + l + sovTag(uint64(l))
	}
	if m.Verify != 0 {
		n += 1 + sovTag(uint64(m.Verify))
	}
	if m.Attention != 0 {
		n += 1 + sovTag(uint64(m.Attention))
	}
	if m.State != 0 {
		n += 1 + sovTag(uint64(m.State))
	}
	if m.Sub != 0 {
		n += 1 + sovTag(uint64(m.Sub))
	}
	if m.Bind != 0 {
		n += 1 + sovTag(uint64(m.Bind))
	}
	if m.Likes != 0 {
		n += 1 + sovTag(uint64(m.Likes))
	}
	if m.Hates != 0 {
		n += 1 + sovTag(uint64(m.Hates))
	}
	if m.Liked != 0 {
		n += 2 + sovTag(uint64(m.Liked))
	}
	if m.Hated != 0 {
		n += 2 + sovTag(uint64(m.Hated))
	}
	if m.Ctime != 0 {
		n += 2 + sovTag(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 2 + sovTag(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTag(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTag(x uint64) (n int) {
	return sovTag(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verify", wireType)
			}
			m.Verify = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Verify |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attention", wireType)
			}
			m.Attention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attention |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sub", wireType)
			}
			m.Sub = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sub |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bind", wireType)
			}
			m.Bind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bind |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Likes", wireType)
			}
			m.Likes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Likes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hates", wireType)
			}
			m.Hates = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hates |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liked", wireType)
			}
			m.Liked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Liked |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hated", wireType)
			}
			m.Hated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hated |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTag(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTag
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTag
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTag
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTag(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTag = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTag   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/interface/main/tag/api/tag.proto", fileDescriptor_tag_1db473c1b7dbc81b)
}

var fileDescriptor_tag_1db473c1b7dbc81b = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xd6, 0x6e, 0xba, 0x69, 0xe3, 0x36, 0xa5, 0x35, 0x02, 0x19, 0x0a, 0x71, 0x84, 0x8a, 0x14,
	0x09, 0x25, 0xab, 0x0a, 0x89, 0x03, 0x07, 0x0e, 0xe9, 0x1b, 0x58, 0x3d, 0x71, 0xa9, 0xbc, 0x6b,
	0x67, 0x63, 0xd1, 0xb5, 0x57, 0xbb, 0x4e, 0xa4, 0xbc, 0x12, 0x4f, 0xc2, 0x91, 0x27, 0xb0, 0x50,
	0x8e, 0x7e, 0x04, 0x4e, 0xc8, 0xe3, 0x2e, 0x29, 0x27, 0x2e, 0x33, 0xf3, 0xfd, 0xcc, 0x97, 0x64,
	0x62, 0x74, 0xcd, 0x9b, 0x26, 0x57, 0xda, 0xca, 0x76, 0xc5, 0x4b, 0x99, 0xd7, 0x5c, 0xe9, 0xdc,
	0xf2, 0x2a, 0xe7, 0x8d, 0x0a, 0x7d, 0xd1, 0xb4, 0xc6, 0x1a, 0xfc, 0x22, 0xf0, 0x8b, 0xd2, 0xd4,
	0xf5, 0x46, 0x2b, 0xbb, 0x5b, 0x04, 0x65, 0x7b, 0xf3, 0x7a, 0x5e, 0x29, 0xbb, 0xde, 0x14, 0x41,
	0xc8, 0x2b, 0x53, 0x99, 0x1c, 0xdc, 0xc5, 0x66, 0x05, 0x08, 0x00, 0x4c, 0x31, 0xe5, 0xdd, 0xf7,
	0x0c, 0x0d, 0xee, 0x78, 0x85, 0x5f, 0xa2, 0x54, 0x09, 0x92, 0x4c, 0x93, 0xd9, 0x60, 0x39, 0xf4,
	0x8e, 0xa6, 0x4a, 0xb0, 0x54, 0x09, 0xfc, 0x06, 0x1d, 0x69, 0x5e, 0x4b, 0x92, 0x4e, 0x93, 0xd9,
	0x68, 0x79, 0xe2, 0x1d, 0x05, 0xcc, 0xa0, 0x06, 0xd5, 0xee, 0x1a, 0x49, 0x06, 0xd3, 0x64, 0x96,
	0x45, 0x35, 0x60, 0x06, 0x15, 0x53, 0x94, 0x95, 0x66, 0x2b, 0x5b, 0x72, 0x04, 0xcb, 0x23, 0xef,
	0x68, 0x24, 0x58, 0x6c, 0x78, 0x8e, 0xd0, 0x5a, 0x72, 0x71, 0x1f, 0x5d, 0x19, 0xb8, 0xce, 0xbd,
	0xa3, 0x4f, 0x58, 0x36, 0x0a, 0xf3, 0x2d, 0xd8, 0xdf, 0xa3, 0xe3, 0xd2, 0x68, 0x2b, 0xb5, 0x25,
	0x43, 0xf0, 0x9e, 0x7a, 0x47, 0x7b, 0x8a, 0xf5, 0x03, 0xfe, 0x84, 0xc6, 0xdd, 0xda, 0xb4, 0xf6,
	0xbe, 0x37, 0x1f, 0x83, 0xf9, 0xd2, 0x3b, 0xfa, 0xaf, 0xc0, 0xce, 0x00, 0xde, 0x3e, 0xee, 0xbd,
	0x45, 0xc3, 0xad, 0x6c, 0xd5, 0x6a, 0x47, 0x4e, 0xe0, 0xe7, 0x64, 0xde, 0xd1, 0x64, 0xce, 0x1e,
	0x49, 0xfc, 0x01, 0x8d, 0xb8, 0x0d, 0x46, 0x65, 0x34, 0x41, 0xe0, 0x18, 0x7b, 0x47, 0x0f, 0x24,
	0x3b, 0x8c, 0xf8, 0x0a, 0x65, 0x9d, 0xe5, 0x56, 0x92, 0xd3, 0xa7, 0x51, 0x91, 0xc3, 0xaf, 0xd0,
	0xa0, 0xdb, 0x14, 0xe4, 0x0c, 0x8e, 0x7d, 0xec, 0x1d, 0x0d, 0x90, 0x85, 0x12, 0x0e, 0x5a, 0x28,
	0x2d, 0xc8, 0x18, 0x34, 0x38, 0x68, 0xc0, 0x0c, 0x6a, 0x38, 0xe8, 0x83, 0xfa, 0x26, 0x3b, 0x72,
	0x0e, 0x32, 0x1c, 0x14, 0x08, 0x16, 0x5b, 0x30, 0xac, 0xb9, 0x95, 0x1d, 0x79, 0x76, 0x30, 0x00,
	0xc1, 0x62, 0xeb, 0x13, 0x04, 0xb9, 0x80, 0xef, 0xf5, 0x37, 0x41, 0xc4, 0x04, 0xd1, 0x27, 0x08,
	0x72, 0x79, 0x30, 0x00, 0x11, 0x13, 0x04, 0xfe, 0x82, 0xb2, 0xd2, 0xaa, 0x5a, 0x12, 0x0c, 0x1f,
	0x31, 0x83, 0x3f, 0x35, 0x10, 0xbf, 0x1d, 0xbd, 0xaa, 0xcc, 0x3c, 0x3c, 0x48, 0xa3, 0xf3, 0x07,
	0x55, 0xb4, 0xbc, 0xdd, 0xe5, 0x41, 0x59, 0xdc, 0xa9, 0x5a, 0xb2, 0xe8, 0xc2, 0x9f, 0x51, 0x56,
	0xc3, 0xfe, 0x73, 0xd8, 0xbf, 0x86, 0xcb, 0xfc, 0x77, 0x17, 0x56, 0x96, 0x17, 0x3f, 0xf6, 0x93,
	0xe4, 0xe7, 0x7e, 0x92, 0xfc, 0xda, 0x4f, 0x92, 0xaf, 0xe9, 0xf6, 0xa6, 0x18, 0xc2, 0x2b, 0xfe,
	0xf8, 0x27, 0x00, 0x00, 0xff, 0xff, 0x38, 0xbc, 0x17, 0x0e, 0x33, 0x03, 0x00, 0x00,
}
