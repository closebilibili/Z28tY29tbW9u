// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/interface/main/app-resource/api/v1/api.proto

/*
Package v1 is a generated protocol buffer package.

use {app_id}.{version} as package name

It is generated from these files:
	app/interface/main/app-resource/api/v1/api.proto

It has these top-level messages:
	NoArgRequest
	NoReply
*/
package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// NoArgReq
type NoArgRequest struct {
}

func (m *NoArgRequest) Reset()                    { *m = NoArgRequest{} }
func (m *NoArgRequest) String() string            { return proto.CompactTextString(m) }
func (*NoArgRequest) ProtoMessage()               {}
func (*NoArgRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

// NoReply
type NoReply struct {
}

func (m *NoReply) Reset()                    { *m = NoReply{} }
func (m *NoReply) String() string            { return proto.CompactTextString(m) }
func (*NoReply) ProtoMessage()               {}
func (*NoReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func init() {
	proto.RegisterType((*NoArgRequest)(nil), "app.resource.v1.NoArgRequest")
	proto.RegisterType((*NoReply)(nil), "app.resource.v1.NoReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppResource service

type AppResourceClient interface {
	// 更新静态资源所有缓存
	ModuleUpdateCache(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*NoReply, error)
}

type appResourceClient struct {
	cc *grpc.ClientConn
}

func NewAppResourceClient(cc *grpc.ClientConn) AppResourceClient {
	return &appResourceClient{cc}
}

func (c *appResourceClient) ModuleUpdateCache(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := grpc.Invoke(ctx, "/app.resource.v1.AppResource/ModuleUpdateCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppResource service

type AppResourceServer interface {
	// 更新静态资源所有缓存
	ModuleUpdateCache(context.Context, *NoArgRequest) (*NoReply, error)
}

func RegisterAppResourceServer(s *grpc.Server, srv AppResourceServer) {
	s.RegisterService(&_AppResource_serviceDesc, srv)
}

func _AppResource_ModuleUpdateCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppResourceServer).ModuleUpdateCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.resource.v1.AppResource/ModuleUpdateCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppResourceServer).ModuleUpdateCache(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppResource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "app.resource.v1.AppResource",
	HandlerType: (*AppResourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModuleUpdateCache",
			Handler:    _AppResource_ModuleUpdateCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/interface/main/app-resource/api/v1/api.proto",
}

func (m *NoArgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoArgRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *NoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NoArgRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *NoReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NoArgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoArgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoArgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/interface/main/app-resource/api/v1/api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x48, 0x2c, 0x28, 0xd0,
	0xcf, 0xcc, 0x2b, 0x49, 0x2d, 0x4a, 0x4b, 0x4c, 0x4e, 0xd5, 0xcf, 0x4d, 0xcc, 0xcc, 0xd3, 0x4f,
	0x2c, 0x28, 0xd0, 0x2d, 0x4a, 0x2d, 0xce, 0x2f, 0x2d, 0x4a, 0x4e, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4,
	0x2f, 0x33, 0x04, 0x51, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xfc, 0x89, 0x05, 0x05, 0x7a,
	0x30, 0x69, 0xbd, 0x32, 0x43, 0x25, 0x3e, 0x2e, 0x1e, 0xbf, 0x7c, 0xc7, 0xa2, 0xf4, 0xa0, 0xd4,
	0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x25, 0x4e, 0x2e, 0x76, 0xbf, 0xfc, 0xa0, 0xd4, 0x82, 0x9c, 0x4a,
	0xa3, 0x68, 0x2e, 0x6e, 0xc7, 0x82, 0x82, 0x20, 0xa8, 0x62, 0x21, 0x1f, 0x2e, 0x41, 0xdf, 0xfc,
	0x94, 0xd2, 0x9c, 0xd4, 0xd0, 0x82, 0x94, 0xc4, 0x92, 0x54, 0xe7, 0xc4, 0xe4, 0x8c, 0x54, 0x21,
	0x59, 0x3d, 0x34, 0x03, 0xf5, 0x90, 0x4d, 0x93, 0x92, 0xc0, 0x22, 0x0d, 0x36, 0xdc, 0x49, 0xe0,
	0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x8c, 0x62, 0x2a, 0x33,
	0x4c, 0x62, 0x03, 0xbb, 0xd0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x84, 0x2d, 0x7f, 0x25, 0xd5,
	0x00, 0x00, 0x00,
}
