// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/http/v1/roomAdmin.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RoomAdminGetByRoomReq struct {
	// 页数
	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty" form:"page"`
	// 房间号
	Roomid int64 `protobuf:"varint,2,opt,name=roomid,proto3" json:"roomid,omitempty" form:"roomid" validate:"required"`
	// 每页数量
	PageSize             int64    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" form:"page_size"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminGetByRoomReq) Reset()         { *m = RoomAdminGetByRoomReq{} }
func (m *RoomAdminGetByRoomReq) String() string { return proto.CompactTextString(m) }
func (*RoomAdminGetByRoomReq) ProtoMessage()    {}
func (*RoomAdminGetByRoomReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_roomAdmin_2bf8ec769e3f88f7, []int{0}
}
func (m *RoomAdminGetByRoomReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminGetByRoomReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminGetByRoomReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminGetByRoomReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminGetByRoomReq.Merge(dst, src)
}
func (m *RoomAdminGetByRoomReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminGetByRoomReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminGetByRoomReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminGetByRoomReq proto.InternalMessageInfo

func (m *RoomAdminGetByRoomReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RoomAdminGetByRoomReq) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *RoomAdminGetByRoomReq) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type RoomAdminGetByRoomResp struct {
	//
	Page *RoomAdminGetByRoomResp_Page `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
	//
	Data                 []*RoomAdminGetByRoomResp_Data `protobuf:"bytes,2,rep,name=data" json:"data"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *RoomAdminGetByRoomResp) Reset()         { *m = RoomAdminGetByRoomResp{} }
func (m *RoomAdminGetByRoomResp) String() string { return proto.CompactTextString(m) }
func (*RoomAdminGetByRoomResp) ProtoMessage()    {}
func (*RoomAdminGetByRoomResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_roomAdmin_2bf8ec769e3f88f7, []int{1}
}
func (m *RoomAdminGetByRoomResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminGetByRoomResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminGetByRoomResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminGetByRoomResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminGetByRoomResp.Merge(dst, src)
}
func (m *RoomAdminGetByRoomResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminGetByRoomResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminGetByRoomResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminGetByRoomResp proto.InternalMessageInfo

func (m *RoomAdminGetByRoomResp) GetPage() *RoomAdminGetByRoomResp_Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *RoomAdminGetByRoomResp) GetData() []*RoomAdminGetByRoomResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomAdminGetByRoomResp_Data struct {
	// 用户id
	Uid int64 `protobuf:"varint,3,opt,name=uid,proto3" json:"uid"`
	// 用户名
	Uname string `protobuf:"bytes,4,opt,name=uname,proto3" json:"uname"`
	// 用户头像
	Face string `protobuf:"bytes,5,opt,name=face,proto3" json:"face"`
	// 上任时间
	Ctime                string   `protobuf:"bytes,6,opt,name=ctime,proto3" json:"ctime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminGetByRoomResp_Data) Reset()         { *m = RoomAdminGetByRoomResp_Data{} }
func (m *RoomAdminGetByRoomResp_Data) String() string { return proto.CompactTextString(m) }
func (*RoomAdminGetByRoomResp_Data) ProtoMessage()    {}
func (*RoomAdminGetByRoomResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_roomAdmin_2bf8ec769e3f88f7, []int{1, 0}
}
func (m *RoomAdminGetByRoomResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminGetByRoomResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminGetByRoomResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminGetByRoomResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminGetByRoomResp_Data.Merge(dst, src)
}
func (m *RoomAdminGetByRoomResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminGetByRoomResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminGetByRoomResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminGetByRoomResp_Data proto.InternalMessageInfo

func (m *RoomAdminGetByRoomResp_Data) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomAdminGetByRoomResp_Data) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *RoomAdminGetByRoomResp_Data) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *RoomAdminGetByRoomResp_Data) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

type RoomAdminGetByRoomResp_Page struct {
	// 当前页码
	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// 每页大小
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 总页数
	TotalPage int64 `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	// 总记录数
	TotalCount           int64    `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminGetByRoomResp_Page) Reset()         { *m = RoomAdminGetByRoomResp_Page{} }
func (m *RoomAdminGetByRoomResp_Page) String() string { return proto.CompactTextString(m) }
func (*RoomAdminGetByRoomResp_Page) ProtoMessage()    {}
func (*RoomAdminGetByRoomResp_Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_roomAdmin_2bf8ec769e3f88f7, []int{1, 1}
}
func (m *RoomAdminGetByRoomResp_Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminGetByRoomResp_Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminGetByRoomResp_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminGetByRoomResp_Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminGetByRoomResp_Page.Merge(dst, src)
}
func (m *RoomAdminGetByRoomResp_Page) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminGetByRoomResp_Page) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminGetByRoomResp_Page.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminGetByRoomResp_Page proto.InternalMessageInfo

func (m *RoomAdminGetByRoomResp_Page) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RoomAdminGetByRoomResp_Page) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *RoomAdminGetByRoomResp_Page) GetTotalPage() int64 {
	if m != nil {
		return m.TotalPage
	}
	return 0
}

func (m *RoomAdminGetByRoomResp_Page) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func init() {
	proto.RegisterType((*RoomAdminGetByRoomReq)(nil), "live.webroom.v1.RoomAdminGetByRoomReq")
	proto.RegisterType((*RoomAdminGetByRoomResp)(nil), "live.webroom.v1.RoomAdminGetByRoomResp")
	proto.RegisterType((*RoomAdminGetByRoomResp_Data)(nil), "live.webroom.v1.RoomAdminGetByRoomResp.Data")
	proto.RegisterType((*RoomAdminGetByRoomResp_Page)(nil), "live.webroom.v1.RoomAdminGetByRoomResp.Page")
}
func (m *RoomAdminGetByRoomReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminGetByRoomReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomAdmin(dAtA, i, uint64(m.Page))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoomAdmin(dAtA, i, uint64(m.Roomid))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoomAdmin(dAtA, i, uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminGetByRoomResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminGetByRoomResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoomAdmin(dAtA, i, uint64(m.Page.Size()))
		n1, err := m.Page.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRoomAdmin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminGetByRoomResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminGetByRoomResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoomAdmin(dAtA, i, uint64(m.Uid))
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRoomAdmin(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRoomAdmin(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if len(m.Ctime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRoomAdmin(dAtA, i, uint64(len(m.Ctime)))
		i += copy(dAtA[i:], m.Ctime)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminGetByRoomResp_Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminGetByRoomResp_Page) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomAdmin(dAtA, i, uint64(m.Page))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoomAdmin(dAtA, i, uint64(m.PageSize))
	}
	if m.TotalPage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoomAdmin(dAtA, i, uint64(m.TotalPage))
	}
	if m.TotalCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoomAdmin(dAtA, i, uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRoomAdmin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RoomAdminGetByRoomReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovRoomAdmin(uint64(m.Page))
	}
	if m.Roomid != 0 {
		n += 1 + sovRoomAdmin(uint64(m.Roomid))
	}
	if m.PageSize != 0 {
		n += 1 + sovRoomAdmin(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminGetByRoomResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovRoomAdmin(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovRoomAdmin(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminGetByRoomResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRoomAdmin(uint64(m.Uid))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovRoomAdmin(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovRoomAdmin(uint64(l))
	}
	l = len(m.Ctime)
	if l > 0 {
		n += 1 + l + sovRoomAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminGetByRoomResp_Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovRoomAdmin(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovRoomAdmin(uint64(m.PageSize))
	}
	if m.TotalPage != 0 {
		n += 1 + sovRoomAdmin(uint64(m.TotalPage))
	}
	if m.TotalCount != 0 {
		n += 1 + sovRoomAdmin(uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRoomAdmin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRoomAdmin(x uint64) (n int) {
	return sovRoomAdmin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoomAdminGetByRoomReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminGetByRoomReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminGetByRoomReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminGetByRoomResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminGetByRoomResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminGetByRoomResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &RoomAdminGetByRoomResp_Page{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RoomAdminGetByRoomResp_Data{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminGetByRoomResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminGetByRoomResp_Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPage", wireType)
			}
			m.TotalPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoomAdmin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoomAdmin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRoomAdmin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRoomAdmin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRoomAdmin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRoomAdmin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoomAdmin   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("api/http/v1/roomAdmin.proto", fileDescriptor_roomAdmin_2bf8ec769e3f88f7)
}

var fileDescriptor_roomAdmin_2bf8ec769e3f88f7 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0x63, 0x37, 0xd4, 0x93, 0x43, 0xab, 0x15, 0x20, 0x93, 0x42, 0x36, 0x18, 0x01, 0x3d,
	0x80, 0xad, 0x94, 0x5b, 0x25, 0x24, 0x30, 0x48, 0x48, 0x9c, 0xd0, 0x72, 0xe3, 0x40, 0xb4, 0x8e,
	0x37, 0xee, 0x8a, 0x38, 0xeb, 0xb8, 0x6b, 0x57, 0xe5, 0xc6, 0xb3, 0x70, 0xe7, 0x39, 0x38, 0xf2,
	0x04, 0x16, 0xca, 0x31, 0xc7, 0x3c, 0x01, 0xda, 0xd9, 0x40, 0x22, 0xd4, 0x43, 0x7b, 0x59, 0xef,
	0x7c, 0xdf, 0x7c, 0xf3, 0xf3, 0xad, 0xe1, 0x88, 0x97, 0x32, 0x3e, 0xd3, 0xba, 0x8c, 0x9b, 0x51,
	0x5c, 0x29, 0x55, 0xbc, 0xce, 0x0a, 0x39, 0x8f, 0xca, 0x4a, 0x69, 0x45, 0x0e, 0x66, 0xb2, 0x11,
	0xd1, 0x85, 0x48, 0x0d, 0x11, 0x35, 0xa3, 0xfe, 0xf3, 0x5c, 0xea, 0xb3, 0x3a, 0x8d, 0x26, 0xaa,
	0x88, 0x73, 0x95, 0xab, 0x18, 0xf3, 0xd2, 0x7a, 0x8a, 0x11, 0x06, 0x78, 0xb3, 0xfa, 0xf0, 0x87,
	0x03, 0x77, 0xd8, 0xdf, 0x9a, 0xef, 0x84, 0x4e, 0x2e, 0x4d, 0xc4, 0xc4, 0x82, 0x3c, 0x02, 0xaf,
	0xe4, 0xb9, 0x08, 0x9c, 0xa1, 0x73, 0xec, 0x26, 0x07, 0xeb, 0x96, 0xf6, 0xa6, 0xaa, 0x2a, 0x4e,
	0x43, 0x83, 0x86, 0x0c, 0x49, 0xf2, 0x12, 0xba, 0xa6, 0xb1, 0xcc, 0x82, 0x0e, 0xa6, 0x3d, 0x5e,
	0xb7, 0xf4, 0xa1, 0x4d, 0xb3, 0x78, 0x38, 0x6c, 0xf8, 0x4c, 0x66, 0x5c, 0x8b, 0xd3, 0xb0, 0x12,
	0x8b, 0x5a, 0x56, 0x22, 0x0b, 0xd9, 0x46, 0x44, 0x46, 0xe0, 0x9b, 0x32, 0xe3, 0x73, 0xf9, 0x55,
	0x04, 0x2e, 0x56, 0xb8, 0xbd, 0x6e, 0xe9, 0xe1, 0xb6, 0x11, 0x52, 0x21, 0xdb, 0x37, 0xf7, 0x8f,
	0xe6, 0xfa, 0xdd, 0x85, 0xbb, 0x57, 0x0d, 0x7c, 0x5e, 0x92, 0x57, 0x3b, 0x13, 0xf7, 0x4e, 0x9e,
	0x45, 0xff, 0x59, 0x13, 0x5d, 0x2d, 0x8b, 0x3e, 0xf0, 0x5c, 0x6c, 0xd6, 0x79, 0x0f, 0x5e, 0xc6,
	0x35, 0x0f, 0x3a, 0x43, 0xf7, 0x26, 0x15, 0xde, 0x72, 0xcd, 0x93, 0xfd, 0x55, 0x4b, 0x51, 0xcd,
	0xf0, 0xec, 0x7f, 0x73, 0xc0, 0x33, 0x04, 0xb9, 0x07, 0x6e, 0x2d, 0xb3, 0xcd, 0x7a, 0xb7, 0x56,
	0x2d, 0x35, 0x21, 0x33, 0x07, 0xa1, 0xb0, 0x57, 0xcf, 0x79, 0x21, 0x02, 0x6f, 0xe8, 0x1c, 0xfb,
	0x89, 0xbf, 0x6a, 0xa9, 0x05, 0x98, 0xfd, 0x90, 0xfb, 0xe0, 0x4d, 0xf9, 0x44, 0x04, 0x7b, 0xc8,
	0x63, 0x0b, 0x13, 0x33, 0x3c, 0x8d, 0x7c, 0xa2, 0x65, 0x21, 0x82, 0xee, 0x56, 0x8e, 0x00, 0xb3,
	0x9f, 0xfe, 0x05, 0x78, 0x66, 0x3b, 0x42, 0x76, 0xdf, 0x72, 0xb3, 0xeb, 0xd1, 0xae, 0xf7, 0xf8,
	0x7a, 0x5b, 0x97, 0xc9, 0x03, 0x00, 0xad, 0x34, 0x9f, 0x8d, 0x51, 0x86, 0xa3, 0x33, 0x1f, 0x11,
	0xac, 0x47, 0xa1, 0x67, 0xe9, 0x89, 0xaa, 0xe7, 0x1a, 0xa7, 0x77, 0x99, 0x55, 0xbc, 0x31, 0xc8,
	0xc9, 0x17, 0xf0, 0xff, 0x79, 0x45, 0x3e, 0x43, 0x2f, 0x17, 0x7a, 0x9c, 0x5e, 0x8e, 0x8d, 0x8f,
	0xe4, 0xc9, 0xb5, 0x6c, 0x5d, 0xf4, 0x9f, 0x5e, 0xd3, 0xfe, 0xe4, 0xf0, 0xe7, 0x72, 0xe0, 0xfc,
	0x5a, 0x0e, 0x9c, 0xdf, 0xcb, 0x81, 0xf3, 0xa9, 0xd3, 0x8c, 0xd2, 0x2e, 0xfe, 0xdc, 0x2f, 0xfe,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xda, 0xb3, 0xe8, 0x27, 0x3b, 0x03, 0x00, 0x00,
}
