// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 历史记录请求参数定义
type GetHistoryReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHistoryReq) Reset()         { *m = GetHistoryReq{} }
func (m *GetHistoryReq) String() string { return proto.CompactTextString(m) }
func (*GetHistoryReq) ProtoMessage()    {}
func (*GetHistoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{0}
}
func (m *GetHistoryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHistoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHistoryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetHistoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHistoryReq.Merge(dst, src)
}
func (m *GetHistoryReq) XXX_Size() int {
	return m.Size()
}
func (m *GetHistoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHistoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetHistoryReq proto.InternalMessageInfo

// 获取接口返回响应
type GetHistoryResp struct {
	Title                string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title"`
	Count                int32                  `protobuf:"varint,4,opt,name=count,proto3" json:"count"`
	List                 []*GetHistoryResp_List `protobuf:"bytes,5,rep,name=list" json:"list"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetHistoryResp) Reset()         { *m = GetHistoryResp{} }
func (m *GetHistoryResp) String() string { return proto.CompactTextString(m) }
func (*GetHistoryResp) ProtoMessage()    {}
func (*GetHistoryResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{1}
}
func (m *GetHistoryResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHistoryResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHistoryResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetHistoryResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHistoryResp.Merge(dst, src)
}
func (m *GetHistoryResp) XXX_Size() int {
	return m.Size()
}
func (m *GetHistoryResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHistoryResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetHistoryResp proto.InternalMessageInfo

func (m *GetHistoryResp) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GetHistoryResp) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetHistoryResp) GetList() []*GetHistoryResp_List {
	if m != nil {
		return m.List
	}
	return nil
}

type GetHistoryResp_List struct {
	Roomid               int64    `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid"`
	Uid                  int32    `protobuf:"varint,2,opt,name=uid,proto3" json:"uid"`
	Uname                string   `protobuf:"bytes,3,opt,name=uname,proto3" json:"uname,omitempty"`
	UserCover            string   `protobuf:"bytes,4,opt,name=user_cover,json=userCover,proto3" json:"user_cover"`
	Title                string   `protobuf:"bytes,5,opt,name=title,proto3" json:"title"`
	Face                 string   `protobuf:"bytes,6,opt,name=face,proto3" json:"face"`
	Tags                 string   `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags"`
	LiveStatus           int32    `protobuf:"varint,9,opt,name=live_status,json=liveStatus,proto3" json:"live_status"`
	FansNum              int32    `protobuf:"varint,10,opt,name=fans_num,json=fansNum,proto3" json:"fans_num"`
	IsAttention          int32    `protobuf:"varint,12,opt,name=is_attention,json=isAttention,proto3" json:"is_attention"`
	AreaV2Id             int32    `protobuf:"varint,13,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id,omitempty"`
	AreaV2Name           string   `protobuf:"bytes,14,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name"`
	AreaV2ParentName     string   `protobuf:"bytes,15,opt,name=area_v2_parent_name,json=areaV2ParentName,proto3" json:"area_v2_parent_name"`
	AreaV2ParentId       int32    `protobuf:"varint,16,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHistoryResp_List) Reset()         { *m = GetHistoryResp_List{} }
func (m *GetHistoryResp_List) String() string { return proto.CompactTextString(m) }
func (*GetHistoryResp_List) ProtoMessage()    {}
func (*GetHistoryResp_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{1, 0}
}
func (m *GetHistoryResp_List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHistoryResp_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHistoryResp_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetHistoryResp_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHistoryResp_List.Merge(dst, src)
}
func (m *GetHistoryResp_List) XXX_Size() int {
	return m.Size()
}
func (m *GetHistoryResp_List) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHistoryResp_List.DiscardUnknown(m)
}

var xxx_messageInfo_GetHistoryResp_List proto.InternalMessageInfo

func (m *GetHistoryResp_List) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *GetHistoryResp_List) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GetHistoryResp_List) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *GetHistoryResp_List) GetUserCover() string {
	if m != nil {
		return m.UserCover
	}
	return ""
}

func (m *GetHistoryResp_List) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GetHistoryResp_List) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *GetHistoryResp_List) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

func (m *GetHistoryResp_List) GetLiveStatus() int32 {
	if m != nil {
		return m.LiveStatus
	}
	return 0
}

func (m *GetHistoryResp_List) GetFansNum() int32 {
	if m != nil {
		return m.FansNum
	}
	return 0
}

func (m *GetHistoryResp_List) GetIsAttention() int32 {
	if m != nil {
		return m.IsAttention
	}
	return 0
}

func (m *GetHistoryResp_List) GetAreaV2Id() int32 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *GetHistoryResp_List) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *GetHistoryResp_List) GetAreaV2ParentName() string {
	if m != nil {
		return m.AreaV2ParentName
	}
	return ""
}

func (m *GetHistoryResp_List) GetAreaV2ParentId() int32 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

// 删除历史记录参数定义
type DelHistoryReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelHistoryReq) Reset()         { *m = DelHistoryReq{} }
func (m *DelHistoryReq) String() string { return proto.CompactTextString(m) }
func (*DelHistoryReq) ProtoMessage()    {}
func (*DelHistoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{2}
}
func (m *DelHistoryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelHistoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelHistoryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DelHistoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelHistoryReq.Merge(dst, src)
}
func (m *DelHistoryReq) XXX_Size() int {
	return m.Size()
}
func (m *DelHistoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelHistoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelHistoryReq proto.InternalMessageInfo

// 删除直播历史记录响应
type DelHistoryResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelHistoryResp) Reset()         { *m = DelHistoryResp{} }
func (m *DelHistoryResp) String() string { return proto.CompactTextString(m) }
func (*DelHistoryResp) ProtoMessage()    {}
func (*DelHistoryResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{3}
}
func (m *DelHistoryResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelHistoryResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelHistoryResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DelHistoryResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelHistoryResp.Merge(dst, src)
}
func (m *DelHistoryResp) XXX_Size() int {
	return m.Size()
}
func (m *DelHistoryResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DelHistoryResp.DiscardUnknown(m)
}

var xxx_messageInfo_DelHistoryResp proto.InternalMessageInfo

type AnchorTaskAddRewardReq struct {
	// 奖励id, 1:任意门
	RewardId int64 `protobuf:"varint,4,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty" form:"reward_id" validate:"required"`
	// 房间号
	Roomid int64 `protobuf:"varint,8,opt,name=roomid,proto3" json:"roomid,omitempty" form:"roomid" validate:"required"`
	// 来源,1:主播任务,2:小时榜
	Source int64 `protobuf:"varint,9,opt,name=source,proto3" json:"source,omitempty" form:"source" validate:"required"`
	// 主播uid
	Uid int64 `protobuf:"varint,10,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	// 流水单号
	OrderId              string   `protobuf:"bytes,11,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" form:"order_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskAddRewardReq) Reset()         { *m = AnchorTaskAddRewardReq{} }
func (m *AnchorTaskAddRewardReq) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskAddRewardReq) ProtoMessage()    {}
func (*AnchorTaskAddRewardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{4}
}
func (m *AnchorTaskAddRewardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskAddRewardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskAddRewardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskAddRewardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskAddRewardReq.Merge(dst, src)
}
func (m *AnchorTaskAddRewardReq) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskAddRewardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskAddRewardReq.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskAddRewardReq proto.InternalMessageInfo

func (m *AnchorTaskAddRewardReq) GetRewardId() int64 {
	if m != nil {
		return m.RewardId
	}
	return 0
}

func (m *AnchorTaskAddRewardReq) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *AnchorTaskAddRewardReq) GetSource() int64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *AnchorTaskAddRewardReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *AnchorTaskAddRewardReq) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type AnchorTaskAddRewardResp struct {
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskAddRewardResp) Reset()         { *m = AnchorTaskAddRewardResp{} }
func (m *AnchorTaskAddRewardResp) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskAddRewardResp) ProtoMessage()    {}
func (*AnchorTaskAddRewardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{5}
}
func (m *AnchorTaskAddRewardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskAddRewardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskAddRewardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskAddRewardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskAddRewardResp.Merge(dst, src)
}
func (m *AnchorTaskAddRewardResp) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskAddRewardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskAddRewardResp.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskAddRewardResp proto.InternalMessageInfo

func (m *AnchorTaskAddRewardResp) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type AnchorTaskMyRewardReq struct {
	// 页数
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty" form:"page"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskMyRewardReq) Reset()         { *m = AnchorTaskMyRewardReq{} }
func (m *AnchorTaskMyRewardReq) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskMyRewardReq) ProtoMessage()    {}
func (*AnchorTaskMyRewardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{6}
}
func (m *AnchorTaskMyRewardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskMyRewardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskMyRewardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskMyRewardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskMyRewardReq.Merge(dst, src)
}
func (m *AnchorTaskMyRewardReq) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskMyRewardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskMyRewardReq.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskMyRewardReq proto.InternalMessageInfo

func (m *AnchorTaskMyRewardReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

type AnchorTaskMyRewardResp struct {
	//
	Data []*AnchorTaskMyRewardResp_RewardObj `protobuf:"bytes,1,rep,name=data" json:"data"`
	//
	Page *AnchorTaskMyRewardResp_Page `protobuf:"bytes,2,opt,name=page" json:"page"`
	// 过期奖励数量
	ExpireCount          int64    `protobuf:"varint,3,opt,name=expire_count,json=expireCount,proto3" json:"expire_count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskMyRewardResp) Reset()         { *m = AnchorTaskMyRewardResp{} }
func (m *AnchorTaskMyRewardResp) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskMyRewardResp) ProtoMessage()    {}
func (*AnchorTaskMyRewardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{7}
}
func (m *AnchorTaskMyRewardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskMyRewardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskMyRewardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskMyRewardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskMyRewardResp.Merge(dst, src)
}
func (m *AnchorTaskMyRewardResp) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskMyRewardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskMyRewardResp.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskMyRewardResp proto.InternalMessageInfo

func (m *AnchorTaskMyRewardResp) GetData() []*AnchorTaskMyRewardResp_RewardObj {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AnchorTaskMyRewardResp) GetPage() *AnchorTaskMyRewardResp_Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *AnchorTaskMyRewardResp) GetExpireCount() int64 {
	if m != nil {
		return m.ExpireCount
	}
	return 0
}

type AnchorTaskMyRewardResp_RewardObj struct {
	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 奖励类型 1:ss推荐卡 2:s推荐卡、任意门
	RewardType int64 `protobuf:"varint,2,opt,name=reward_type,json=rewardType,proto3" json:"reward_type"`
	// 1:未使用,3:已使用,5:已过期
	Status int64 `protobuf:"varint,3,opt,name=status,proto3" json:"status"`
	// 奖励id
	RewardId int64 `protobuf:"varint,4,opt,name=reward_id,json=rewardId,proto3" json:"reward_id"`
	// 奖励名称
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name"`
	// 奖励图标
	Icon string `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon"`
	// 获得时间datetime
	AchieveTime string `protobuf:"bytes,7,opt,name=achieve_time,json=achieveTime,proto3" json:"achieve_time"`
	// 过期时间datetime
	ExpireTime string `protobuf:"bytes,8,opt,name=expire_time,json=expireTime,proto3" json:"expire_time"`
	// 来源,1:主播任务,2:小时榜
	Source int64 `protobuf:"varint,9,opt,name=source,proto3" json:"source"`
	// 奖励简介
	RewardIntro          string   `protobuf:"bytes,10,opt,name=reward_intro,json=rewardIntro,proto3" json:"reward_intro"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskMyRewardResp_RewardObj) Reset()         { *m = AnchorTaskMyRewardResp_RewardObj{} }
func (m *AnchorTaskMyRewardResp_RewardObj) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskMyRewardResp_RewardObj) ProtoMessage()    {}
func (*AnchorTaskMyRewardResp_RewardObj) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{7, 0}
}
func (m *AnchorTaskMyRewardResp_RewardObj) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskMyRewardResp_RewardObj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskMyRewardResp_RewardObj.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskMyRewardResp_RewardObj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskMyRewardResp_RewardObj.Merge(dst, src)
}
func (m *AnchorTaskMyRewardResp_RewardObj) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskMyRewardResp_RewardObj) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskMyRewardResp_RewardObj.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskMyRewardResp_RewardObj proto.InternalMessageInfo

func (m *AnchorTaskMyRewardResp_RewardObj) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AnchorTaskMyRewardResp_RewardObj) GetRewardType() int64 {
	if m != nil {
		return m.RewardType
	}
	return 0
}

func (m *AnchorTaskMyRewardResp_RewardObj) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *AnchorTaskMyRewardResp_RewardObj) GetRewardId() int64 {
	if m != nil {
		return m.RewardId
	}
	return 0
}

func (m *AnchorTaskMyRewardResp_RewardObj) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AnchorTaskMyRewardResp_RewardObj) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *AnchorTaskMyRewardResp_RewardObj) GetAchieveTime() string {
	if m != nil {
		return m.AchieveTime
	}
	return ""
}

func (m *AnchorTaskMyRewardResp_RewardObj) GetExpireTime() string {
	if m != nil {
		return m.ExpireTime
	}
	return ""
}

func (m *AnchorTaskMyRewardResp_RewardObj) GetSource() int64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *AnchorTaskMyRewardResp_RewardObj) GetRewardIntro() string {
	if m != nil {
		return m.RewardIntro
	}
	return ""
}

type AnchorTaskMyRewardResp_Page struct {
	// 当前页码
	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	// 每页大小
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	// 总页数
	TotalPage int64 `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page"`
	// 总记录数
	TotalCount           int64    `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskMyRewardResp_Page) Reset()         { *m = AnchorTaskMyRewardResp_Page{} }
func (m *AnchorTaskMyRewardResp_Page) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskMyRewardResp_Page) ProtoMessage()    {}
func (*AnchorTaskMyRewardResp_Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{7, 1}
}
func (m *AnchorTaskMyRewardResp_Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskMyRewardResp_Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskMyRewardResp_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskMyRewardResp_Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskMyRewardResp_Page.Merge(dst, src)
}
func (m *AnchorTaskMyRewardResp_Page) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskMyRewardResp_Page) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskMyRewardResp_Page.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskMyRewardResp_Page proto.InternalMessageInfo

func (m *AnchorTaskMyRewardResp_Page) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *AnchorTaskMyRewardResp_Page) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *AnchorTaskMyRewardResp_Page) GetTotalPage() int64 {
	if m != nil {
		return m.TotalPage
	}
	return 0
}

func (m *AnchorTaskMyRewardResp_Page) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type AnchorTaskUseRecordReq struct {
	// 页数
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty" form:"page"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskUseRecordReq) Reset()         { *m = AnchorTaskUseRecordReq{} }
func (m *AnchorTaskUseRecordReq) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskUseRecordReq) ProtoMessage()    {}
func (*AnchorTaskUseRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{8}
}
func (m *AnchorTaskUseRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskUseRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskUseRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskUseRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskUseRecordReq.Merge(dst, src)
}
func (m *AnchorTaskUseRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskUseRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskUseRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskUseRecordReq proto.InternalMessageInfo

func (m *AnchorTaskUseRecordReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

type AnchorTaskUseRecordResp struct {
	//
	Data []*AnchorTaskUseRecordResp_RewardObj `protobuf:"bytes,1,rep,name=data" json:"data"`
	//
	Page                 *AnchorTaskUseRecordResp_Page `protobuf:"bytes,2,opt,name=page" json:"page"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *AnchorTaskUseRecordResp) Reset()         { *m = AnchorTaskUseRecordResp{} }
func (m *AnchorTaskUseRecordResp) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskUseRecordResp) ProtoMessage()    {}
func (*AnchorTaskUseRecordResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{9}
}
func (m *AnchorTaskUseRecordResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskUseRecordResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskUseRecordResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskUseRecordResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskUseRecordResp.Merge(dst, src)
}
func (m *AnchorTaskUseRecordResp) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskUseRecordResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskUseRecordResp.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskUseRecordResp proto.InternalMessageInfo

func (m *AnchorTaskUseRecordResp) GetData() []*AnchorTaskUseRecordResp_RewardObj {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AnchorTaskUseRecordResp) GetPage() *AnchorTaskUseRecordResp_Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type AnchorTaskUseRecordResp_RewardObj struct {
	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 奖励id
	RewardId int64 `protobuf:"varint,2,opt,name=reward_id,json=rewardId,proto3" json:"reward_id"`
	// 1:未使用,3:已使用,5:已过期
	Status int64 `protobuf:"varint,3,opt,name=status,proto3" json:"status"`
	// 奖励名称
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name"`
	// 奖励图标
	Icon string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon"`
	// 获得时间datetime
	AchieveTime string `protobuf:"bytes,6,opt,name=achieve_time,json=achieveTime,proto3" json:"achieve_time"`
	// 过期时间datetime
	ExpireTime string `protobuf:"bytes,7,opt,name=expire_time,json=expireTime,proto3" json:"expire_time"`
	// 来源,1:主播任务,2:小时榜
	Source int64 `protobuf:"varint,8,opt,name=source,proto3" json:"source"`
	// 奖励简介
	RewardIntro string `protobuf:"bytes,9,opt,name=reward_intro,json=rewardIntro,proto3" json:"reward_intro"`
	// 获得时间datetime
	UseTime              string   `protobuf:"bytes,10,opt,name=use_time,json=useTime,proto3" json:"use_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskUseRecordResp_RewardObj) Reset()         { *m = AnchorTaskUseRecordResp_RewardObj{} }
func (m *AnchorTaskUseRecordResp_RewardObj) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskUseRecordResp_RewardObj) ProtoMessage()    {}
func (*AnchorTaskUseRecordResp_RewardObj) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{9, 0}
}
func (m *AnchorTaskUseRecordResp_RewardObj) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskUseRecordResp_RewardObj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskUseRecordResp_RewardObj.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskUseRecordResp_RewardObj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskUseRecordResp_RewardObj.Merge(dst, src)
}
func (m *AnchorTaskUseRecordResp_RewardObj) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskUseRecordResp_RewardObj) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskUseRecordResp_RewardObj.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskUseRecordResp_RewardObj proto.InternalMessageInfo

func (m *AnchorTaskUseRecordResp_RewardObj) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AnchorTaskUseRecordResp_RewardObj) GetRewardId() int64 {
	if m != nil {
		return m.RewardId
	}
	return 0
}

func (m *AnchorTaskUseRecordResp_RewardObj) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *AnchorTaskUseRecordResp_RewardObj) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AnchorTaskUseRecordResp_RewardObj) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *AnchorTaskUseRecordResp_RewardObj) GetAchieveTime() string {
	if m != nil {
		return m.AchieveTime
	}
	return ""
}

func (m *AnchorTaskUseRecordResp_RewardObj) GetExpireTime() string {
	if m != nil {
		return m.ExpireTime
	}
	return ""
}

func (m *AnchorTaskUseRecordResp_RewardObj) GetSource() int64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *AnchorTaskUseRecordResp_RewardObj) GetRewardIntro() string {
	if m != nil {
		return m.RewardIntro
	}
	return ""
}

func (m *AnchorTaskUseRecordResp_RewardObj) GetUseTime() string {
	if m != nil {
		return m.UseTime
	}
	return ""
}

type AnchorTaskUseRecordResp_Page struct {
	// 当前页码
	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	// 每页大小
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	// 总页数
	TotalPage int64 `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page"`
	// 总记录数
	TotalCount           int64    `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskUseRecordResp_Page) Reset()         { *m = AnchorTaskUseRecordResp_Page{} }
func (m *AnchorTaskUseRecordResp_Page) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskUseRecordResp_Page) ProtoMessage()    {}
func (*AnchorTaskUseRecordResp_Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{9, 1}
}
func (m *AnchorTaskUseRecordResp_Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskUseRecordResp_Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskUseRecordResp_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskUseRecordResp_Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskUseRecordResp_Page.Merge(dst, src)
}
func (m *AnchorTaskUseRecordResp_Page) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskUseRecordResp_Page) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskUseRecordResp_Page.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskUseRecordResp_Page proto.InternalMessageInfo

func (m *AnchorTaskUseRecordResp_Page) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *AnchorTaskUseRecordResp_Page) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *AnchorTaskUseRecordResp_Page) GetTotalPage() int64 {
	if m != nil {
		return m.TotalPage
	}
	return 0
}

func (m *AnchorTaskUseRecordResp_Page) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type AnchorTaskUseRewardReq struct {
	// 奖励列表id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required"`
	// 使用平台
	Platform             string   `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty" form:"platform"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskUseRewardReq) Reset()         { *m = AnchorTaskUseRewardReq{} }
func (m *AnchorTaskUseRewardReq) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskUseRewardReq) ProtoMessage()    {}
func (*AnchorTaskUseRewardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{10}
}
func (m *AnchorTaskUseRewardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskUseRewardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskUseRewardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskUseRewardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskUseRewardReq.Merge(dst, src)
}
func (m *AnchorTaskUseRewardReq) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskUseRewardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskUseRewardReq.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskUseRewardReq proto.InternalMessageInfo

func (m *AnchorTaskUseRewardReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AnchorTaskUseRewardReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type AnchorTaskUseRewardResp struct {
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskUseRewardResp) Reset()         { *m = AnchorTaskUseRewardResp{} }
func (m *AnchorTaskUseRewardResp) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskUseRewardResp) ProtoMessage()    {}
func (*AnchorTaskUseRewardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{11}
}
func (m *AnchorTaskUseRewardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskUseRewardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskUseRewardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskUseRewardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskUseRewardResp.Merge(dst, src)
}
func (m *AnchorTaskUseRewardResp) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskUseRewardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskUseRewardResp.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskUseRewardResp proto.InternalMessageInfo

func (m *AnchorTaskUseRewardResp) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type AnchorTaskIsViewedReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskIsViewedReq) Reset()         { *m = AnchorTaskIsViewedReq{} }
func (m *AnchorTaskIsViewedReq) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskIsViewedReq) ProtoMessage()    {}
func (*AnchorTaskIsViewedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{12}
}
func (m *AnchorTaskIsViewedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskIsViewedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskIsViewedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskIsViewedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskIsViewedReq.Merge(dst, src)
}
func (m *AnchorTaskIsViewedReq) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskIsViewedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskIsViewedReq.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskIsViewedReq proto.InternalMessageInfo

type AnchorTaskIsViewedResp struct {
	// 是否展示任务红点
	TaskShouldNotice int64 `protobuf:"varint,1,opt,name=task_should_notice,json=taskShouldNotice,proto3" json:"task_should_notice"`
	// 是否展示奖励入口
	ShowRewardEntry int64 `protobuf:"varint,5,opt,name=show_reward_entry,json=showRewardEntry,proto3" json:"show_reward_entry"`
	// 是否展示奖励红点
	RewardShouldNotice int64 `protobuf:"varint,2,opt,name=reward_should_notice,json=rewardShouldNotice,proto3" json:"reward_should_notice"`
	// 任务状态, 0:没有,1:领取, 5:完成
	TaskStatus int64 `protobuf:"varint,3,opt,name=task_status,json=taskStatus,proto3" json:"task_status"`
	// 是否在首页黑名单中
	IsBlacked int64 `protobuf:"varint,4,opt,name=is_blacked,json=isBlacked,proto3" json:"is_blacked"`
	// 点击跳转h5链接
	Url                  string   `protobuf:"bytes,6,opt,name=url,proto3" json:"url"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskIsViewedResp) Reset()         { *m = AnchorTaskIsViewedResp{} }
func (m *AnchorTaskIsViewedResp) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskIsViewedResp) ProtoMessage()    {}
func (*AnchorTaskIsViewedResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{13}
}
func (m *AnchorTaskIsViewedResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskIsViewedResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskIsViewedResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskIsViewedResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskIsViewedResp.Merge(dst, src)
}
func (m *AnchorTaskIsViewedResp) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskIsViewedResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskIsViewedResp.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskIsViewedResp proto.InternalMessageInfo

func (m *AnchorTaskIsViewedResp) GetTaskShouldNotice() int64 {
	if m != nil {
		return m.TaskShouldNotice
	}
	return 0
}

func (m *AnchorTaskIsViewedResp) GetShowRewardEntry() int64 {
	if m != nil {
		return m.ShowRewardEntry
	}
	return 0
}

func (m *AnchorTaskIsViewedResp) GetRewardShouldNotice() int64 {
	if m != nil {
		return m.RewardShouldNotice
	}
	return 0
}

func (m *AnchorTaskIsViewedResp) GetTaskStatus() int64 {
	if m != nil {
		return m.TaskStatus
	}
	return 0
}

func (m *AnchorTaskIsViewedResp) GetIsBlacked() int64 {
	if m != nil {
		return m.IsBlacked
	}
	return 0
}

func (m *AnchorTaskIsViewedResp) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type CapsuleGetDetailReq struct {
	// 来源 h5 web room
	From                 string   `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty" form:"from"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleGetDetailReq) Reset()         { *m = CapsuleGetDetailReq{} }
func (m *CapsuleGetDetailReq) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetDetailReq) ProtoMessage()    {}
func (*CapsuleGetDetailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{14}
}
func (m *CapsuleGetDetailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetDetailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetDetailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetDetailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetDetailReq.Merge(dst, src)
}
func (m *CapsuleGetDetailReq) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetDetailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetDetailReq.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetDetailReq proto.InternalMessageInfo

func (m *CapsuleGetDetailReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type Usage struct {
	// 用法描述
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text"`
	// 跳转链接
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Usage) Reset()         { *m = Usage{} }
func (m *Usage) String() string { return proto.CompactTextString(m) }
func (*Usage) ProtoMessage()    {}
func (*Usage) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{15}
}
func (m *Usage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Usage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Usage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Usage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Usage.Merge(dst, src)
}
func (m *Usage) XXX_Size() int {
	return m.Size()
}
func (m *Usage) XXX_DiscardUnknown() {
	xxx_messageInfo_Usage.DiscardUnknown(m)
}

var xxx_messageInfo_Usage proto.InternalMessageInfo

func (m *Usage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Usage) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type Progress struct {
	// 当前进度
	Now int64 `protobuf:"varint,1,opt,name=now,proto3" json:"now"`
	// 最大进度
	Max                  int64    `protobuf:"varint,2,opt,name=max,proto3" json:"max"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Progress) Reset()         { *m = Progress{} }
func (m *Progress) String() string { return proto.CompactTextString(m) }
func (*Progress) ProtoMessage()    {}
func (*Progress) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{16}
}
func (m *Progress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Progress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Progress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Progress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Progress.Merge(dst, src)
}
func (m *Progress) XXX_Size() int {
	return m.Size()
}
func (m *Progress) XXX_DiscardUnknown() {
	xxx_messageInfo_Progress.DiscardUnknown(m)
}

var xxx_messageInfo_Progress proto.InternalMessageInfo

func (m *Progress) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func (m *Progress) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

type CapsuleGetDetailResp struct {
	// 普通扭蛋信息
	Normal *CapsuleGetDetailResp_CapsuleInfo `protobuf:"bytes,1,opt,name=normal" json:"normal"`
	// 梦幻扭蛋信息，若梦幻扭蛋status=false，则无coin、change、process、gift、list字段
	Colorful             *CapsuleGetDetailResp_CapsuleInfo `protobuf:"bytes,2,opt,name=colorful" json:"colorful"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *CapsuleGetDetailResp) Reset()         { *m = CapsuleGetDetailResp{} }
func (m *CapsuleGetDetailResp) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetDetailResp) ProtoMessage()    {}
func (*CapsuleGetDetailResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{17}
}
func (m *CapsuleGetDetailResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetDetailResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetDetailResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetDetailResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetDetailResp.Merge(dst, src)
}
func (m *CapsuleGetDetailResp) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetDetailResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetDetailResp.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetDetailResp proto.InternalMessageInfo

func (m *CapsuleGetDetailResp) GetNormal() *CapsuleGetDetailResp_CapsuleInfo {
	if m != nil {
		return m.Normal
	}
	return nil
}

func (m *CapsuleGetDetailResp) GetColorful() *CapsuleGetDetailResp_CapsuleInfo {
	if m != nil {
		return m.Colorful
	}
	return nil
}

type CapsuleGetDetailResp_Gift struct {
	// 礼物名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// 礼物图片
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image"`
	// 用法
	Usage *Usage `protobuf:"bytes,4,opt,name=usage" json:"usage"`
	// web礼物图片
	WebImage string `protobuf:"bytes,5,opt,name=web_image,json=webImage,proto3" json:"web_image"`
	// mobile礼物图片
	MobileImage          string   `protobuf:"bytes,6,opt,name=mobile_image,json=mobileImage,proto3" json:"mobile_image"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleGetDetailResp_Gift) Reset()         { *m = CapsuleGetDetailResp_Gift{} }
func (m *CapsuleGetDetailResp_Gift) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetDetailResp_Gift) ProtoMessage()    {}
func (*CapsuleGetDetailResp_Gift) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{17, 0}
}
func (m *CapsuleGetDetailResp_Gift) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetDetailResp_Gift) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetDetailResp_Gift.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetDetailResp_Gift) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetDetailResp_Gift.Merge(dst, src)
}
func (m *CapsuleGetDetailResp_Gift) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetDetailResp_Gift) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetDetailResp_Gift.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetDetailResp_Gift proto.InternalMessageInfo

func (m *CapsuleGetDetailResp_Gift) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CapsuleGetDetailResp_Gift) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *CapsuleGetDetailResp_Gift) GetUsage() *Usage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *CapsuleGetDetailResp_Gift) GetWebImage() string {
	if m != nil {
		return m.WebImage
	}
	return ""
}

func (m *CapsuleGetDetailResp_Gift) GetMobileImage() string {
	if m != nil {
		return m.MobileImage
	}
	return ""
}

type CapsuleGetDetailResp_List struct {
	// 数量
	Num int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num"`
	// 礼物名称
	Gift string `protobuf:"bytes,2,opt,name=gift,proto3" json:"gift"`
	// 时间
	Date string `protobuf:"bytes,3,opt,name=date,proto3" json:"date"`
	// 用户名
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleGetDetailResp_List) Reset()         { *m = CapsuleGetDetailResp_List{} }
func (m *CapsuleGetDetailResp_List) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetDetailResp_List) ProtoMessage()    {}
func (*CapsuleGetDetailResp_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{17, 1}
}
func (m *CapsuleGetDetailResp_List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetDetailResp_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetDetailResp_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetDetailResp_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetDetailResp_List.Merge(dst, src)
}
func (m *CapsuleGetDetailResp_List) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetDetailResp_List) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetDetailResp_List.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetDetailResp_List proto.InternalMessageInfo

func (m *CapsuleGetDetailResp_List) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *CapsuleGetDetailResp_List) GetGift() string {
	if m != nil {
		return m.Gift
	}
	return ""
}

func (m *CapsuleGetDetailResp_List) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *CapsuleGetDetailResp_List) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CapsuleGetDetailResp_CapsuleInfo struct {
	//
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	// 扭蛋数量
	Coin int64 `protobuf:"varint,2,opt,name=coin,proto3" json:"coin"`
	// 变化值
	Change int64 `protobuf:"varint,3,opt,name=change,proto3" json:"change"`
	// 进度
	Progress *Progress `protobuf:"bytes,4,opt,name=progress" json:"progress"`
	// 规则
	Rule string `protobuf:"bytes,5,opt,name=rule,proto3" json:"rule"`
	// 奖品列表
	Gift []*CapsuleGetDetailResp_Gift `protobuf:"bytes,6,rep,name=gift" json:"gift"`
	// 历史获奖列表
	List                 []*CapsuleGetDetailResp_List `protobuf:"bytes,7,rep,name=list" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CapsuleGetDetailResp_CapsuleInfo) Reset()         { *m = CapsuleGetDetailResp_CapsuleInfo{} }
func (m *CapsuleGetDetailResp_CapsuleInfo) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetDetailResp_CapsuleInfo) ProtoMessage()    {}
func (*CapsuleGetDetailResp_CapsuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{17, 2}
}
func (m *CapsuleGetDetailResp_CapsuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetDetailResp_CapsuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetDetailResp_CapsuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetDetailResp_CapsuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetDetailResp_CapsuleInfo.Merge(dst, src)
}
func (m *CapsuleGetDetailResp_CapsuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetDetailResp_CapsuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetDetailResp_CapsuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetDetailResp_CapsuleInfo proto.InternalMessageInfo

func (m *CapsuleGetDetailResp_CapsuleInfo) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *CapsuleGetDetailResp_CapsuleInfo) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *CapsuleGetDetailResp_CapsuleInfo) GetChange() int64 {
	if m != nil {
		return m.Change
	}
	return 0
}

func (m *CapsuleGetDetailResp_CapsuleInfo) GetProgress() *Progress {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (m *CapsuleGetDetailResp_CapsuleInfo) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *CapsuleGetDetailResp_CapsuleInfo) GetGift() []*CapsuleGetDetailResp_Gift {
	if m != nil {
		return m.Gift
	}
	return nil
}

func (m *CapsuleGetDetailResp_CapsuleInfo) GetList() []*CapsuleGetDetailResp_List {
	if m != nil {
		return m.List
	}
	return nil
}

type CapsuleOpenCapsuleReq struct {
	// 扭蛋类型
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" form:"type" validate:"required"`
	// 扭的个数
	Count                int64    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty" form:"count" validate:"required"`
	Platform             string   `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty" form:"platform"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleOpenCapsuleReq) Reset()         { *m = CapsuleOpenCapsuleReq{} }
func (m *CapsuleOpenCapsuleReq) String() string { return proto.CompactTextString(m) }
func (*CapsuleOpenCapsuleReq) ProtoMessage()    {}
func (*CapsuleOpenCapsuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{18}
}
func (m *CapsuleOpenCapsuleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleOpenCapsuleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleOpenCapsuleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleOpenCapsuleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleOpenCapsuleReq.Merge(dst, src)
}
func (m *CapsuleOpenCapsuleReq) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleOpenCapsuleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleOpenCapsuleReq.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleOpenCapsuleReq proto.InternalMessageInfo

func (m *CapsuleOpenCapsuleReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CapsuleOpenCapsuleReq) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CapsuleOpenCapsuleReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type CapsuleOpenCapsuleResp struct {
	// 扭蛋币扣除状态
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	// 奖品文案
	Text []string `protobuf:"bytes,2,rep,name=text" json:"text"`
	// 是否包含实物奖品
	IsEntity bool `protobuf:"varint,3,opt,name=isEntity,proto3" json:"isEntity"`
	// 用户扭蛋币拥有状态
	Info *CapsuleOpenCapsuleResp_Info `protobuf:"bytes,4,opt,name=info" json:"info"`
	// 头衔? 恒为空字符串, 忽略之
	ShowTitle string `protobuf:"bytes,5,opt,name=showTitle,proto3" json:"showTitle"`
	// 奖品列表
	Awards               []*CapsuleOpenCapsuleResp_Award `protobuf:"bytes,6,rep,name=awards" json:"awards"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CapsuleOpenCapsuleResp) Reset()         { *m = CapsuleOpenCapsuleResp{} }
func (m *CapsuleOpenCapsuleResp) String() string { return proto.CompactTextString(m) }
func (*CapsuleOpenCapsuleResp) ProtoMessage()    {}
func (*CapsuleOpenCapsuleResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{19}
}
func (m *CapsuleOpenCapsuleResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleOpenCapsuleResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleOpenCapsuleResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleOpenCapsuleResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleOpenCapsuleResp.Merge(dst, src)
}
func (m *CapsuleOpenCapsuleResp) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleOpenCapsuleResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleOpenCapsuleResp.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleOpenCapsuleResp proto.InternalMessageInfo

func (m *CapsuleOpenCapsuleResp) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *CapsuleOpenCapsuleResp) GetText() []string {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *CapsuleOpenCapsuleResp) GetIsEntity() bool {
	if m != nil {
		return m.IsEntity
	}
	return false
}

func (m *CapsuleOpenCapsuleResp) GetInfo() *CapsuleOpenCapsuleResp_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *CapsuleOpenCapsuleResp) GetShowTitle() string {
	if m != nil {
		return m.ShowTitle
	}
	return ""
}

func (m *CapsuleOpenCapsuleResp) GetAwards() []*CapsuleOpenCapsuleResp_Award {
	if m != nil {
		return m.Awards
	}
	return nil
}

type CapsuleOpenCapsuleResp_CapsuleInfo struct {
	// 拥有的币
	Coin int64 `protobuf:"varint,1,opt,name=coin,proto3" json:"coin"`
	// 变化值
	Change int64 `protobuf:"varint,2,opt,name=change,proto3" json:"change"`
	// 进度
	Progress             *Progress `protobuf:"bytes,3,opt,name=progress" json:"progress"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CapsuleOpenCapsuleResp_CapsuleInfo) Reset()         { *m = CapsuleOpenCapsuleResp_CapsuleInfo{} }
func (m *CapsuleOpenCapsuleResp_CapsuleInfo) String() string { return proto.CompactTextString(m) }
func (*CapsuleOpenCapsuleResp_CapsuleInfo) ProtoMessage()    {}
func (*CapsuleOpenCapsuleResp_CapsuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{19, 0}
}
func (m *CapsuleOpenCapsuleResp_CapsuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleOpenCapsuleResp_CapsuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleOpenCapsuleResp_CapsuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleOpenCapsuleResp_CapsuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleOpenCapsuleResp_CapsuleInfo.Merge(dst, src)
}
func (m *CapsuleOpenCapsuleResp_CapsuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleOpenCapsuleResp_CapsuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleOpenCapsuleResp_CapsuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleOpenCapsuleResp_CapsuleInfo proto.InternalMessageInfo

func (m *CapsuleOpenCapsuleResp_CapsuleInfo) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *CapsuleOpenCapsuleResp_CapsuleInfo) GetChange() int64 {
	if m != nil {
		return m.Change
	}
	return 0
}

func (m *CapsuleOpenCapsuleResp_CapsuleInfo) GetProgress() *Progress {
	if m != nil {
		return m.Progress
	}
	return nil
}

type CapsuleOpenCapsuleResp_Info struct {
	// 普通扭蛋币
	Normal *CapsuleOpenCapsuleResp_CapsuleInfo `protobuf:"bytes,1,opt,name=normal" json:"normal"`
	// 梦幻扭蛋币
	Colorful             *CapsuleOpenCapsuleResp_CapsuleInfo `protobuf:"bytes,2,opt,name=colorful" json:"colorful"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *CapsuleOpenCapsuleResp_Info) Reset()         { *m = CapsuleOpenCapsuleResp_Info{} }
func (m *CapsuleOpenCapsuleResp_Info) String() string { return proto.CompactTextString(m) }
func (*CapsuleOpenCapsuleResp_Info) ProtoMessage()    {}
func (*CapsuleOpenCapsuleResp_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{19, 1}
}
func (m *CapsuleOpenCapsuleResp_Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleOpenCapsuleResp_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleOpenCapsuleResp_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleOpenCapsuleResp_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleOpenCapsuleResp_Info.Merge(dst, src)
}
func (m *CapsuleOpenCapsuleResp_Info) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleOpenCapsuleResp_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleOpenCapsuleResp_Info.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleOpenCapsuleResp_Info proto.InternalMessageInfo

func (m *CapsuleOpenCapsuleResp_Info) GetNormal() *CapsuleOpenCapsuleResp_CapsuleInfo {
	if m != nil {
		return m.Normal
	}
	return nil
}

func (m *CapsuleOpenCapsuleResp_Info) GetColorful() *CapsuleOpenCapsuleResp_CapsuleInfo {
	if m != nil {
		return m.Colorful
	}
	return nil
}

type CapsuleOpenCapsuleResp_Award struct {
	// 奖品名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// 奖品数量
	Num int64 `protobuf:"varint,3,opt,name=num,proto3" json:"num"`
	// 奖品 X 数量
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text"`
	// 奖品图片
	Img string `protobuf:"bytes,5,opt,name=img,proto3" json:"img"`
	// 奖品用法说明
	Usage *Usage `protobuf:"bytes,6,opt,name=usage" json:"usage"`
	// web礼物图片
	WebImage string `protobuf:"bytes,7,opt,name=web_image,json=webImage,proto3" json:"web_image"`
	// mobile礼物图片
	MobileImage          string   `protobuf:"bytes,8,opt,name=mobile_image,json=mobileImage,proto3" json:"mobile_image"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleOpenCapsuleResp_Award) Reset()         { *m = CapsuleOpenCapsuleResp_Award{} }
func (m *CapsuleOpenCapsuleResp_Award) String() string { return proto.CompactTextString(m) }
func (*CapsuleOpenCapsuleResp_Award) ProtoMessage()    {}
func (*CapsuleOpenCapsuleResp_Award) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{19, 2}
}
func (m *CapsuleOpenCapsuleResp_Award) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleOpenCapsuleResp_Award) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleOpenCapsuleResp_Award.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleOpenCapsuleResp_Award) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleOpenCapsuleResp_Award.Merge(dst, src)
}
func (m *CapsuleOpenCapsuleResp_Award) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleOpenCapsuleResp_Award) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleOpenCapsuleResp_Award.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleOpenCapsuleResp_Award proto.InternalMessageInfo

func (m *CapsuleOpenCapsuleResp_Award) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CapsuleOpenCapsuleResp_Award) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *CapsuleOpenCapsuleResp_Award) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *CapsuleOpenCapsuleResp_Award) GetImg() string {
	if m != nil {
		return m.Img
	}
	return ""
}

func (m *CapsuleOpenCapsuleResp_Award) GetUsage() *Usage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *CapsuleOpenCapsuleResp_Award) GetWebImage() string {
	if m != nil {
		return m.WebImage
	}
	return ""
}

func (m *CapsuleOpenCapsuleResp_Award) GetMobileImage() string {
	if m != nil {
		return m.MobileImage
	}
	return ""
}

type CapsuleGetCapsuleInfoReq struct {
	// 扭蛋类型
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" form:"type" validate:"required"`
	// 来源 h5 web room
	From                 string   `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty" form:"from" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleGetCapsuleInfoReq) Reset()         { *m = CapsuleGetCapsuleInfoReq{} }
func (m *CapsuleGetCapsuleInfoReq) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetCapsuleInfoReq) ProtoMessage()    {}
func (*CapsuleGetCapsuleInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{20}
}
func (m *CapsuleGetCapsuleInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetCapsuleInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetCapsuleInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetCapsuleInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetCapsuleInfoReq.Merge(dst, src)
}
func (m *CapsuleGetCapsuleInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetCapsuleInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetCapsuleInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetCapsuleInfoReq proto.InternalMessageInfo

func (m *CapsuleGetCapsuleInfoReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CapsuleGetCapsuleInfoReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type CapsuleGetCapsuleInfoResp struct {
	// 扭蛋数量
	Coin int64 `protobuf:"varint,1,opt,name=coin,proto3" json:"coin"`
	// 规则
	Rule string `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule"`
	// 奖品列表，包含数量
	GiftList []*CapsuleGetCapsuleInfoResp_GiftList `protobuf:"bytes,3,rep,name=gift_list,json=giftList" json:"gift_list"`
	// 奖品列表，不包含数量，同一类别只有一条
	GiftFilter           []*CapsuleGetCapsuleInfoResp_GiftFilter `protobuf:"bytes,4,rep,name=gift_filter,json=giftFilter" json:"gift_filter"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *CapsuleGetCapsuleInfoResp) Reset()         { *m = CapsuleGetCapsuleInfoResp{} }
func (m *CapsuleGetCapsuleInfoResp) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetCapsuleInfoResp) ProtoMessage()    {}
func (*CapsuleGetCapsuleInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{21}
}
func (m *CapsuleGetCapsuleInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetCapsuleInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetCapsuleInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetCapsuleInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetCapsuleInfoResp.Merge(dst, src)
}
func (m *CapsuleGetCapsuleInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetCapsuleInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetCapsuleInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetCapsuleInfoResp proto.InternalMessageInfo

func (m *CapsuleGetCapsuleInfoResp) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *CapsuleGetCapsuleInfoResp) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *CapsuleGetCapsuleInfoResp) GetGiftList() []*CapsuleGetCapsuleInfoResp_GiftList {
	if m != nil {
		return m.GiftList
	}
	return nil
}

func (m *CapsuleGetCapsuleInfoResp) GetGiftFilter() []*CapsuleGetCapsuleInfoResp_GiftFilter {
	if m != nil {
		return m.GiftFilter
	}
	return nil
}

type CapsuleGetCapsuleInfoResp_GiftList struct {
	// 礼物id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 礼物名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// 礼物数量
	Num int64 `protobuf:"varint,3,opt,name=num,proto3" json:"num"`
	// 礼物图片
	WebUrl string `protobuf:"bytes,5,opt,name=web_url,json=webUrl,proto3" json:"web_url"`
	// 礼物图片
	MobileUrl string `protobuf:"bytes,6,opt,name=mobile_url,json=mobileUrl,proto3" json:"mobile_url"`
	// 用法
	Usage *Usage `protobuf:"bytes,7,opt,name=usage" json:"usage"`
	// 奖品类型 2 头衔
	Type int64 `protobuf:"varint,8,opt,name=type,proto3" json:"type"`
	// 过期时间
	Expire               string   `protobuf:"bytes,9,opt,name=expire,proto3" json:"expire"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) Reset()         { *m = CapsuleGetCapsuleInfoResp_GiftList{} }
func (m *CapsuleGetCapsuleInfoResp_GiftList) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetCapsuleInfoResp_GiftList) ProtoMessage()    {}
func (*CapsuleGetCapsuleInfoResp_GiftList) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{21, 0}
}
func (m *CapsuleGetCapsuleInfoResp_GiftList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetCapsuleInfoResp_GiftList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetCapsuleInfoResp_GiftList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetCapsuleInfoResp_GiftList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetCapsuleInfoResp_GiftList.Merge(dst, src)
}
func (m *CapsuleGetCapsuleInfoResp_GiftList) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetCapsuleInfoResp_GiftList) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetCapsuleInfoResp_GiftList.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetCapsuleInfoResp_GiftList proto.InternalMessageInfo

func (m *CapsuleGetCapsuleInfoResp_GiftList) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) GetWebUrl() string {
	if m != nil {
		return m.WebUrl
	}
	return ""
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) GetMobileUrl() string {
	if m != nil {
		return m.MobileUrl
	}
	return ""
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) GetUsage() *Usage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) GetExpire() string {
	if m != nil {
		return m.Expire
	}
	return ""
}

type CapsuleGetCapsuleInfoResp_GiftFilter struct {
	// 礼物id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 礼物名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// 礼物图片
	WebUrl string `protobuf:"bytes,3,opt,name=web_url,json=webUrl,proto3" json:"web_url"`
	// 礼物图片
	MobileUrl string `protobuf:"bytes,4,opt,name=mobile_url,json=mobileUrl,proto3" json:"mobile_url"`
	// 用法
	Usage                *Usage   `protobuf:"bytes,5,opt,name=usage" json:"usage"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleGetCapsuleInfoResp_GiftFilter) Reset()         { *m = CapsuleGetCapsuleInfoResp_GiftFilter{} }
func (m *CapsuleGetCapsuleInfoResp_GiftFilter) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetCapsuleInfoResp_GiftFilter) ProtoMessage()    {}
func (*CapsuleGetCapsuleInfoResp_GiftFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{21, 1}
}
func (m *CapsuleGetCapsuleInfoResp_GiftFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetCapsuleInfoResp_GiftFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetCapsuleInfoResp_GiftFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetCapsuleInfoResp_GiftFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetCapsuleInfoResp_GiftFilter.Merge(dst, src)
}
func (m *CapsuleGetCapsuleInfoResp_GiftFilter) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetCapsuleInfoResp_GiftFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetCapsuleInfoResp_GiftFilter.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetCapsuleInfoResp_GiftFilter proto.InternalMessageInfo

func (m *CapsuleGetCapsuleInfoResp_GiftFilter) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CapsuleGetCapsuleInfoResp_GiftFilter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CapsuleGetCapsuleInfoResp_GiftFilter) GetWebUrl() string {
	if m != nil {
		return m.WebUrl
	}
	return ""
}

func (m *CapsuleGetCapsuleInfoResp_GiftFilter) GetMobileUrl() string {
	if m != nil {
		return m.MobileUrl
	}
	return ""
}

func (m *CapsuleGetCapsuleInfoResp_GiftFilter) GetUsage() *Usage {
	if m != nil {
		return m.Usage
	}
	return nil
}

type CapsuleOpenCapsuleByTypeReq struct {
	// 扭蛋类型
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" form:"type" validate:"required"`
	// 扭的个数
	Count                int64    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty" form:"count" validate:"required"`
	Platform             string   `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty" form:"platform"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleOpenCapsuleByTypeReq) Reset()         { *m = CapsuleOpenCapsuleByTypeReq{} }
func (m *CapsuleOpenCapsuleByTypeReq) String() string { return proto.CompactTextString(m) }
func (*CapsuleOpenCapsuleByTypeReq) ProtoMessage()    {}
func (*CapsuleOpenCapsuleByTypeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{22}
}
func (m *CapsuleOpenCapsuleByTypeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleOpenCapsuleByTypeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleOpenCapsuleByTypeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleOpenCapsuleByTypeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleOpenCapsuleByTypeReq.Merge(dst, src)
}
func (m *CapsuleOpenCapsuleByTypeReq) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleOpenCapsuleByTypeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleOpenCapsuleByTypeReq.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleOpenCapsuleByTypeReq proto.InternalMessageInfo

func (m *CapsuleOpenCapsuleByTypeReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CapsuleOpenCapsuleByTypeReq) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CapsuleOpenCapsuleByTypeReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type CapsuleOpenCapsuleByTypeResp struct {
	// 扭蛋币扣除状态
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	// 是否包含实物奖品
	IsEntity bool `protobuf:"varint,2,opt,name=isEntity,proto3" json:"isEntity"`
	// 用户扭蛋币拥有状态
	Info *CapsuleOpenCapsuleByTypeResp_CapsuleInfo `protobuf:"bytes,3,opt,name=info" json:"info"`
	// 奖品列表
	Awards []*CapsuleOpenCapsuleByTypeResp_Award `protobuf:"bytes,4,rep,name=awards" json:"awards"`
	// 奖品列表
	Text                 []string `protobuf:"bytes,5,rep,name=text" json:"text"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleOpenCapsuleByTypeResp) Reset()         { *m = CapsuleOpenCapsuleByTypeResp{} }
func (m *CapsuleOpenCapsuleByTypeResp) String() string { return proto.CompactTextString(m) }
func (*CapsuleOpenCapsuleByTypeResp) ProtoMessage()    {}
func (*CapsuleOpenCapsuleByTypeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{23}
}
func (m *CapsuleOpenCapsuleByTypeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleOpenCapsuleByTypeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleOpenCapsuleByTypeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleOpenCapsuleByTypeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleOpenCapsuleByTypeResp.Merge(dst, src)
}
func (m *CapsuleOpenCapsuleByTypeResp) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleOpenCapsuleByTypeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleOpenCapsuleByTypeResp.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleOpenCapsuleByTypeResp proto.InternalMessageInfo

func (m *CapsuleOpenCapsuleByTypeResp) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *CapsuleOpenCapsuleByTypeResp) GetIsEntity() bool {
	if m != nil {
		return m.IsEntity
	}
	return false
}

func (m *CapsuleOpenCapsuleByTypeResp) GetInfo() *CapsuleOpenCapsuleByTypeResp_CapsuleInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *CapsuleOpenCapsuleByTypeResp) GetAwards() []*CapsuleOpenCapsuleByTypeResp_Award {
	if m != nil {
		return m.Awards
	}
	return nil
}

func (m *CapsuleOpenCapsuleByTypeResp) GetText() []string {
	if m != nil {
		return m.Text
	}
	return nil
}

type CapsuleOpenCapsuleByTypeResp_CapsuleInfo struct {
	// 拥有的币
	Coin                 int64    `protobuf:"varint,1,opt,name=coin,proto3" json:"coin"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) Reset() {
	*m = CapsuleOpenCapsuleByTypeResp_CapsuleInfo{}
}
func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) String() string { return proto.CompactTextString(m) }
func (*CapsuleOpenCapsuleByTypeResp_CapsuleInfo) ProtoMessage()    {}
func (*CapsuleOpenCapsuleByTypeResp_CapsuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{23, 0}
}
func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleOpenCapsuleByTypeResp_CapsuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleOpenCapsuleByTypeResp_CapsuleInfo.Merge(dst, src)
}
func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleOpenCapsuleByTypeResp_CapsuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleOpenCapsuleByTypeResp_CapsuleInfo proto.InternalMessageInfo

func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

type CapsuleOpenCapsuleByTypeResp_Award struct {
	// 奖品id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 奖品名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// 奖品数量
	Num int64 `protobuf:"varint,3,opt,name=num,proto3" json:"num"`
	// 奖品 X 数量
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text"`
	// 礼物图片
	WebUrl string `protobuf:"bytes,5,opt,name=web_url,json=webUrl,proto3" json:"web_url"`
	// 礼物图片
	MobileUrl string `protobuf:"bytes,6,opt,name=mobile_url,json=mobileUrl,proto3" json:"mobile_url"`
	// 奖品用法说明
	Usage *Usage `protobuf:"bytes,7,opt,name=usage" json:"usage"`
	// 奖品类型 2 头衔
	Type int64 `protobuf:"varint,8,opt,name=type,proto3" json:"type"`
	// 过期时间
	Expire               string   `protobuf:"bytes,9,opt,name=expire,proto3" json:"expire"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) Reset()         { *m = CapsuleOpenCapsuleByTypeResp_Award{} }
func (m *CapsuleOpenCapsuleByTypeResp_Award) String() string { return proto.CompactTextString(m) }
func (*CapsuleOpenCapsuleByTypeResp_Award) ProtoMessage()    {}
func (*CapsuleOpenCapsuleByTypeResp_Award) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9f54252a761dae68, []int{23, 1}
}
func (m *CapsuleOpenCapsuleByTypeResp_Award) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleOpenCapsuleByTypeResp_Award) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleOpenCapsuleByTypeResp_Award.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleOpenCapsuleByTypeResp_Award) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleOpenCapsuleByTypeResp_Award.Merge(dst, src)
}
func (m *CapsuleOpenCapsuleByTypeResp_Award) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleOpenCapsuleByTypeResp_Award) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleOpenCapsuleByTypeResp_Award.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleOpenCapsuleByTypeResp_Award proto.InternalMessageInfo

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetWebUrl() string {
	if m != nil {
		return m.WebUrl
	}
	return ""
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetMobileUrl() string {
	if m != nil {
		return m.MobileUrl
	}
	return ""
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetUsage() *Usage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetExpire() string {
	if m != nil {
		return m.Expire
	}
	return ""
}

func init() {
	proto.RegisterType((*GetHistoryReq)(nil), "live.webucenter.v1.GetHistoryReq")
	proto.RegisterType((*GetHistoryResp)(nil), "live.webucenter.v1.GetHistoryResp")
	proto.RegisterType((*GetHistoryResp_List)(nil), "live.webucenter.v1.GetHistoryResp.List")
	proto.RegisterType((*DelHistoryReq)(nil), "live.webucenter.v1.DelHistoryReq")
	proto.RegisterType((*DelHistoryResp)(nil), "live.webucenter.v1.DelHistoryResp")
	proto.RegisterType((*AnchorTaskAddRewardReq)(nil), "live.webucenter.v1.AnchorTaskAddRewardReq")
	proto.RegisterType((*AnchorTaskAddRewardResp)(nil), "live.webucenter.v1.AnchorTaskAddRewardResp")
	proto.RegisterType((*AnchorTaskMyRewardReq)(nil), "live.webucenter.v1.AnchorTaskMyRewardReq")
	proto.RegisterType((*AnchorTaskMyRewardResp)(nil), "live.webucenter.v1.AnchorTaskMyRewardResp")
	proto.RegisterType((*AnchorTaskMyRewardResp_RewardObj)(nil), "live.webucenter.v1.AnchorTaskMyRewardResp.RewardObj")
	proto.RegisterType((*AnchorTaskMyRewardResp_Page)(nil), "live.webucenter.v1.AnchorTaskMyRewardResp.Page")
	proto.RegisterType((*AnchorTaskUseRecordReq)(nil), "live.webucenter.v1.AnchorTaskUseRecordReq")
	proto.RegisterType((*AnchorTaskUseRecordResp)(nil), "live.webucenter.v1.AnchorTaskUseRecordResp")
	proto.RegisterType((*AnchorTaskUseRecordResp_RewardObj)(nil), "live.webucenter.v1.AnchorTaskUseRecordResp.RewardObj")
	proto.RegisterType((*AnchorTaskUseRecordResp_Page)(nil), "live.webucenter.v1.AnchorTaskUseRecordResp.Page")
	proto.RegisterType((*AnchorTaskUseRewardReq)(nil), "live.webucenter.v1.AnchorTaskUseRewardReq")
	proto.RegisterType((*AnchorTaskUseRewardResp)(nil), "live.webucenter.v1.AnchorTaskUseRewardResp")
	proto.RegisterType((*AnchorTaskIsViewedReq)(nil), "live.webucenter.v1.AnchorTaskIsViewedReq")
	proto.RegisterType((*AnchorTaskIsViewedResp)(nil), "live.webucenter.v1.AnchorTaskIsViewedResp")
	proto.RegisterType((*CapsuleGetDetailReq)(nil), "live.webucenter.v1.CapsuleGetDetailReq")
	proto.RegisterType((*Usage)(nil), "live.webucenter.v1.Usage")
	proto.RegisterType((*Progress)(nil), "live.webucenter.v1.Progress")
	proto.RegisterType((*CapsuleGetDetailResp)(nil), "live.webucenter.v1.CapsuleGetDetailResp")
	proto.RegisterType((*CapsuleGetDetailResp_Gift)(nil), "live.webucenter.v1.CapsuleGetDetailResp.Gift")
	proto.RegisterType((*CapsuleGetDetailResp_List)(nil), "live.webucenter.v1.CapsuleGetDetailResp.List")
	proto.RegisterType((*CapsuleGetDetailResp_CapsuleInfo)(nil), "live.webucenter.v1.CapsuleGetDetailResp.CapsuleInfo")
	proto.RegisterType((*CapsuleOpenCapsuleReq)(nil), "live.webucenter.v1.CapsuleOpenCapsuleReq")
	proto.RegisterType((*CapsuleOpenCapsuleResp)(nil), "live.webucenter.v1.CapsuleOpenCapsuleResp")
	proto.RegisterType((*CapsuleOpenCapsuleResp_CapsuleInfo)(nil), "live.webucenter.v1.CapsuleOpenCapsuleResp.CapsuleInfo")
	proto.RegisterType((*CapsuleOpenCapsuleResp_Info)(nil), "live.webucenter.v1.CapsuleOpenCapsuleResp.Info")
	proto.RegisterType((*CapsuleOpenCapsuleResp_Award)(nil), "live.webucenter.v1.CapsuleOpenCapsuleResp.Award")
	proto.RegisterType((*CapsuleGetCapsuleInfoReq)(nil), "live.webucenter.v1.CapsuleGetCapsuleInfoReq")
	proto.RegisterType((*CapsuleGetCapsuleInfoResp)(nil), "live.webucenter.v1.CapsuleGetCapsuleInfoResp")
	proto.RegisterType((*CapsuleGetCapsuleInfoResp_GiftList)(nil), "live.webucenter.v1.CapsuleGetCapsuleInfoResp.GiftList")
	proto.RegisterType((*CapsuleGetCapsuleInfoResp_GiftFilter)(nil), "live.webucenter.v1.CapsuleGetCapsuleInfoResp.GiftFilter")
	proto.RegisterType((*CapsuleOpenCapsuleByTypeReq)(nil), "live.webucenter.v1.CapsuleOpenCapsuleByTypeReq")
	proto.RegisterType((*CapsuleOpenCapsuleByTypeResp)(nil), "live.webucenter.v1.CapsuleOpenCapsuleByTypeResp")
	proto.RegisterType((*CapsuleOpenCapsuleByTypeResp_CapsuleInfo)(nil), "live.webucenter.v1.CapsuleOpenCapsuleByTypeResp.CapsuleInfo")
	proto.RegisterType((*CapsuleOpenCapsuleByTypeResp_Award)(nil), "live.webucenter.v1.CapsuleOpenCapsuleByTypeResp.Award")
}
func (m *GetHistoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHistoryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetHistoryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHistoryResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Count != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetHistoryResp_List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHistoryResp_List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Roomid))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Uid))
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if len(m.UserCover) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.UserCover)))
		i += copy(dAtA[i:], m.UserCover)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if len(m.Tags) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Tags)))
		i += copy(dAtA[i:], m.Tags)
	}
	if m.LiveStatus != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintService(dAtA, i, uint64(m.LiveStatus))
	}
	if m.FansNum != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintService(dAtA, i, uint64(m.FansNum))
	}
	if m.IsAttention != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintService(dAtA, i, uint64(m.IsAttention))
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintService(dAtA, i, uint64(m.AreaV2Id))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if len(m.AreaV2ParentName) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.AreaV2ParentName)))
		i += copy(dAtA[i:], m.AreaV2ParentName)
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintService(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DelHistoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelHistoryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DelHistoryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelHistoryResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskAddRewardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskAddRewardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RewardId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintService(dAtA, i, uint64(m.RewardId))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Roomid))
	}
	if m.Source != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Source))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Uid))
	}
	if len(m.OrderId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.OrderId)))
		i += copy(dAtA[i:], m.OrderId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskAddRewardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskAddRewardResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskMyRewardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskMyRewardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Page))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskMyRewardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskMyRewardResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Page != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Page.Size()))
		n1, err := m.Page.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ExpireCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.ExpireCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskMyRewardResp_RewardObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskMyRewardResp_RewardObj) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Id))
	}
	if m.RewardType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.RewardType))
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Status))
	}
	if m.RewardId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintService(dAtA, i, uint64(m.RewardId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if len(m.AchieveTime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.AchieveTime)))
		i += copy(dAtA[i:], m.AchieveTime)
	}
	if len(m.ExpireTime) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ExpireTime)))
		i += copy(dAtA[i:], m.ExpireTime)
	}
	if m.Source != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Source))
	}
	if len(m.RewardIntro) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.RewardIntro)))
		i += copy(dAtA[i:], m.RewardIntro)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskMyRewardResp_Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskMyRewardResp_Page) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Page))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.PageSize))
	}
	if m.TotalPage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.TotalPage))
	}
	if m.TotalCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintService(dAtA, i, uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskUseRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskUseRecordReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Page))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskUseRecordResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskUseRecordResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Page != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Page.Size()))
		n2, err := m.Page.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskUseRecordResp_RewardObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskUseRecordResp_RewardObj) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Id))
	}
	if m.RewardId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.RewardId))
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Status))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if len(m.AchieveTime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.AchieveTime)))
		i += copy(dAtA[i:], m.AchieveTime)
	}
	if len(m.ExpireTime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ExpireTime)))
		i += copy(dAtA[i:], m.ExpireTime)
	}
	if m.Source != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Source))
	}
	if len(m.RewardIntro) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.RewardIntro)))
		i += copy(dAtA[i:], m.RewardIntro)
	}
	if len(m.UseTime) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.UseTime)))
		i += copy(dAtA[i:], m.UseTime)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskUseRecordResp_Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskUseRecordResp_Page) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Page))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.PageSize))
	}
	if m.TotalPage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.TotalPage))
	}
	if m.TotalCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintService(dAtA, i, uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskUseRewardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskUseRewardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Id))
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskUseRewardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskUseRewardResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskIsViewedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskIsViewedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskIsViewedResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskIsViewedResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TaskShouldNotice != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.TaskShouldNotice))
	}
	if m.RewardShouldNotice != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.RewardShouldNotice))
	}
	if m.TaskStatus != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.TaskStatus))
	}
	if m.IsBlacked != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintService(dAtA, i, uint64(m.IsBlacked))
	}
	if m.ShowRewardEntry != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintService(dAtA, i, uint64(m.ShowRewardEntry))
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetDetailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetDetailReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Usage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Usage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Progress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Progress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Now != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Now))
	}
	if m.Max != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Max))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetDetailResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetDetailResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Normal != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Normal.Size()))
		n3, err := m.Normal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Colorful != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Colorful.Size()))
		n4, err := m.Colorful.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetDetailResp_Gift) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetDetailResp_Gift) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.Usage != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Usage.Size()))
		n5, err := m.Usage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.WebImage) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.WebImage)))
		i += copy(dAtA[i:], m.WebImage)
	}
	if len(m.MobileImage) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.MobileImage)))
		i += copy(dAtA[i:], m.MobileImage)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetDetailResp_List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetDetailResp_List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Num))
	}
	if len(m.Gift) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Gift)))
		i += copy(dAtA[i:], m.Gift)
	}
	if len(m.Date) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Date)))
		i += copy(dAtA[i:], m.Date)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetDetailResp_CapsuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetDetailResp_CapsuleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Coin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Coin))
	}
	if m.Change != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Change))
	}
	if m.Progress != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Progress.Size()))
		n6, err := m.Progress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Rule) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Rule)))
		i += copy(dAtA[i:], m.Rule)
	}
	if len(m.Gift) > 0 {
		for _, msg := range m.Gift {
			dAtA[i] = 0x32
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleOpenCapsuleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleOpenCapsuleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Count))
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleOpenCapsuleResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleOpenCapsuleResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Text) > 0 {
		for _, s := range m.Text {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.IsEntity {
		dAtA[i] = 0x18
		i++
		if m.IsEntity {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Info != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Info.Size()))
		n7, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.ShowTitle) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ShowTitle)))
		i += copy(dAtA[i:], m.ShowTitle)
	}
	if len(m.Awards) > 0 {
		for _, msg := range m.Awards {
			dAtA[i] = 0x32
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleOpenCapsuleResp_CapsuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleOpenCapsuleResp_CapsuleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coin != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Coin))
	}
	if m.Change != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Change))
	}
	if m.Progress != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Progress.Size()))
		n8, err := m.Progress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleOpenCapsuleResp_Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleOpenCapsuleResp_Info) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Normal != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Normal.Size()))
		n9, err := m.Normal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Colorful != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Colorful.Size()))
		n10, err := m.Colorful.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleOpenCapsuleResp_Award) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleOpenCapsuleResp_Award) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Num))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.Img) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Img)))
		i += copy(dAtA[i:], m.Img)
	}
	if m.Usage != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Usage.Size()))
		n11, err := m.Usage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.WebImage) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.WebImage)))
		i += copy(dAtA[i:], m.WebImage)
	}
	if len(m.MobileImage) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.MobileImage)))
		i += copy(dAtA[i:], m.MobileImage)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetCapsuleInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetCapsuleInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.From) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetCapsuleInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetCapsuleInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coin != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Coin))
	}
	if len(m.Rule) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Rule)))
		i += copy(dAtA[i:], m.Rule)
	}
	if len(m.GiftList) > 0 {
		for _, msg := range m.GiftList {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GiftFilter) > 0 {
		for _, msg := range m.GiftFilter {
			dAtA[i] = 0x22
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Num))
	}
	if len(m.WebUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.WebUrl)))
		i += copy(dAtA[i:], m.WebUrl)
	}
	if len(m.MobileUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.MobileUrl)))
		i += copy(dAtA[i:], m.MobileUrl)
	}
	if m.Usage != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Usage.Size()))
		n12, err := m.Usage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Type != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Type))
	}
	if len(m.Expire) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Expire)))
		i += copy(dAtA[i:], m.Expire)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetCapsuleInfoResp_GiftFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetCapsuleInfoResp_GiftFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.WebUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.WebUrl)))
		i += copy(dAtA[i:], m.WebUrl)
	}
	if len(m.MobileUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.MobileUrl)))
		i += copy(dAtA[i:], m.MobileUrl)
	}
	if m.Usage != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Usage.Size()))
		n13, err := m.Usage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleOpenCapsuleByTypeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleOpenCapsuleByTypeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Count))
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleOpenCapsuleByTypeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleOpenCapsuleByTypeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsEntity {
		dAtA[i] = 0x10
		i++
		if m.IsEntity {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Info != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Info.Size()))
		n14, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.Awards) > 0 {
		for _, msg := range m.Awards {
			dAtA[i] = 0x22
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Text) > 0 {
		for _, s := range m.Text {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coin != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Coin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Num))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.WebUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.WebUrl)))
		i += copy(dAtA[i:], m.WebUrl)
	}
	if len(m.MobileUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.MobileUrl)))
		i += copy(dAtA[i:], m.MobileUrl)
	}
	if m.Usage != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Usage.Size()))
		n15, err := m.Usage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Type != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Type))
	}
	if len(m.Expire) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Expire)))
		i += copy(dAtA[i:], m.Expire)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetHistoryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetHistoryResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovService(uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetHistoryResp_List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovService(uint64(m.Roomid))
	}
	if m.Uid != 0 {
		n += 1 + sovService(uint64(m.Uid))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.UserCover)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Tags)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.LiveStatus != 0 {
		n += 1 + sovService(uint64(m.LiveStatus))
	}
	if m.FansNum != 0 {
		n += 1 + sovService(uint64(m.FansNum))
	}
	if m.IsAttention != 0 {
		n += 1 + sovService(uint64(m.IsAttention))
	}
	if m.AreaV2Id != 0 {
		n += 1 + sovService(uint64(m.AreaV2Id))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.AreaV2ParentName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.AreaV2ParentId != 0 {
		n += 2 + sovService(uint64(m.AreaV2ParentId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelHistoryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelHistoryResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskAddRewardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardId != 0 {
		n += 1 + sovService(uint64(m.RewardId))
	}
	if m.Roomid != 0 {
		n += 1 + sovService(uint64(m.Roomid))
	}
	if m.Source != 0 {
		n += 1 + sovService(uint64(m.Source))
	}
	if m.Uid != 0 {
		n += 1 + sovService(uint64(m.Uid))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskAddRewardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovService(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskMyRewardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovService(uint64(m.Page))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskMyRewardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.ExpireCount != 0 {
		n += 1 + sovService(uint64(m.ExpireCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskMyRewardResp_RewardObj) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovService(uint64(m.Id))
	}
	if m.RewardType != 0 {
		n += 1 + sovService(uint64(m.RewardType))
	}
	if m.Status != 0 {
		n += 1 + sovService(uint64(m.Status))
	}
	if m.RewardId != 0 {
		n += 1 + sovService(uint64(m.RewardId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.AchieveTime)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ExpireTime)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Source != 0 {
		n += 1 + sovService(uint64(m.Source))
	}
	l = len(m.RewardIntro)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskMyRewardResp_Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovService(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovService(uint64(m.PageSize))
	}
	if m.TotalPage != 0 {
		n += 1 + sovService(uint64(m.TotalPage))
	}
	if m.TotalCount != 0 {
		n += 1 + sovService(uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskUseRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovService(uint64(m.Page))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskUseRecordResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskUseRecordResp_RewardObj) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovService(uint64(m.Id))
	}
	if m.RewardId != 0 {
		n += 1 + sovService(uint64(m.RewardId))
	}
	if m.Status != 0 {
		n += 1 + sovService(uint64(m.Status))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.AchieveTime)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ExpireTime)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Source != 0 {
		n += 1 + sovService(uint64(m.Source))
	}
	l = len(m.RewardIntro)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.UseTime)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskUseRecordResp_Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovService(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovService(uint64(m.PageSize))
	}
	if m.TotalPage != 0 {
		n += 1 + sovService(uint64(m.TotalPage))
	}
	if m.TotalCount != 0 {
		n += 1 + sovService(uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskUseRewardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovService(uint64(m.Id))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskUseRewardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovService(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskIsViewedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskIsViewedResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskShouldNotice != 0 {
		n += 1 + sovService(uint64(m.TaskShouldNotice))
	}
	if m.RewardShouldNotice != 0 {
		n += 1 + sovService(uint64(m.RewardShouldNotice))
	}
	if m.TaskStatus != 0 {
		n += 1 + sovService(uint64(m.TaskStatus))
	}
	if m.IsBlacked != 0 {
		n += 1 + sovService(uint64(m.IsBlacked))
	}
	if m.ShowRewardEntry != 0 {
		n += 1 + sovService(uint64(m.ShowRewardEntry))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetDetailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Usage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Progress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Now != 0 {
		n += 1 + sovService(uint64(m.Now))
	}
	if m.Max != 0 {
		n += 1 + sovService(uint64(m.Max))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetDetailResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Normal != nil {
		l = m.Normal.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Colorful != nil {
		l = m.Colorful.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetDetailResp_Gift) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.WebImage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.MobileImage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetDetailResp_List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovService(uint64(m.Num))
	}
	l = len(m.Gift)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetDetailResp_CapsuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.Coin != 0 {
		n += 1 + sovService(uint64(m.Coin))
	}
	if m.Change != 0 {
		n += 1 + sovService(uint64(m.Change))
	}
	if m.Progress != nil {
		l = m.Progress.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Rule)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Gift) > 0 {
		for _, e := range m.Gift {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleOpenCapsuleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovService(uint64(m.Count))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleOpenCapsuleResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if len(m.Text) > 0 {
		for _, s := range m.Text {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.IsEntity {
		n += 2
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ShowTitle)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Awards) > 0 {
		for _, e := range m.Awards {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleOpenCapsuleResp_CapsuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coin != 0 {
		n += 1 + sovService(uint64(m.Coin))
	}
	if m.Change != 0 {
		n += 1 + sovService(uint64(m.Change))
	}
	if m.Progress != nil {
		l = m.Progress.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleOpenCapsuleResp_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Normal != nil {
		l = m.Normal.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Colorful != nil {
		l = m.Colorful.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleOpenCapsuleResp_Award) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovService(uint64(m.Num))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Img)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.WebImage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.MobileImage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetCapsuleInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetCapsuleInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coin != 0 {
		n += 1 + sovService(uint64(m.Coin))
	}
	l = len(m.Rule)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.GiftList) > 0 {
		for _, e := range m.GiftList {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.GiftFilter) > 0 {
		for _, e := range m.GiftFilter {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovService(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovService(uint64(m.Num))
	}
	l = len(m.WebUrl)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.MobileUrl)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovService(uint64(m.Type))
	}
	l = len(m.Expire)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetCapsuleInfoResp_GiftFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovService(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.WebUrl)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.MobileUrl)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleOpenCapsuleByTypeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovService(uint64(m.Count))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleOpenCapsuleByTypeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.IsEntity {
		n += 2
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Awards) > 0 {
		for _, e := range m.Awards {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.Text) > 0 {
		for _, s := range m.Text {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coin != 0 {
		n += 1 + sovService(uint64(m.Coin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovService(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovService(uint64(m.Num))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.WebUrl)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.MobileUrl)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovService(uint64(m.Type))
	}
	l = len(m.Expire)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetHistoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHistoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHistoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHistoryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHistoryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHistoryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &GetHistoryResp_List{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHistoryResp_List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStatus", wireType)
			}
			m.LiveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FansNum", wireType)
			}
			m.FansNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FansNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAttention", wireType)
			}
			m.IsAttention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAttention |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2ParentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelHistoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelHistoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelHistoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelHistoryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelHistoryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelHistoryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskAddRewardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskAddRewardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskAddRewardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			m.RewardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskAddRewardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskAddRewardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskAddRewardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskMyRewardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskMyRewardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskMyRewardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskMyRewardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskMyRewardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskMyRewardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &AnchorTaskMyRewardResp_RewardObj{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &AnchorTaskMyRewardResp_Page{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireCount", wireType)
			}
			m.ExpireCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskMyRewardResp_RewardObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardType", wireType)
			}
			m.RewardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			m.RewardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchieveTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AchieveTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpireTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardIntro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardIntro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskMyRewardResp_Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPage", wireType)
			}
			m.TotalPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskUseRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskUseRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskUseRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskUseRecordResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskUseRecordResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskUseRecordResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &AnchorTaskUseRecordResp_RewardObj{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &AnchorTaskUseRecordResp_Page{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskUseRecordResp_RewardObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			m.RewardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchieveTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AchieveTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpireTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardIntro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardIntro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UseTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskUseRecordResp_Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPage", wireType)
			}
			m.TotalPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskUseRewardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskUseRewardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskUseRewardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskUseRewardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskUseRewardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskUseRewardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskIsViewedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskIsViewedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskIsViewedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskIsViewedResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskIsViewedResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskIsViewedResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskShouldNotice", wireType)
			}
			m.TaskShouldNotice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskShouldNotice |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardShouldNotice", wireType)
			}
			m.RewardShouldNotice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardShouldNotice |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskStatus", wireType)
			}
			m.TaskStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBlacked", wireType)
			}
			m.IsBlacked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsBlacked |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowRewardEntry", wireType)
			}
			m.ShowRewardEntry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowRewardEntry |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetDetailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleGetDetailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleGetDetailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Usage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Usage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Usage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Progress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Progress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Progress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			m.Now = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Now |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetDetailResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleGetDetailResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleGetDetailResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Normal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Normal == nil {
				m.Normal = &CapsuleGetDetailResp_CapsuleInfo{}
			}
			if err := m.Normal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Colorful", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Colorful == nil {
				m.Colorful = &CapsuleGetDetailResp_CapsuleInfo{}
			}
			if err := m.Colorful.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetDetailResp_Gift) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gift: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gift: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &Usage{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobileImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetDetailResp_List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gift", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gift = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetDetailResp_CapsuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Change", wireType)
			}
			m.Change = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Change |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Progress == nil {
				m.Progress = &Progress{}
			}
			if err := m.Progress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gift", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gift = append(m.Gift, &CapsuleGetDetailResp_Gift{})
			if err := m.Gift[len(m.Gift)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &CapsuleGetDetailResp_List{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleOpenCapsuleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleOpenCapsuleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleOpenCapsuleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleOpenCapsuleResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleOpenCapsuleResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleOpenCapsuleResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = append(m.Text, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEntity", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEntity = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &CapsuleOpenCapsuleResp_Info{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShowTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Awards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Awards = append(m.Awards, &CapsuleOpenCapsuleResp_Award{})
			if err := m.Awards[len(m.Awards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleOpenCapsuleResp_CapsuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Change", wireType)
			}
			m.Change = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Change |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Progress == nil {
				m.Progress = &Progress{}
			}
			if err := m.Progress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleOpenCapsuleResp_Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Normal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Normal == nil {
				m.Normal = &CapsuleOpenCapsuleResp_CapsuleInfo{}
			}
			if err := m.Normal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Colorful", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Colorful == nil {
				m.Colorful = &CapsuleOpenCapsuleResp_CapsuleInfo{}
			}
			if err := m.Colorful.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleOpenCapsuleResp_Award) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Award: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Award: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Img", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Img = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &Usage{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobileImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetCapsuleInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleGetCapsuleInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleGetCapsuleInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetCapsuleInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleGetCapsuleInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleGetCapsuleInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiftList = append(m.GiftList, &CapsuleGetCapsuleInfoResp_GiftList{})
			if err := m.GiftList[len(m.GiftList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiftFilter = append(m.GiftFilter, &CapsuleGetCapsuleInfoResp_GiftFilter{})
			if err := m.GiftFilter[len(m.GiftFilter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetCapsuleInfoResp_GiftList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobileUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &Usage{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expire = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetCapsuleInfoResp_GiftFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobileUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &Usage{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleOpenCapsuleByTypeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleOpenCapsuleByTypeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleOpenCapsuleByTypeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleOpenCapsuleByTypeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleOpenCapsuleByTypeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleOpenCapsuleByTypeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEntity", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEntity = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &CapsuleOpenCapsuleByTypeResp_CapsuleInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Awards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Awards = append(m.Awards, &CapsuleOpenCapsuleByTypeResp_Award{})
			if err := m.Awards[len(m.Awards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = append(m.Text, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleOpenCapsuleByTypeResp_Award) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Award: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Award: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobileUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &Usage{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expire = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_9f54252a761dae68) }

var fileDescriptor_service_9f54252a761dae68 = []byte{
	// 2466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0xcb, 0x6f, 0x1c, 0xc7,
	0xd1, 0xc7, 0xbe, 0x67, 0x6b, 0x29, 0x91, 0x6e, 0xbd, 0x56, 0xfb, 0xf1, 0xd3, 0x50, 0x23, 0x05,
	0xa2, 0xa5, 0x88, 0x94, 0x28, 0xc7, 0x0e, 0x04, 0x0b, 0xb0, 0xa8, 0x57, 0x18, 0xc7, 0xb2, 0xd0,
	0xa2, 0x8c, 0x40, 0x01, 0x32, 0x99, 0xdd, 0xe9, 0x5d, 0x8e, 0x35, 0x3b, 0xb3, 0x9c, 0x07, 0x29,
	0x3a, 0x39, 0xe6, 0x98, 0x5c, 0x93, 0x5c, 0x73, 0xcb, 0xc9, 0x40, 0xce, 0xb1, 0x4f, 0xc9, 0xc1,
	0xb9, 0x19, 0xc8, 0x21, 0x39, 0x0d, 0x02, 0xdd, 0xb2, 0x47, 0xe6, 0x1f, 0x08, 0xba, 0xba, 0xe7,
	0xb1, 0xe4, 0x2c, 0x39, 0x4b, 0xe7, 0xe2, 0x5c, 0x7a, 0xba, 0xab, 0xbb, 0xaa, 0x1f, 0x55, 0xbf,
	0xaa, 0xea, 0xed, 0x85, 0x53, 0x3e, 0xf3, 0x76, 0xac, 0x1e, 0x5b, 0x19, 0x79, 0x6e, 0xe0, 0x12,
	0x62, 0x5b, 0x3b, 0x6c, 0x65, 0x97, 0x75, 0xc3, 0x1e, 0x73, 0x02, 0xe6, 0xad, 0xec, 0xdc, 0xee,
	0xdc, 0x1c, 0x58, 0xc1, 0x56, 0xd8, 0x5d, 0xe9, 0xb9, 0xc3, 0xd5, 0x81, 0x3b, 0x70, 0x57, 0x71,
	0x68, 0x37, 0xec, 0x63, 0x0b, 0x1b, 0x58, 0x13, 0x22, 0xb4, 0x79, 0x38, 0xf5, 0x84, 0x05, 0x3f,
	0xb0, 0xfc, 0xc0, 0xf5, 0xf6, 0x28, 0xdb, 0xd6, 0xfe, 0x51, 0x83, 0xd3, 0x59, 0x8a, 0x3f, 0x22,
	0x2a, 0xd4, 0x02, 0x2b, 0xb0, 0x59, 0xbb, 0xb4, 0x54, 0x5a, 0x6e, 0xae, 0x37, 0xc7, 0x91, 0x2a,
	0x08, 0x54, 0x7c, 0xf8, 0x80, 0x9e, 0x1b, 0x3a, 0x41, 0xbb, 0xba, 0x54, 0x5a, 0xae, 0x89, 0x01,
	0x48, 0xa0, 0xe2, 0x43, 0x1e, 0x41, 0xd5, 0xb6, 0xfc, 0xa0, 0x5d, 0x5b, 0xaa, 0x2c, 0xb7, 0xd6,
	0xae, 0xad, 0x1c, 0x5e, 0xf7, 0xca, 0xe4, 0x9c, 0x2b, 0x3f, 0xb2, 0xfc, 0x60, 0x5d, 0x19, 0x47,
	0x2a, 0x32, 0x52, 0x2c, 0x3b, 0x5f, 0x54, 0xa1, 0xca, 0x3b, 0x88, 0x06, 0x75, 0xcf, 0x75, 0x87,
	0x96, 0x89, 0x4b, 0xaa, 0xac, 0xc3, 0x38, 0x52, 0x25, 0x85, 0xca, 0x2f, 0xb9, 0x08, 0x95, 0xd0,
	0x32, 0xdb, 0x65, 0x5c, 0x52, 0x63, 0x1c, 0xa9, 0xbc, 0x49, 0x79, 0x41, 0xce, 0x42, 0x2d, 0x74,
	0x8c, 0x21, 0x6b, 0x57, 0xf8, 0x86, 0xa8, 0x68, 0x90, 0x9b, 0x00, 0xa1, 0xcf, 0x3c, 0xbd, 0xe7,
	0xee, 0x30, 0x0f, 0xb7, 0xd2, 0x5c, 0x3f, 0x3d, 0x8e, 0xd4, 0x0c, 0x95, 0x36, 0x79, 0xfd, 0x01,
	0xaf, 0xa6, 0xa7, 0x52, 0x9b, 0x72, 0x2a, 0x8b, 0x50, 0xed, 0x1b, 0x3d, 0xd6, 0xae, 0x63, 0x3f,
	0xee, 0x85, 0xb7, 0x29, 0x96, 0xbc, 0x37, 0x30, 0x06, 0x7e, 0xbb, 0x91, 0xf6, 0xf2, 0x36, 0xc5,
	0x92, 0xdc, 0x82, 0x16, 0x3f, 0x23, 0xdd, 0x0f, 0x8c, 0x20, 0xf4, 0xdb, 0x4d, 0xdc, 0xc4, 0xfc,
	0x38, 0x52, 0xb3, 0x64, 0x0a, 0xbc, 0xf1, 0x1c, 0xeb, 0xe4, 0x1a, 0x28, 0x7d, 0xc3, 0xf1, 0x75,
	0x27, 0x1c, 0xb6, 0x01, 0x87, 0xcf, 0x8d, 0x23, 0x35, 0xa1, 0xd1, 0x06, 0xaf, 0x3d, 0x0d, 0x87,
	0xe4, 0x0e, 0xcc, 0x59, 0xbe, 0x6e, 0x04, 0x01, 0x73, 0x02, 0xcb, 0x75, 0xda, 0x73, 0x38, 0x78,
	0x61, 0x1c, 0xa9, 0x13, 0x74, 0xda, 0xb2, 0xfc, 0xfb, 0x71, 0x83, 0x2c, 0x02, 0x18, 0x1e, 0x33,
	0xf4, 0x9d, 0x35, 0xdd, 0x32, 0xdb, 0xa7, 0x38, 0x0b, 0x55, 0x38, 0xe5, 0x93, 0xb5, 0x0d, 0x93,
	0xac, 0xc1, 0x5c, 0xdc, 0x8b, 0xc7, 0x7a, 0x1a, 0xf7, 0x84, 0x22, 0xb3, 0x74, 0x0a, 0x82, 0xe3,
	0x29, 0x3f, 0xed, 0xc7, 0x70, 0x26, 0xee, 0x1b, 0x19, 0x1e, 0x73, 0x02, 0xc1, 0x3a, 0x8f, 0xac,
	0x17, 0xc6, 0x91, 0x9a, 0xd7, 0x4d, 0x17, 0x84, 0x84, 0x67, 0x48, 0x42, 0x39, 0x6f, 0xc3, 0x5b,
	0x07, 0x06, 0x5a, 0x66, 0x7b, 0x01, 0x17, 0x78, 0x3a, 0x3b, 0x78, 0xc3, 0xe4, 0xb6, 0xfe, 0x90,
	0xd9, 0x19, 0x5b, 0x5f, 0x80, 0xd3, 0x59, 0x82, 0x3f, 0xd2, 0xfe, 0x5e, 0x86, 0xf3, 0xf7, 0x9d,
	0xde, 0x96, 0xeb, 0x6d, 0x1a, 0xfe, 0xab, 0xfb, 0xa6, 0x49, 0xd9, 0xae, 0xe1, 0x99, 0x94, 0x6d,
	0x93, 0x47, 0xd0, 0xf4, 0xb0, 0xc1, 0x27, 0xa8, 0xa2, 0xd9, 0x2d, 0xef, 0x47, 0xea, 0xd5, 0xbe,
	0xeb, 0x0d, 0xef, 0x6a, 0x49, 0x97, 0xb6, 0xb4, 0x63, 0xd8, 0x96, 0x69, 0x04, 0x8c, 0x13, 0xb7,
	0x43, 0xcb, 0x63, 0xa6, 0x46, 0x15, 0xd1, 0xbf, 0x61, 0x92, 0x7b, 0x89, 0xe9, 0x2a, 0x28, 0xe3,
	0x3b, 0xfb, 0x91, 0x7a, 0x59, 0xca, 0x40, 0x7a, 0xbe, 0x80, 0xd8, 0xaa, 0xef, 0x41, 0xdd, 0x77,
	0x43, 0xaf, 0xc7, 0xd0, 0x26, 0x26, 0xd8, 0x05, 0x7d, 0x0a, 0xbb, 0xe8, 0x24, 0xef, 0x08, 0x50,
	0x00, 0xf2, 0x6a, 0xfb, 0x91, 0x7a, 0x49, 0xf0, 0x86, 0xd3, 0xe6, 0x45, 0xbc, 0xac, 0x83, 0xe2,
	0x7a, 0x26, 0xf3, 0xf8, 0xce, 0x5b, 0xa8, 0xa0, 0x6b, 0xfb, 0x91, 0x7a, 0x45, 0xb0, 0xc6, 0x3d,
	0xf9, 0xfc, 0x0d, 0xec, 0xde, 0x30, 0xb5, 0x7b, 0x70, 0x21, 0xf7, 0x60, 0xfd, 0x11, 0xa2, 0x99,
	0xf9, 0xa1, 0x1d, 0x4c, 0xa0, 0x19, 0x29, 0x54, 0x7e, 0xb5, 0xf7, 0xe1, 0x5c, 0xca, 0xfe, 0xd1,
	0x5e, 0xaa, 0x96, 0x2b, 0x50, 0x1d, 0x19, 0x03, 0x26, 0x59, 0xe7, 0xf7, 0x23, 0xb5, 0x25, 0xd6,
	0xc5, 0xa9, 0x1a, 0xc5, 0x4e, 0xed, 0xab, 0x7a, 0x56, 0xad, 0x29, 0xbb, 0x3f, 0x22, 0x14, 0xaa,
	0xa6, 0x11, 0x18, 0xed, 0x12, 0xba, 0xa6, 0x77, 0xf2, 0x5c, 0x53, 0x3e, 0xe7, 0x8a, 0xa8, 0x7e,
	0xdc, 0xfd, 0x54, 0xa0, 0x97, 0x4b, 0xa1, 0x58, 0x92, 0x8f, 0xe4, 0x9a, 0xb8, 0xef, 0x69, 0xad,
	0xad, 0xce, 0x20, 0xf3, 0x99, 0x31, 0x60, 0x42, 0x1c, 0x17, 0x20, 0x56, 0xcf, 0x11, 0xcb, 0x5e,
	0x8f, 0x2c, 0x8f, 0xe9, 0xc2, 0xcb, 0x56, 0x70, 0xab, 0x08, 0xaf, 0x2c, 0x9d, 0xb6, 0x44, 0xeb,
	0x01, 0x6f, 0x74, 0x7e, 0x5f, 0x81, 0x66, 0xb2, 0x42, 0x72, 0x1e, 0xca, 0x89, 0xb3, 0xac, 0x8f,
	0x23, 0xb5, 0x6c, 0x99, 0xb4, 0x6c, 0x99, 0xdc, 0xcf, 0x48, 0xcb, 0x0d, 0xf6, 0x46, 0x62, 0xc1,
	0x15, 0xe1, 0x67, 0x32, 0x64, 0x0a, 0xa2, 0xb1, 0xb9, 0x37, 0x62, 0x5c, 0x59, 0xd2, 0x29, 0x55,
	0x52, 0x65, 0x49, 0x7f, 0x24, 0xbf, 0xe4, 0xfa, 0x61, 0xa8, 0x9c, 0x1a, 0x47, 0x6a, 0x4a, 0xcc,
	0xe0, 0x61, 0x11, 0xaa, 0x08, 0xfc, 0x5a, 0xea, 0x07, 0x11, 0xe9, 0x58, 0xf2, 0x5e, 0xab, 0xe7,
	0x3a, 0x59, 0x1f, 0xca, 0xdb, 0x14, 0x4b, 0x7e, 0x30, 0x46, 0x6f, 0xcb, 0x62, 0x3b, 0x4c, 0x0f,
	0xac, 0x21, 0x93, 0xbe, 0x54, 0xf8, 0x9d, 0x0c, 0x9d, 0xb6, 0x64, 0x6b, 0xd3, 0x1a, 0x32, 0xbe,
	0x65, 0x79, 0x6a, 0xc8, 0xa3, 0x20, 0x0f, 0x6e, 0x39, 0x43, 0xa6, 0x20, 0x1a, 0xc8, 0xa1, 0x1d,
	0xc0, 0x9c, 0xd8, 0x32, 0x52, 0x12, 0x60, 0xdd, 0x81, 0xb9, 0x78, 0x77, 0x4e, 0xe0, 0xb9, 0x88,
	0x30, 0xb9, 0x94, 0x2c, 0x9d, 0xca, 0x73, 0xdd, 0xe0, 0x8d, 0xce, 0x1f, 0x4b, 0x50, 0xe5, 0x1a,
	0xe7, 0xdb, 0xcc, 0x18, 0xf1, 0x41, 0xfd, 0x5f, 0x87, 0x26, 0xff, 0xea, 0xbe, 0xf5, 0x59, 0xac,
	0x22, 0x3c, 0xce, 0x84, 0x48, 0x15, 0x5e, 0x7d, 0x6e, 0x7d, 0x86, 0x41, 0x2c, 0x70, 0x03, 0xc3,
	0xd6, 0x51, 0x9e, 0x50, 0x11, 0x06, 0xb1, 0x94, 0x4a, 0x9b, 0x58, 0xc7, 0x89, 0x6f, 0x41, 0x4b,
	0x74, 0xa4, 0xf1, 0x5b, 0xea, 0x3f, 0x43, 0xa6, 0x82, 0x19, 0xed, 0x4a, 0xbb, 0x97, 0x45, 0xd2,
	0x0b, 0x9f, 0x51, 0xd6, 0x73, 0x67, 0x40, 0xe2, 0xaf, 0xeb, 0x59, 0x3f, 0x90, 0xe1, 0xf7, 0x47,
	0xe4, 0xf9, 0x04, 0x14, 0xbf, 0x77, 0x34, 0x6c, 0x26, 0x58, 0x8f, 0xc0, 0xe2, 0xd3, 0x09, 0x2c,
	0xde, 0x9a, 0x45, 0x68, 0x1e, 0x18, 0x3b, 0xbf, 0x2b, 0x84, 0xab, 0x09, 0x04, 0x94, 0x8f, 0x46,
	0x40, 0x11, 0x44, 0xc5, 0x28, 0xa9, 0x1e, 0x89, 0x92, 0x5a, 0x21, 0x94, 0xd4, 0x4f, 0x80, 0x92,
	0xc6, 0x2c, 0x28, 0x51, 0x0a, 0xa3, 0xa4, 0x59, 0x00, 0x25, 0x3c, 0xb3, 0x09, 0x7d, 0xb9, 0x0e,
	0x01, 0x2b, 0xcc, 0x6c, 0x62, 0x1a, 0x6d, 0x84, 0x3e, 0xae, 0xe0, 0x5b, 0x09, 0xa7, 0x5f, 0x1c,
	0x82, 0x53, 0x1c, 0xd8, 0x6e, 0x67, 0x4c, 0xeb, 0xf2, 0x7e, 0xa4, 0xfe, 0xbf, 0x00, 0xd3, 0xb4,
	0x40, 0xcb, 0xad, 0x6e, 0x15, 0x94, 0x91, 0x6d, 0x04, 0x7c, 0x20, 0x6e, 0xac, 0xb9, 0x7e, 0x66,
	0x3f, 0x52, 0xe7, 0x25, 0x0a, 0x65, 0x8f, 0x46, 0x93, 0x41, 0x93, 0x41, 0x39, 0x33, 0x7b, 0xc1,
	0xa0, 0x7c, 0x21, 0x1b, 0x94, 0x37, 0xfc, 0x4f, 0x2c, 0xb6, 0xcb, 0xf8, 0xda, 0xb5, 0x7f, 0x4d,
	0xa4, 0x51, 0x69, 0x8f, 0x3f, 0x22, 0x0f, 0x81, 0x04, 0x86, 0xff, 0x4a, 0xf7, 0xb7, 0xdc, 0xd0,
	0x36, 0x75, 0xc7, 0x0d, 0xac, 0x5e, 0xac, 0xa9, 0xf3, 0xe3, 0x48, 0xcd, 0xe9, 0xa5, 0x0b, 0x9c,
	0xf6, 0x1c, 0x49, 0x4f, 0x91, 0x42, 0x7e, 0x08, 0x67, 0xa5, 0xc1, 0x4c, 0xca, 0x11, 0xea, 0x6c,
	0x8f, 0x23, 0x35, 0xb7, 0x9f, 0x12, 0x41, 0x9d, 0x90, 0xc5, 0x95, 0x86, 0x73, 0x66, 0x41, 0x28,
	0x94, 0x96, 0x92, 0x29, 0xe0, 0x1a, 0x04, 0x1a, 0x6f, 0x02, 0x58, 0xbe, 0xde, 0xb5, 0x8d, 0xde,
	0x2b, 0x16, 0x07, 0x38, 0xb4, 0x8a, 0x94, 0x4a, 0x9b, 0x96, 0xbf, 0x2e, 0xaa, 0xe4, 0x3e, 0xbc,
	0xe5, 0x6f, 0xb9, 0xbb, 0xba, 0x5c, 0x11, 0x73, 0x02, 0x6f, 0x0f, 0xb1, 0x5a, 0x59, 0x3f, 0x37,
	0x8e, 0xd4, 0xc3, 0x9d, 0x74, 0x9e, 0x93, 0x84, 0x32, 0x1e, 0x71, 0x02, 0x5e, 0x66, 0x3c, 0x5b,
	0x42, 0x57, 0x5c, 0x66, 0x3c, 0x9b, 0xf2, 0x42, 0xbb, 0x0b, 0x67, 0x1e, 0x18, 0x23, 0x3f, 0xb4,
	0xd9, 0x13, 0x16, 0x3c, 0x64, 0x81, 0x61, 0xd9, 0xd2, 0x1b, 0xf7, 0x3d, 0x37, 0xb6, 0x83, 0x8c,
	0x37, 0xe6, 0x54, 0x8d, 0x62, 0xa7, 0xf6, 0x01, 0xd4, 0x5e, 0xf8, 0x12, 0x31, 0x01, 0x7b, 0x1d,
	0xc8, 0x1b, 0x9e, 0xb8, 0x8d, 0xb0, 0xd7, 0x01, 0xc5, 0x32, 0x9e, 0xbd, 0x9c, 0x33, 0xfb, 0x07,
	0xa0, 0x3c, 0xf3, 0xdc, 0x81, 0xc7, 0x7c, 0x9f, 0x0f, 0x73, 0xdc, 0x5d, 0xa9, 0x4b, 0x1c, 0xe6,
	0xb8, 0xbb, 0x94, 0x17, 0xbc, 0x6b, 0x68, 0xbc, 0x96, 0xea, 0xc1, 0xae, 0xa1, 0xf1, 0x9a, 0xf2,
	0x42, 0xfb, 0x43, 0x03, 0xce, 0x1e, 0xde, 0x80, 0x3f, 0x22, 0x3f, 0x86, 0xba, 0xe3, 0x7a, 0x43,
	0xc3, 0x46, 0x89, 0x53, 0x72, 0xb3, 0x3c, 0xce, 0x98, 0xb8, 0xe1, 0xf4, 0x5d, 0x61, 0xb7, 0x42,
	0x0e, 0x95, 0x5f, 0xf2, 0x53, 0x50, 0x7a, 0xae, 0xed, 0x7a, 0xfd, 0xd0, 0x96, 0x71, 0xe1, 0x64,
	0xb2, 0xd1, 0x0f, 0xc5, 0x92, 0x68, 0x52, 0xeb, 0xbc, 0x29, 0x41, 0xf5, 0x89, 0xd5, 0x0f, 0x12,
	0xb7, 0x5d, 0xce, 0x75, 0xdb, 0x2a, 0xd4, 0xac, 0x61, 0xec, 0x57, 0xe4, 0x0d, 0x12, 0x09, 0x54,
	0x7c, 0xc8, 0x5d, 0xa8, 0x85, 0x5c, 0x3d, 0x68, 0x62, 0xad, 0xb5, 0x8b, 0x79, 0x8b, 0x44, 0xfd,
	0x09, 0x5e, 0x1c, 0x4b, 0xc5, 0x87, 0x7b, 0xb9, 0x5d, 0xd6, 0xd5, 0xc5, 0x04, 0x22, 0x30, 0xa0,
	0x97, 0x4b, 0x88, 0x54, 0xd9, 0x65, 0xdd, 0x8d, 0xa1, 0x4c, 0x30, 0x87, 0x6e, 0xd7, 0xb2, 0x99,
	0x1c, 0x9e, 0x89, 0x10, 0x59, 0x3a, 0x6d, 0x89, 0x16, 0x32, 0x75, 0x7e, 0x2e, 0xef, 0xe2, 0x5c,
	0xeb, 0xe1, 0x70, 0x42, 0xeb, 0xe1, 0x90, 0xf2, 0x82, 0x6f, 0x7f, 0x60, 0xf5, 0x83, 0xec, 0xf6,
	0x79, 0x9b, 0x62, 0xc9, 0x7b, 0xb9, 0x13, 0x93, 0xbb, 0x8f, 0xe3, 0x36, 0xc3, 0xb8, 0xcd, 0x8e,
	0x8e, 0x78, 0x9d, 0x7f, 0x97, 0xa1, 0x95, 0xd1, 0x44, 0x26, 0x86, 0xf2, 0x75, 0x28, 0xd3, 0x62,
	0x68, 0xcf, 0xb5, 0x1c, 0x69, 0x84, 0x28, 0x91, 0xb7, 0x29, 0x96, 0x5c, 0x42, 0x6f, 0xcb, 0x70,
	0x12, 0x2f, 0x8f, 0x12, 0x04, 0x85, 0xca, 0x2f, 0x79, 0x0c, 0xca, 0x48, 0x1a, 0xbb, 0x54, 0xc9,
	0x62, 0x9e, 0x4a, 0x62, 0x40, 0x08, 0xfb, 0x88, 0x39, 0x68, 0x52, 0xe3, 0x2b, 0xf1, 0x42, 0x7b,
	0x22, 0xe7, 0xe5, 0x6d, 0x8a, 0x25, 0xf9, 0x50, 0x9e, 0x5a, 0x1d, 0xd3, 0xa0, 0x9b, 0x85, 0x2d,
	0x93, 0x5b, 0xdc, 0xa1, 0x43, 0xfe, 0x50, 0xfe, 0xf2, 0xd2, 0x98, 0x51, 0x58, 0xde, 0xef, 0x2f,
	0xda, 0x97, 0x25, 0x38, 0x27, 0x47, 0x7f, 0x3c, 0x62, 0x8e, 0xac, 0x72, 0x6f, 0xf3, 0x1e, 0x54,
	0x93, 0x0b, 0x44, 0x73, 0xfd, 0xca, 0x7e, 0xa4, 0xaa, 0xc2, 0xdb, 0x70, 0x6a, 0x7e, 0xc0, 0x42,
	0x06, 0x6e, 0xe2, 0xd9, 0x4b, 0xcd, 0xd5, 0xfd, 0x48, 0x5d, 0x12, 0x9c, 0x48, 0xce, 0x67, 0x95,
	0xbf, 0x2a, 0x65, 0xc3, 0x5d, 0xb5, 0x48, 0xb8, 0xfb, 0xba, 0x01, 0xe7, 0xf3, 0xd6, 0x2f, 0xc2,
	0x5d, 0x11, 0x03, 0x42, 0x27, 0x59, 0x5e, 0xaa, 0xe4, 0x38, 0xc9, 0x65, 0x50, 0x2c, 0xff, 0x91,
	0x13, 0x58, 0xc1, 0x1e, 0x6e, 0x46, 0x11, 0xea, 0x8f, 0x69, 0x34, 0xa9, 0xf1, 0xeb, 0xa1, 0xe5,
	0xf4, 0x5d, 0x69, 0x42, 0xab, 0x47, 0xe8, 0xe4, 0xc0, 0x2a, 0x57, 0xd0, 0xeb, 0x88, 0xfc, 0xce,
	0xe9, 0xbb, 0x14, 0x4b, 0x72, 0x03, 0x9a, 0x3c, 0x5c, 0x6c, 0x66, 0x7e, 0x8c, 0x42, 0xa4, 0x27,
	0x44, 0x9a, 0x56, 0xc9, 0x26, 0xd4, 0x0d, 0x1e, 0x56, 0x7c, 0x69, 0x5e, 0xb7, 0x66, 0x98, 0xfd,
	0x3e, 0x67, 0x14, 0x27, 0x23, 0x64, 0x50, 0xf9, 0xed, 0xfc, 0xb6, 0x34, 0x09, 0xc7, 0x18, 0x6a,
	0xa5, 0x63, 0xa0, 0x56, 0x2e, 0x04, 0xb5, 0xca, 0xc9, 0xa1, 0xd6, 0xf9, 0x4b, 0x09, 0xaa, 0xb8,
	0xa4, 0x97, 0x07, 0xa2, 0xc9, 0xbb, 0x33, 0x6c, 0xfc, 0xb8, 0x78, 0xf2, 0xb3, 0x43, 0xf1, 0xe4,
	0xa4, 0xd2, 0xa7, 0x45, 0x94, 0xdf, 0x94, 0xa1, 0x86, 0xc7, 0x7f, 0x4c, 0x48, 0x91, 0xce, 0xb8,
	0x92, 0xef, 0x8c, 0xd1, 0x7a, 0xab, 0xd3, 0x42, 0xbc, 0x35, 0x1c, 0x48, 0xf3, 0x41, 0x46, 0x6b,
	0x38, 0xa0, 0xbc, 0x48, 0xa3, 0x50, 0xfd, 0x1b, 0x46, 0xa1, 0xc6, 0x6c, 0x51, 0x48, 0x29, 0x10,
	0x85, 0xb4, 0x5f, 0x95, 0xa0, 0x9d, 0x3a, 0xb0, 0xcc, 0x51, 0x7e, 0x23, 0xaf, 0xf4, 0x9e, 0x4c,
	0x9e, 0x2a, 0x07, 0x19, 0x31, 0x6b, 0xca, 0x67, 0xc4, 0xae, 0xcf, 0xeb, 0x70, 0x71, 0xca, 0x72,
	0xfc, 0xd1, 0x31, 0xb0, 0x88, 0xa3, 0x42, 0x39, 0x37, 0x2a, 0x74, 0xa1, 0xc9, 0x1d, 0xba, 0x8e,
	0xde, 0xbc, 0x82, 0xd8, 0x7d, 0xf7, 0x68, 0x6f, 0x7e, 0x60, 0x76, 0x8c, 0x0f, 0xe8, 0xd6, 0x51,
	0x03, 0x89, 0x30, 0xaa, 0x0c, 0x64, 0x07, 0xf9, 0x14, 0x5a, 0x48, 0xee, 0x5b, 0x76, 0x80, 0x3f,
	0x81, 0xf3, 0x59, 0xbe, 0x3f, 0xfb, 0x2c, 0x8f, 0x91, 0x5f, 0xe4, 0xd0, 0x19, 0x81, 0x14, 0x06,
	0x49, 0x67, 0xe7, 0xf3, 0x32, 0x28, 0xf1, 0x8a, 0xa6, 0x5e, 0xa3, 0x4f, 0x6c, 0xec, 0x57, 0xa1,
	0xc1, 0x4d, 0x8c, 0x67, 0xad, 0xc2, 0xa4, 0x5b, 0xe3, 0x48, 0x8d, 0x49, 0xb4, 0xbe, 0xcb, 0xba,
	0x2f, 0x3c, 0x9b, 0xe7, 0xf1, 0xd2, 0xb2, 0xd2, 0xe4, 0x1a, 0xf3, 0xf8, 0x94, 0x4a, 0x9b, 0xa2,
	0xce, 0x87, 0x27, 0x40, 0x68, 0xcc, 0x0e, 0x84, 0x45, 0x69, 0x8a, 0x4a, 0xaa, 0x7a, 0xfc, 0x69,
	0x4d, 0xd8, 0x9b, 0x06, 0x75, 0x71, 0x93, 0x96, 0x37, 0x62, 0x74, 0x32, 0x82, 0x42, 0xe5, 0xb7,
	0xf3, 0xb7, 0x12, 0x40, 0x7a, 0xb8, 0x27, 0x3c, 0xb2, 0xcc, 0xb9, 0x54, 0x8a, 0x9e, 0x4b, 0xb5,
	0xf0, 0xb9, 0xd4, 0x66, 0x3e, 0x17, 0xed, 0xcf, 0x25, 0xf8, 0xbf, 0xc3, 0x7e, 0x71, 0x7d, 0x6f,
	0x93, 0x1f, 0xce, 0xb7, 0x26, 0xb1, 0xf8, 0x53, 0x0d, 0x16, 0xa7, 0xef, 0xa2, 0x60, 0x7a, 0x91,
	0x4d, 0x20, 0xca, 0x47, 0x26, 0x10, 0x2f, 0x65, 0x02, 0x21, 0x02, 0xe3, 0xfb, 0xc5, 0x62, 0x4d,
	0xba, 0x9a, 0x89, 0x88, 0x73, 0x30, 0x9b, 0x78, 0x99, 0x24, 0x08, 0xd5, 0x63, 0x9d, 0x4c, 0xbe,
	0xf4, 0xa9, 0x69, 0x42, 0x12, 0x82, 0x6a, 0x79, 0x09, 0x54, 0xe7, 0xc6, 0x0c, 0x39, 0x44, 0xe7,
	0xaf, 0x49, 0x40, 0xfc, 0xaf, 0xfb, 0x8e, 0xa3, 0x03, 0xe5, 0xff, 0x9e, 0x67, 0x59, 0xfb, 0xa2,
	0x04, 0x8d, 0x2d, 0xf1, 0x08, 0x46, 0x7e, 0x02, 0x64, 0xc0, 0x02, 0x5d, 0x36, 0xf5, 0xee, 0x9e,
	0x1e, 0x5a, 0x26, 0xb9, 0x7c, 0xdc, 0x8b, 0xed, 0x76, 0x47, 0x3b, 0xfe, 0x51, 0x97, 0x6c, 0x42,
	0xcb, 0x64, 0x76, 0x2c, 0x3c, 0x5f, 0xea, 0xc4, 0x0b, 0x5d, 0xbe, 0xd4, 0xc9, 0x37, 0xbb, 0xb5,
	0x2f, 0x2b, 0xd0, 0x90, 0x86, 0x43, 0x74, 0x00, 0xbe, 0x7c, 0x13, 0x2f, 0x32, 0xe4, 0x5a, 0xb1,
	0xeb, 0xce, 0x76, 0x67, 0xb9, 0xe8, 0xbd, 0x88, 0x30, 0x98, 0x73, 0x47, 0xcc, 0xd1, 0x7b, 0x72,
	0xc2, 0xb7, 0x8b, 0x26, 0x7a, 0xdb, 0x9d, 0xeb, 0xc5, 0x73, 0x42, 0xe2, 0xc2, 0x02, 0xdf, 0x87,
	0x9c, 0x45, 0x47, 0x64, 0x7e, 0x77, 0x86, 0x40, 0xbc, 0xdd, 0xb9, 0x39, 0x53, 0xd8, 0x26, 0x7b,
	0x70, 0x36, 0xbb, 0x2f, 0xae, 0x78, 0xb4, 0x9f, 0xd5, 0xd9, 0xe0, 0xbf, 0xdd, 0xb9, 0x35, 0xab,
	0xbf, 0x58, 0xfb, 0x65, 0x15, 0x20, 0xfd, 0xb1, 0x90, 0x18, 0xa0, 0x0c, 0xe5, 0x93, 0x58, 0xfe,
	0xe9, 0xe6, 0xbe, 0x03, 0xe6, 0x9f, 0xee, 0x94, 0x37, 0x3f, 0x13, 0x9a, 0x61, 0xfc, 0x4b, 0x3f,
	0xb9, 0x5e, 0xf8, 0x49, 0x60, 0xbb, 0x73, 0x63, 0x86, 0xe7, 0x83, 0x64, 0x16, 0xdc, 0x49, 0x91,
	0x59, 0xe2, 0xad, 0xdc, 0x28, 0x3c, 0xd6, 0x1f, 0xf1, 0xe3, 0xb2, 0xe4, 0xef, 0xab, 0xc7, 0x1d,
	0x57, 0xe6, 0x17, 0xda, 0xe3, 0x8e, 0x6b, 0xe2, 0x27, 0x5b, 0x13, 0x9a, 0x46, 0xfc, 0x60, 0x7b,
	0xdc, 0x46, 0xb2, 0x4f, 0xe6, 0xc7, 0x6d, 0x64, 0xe2, 0x15, 0x78, 0x7d, 0xe1, 0xab, 0x37, 0x97,
	0x4a, 0x5f, 0xbf, 0xb9, 0x54, 0xfa, 0xe7, 0x9b, 0x4b, 0xa5, 0x97, 0xe5, 0x9d, 0xdb, 0xdd, 0x3a,
	0xfe, 0x45, 0xe5, 0xce, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x67, 0xfa, 0x5a, 0xf6, 0x22,
	0x00, 0x00,
}
