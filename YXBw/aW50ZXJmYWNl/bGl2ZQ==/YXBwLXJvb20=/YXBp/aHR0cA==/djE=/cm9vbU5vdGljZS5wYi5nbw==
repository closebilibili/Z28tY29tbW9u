// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: roomNotice.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RoomNoticeBuyGuardReq struct {
	// UID
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	// 主播UID
	TargetId             int64    `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty" form:"target_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomNoticeBuyGuardReq) Reset()         { *m = RoomNoticeBuyGuardReq{} }
func (m *RoomNoticeBuyGuardReq) String() string { return proto.CompactTextString(m) }
func (*RoomNoticeBuyGuardReq) ProtoMessage()    {}
func (*RoomNoticeBuyGuardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_roomNotice_bb87aa9995daa825, []int{0}
}
func (m *RoomNoticeBuyGuardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomNoticeBuyGuardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomNoticeBuyGuardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomNoticeBuyGuardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomNoticeBuyGuardReq.Merge(dst, src)
}
func (m *RoomNoticeBuyGuardReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomNoticeBuyGuardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomNoticeBuyGuardReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomNoticeBuyGuardReq proto.InternalMessageInfo

func (m *RoomNoticeBuyGuardReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomNoticeBuyGuardReq) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

type RoomNoticeBuyGuardResp struct {
	// 是否提示 1:弹出提示,0:不弹出
	ShouldNotice int64 `protobuf:"varint,1,opt,name=should_notice,json=shouldNotice,proto3" json:"should_notice,omitempty"`
	// 状态有效开始时间
	Begin int64 `protobuf:"varint,2,opt,name=begin,proto3" json:"begin,omitempty"`
	// 状态有效结束时间
	End int64 `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	// 当前的时间戳
	Now int64 `protobuf:"varint,7,opt,name=now,proto3" json:"now,omitempty"`
	// 标题
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// 内容
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	// 按钮
	Button               string   `protobuf:"bytes,6,opt,name=button,proto3" json:"button,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomNoticeBuyGuardResp) Reset()         { *m = RoomNoticeBuyGuardResp{} }
func (m *RoomNoticeBuyGuardResp) String() string { return proto.CompactTextString(m) }
func (*RoomNoticeBuyGuardResp) ProtoMessage()    {}
func (*RoomNoticeBuyGuardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_roomNotice_bb87aa9995daa825, []int{1}
}
func (m *RoomNoticeBuyGuardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomNoticeBuyGuardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomNoticeBuyGuardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomNoticeBuyGuardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomNoticeBuyGuardResp.Merge(dst, src)
}
func (m *RoomNoticeBuyGuardResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomNoticeBuyGuardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomNoticeBuyGuardResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomNoticeBuyGuardResp proto.InternalMessageInfo

func (m *RoomNoticeBuyGuardResp) GetShouldNotice() int64 {
	if m != nil {
		return m.ShouldNotice
	}
	return 0
}

func (m *RoomNoticeBuyGuardResp) GetBegin() int64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *RoomNoticeBuyGuardResp) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *RoomNoticeBuyGuardResp) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func (m *RoomNoticeBuyGuardResp) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RoomNoticeBuyGuardResp) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *RoomNoticeBuyGuardResp) GetButton() string {
	if m != nil {
		return m.Button
	}
	return ""
}

func init() {
	proto.RegisterType((*RoomNoticeBuyGuardReq)(nil), "live.approom.v1.RoomNoticeBuyGuardReq")
	proto.RegisterType((*RoomNoticeBuyGuardResp)(nil), "live.approom.v1.RoomNoticeBuyGuardResp")
}
func (m *RoomNoticeBuyGuardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomNoticeBuyGuardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(m.Uid))
	}
	if m.TargetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(m.TargetId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomNoticeBuyGuardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomNoticeBuyGuardResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShouldNotice != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(m.ShouldNotice))
	}
	if m.Begin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(m.Begin))
	}
	if m.End != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(m.End))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.Button) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(len(m.Button)))
		i += copy(dAtA[i:], m.Button)
	}
	if m.Now != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(m.Now))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRoomNotice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RoomNoticeBuyGuardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRoomNotice(uint64(m.Uid))
	}
	if m.TargetId != 0 {
		n += 1 + sovRoomNotice(uint64(m.TargetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomNoticeBuyGuardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShouldNotice != 0 {
		n += 1 + sovRoomNotice(uint64(m.ShouldNotice))
	}
	if m.Begin != 0 {
		n += 1 + sovRoomNotice(uint64(m.Begin))
	}
	if m.End != 0 {
		n += 1 + sovRoomNotice(uint64(m.End))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRoomNotice(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovRoomNotice(uint64(l))
	}
	l = len(m.Button)
	if l > 0 {
		n += 1 + l + sovRoomNotice(uint64(l))
	}
	if m.Now != 0 {
		n += 1 + sovRoomNotice(uint64(m.Now))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRoomNotice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRoomNotice(x uint64) (n int) {
	return sovRoomNotice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoomNoticeBuyGuardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomNoticeBuyGuardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomNoticeBuyGuardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomNoticeBuyGuardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomNoticeBuyGuardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomNoticeBuyGuardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShouldNotice", wireType)
			}
			m.ShouldNotice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShouldNotice |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Button", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Button = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			m.Now = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Now |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoomNotice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoomNotice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRoomNotice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRoomNotice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRoomNotice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRoomNotice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoomNotice   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("roomNotice.proto", fileDescriptor_roomNotice_bb87aa9995daa825) }

var fileDescriptor_roomNotice_bb87aa9995daa825 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xcd, 0x6a, 0x2a, 0x31,
	0x14, 0x26, 0xce, 0x55, 0xaf, 0xe1, 0x5e, 0xae, 0x84, 0x5b, 0x09, 0x2e, 0x46, 0x99, 0x96, 0xd6,
	0x4d, 0x47, 0x6c, 0xbb, 0x72, 0x29, 0x94, 0xd2, 0x4d, 0x17, 0xb3, 0x2c, 0x05, 0x99, 0x31, 0x71,
	0x4c, 0x19, 0x73, 0xc6, 0x98, 0x8c, 0xf8, 0x1e, 0x7d, 0x9f, 0x6e, 0xbb, 0xec, 0x13, 0x48, 0xf1,
	0x11, 0x7c, 0x82, 0x32, 0x49, 0x6b, 0xa1, 0xb8, 0xe8, 0xee, 0x7c, 0xe7, 0xfb, 0xe1, 0x1c, 0x3e,
	0xdc, 0x54, 0x00, 0xf3, 0x3b, 0xd0, 0x62, 0xc2, 0xc3, 0x5c, 0x81, 0x06, 0xf2, 0x2f, 0x13, 0x05,
	0x0f, 0xe3, 0x3c, 0x2f, 0x99, 0xb0, 0x18, 0xb4, 0xcf, 0x53, 0xa1, 0x67, 0x26, 0x09, 0x27, 0x30,
	0xef, 0xa7, 0x90, 0x42, 0xdf, 0xea, 0x12, 0x33, 0xb5, 0xc8, 0x02, 0x3b, 0x39, 0x7f, 0xf0, 0x84,
	0xf0, 0x51, 0xb4, 0x0f, 0x1d, 0x99, 0xf5, 0x8d, 0x89, 0x15, 0x8b, 0xf8, 0x82, 0x5c, 0x61, 0xcf,
	0x08, 0x46, 0x51, 0x17, 0xf5, 0xbc, 0x51, 0xb0, 0xdb, 0x74, 0xfc, 0x29, 0xa8, 0xf9, 0x30, 0x30,
	0x82, 0x05, 0xdd, 0x22, 0xce, 0x04, 0x8b, 0x35, 0x1f, 0x06, 0x8a, 0x2f, 0x8c, 0x50, 0x9c, 0x05,
	0x51, 0x29, 0x27, 0xd7, 0xb8, 0xa1, 0x63, 0x95, 0x72, 0x3d, 0x16, 0x8c, 0x56, 0xac, 0xb7, 0xb7,
	0xdb, 0x74, 0x4e, 0x9c, 0x77, 0x4f, 0x1d, 0x4e, 0xf8, 0xed, 0xf8, 0x5b, 0x16, 0x3c, 0x23, 0xdc,
	0x3a, 0x74, 0xd6, 0x32, 0x27, 0xc7, 0xf8, 0xef, 0x72, 0x06, 0x26, 0x63, 0x63, 0x69, 0x49, 0x77,
	0x61, 0xf4, 0xc7, 0x2d, 0x9d, 0x81, 0xfc, 0xc7, 0xd5, 0x84, 0xa7, 0x42, 0xba, 0x13, 0x22, 0x07,
	0x48, 0x13, 0x7b, 0x5c, 0x32, 0xea, 0xd9, 0x5d, 0x39, 0x96, 0x3a, 0x2d, 0x74, 0xc6, 0xe9, 0xaf,
	0x2e, 0xea, 0x35, 0x22, 0x07, 0x08, 0xc5, 0xf5, 0x09, 0x48, 0xcd, 0xa5, 0xa6, 0x55, 0xbb, 0xff,
	0x84, 0xa4, 0x85, 0x6b, 0x89, 0xd1, 0x1a, 0x24, 0xad, 0x59, 0xe2, 0x03, 0x95, 0xc9, 0x12, 0x56,
	0xb4, 0xee, 0x92, 0x25, 0xac, 0x2e, 0x1e, 0x31, 0xfe, 0x7a, 0x80, 0x3c, 0xe0, 0x46, 0x62, 0xd6,
	0xe3, 0xb4, 0xfc, 0x82, 0x9c, 0x86, 0xdf, 0x4a, 0x0b, 0x0f, 0x36, 0xd0, 0x3e, 0xfb, 0x91, 0x6e,
	0x99, 0x8f, 0x9a, 0x2f, 0x5b, 0x1f, 0xbd, 0x6e, 0x7d, 0xf4, 0xb6, 0xf5, 0xd1, 0x7d, 0xa5, 0x18,
	0x24, 0x35, 0xdb, 0xee, 0xe5, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x45, 0x0f, 0x10, 0xb8, 0x31,
	0x02, 0x00, 0x00,
}
