// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/http/v1/relation.pb

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// liveAnchor请求
type LiveAnchorReq struct {
	// 调试咒语
	Buyaofangqizhiliao string `protobuf:"bytes,1,opt,name=buyaofangqizhiliao,proto3" json:"buyaofangqizhiliao" form:"buyaofangqizhiliao"`
	// 平台
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform" form:"platform"`
	// 设备
	Device string `protobuf:"bytes,3,opt,name=device,proto3" json:"device" form:"device"`
	// 版本号
	Build string `protobuf:"bytes,4,opt,name=build,proto3" json:"build" form:"build"`
	// 排序类型
	SortRule int64 `protobuf:"varint,5,opt,name=sortRule,proto3" json:"sortRule" form:"sortRule"`
	// 筛选类型
	FilterRule int64 `protobuf:"varint,6,opt,name=filterRule,proto3" json:"filterRule" form:"filterRule"`
	// 清晰度
	Quality int64 `protobuf:"varint,7,opt,name=quality,proto3" json:"quality" form:"quality"`
}

func (m *LiveAnchorReq) Reset()         { *m = LiveAnchorReq{} }
func (m *LiveAnchorReq) String() string { return proto.CompactTextString(m) }
func (*LiveAnchorReq) ProtoMessage()    {}
func (*LiveAnchorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_relation_6231ea8af2c069cf, []int{0}
}
func (m *LiveAnchorReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiveAnchorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiveAnchorReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LiveAnchorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveAnchorReq.Merge(dst, src)
}
func (m *LiveAnchorReq) XXX_Size() int {
	return m.Size()
}
func (m *LiveAnchorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveAnchorReq.DiscardUnknown(m)
}

var xxx_messageInfo_LiveAnchorReq proto.InternalMessageInfo

func (m *LiveAnchorReq) GetBuyaofangqizhiliao() string {
	if m != nil {
		return m.Buyaofangqizhiliao
	}
	return ""
}

func (m *LiveAnchorReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *LiveAnchorReq) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *LiveAnchorReq) GetBuild() string {
	if m != nil {
		return m.Build
	}
	return ""
}

func (m *LiveAnchorReq) GetSortRule() int64 {
	if m != nil {
		return m.SortRule
	}
	return 0
}

func (m *LiveAnchorReq) GetFilterRule() int64 {
	if m != nil {
		return m.FilterRule
	}
	return 0
}

func (m *LiveAnchorReq) GetQuality() int64 {
	if m != nil {
		return m.Quality
	}
	return 0
}

// liveAnchor响应
type LiveAnchorResp struct {
	Rooms       []*LiveAnchorResp_Rooms `protobuf:"bytes,1,rep,name=rooms" json:"rooms" form:"rooms"`
	TotalCount  int64                   `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count" form:"total_count"`
	CardType    int64                   `protobuf:"varint,3,opt,name=card_type,json=cardType,proto3" json:"card_type" form:"card_type"`
	BigCardType int64                   `protobuf:"varint,4,opt,name=big_card_type,json=bigCardType,proto3" json:"big_card_type" form:"big_card_type"`
}

func (m *LiveAnchorResp) Reset()         { *m = LiveAnchorResp{} }
func (m *LiveAnchorResp) String() string { return proto.CompactTextString(m) }
func (*LiveAnchorResp) ProtoMessage()    {}
func (*LiveAnchorResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_relation_6231ea8af2c069cf, []int{1}
}
func (m *LiveAnchorResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiveAnchorResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiveAnchorResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LiveAnchorResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveAnchorResp.Merge(dst, src)
}
func (m *LiveAnchorResp) XXX_Size() int {
	return m.Size()
}
func (m *LiveAnchorResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveAnchorResp.DiscardUnknown(m)
}

var xxx_messageInfo_LiveAnchorResp proto.InternalMessageInfo

func (m *LiveAnchorResp) GetRooms() []*LiveAnchorResp_Rooms {
	if m != nil {
		return m.Rooms
	}
	return nil
}

func (m *LiveAnchorResp) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *LiveAnchorResp) GetCardType() int64 {
	if m != nil {
		return m.CardType
	}
	return 0
}

func (m *LiveAnchorResp) GetBigCardType() int64 {
	if m != nil {
		return m.BigCardType
	}
	return 0
}

type LiveAnchorResp_Rooms struct {
	// 房间id
	Roomid int64 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid" form:"roomid"`
	// 用户id
	Uid int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid" form:"uid"`
	// 用户昵称
	Uname string `protobuf:"bytes,3,opt,name=uname,proto3" json:"uname" form:"uname"`
	// 用户头像
	Face string `protobuf:"bytes,4,opt,name=face,proto3" json:"face" form:"face"`
	// 直播间标题
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title" form:"title"`
	// 直播间标签
	LiveTagName string `protobuf:"bytes,6,opt,name=live_tag_name,json=liveTagName,proto3" json:"live_tag_name" form:"live_tag_name"`
	// 开始直播时间
	LiveTime int64 `protobuf:"varint,7,opt,name=live_time,json=liveTime,proto3" json:"live_time" form:"live_time"`
	// 人气值
	Online int64 `protobuf:"varint,8,opt,name=online,proto3" json:"online" form:"online"`
	// 秒开url
	Playurl string `protobuf:"bytes,9,opt,name=playurl,proto3" json:"playurl" form:"playurl"`
	// 可选清晰度
	AcceptQuality []int64 `protobuf:"varint,10,rep,packed,name=accept_quality,json=acceptQuality" json:"accept_quality" form:"accept_quality"`
	// 当前清晰度
	CurrentQuality int64 `protobuf:"varint,11,opt,name=current_quality,json=currentQuality,proto3" json:"current_quality" form:"current_quality"`
	// pk_id
	PkId int64 `protobuf:"varint,12,opt,name=pk_id,json=pkId,proto3" json:"pk_id" form:"pk_id"`
	// 特别关注标志
	SpecialAttention int64 `protobuf:"varint,13,opt,name=special_attention,json=specialAttention,proto3" json:"special_attention" form:"special_attention"`
	// 老的分区id
	Area int64 `protobuf:"varint,14,opt,name=area,proto3" json:"area" form:"area"`
	// 老的分区名
	AreaName string `protobuf:"bytes,15,opt,name=area_name,json=areaName,proto3" json:"area_name" form:"area_name"`
	// 子分区id
	AreaV2Id int64 `protobuf:"varint,16,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id" form:"area_v2_id"`
	// 子分区名
	AreaV2Name string `protobuf:"bytes,17,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name" form:"area_v2_name"`
	// 父分区名
	AreaV2ParentName string `protobuf:"bytes,18,opt,name=area_v2_parent_name,json=areaV2ParentName,proto3" json:"area_v2_parent_name" form:"area_v2_parent_name"`
	// 父分区id
	AreaV2ParentId int64 `protobuf:"varint,19,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id" form:"area_v2_parent_id"`
	// 广播适配标志
	BroadcastType int64 `protobuf:"varint,20,opt,name=broadcast_type,json=broadcastType,proto3" json:"broadcast_type" form:"broadcast_type"`
	// 官方认证标志
	OfficialVerify int64 `protobuf:"varint,21,opt,name=official_verify,json=officialVerify,proto3" json:"official_verify" form:"official_verify"`
	// 直播间跳转链接
	Link string `protobuf:"bytes,22,opt,name=link,proto3" json:"link" form:"link"`
	// 直播间封面
	Cover string `protobuf:"bytes,23,opt,name=cover,proto3" json:"cover" form:"cover"`
	// 角标文字
	PendentRu string `protobuf:"bytes,24,opt,name=pendent_ru,json=pendentRu,proto3" json:"pendent_ru" form:"pendent_ru"`
	// 角标颜色
	PendentRuColor string `protobuf:"bytes,25,opt,name=pendent_ru_color,json=pendentRuColor,proto3" json:"pendent_ru_color" form:"pendent_ru_color"`
	// 角标背景图
	PendentRuPic string `protobuf:"bytes,26,opt,name=pendent_ru_pic,json=pendentRuPic,proto3" json:"pendent_ru_pic" form:"pendent_ru_pic"`
	PlayUrlH265  string `protobuf:"bytes,27,opt,name=play_url_h265,json=playUrlH265,proto3" json:"play_url_h265" form:"play_url_h265"`
}

func (m *LiveAnchorResp_Rooms) Reset()         { *m = LiveAnchorResp_Rooms{} }
func (m *LiveAnchorResp_Rooms) String() string { return proto.CompactTextString(m) }
func (*LiveAnchorResp_Rooms) ProtoMessage()    {}
func (*LiveAnchorResp_Rooms) Descriptor() ([]byte, []int) {
	return fileDescriptor_relation_6231ea8af2c069cf, []int{1, 0}
}
func (m *LiveAnchorResp_Rooms) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiveAnchorResp_Rooms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiveAnchorResp_Rooms.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LiveAnchorResp_Rooms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveAnchorResp_Rooms.Merge(dst, src)
}
func (m *LiveAnchorResp_Rooms) XXX_Size() int {
	return m.Size()
}
func (m *LiveAnchorResp_Rooms) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveAnchorResp_Rooms.DiscardUnknown(m)
}

var xxx_messageInfo_LiveAnchorResp_Rooms proto.InternalMessageInfo

func (m *LiveAnchorResp_Rooms) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *LiveAnchorResp_Rooms) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *LiveAnchorResp_Rooms) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *LiveAnchorResp_Rooms) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *LiveAnchorResp_Rooms) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *LiveAnchorResp_Rooms) GetLiveTagName() string {
	if m != nil {
		return m.LiveTagName
	}
	return ""
}

func (m *LiveAnchorResp_Rooms) GetLiveTime() int64 {
	if m != nil {
		return m.LiveTime
	}
	return 0
}

func (m *LiveAnchorResp_Rooms) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *LiveAnchorResp_Rooms) GetPlayurl() string {
	if m != nil {
		return m.Playurl
	}
	return ""
}

func (m *LiveAnchorResp_Rooms) GetAcceptQuality() []int64 {
	if m != nil {
		return m.AcceptQuality
	}
	return nil
}

func (m *LiveAnchorResp_Rooms) GetCurrentQuality() int64 {
	if m != nil {
		return m.CurrentQuality
	}
	return 0
}

func (m *LiveAnchorResp_Rooms) GetPkId() int64 {
	if m != nil {
		return m.PkId
	}
	return 0
}

func (m *LiveAnchorResp_Rooms) GetSpecialAttention() int64 {
	if m != nil {
		return m.SpecialAttention
	}
	return 0
}

func (m *LiveAnchorResp_Rooms) GetArea() int64 {
	if m != nil {
		return m.Area
	}
	return 0
}

func (m *LiveAnchorResp_Rooms) GetAreaName() string {
	if m != nil {
		return m.AreaName
	}
	return ""
}

func (m *LiveAnchorResp_Rooms) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *LiveAnchorResp_Rooms) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *LiveAnchorResp_Rooms) GetAreaV2ParentName() string {
	if m != nil {
		return m.AreaV2ParentName
	}
	return ""
}

func (m *LiveAnchorResp_Rooms) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *LiveAnchorResp_Rooms) GetBroadcastType() int64 {
	if m != nil {
		return m.BroadcastType
	}
	return 0
}

func (m *LiveAnchorResp_Rooms) GetOfficialVerify() int64 {
	if m != nil {
		return m.OfficialVerify
	}
	return 0
}

func (m *LiveAnchorResp_Rooms) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *LiveAnchorResp_Rooms) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *LiveAnchorResp_Rooms) GetPendentRu() string {
	if m != nil {
		return m.PendentRu
	}
	return ""
}

func (m *LiveAnchorResp_Rooms) GetPendentRuColor() string {
	if m != nil {
		return m.PendentRuColor
	}
	return ""
}

func (m *LiveAnchorResp_Rooms) GetPendentRuPic() string {
	if m != nil {
		return m.PendentRuPic
	}
	return ""
}

func (m *LiveAnchorResp_Rooms) GetPlayUrlH265() string {
	if m != nil {
		return m.PlayUrlH265
	}
	return ""
}

// unLiveAnchor请求
type UnLiveAnchorReq struct {
	// 调试咒语
	Buyaofangqizhiliao string `protobuf:"bytes,1,opt,name=buyaofangqizhiliao,proto3" json:"buyaofangqizhiliao" form:"buyaofangqizhiliao"`
	// 分页号
	Page int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page" form:"page"`
	// 页大小
	Pagesize int64 `protobuf:"varint,3,opt,name=pagesize,proto3" json:"pagesize" form:"pagesize"`
}

func (m *UnLiveAnchorReq) Reset()         { *m = UnLiveAnchorReq{} }
func (m *UnLiveAnchorReq) String() string { return proto.CompactTextString(m) }
func (*UnLiveAnchorReq) ProtoMessage()    {}
func (*UnLiveAnchorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_relation_6231ea8af2c069cf, []int{2}
}
func (m *UnLiveAnchorReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnLiveAnchorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnLiveAnchorReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnLiveAnchorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnLiveAnchorReq.Merge(dst, src)
}
func (m *UnLiveAnchorReq) XXX_Size() int {
	return m.Size()
}
func (m *UnLiveAnchorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UnLiveAnchorReq.DiscardUnknown(m)
}

var xxx_messageInfo_UnLiveAnchorReq proto.InternalMessageInfo

func (m *UnLiveAnchorReq) GetBuyaofangqizhiliao() string {
	if m != nil {
		return m.Buyaofangqizhiliao
	}
	return ""
}

func (m *UnLiveAnchorReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *UnLiveAnchorReq) GetPagesize() int64 {
	if m != nil {
		return m.Pagesize
	}
	return 0
}

// unLiveAnchor响应
type UnLiveAnchorResp struct {
	Rooms       []*UnLiveAnchorResp_Rooms `protobuf:"bytes,1,rep,name=rooms" json:"rooms" form:"rooms"`
	TotalCount  int64                     `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count" form:"total_count"`
	NoRoomCount int64                     `protobuf:"varint,3,opt,name=no_room_count,json=noRoomCount,proto3" json:"no_room_count" form:"no_room_count"`
	HasMore     int64                     `protobuf:"varint,4,opt,name=has_more,json=hasMore,proto3" json:"has_more" form:"has_more"`
}

func (m *UnLiveAnchorResp) Reset()         { *m = UnLiveAnchorResp{} }
func (m *UnLiveAnchorResp) String() string { return proto.CompactTextString(m) }
func (*UnLiveAnchorResp) ProtoMessage()    {}
func (*UnLiveAnchorResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_relation_6231ea8af2c069cf, []int{3}
}
func (m *UnLiveAnchorResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnLiveAnchorResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnLiveAnchorResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnLiveAnchorResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnLiveAnchorResp.Merge(dst, src)
}
func (m *UnLiveAnchorResp) XXX_Size() int {
	return m.Size()
}
func (m *UnLiveAnchorResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UnLiveAnchorResp.DiscardUnknown(m)
}

var xxx_messageInfo_UnLiveAnchorResp proto.InternalMessageInfo

func (m *UnLiveAnchorResp) GetRooms() []*UnLiveAnchorResp_Rooms {
	if m != nil {
		return m.Rooms
	}
	return nil
}

func (m *UnLiveAnchorResp) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *UnLiveAnchorResp) GetNoRoomCount() int64 {
	if m != nil {
		return m.NoRoomCount
	}
	return 0
}

func (m *UnLiveAnchorResp) GetHasMore() int64 {
	if m != nil {
		return m.HasMore
	}
	return 0
}

type UnLiveAnchorResp_Rooms struct {
	// 上次开播描述
	LiveDesc string `protobuf:"bytes,1,opt,name=live_desc,json=liveDesc,proto3" json:"live_desc" form:"live_desc"`
	// 房间id
	Roomid int64 `protobuf:"varint,2,opt,name=roomid,proto3" json:"roomid" form:"roomid"`
	// 用户id
	Uid int64 `protobuf:"varint,3,opt,name=uid,proto3" json:"uid" form:"uid"`
	// 用户昵称
	Uname string `protobuf:"bytes,4,opt,name=uname,proto3" json:"uname" form:"uname"`
	// 用户头像
	Face string `protobuf:"bytes,5,opt,name=face,proto3" json:"face" form:"face"`
	// 特别关注标志
	SpecialAttention int64 `protobuf:"varint,6,opt,name=special_attention,json=specialAttention,proto3" json:"special_attention" form:"special_attention"`
	// 官方认证标志
	OfficialVerify int64 `protobuf:"varint,7,opt,name=official_verify,json=officialVerify,proto3" json:"official_verify" form:"official_verify"`
	// 直播状态标志
	LiveStatus int64 `protobuf:"varint,8,opt,name=live_status,json=liveStatus,proto3" json:"live_status" form:"live_status"`
	// 广播适配标志
	BroadcastType int64 `protobuf:"varint,9,opt,name=broadcast_type,json=broadcastType,proto3" json:"broadcast_type" form:"broadcast_type"`
	// 老的分区id
	Area int64 `protobuf:"varint,10,opt,name=area,proto3" json:"area" form:"area"`
	// 粉丝数
	Attentions int64 `protobuf:"varint,11,opt,name=attentions,proto3" json:"attentions" form:"attentions"`
	// 老的分区名
	AreaName string `protobuf:"bytes,12,opt,name=area_name,json=areaName,proto3" json:"area_name" form:"area_name"`
	// 子分区id
	AreaV2Id int64 `protobuf:"varint,13,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id" form:"area_v2_id"`
	// 子分区名
	AreaV2Name string `protobuf:"bytes,14,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name" form:"area_v2_name"`
	// 父分区名
	AreaV2ParentName string `protobuf:"bytes,15,opt,name=area_v2_parent_name,json=areaV2ParentName,proto3" json:"area_v2_parent_name" form:"area_v2_parent_name"`
	// 父分区id
	AreaV2ParentId int64 `protobuf:"varint,16,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id" form:"area_v2_parent_id"`
	// 直播间跳转链接
	Link string `protobuf:"bytes,17,opt,name=link,proto3" json:"link" form:"link"`
	// 房间页公告
	AnnouncementContent string `protobuf:"bytes,18,opt,name=announcement_content,json=announcementContent,proto3" json:"announcement_content" form:"announcement_content"`
	// 房间页公告发布时间
	AnnouncementTime string `protobuf:"bytes,19,opt,name=announcement_time,json=announcementTime,proto3" json:"announcement_time" form:"announcement_time"`
}

func (m *UnLiveAnchorResp_Rooms) Reset()         { *m = UnLiveAnchorResp_Rooms{} }
func (m *UnLiveAnchorResp_Rooms) String() string { return proto.CompactTextString(m) }
func (*UnLiveAnchorResp_Rooms) ProtoMessage()    {}
func (*UnLiveAnchorResp_Rooms) Descriptor() ([]byte, []int) {
	return fileDescriptor_relation_6231ea8af2c069cf, []int{3, 0}
}
func (m *UnLiveAnchorResp_Rooms) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnLiveAnchorResp_Rooms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnLiveAnchorResp_Rooms.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnLiveAnchorResp_Rooms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnLiveAnchorResp_Rooms.Merge(dst, src)
}
func (m *UnLiveAnchorResp_Rooms) XXX_Size() int {
	return m.Size()
}
func (m *UnLiveAnchorResp_Rooms) XXX_DiscardUnknown() {
	xxx_messageInfo_UnLiveAnchorResp_Rooms.DiscardUnknown(m)
}

var xxx_messageInfo_UnLiveAnchorResp_Rooms proto.InternalMessageInfo

func (m *UnLiveAnchorResp_Rooms) GetLiveDesc() string {
	if m != nil {
		return m.LiveDesc
	}
	return ""
}

func (m *UnLiveAnchorResp_Rooms) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *UnLiveAnchorResp_Rooms) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UnLiveAnchorResp_Rooms) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *UnLiveAnchorResp_Rooms) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *UnLiveAnchorResp_Rooms) GetSpecialAttention() int64 {
	if m != nil {
		return m.SpecialAttention
	}
	return 0
}

func (m *UnLiveAnchorResp_Rooms) GetOfficialVerify() int64 {
	if m != nil {
		return m.OfficialVerify
	}
	return 0
}

func (m *UnLiveAnchorResp_Rooms) GetLiveStatus() int64 {
	if m != nil {
		return m.LiveStatus
	}
	return 0
}

func (m *UnLiveAnchorResp_Rooms) GetBroadcastType() int64 {
	if m != nil {
		return m.BroadcastType
	}
	return 0
}

func (m *UnLiveAnchorResp_Rooms) GetArea() int64 {
	if m != nil {
		return m.Area
	}
	return 0
}

func (m *UnLiveAnchorResp_Rooms) GetAttentions() int64 {
	if m != nil {
		return m.Attentions
	}
	return 0
}

func (m *UnLiveAnchorResp_Rooms) GetAreaName() string {
	if m != nil {
		return m.AreaName
	}
	return ""
}

func (m *UnLiveAnchorResp_Rooms) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *UnLiveAnchorResp_Rooms) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *UnLiveAnchorResp_Rooms) GetAreaV2ParentName() string {
	if m != nil {
		return m.AreaV2ParentName
	}
	return ""
}

func (m *UnLiveAnchorResp_Rooms) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *UnLiveAnchorResp_Rooms) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *UnLiveAnchorResp_Rooms) GetAnnouncementContent() string {
	if m != nil {
		return m.AnnouncementContent
	}
	return ""
}

func (m *UnLiveAnchorResp_Rooms) GetAnnouncementTime() string {
	if m != nil {
		return m.AnnouncementTime
	}
	return ""
}

func init() {
	proto.RegisterType((*LiveAnchorReq)(nil), "live.relation.v1.LiveAnchorReq")
	proto.RegisterType((*LiveAnchorResp)(nil), "live.relation.v1.LiveAnchorResp")
	proto.RegisterType((*LiveAnchorResp_Rooms)(nil), "live.relation.v1.LiveAnchorResp.Rooms")
	proto.RegisterType((*UnLiveAnchorReq)(nil), "live.relation.v1.UnLiveAnchorReq")
	proto.RegisterType((*UnLiveAnchorResp)(nil), "live.relation.v1.UnLiveAnchorResp")
	proto.RegisterType((*UnLiveAnchorResp_Rooms)(nil), "live.relation.v1.UnLiveAnchorResp.Rooms")
}
func (m *LiveAnchorReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveAnchorReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Buyaofangqizhiliao) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.Buyaofangqizhiliao)))
		i += copy(dAtA[i:], m.Buyaofangqizhiliao)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	if len(m.Build) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.Build)))
		i += copy(dAtA[i:], m.Build)
	}
	if m.SortRule != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.SortRule))
	}
	if m.FilterRule != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.FilterRule))
	}
	if m.Quality != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.Quality))
	}
	return i, nil
}

func (m *LiveAnchorResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveAnchorResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for _, msg := range m.Rooms {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRelationPb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TotalCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.TotalCount))
	}
	if m.CardType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.CardType))
	}
	if m.BigCardType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.BigCardType))
	}
	return i, nil
}

func (m *LiveAnchorResp_Rooms) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveAnchorResp_Rooms) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.Roomid))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.Uid))
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.LiveTagName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.LiveTagName)))
		i += copy(dAtA[i:], m.LiveTagName)
	}
	if m.LiveTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.LiveTime))
	}
	if m.Online != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.Online))
	}
	if len(m.Playurl) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.Playurl)))
		i += copy(dAtA[i:], m.Playurl)
	}
	if len(m.AcceptQuality) > 0 {
		dAtA2 := make([]byte, len(m.AcceptQuality)*10)
		var j1 int
		for _, num1 := range m.AcceptQuality {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x52
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.CurrentQuality != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.CurrentQuality))
	}
	if m.PkId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.PkId))
	}
	if m.SpecialAttention != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.SpecialAttention))
	}
	if m.Area != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.Area))
	}
	if len(m.AreaName) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.AreaName)))
		i += copy(dAtA[i:], m.AreaName)
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.AreaV2Id))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if len(m.AreaV2ParentName) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.AreaV2ParentName)))
		i += copy(dAtA[i:], m.AreaV2ParentName)
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if m.BroadcastType != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.BroadcastType))
	}
	if m.OfficialVerify != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.OfficialVerify))
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.PendentRu) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.PendentRu)))
		i += copy(dAtA[i:], m.PendentRu)
	}
	if len(m.PendentRuColor) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.PendentRuColor)))
		i += copy(dAtA[i:], m.PendentRuColor)
	}
	if len(m.PendentRuPic) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.PendentRuPic)))
		i += copy(dAtA[i:], m.PendentRuPic)
	}
	if len(m.PlayUrlH265) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.PlayUrlH265)))
		i += copy(dAtA[i:], m.PlayUrlH265)
	}
	return i, nil
}

func (m *UnLiveAnchorReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnLiveAnchorReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Buyaofangqizhiliao) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.Buyaofangqizhiliao)))
		i += copy(dAtA[i:], m.Buyaofangqizhiliao)
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.Page))
	}
	if m.Pagesize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.Pagesize))
	}
	return i, nil
}

func (m *UnLiveAnchorResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnLiveAnchorResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for _, msg := range m.Rooms {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRelationPb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TotalCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.TotalCount))
	}
	if m.NoRoomCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.NoRoomCount))
	}
	if m.HasMore != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.HasMore))
	}
	return i, nil
}

func (m *UnLiveAnchorResp_Rooms) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnLiveAnchorResp_Rooms) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LiveDesc) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.LiveDesc)))
		i += copy(dAtA[i:], m.LiveDesc)
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.Roomid))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.Uid))
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if m.SpecialAttention != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.SpecialAttention))
	}
	if m.OfficialVerify != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.OfficialVerify))
	}
	if m.LiveStatus != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.LiveStatus))
	}
	if m.BroadcastType != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.BroadcastType))
	}
	if m.Area != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.Area))
	}
	if m.Attentions != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.Attentions))
	}
	if len(m.AreaName) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.AreaName)))
		i += copy(dAtA[i:], m.AreaName)
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.AreaV2Id))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if len(m.AreaV2ParentName) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.AreaV2ParentName)))
		i += copy(dAtA[i:], m.AreaV2ParentName)
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.AnnouncementContent) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.AnnouncementContent)))
		i += copy(dAtA[i:], m.AnnouncementContent)
	}
	if len(m.AnnouncementTime) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRelationPb(dAtA, i, uint64(len(m.AnnouncementTime)))
		i += copy(dAtA[i:], m.AnnouncementTime)
	}
	return i, nil
}

func encodeVarintRelationPb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LiveAnchorReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyaofangqizhiliao)
	if l > 0 {
		n += 1 + l + sovRelationPb(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovRelationPb(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovRelationPb(uint64(l))
	}
	l = len(m.Build)
	if l > 0 {
		n += 1 + l + sovRelationPb(uint64(l))
	}
	if m.SortRule != 0 {
		n += 1 + sovRelationPb(uint64(m.SortRule))
	}
	if m.FilterRule != 0 {
		n += 1 + sovRelationPb(uint64(m.FilterRule))
	}
	if m.Quality != 0 {
		n += 1 + sovRelationPb(uint64(m.Quality))
	}
	return n
}

func (m *LiveAnchorResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for _, e := range m.Rooms {
			l = e.Size()
			n += 1 + l + sovRelationPb(uint64(l))
		}
	}
	if m.TotalCount != 0 {
		n += 1 + sovRelationPb(uint64(m.TotalCount))
	}
	if m.CardType != 0 {
		n += 1 + sovRelationPb(uint64(m.CardType))
	}
	if m.BigCardType != 0 {
		n += 1 + sovRelationPb(uint64(m.BigCardType))
	}
	return n
}

func (m *LiveAnchorResp_Rooms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovRelationPb(uint64(m.Roomid))
	}
	if m.Uid != 0 {
		n += 1 + sovRelationPb(uint64(m.Uid))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovRelationPb(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovRelationPb(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRelationPb(uint64(l))
	}
	l = len(m.LiveTagName)
	if l > 0 {
		n += 1 + l + sovRelationPb(uint64(l))
	}
	if m.LiveTime != 0 {
		n += 1 + sovRelationPb(uint64(m.LiveTime))
	}
	if m.Online != 0 {
		n += 1 + sovRelationPb(uint64(m.Online))
	}
	l = len(m.Playurl)
	if l > 0 {
		n += 1 + l + sovRelationPb(uint64(l))
	}
	if len(m.AcceptQuality) > 0 {
		l = 0
		for _, e := range m.AcceptQuality {
			l += sovRelationPb(uint64(e))
		}
		n += 1 + sovRelationPb(uint64(l)) + l
	}
	if m.CurrentQuality != 0 {
		n += 1 + sovRelationPb(uint64(m.CurrentQuality))
	}
	if m.PkId != 0 {
		n += 1 + sovRelationPb(uint64(m.PkId))
	}
	if m.SpecialAttention != 0 {
		n += 1 + sovRelationPb(uint64(m.SpecialAttention))
	}
	if m.Area != 0 {
		n += 1 + sovRelationPb(uint64(m.Area))
	}
	l = len(m.AreaName)
	if l > 0 {
		n += 1 + l + sovRelationPb(uint64(l))
	}
	if m.AreaV2Id != 0 {
		n += 2 + sovRelationPb(uint64(m.AreaV2Id))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 2 + l + sovRelationPb(uint64(l))
	}
	l = len(m.AreaV2ParentName)
	if l > 0 {
		n += 2 + l + sovRelationPb(uint64(l))
	}
	if m.AreaV2ParentId != 0 {
		n += 2 + sovRelationPb(uint64(m.AreaV2ParentId))
	}
	if m.BroadcastType != 0 {
		n += 2 + sovRelationPb(uint64(m.BroadcastType))
	}
	if m.OfficialVerify != 0 {
		n += 2 + sovRelationPb(uint64(m.OfficialVerify))
	}
	l = len(m.Link)
	if l > 0 {
		n += 2 + l + sovRelationPb(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 2 + l + sovRelationPb(uint64(l))
	}
	l = len(m.PendentRu)
	if l > 0 {
		n += 2 + l + sovRelationPb(uint64(l))
	}
	l = len(m.PendentRuColor)
	if l > 0 {
		n += 2 + l + sovRelationPb(uint64(l))
	}
	l = len(m.PendentRuPic)
	if l > 0 {
		n += 2 + l + sovRelationPb(uint64(l))
	}
	l = len(m.PlayUrlH265)
	if l > 0 {
		n += 2 + l + sovRelationPb(uint64(l))
	}
	return n
}

func (m *UnLiveAnchorReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyaofangqizhiliao)
	if l > 0 {
		n += 1 + l + sovRelationPb(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovRelationPb(uint64(m.Page))
	}
	if m.Pagesize != 0 {
		n += 1 + sovRelationPb(uint64(m.Pagesize))
	}
	return n
}

func (m *UnLiveAnchorResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for _, e := range m.Rooms {
			l = e.Size()
			n += 1 + l + sovRelationPb(uint64(l))
		}
	}
	if m.TotalCount != 0 {
		n += 1 + sovRelationPb(uint64(m.TotalCount))
	}
	if m.NoRoomCount != 0 {
		n += 1 + sovRelationPb(uint64(m.NoRoomCount))
	}
	if m.HasMore != 0 {
		n += 1 + sovRelationPb(uint64(m.HasMore))
	}
	return n
}

func (m *UnLiveAnchorResp_Rooms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LiveDesc)
	if l > 0 {
		n += 1 + l + sovRelationPb(uint64(l))
	}
	if m.Roomid != 0 {
		n += 1 + sovRelationPb(uint64(m.Roomid))
	}
	if m.Uid != 0 {
		n += 1 + sovRelationPb(uint64(m.Uid))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovRelationPb(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovRelationPb(uint64(l))
	}
	if m.SpecialAttention != 0 {
		n += 1 + sovRelationPb(uint64(m.SpecialAttention))
	}
	if m.OfficialVerify != 0 {
		n += 1 + sovRelationPb(uint64(m.OfficialVerify))
	}
	if m.LiveStatus != 0 {
		n += 1 + sovRelationPb(uint64(m.LiveStatus))
	}
	if m.BroadcastType != 0 {
		n += 1 + sovRelationPb(uint64(m.BroadcastType))
	}
	if m.Area != 0 {
		n += 1 + sovRelationPb(uint64(m.Area))
	}
	if m.Attentions != 0 {
		n += 1 + sovRelationPb(uint64(m.Attentions))
	}
	l = len(m.AreaName)
	if l > 0 {
		n += 1 + l + sovRelationPb(uint64(l))
	}
	if m.AreaV2Id != 0 {
		n += 1 + sovRelationPb(uint64(m.AreaV2Id))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovRelationPb(uint64(l))
	}
	l = len(m.AreaV2ParentName)
	if l > 0 {
		n += 1 + l + sovRelationPb(uint64(l))
	}
	if m.AreaV2ParentId != 0 {
		n += 2 + sovRelationPb(uint64(m.AreaV2ParentId))
	}
	l = len(m.Link)
	if l > 0 {
		n += 2 + l + sovRelationPb(uint64(l))
	}
	l = len(m.AnnouncementContent)
	if l > 0 {
		n += 2 + l + sovRelationPb(uint64(l))
	}
	l = len(m.AnnouncementTime)
	if l > 0 {
		n += 2 + l + sovRelationPb(uint64(l))
	}
	return n
}

func sovRelationPb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRelationPb(x uint64) (n int) {
	return sovRelationPb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LiveAnchorReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveAnchorReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveAnchorReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyaofangqizhiliao", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyaofangqizhiliao = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Build = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortRule", wireType)
			}
			m.SortRule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortRule |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterRule", wireType)
			}
			m.FilterRule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilterRule |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelationPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelationPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiveAnchorResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveAnchorResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveAnchorResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rooms = append(m.Rooms, &LiveAnchorResp_Rooms{})
			if err := m.Rooms[len(m.Rooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigCardType", wireType)
			}
			m.BigCardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BigCardType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelationPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelationPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiveAnchorResp_Rooms) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rooms: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rooms: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveTagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveTagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveTime", wireType)
			}
			m.LiveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playurl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Playurl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelationPb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AcceptQuality = append(m.AcceptQuality, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelationPb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRelationPb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRelationPb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AcceptQuality = append(m.AcceptQuality, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptQuality", wireType)
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentQuality", wireType)
			}
			m.CurrentQuality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentQuality |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkId", wireType)
			}
			m.PkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PkId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialAttention", wireType)
			}
			m.SpecialAttention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialAttention |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2ParentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastType", wireType)
			}
			m.BroadcastType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialVerify", wireType)
			}
			m.OfficialVerify = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialVerify |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrlH265", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrlH265 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelationPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelationPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnLiveAnchorReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnLiveAnchorReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnLiveAnchorReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyaofangqizhiliao", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyaofangqizhiliao = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagesize", wireType)
			}
			m.Pagesize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pagesize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelationPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelationPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnLiveAnchorResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnLiveAnchorResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnLiveAnchorResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rooms = append(m.Rooms, &UnLiveAnchorResp_Rooms{})
			if err := m.Rooms[len(m.Rooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoRoomCount", wireType)
			}
			m.NoRoomCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoRoomCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelationPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelationPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnLiveAnchorResp_Rooms) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rooms: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rooms: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialAttention", wireType)
			}
			m.SpecialAttention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialAttention |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialVerify", wireType)
			}
			m.OfficialVerify = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialVerify |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStatus", wireType)
			}
			m.LiveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastType", wireType)
			}
			m.BroadcastType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attentions", wireType)
			}
			m.Attentions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attentions |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2ParentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnouncementContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnnouncementContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnouncementTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnnouncementTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelationPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelationPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelationPb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelationPb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelationPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRelationPb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRelationPb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRelationPb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRelationPb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelationPb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api/http/v1/relation.pb", fileDescriptor_relation_6231ea8af2c069cf) }

var fileDescriptor_relation_6231ea8af2c069cf = []byte{
	// 1052 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcb, 0x6e, 0x23, 0x45,
	0x14, 0x8d, 0xe3, 0x47, 0xec, 0xeb, 0xd8, 0x71, 0x2a, 0x61, 0xa6, 0xc6, 0x19, 0x1c, 0x63, 0x01,
	0x63, 0x84, 0xc6, 0x51, 0x8c, 0x66, 0x56, 0x08, 0x69, 0x08, 0x0b, 0x22, 0xf1, 0x18, 0x9a, 0xc9,
	0x2c, 0xd8, 0xb4, 0xca, 0xdd, 0x65, 0xbb, 0x94, 0x76, 0x57, 0xbb, 0xba, 0xda, 0x92, 0x67, 0xc7,
	0x1f, 0xf0, 0x1d, 0x2c, 0xf9, 0x0a, 0x56, 0x68, 0x96, 0xec, 0x40, 0xc9, 0x37, 0xb0, 0x47, 0x75,
	0xab, 0xdb, 0x69, 0x07, 0x33, 0x61, 0xc4, 0xca, 0x75, 0xcf, 0x39, 0xf5, 0xba, 0x75, 0xef, 0x69,
	0xc3, 0x7d, 0x16, 0x89, 0x93, 0xa9, 0xd6, 0xd1, 0xc9, 0xe2, 0xf4, 0x44, 0xf1, 0x80, 0x69, 0x21,
	0xc3, 0x41, 0x34, 0x22, 0xad, 0x40, 0x2c, 0xf8, 0x60, 0x85, 0x2c, 0x4e, 0xdb, 0x8f, 0x27, 0x42,
	0x4f, 0x93, 0xd1, 0xc0, 0x93, 0xb3, 0x93, 0x89, 0x9c, 0xc8, 0x93, 0x48, 0x49, 0x2d, 0x47, 0xc9,
	0x18, 0x23, 0x0c, 0x70, 0x34, 0xc0, 0x61, 0xef, 0x8f, 0x02, 0x34, 0xbe, 0x12, 0x0b, 0xfe, 0x2c,
	0xf4, 0xa6, 0x52, 0x39, 0x7c, 0x4e, 0x06, 0x40, 0x46, 0xc9, 0x92, 0xc9, 0x31, 0x0b, 0x27, 0x73,
	0xf1, 0x6a, 0x2a, 0x02, 0xc1, 0x24, 0x2d, 0x74, 0x0b, 0xfd, 0x9a, 0xb3, 0x81, 0x21, 0x6d, 0xa8,
	0x46, 0x01, 0xd3, 0x63, 0xa9, 0x66, 0x74, 0x1b, 0x55, 0xab, 0x98, 0xdc, 0x83, 0x8a, 0xcf, 0x17,
	0xc2, 0xe3, 0xb4, 0x88, 0x4c, 0x1a, 0x91, 0x43, 0x28, 0x8f, 0x12, 0x11, 0xf8, 0xb4, 0x84, 0xb0,
	0x0d, 0xcc, 0x4a, 0xb1, 0x54, 0xda, 0x49, 0x02, 0x4e, 0xcb, 0xdd, 0x42, 0xbf, 0xe8, 0xac, 0x62,
	0xd2, 0x01, 0x18, 0x8b, 0x40, 0x73, 0x85, 0x6c, 0x05, 0xd9, 0x1c, 0x42, 0x28, 0xec, 0xcc, 0x13,
	0x16, 0x08, 0xbd, 0xa4, 0x3b, 0x48, 0x66, 0x61, 0xef, 0xc7, 0x2a, 0x34, 0xf3, 0x37, 0x8c, 0x23,
	0xf2, 0x29, 0x94, 0x95, 0x94, 0xb3, 0x98, 0x16, 0xba, 0xc5, 0x7e, 0x7d, 0xf8, 0xe1, 0xe0, 0x76,
	0x16, 0x07, 0xeb, 0x13, 0x06, 0x8e, 0x51, 0x3b, 0x76, 0x12, 0x39, 0x86, 0xba, 0x96, 0x9a, 0x05,
	0xae, 0x27, 0x93, 0x50, 0xe3, 0x9d, 0x8b, 0x0e, 0x20, 0x74, 0x66, 0x10, 0x72, 0x04, 0x35, 0x8f,
	0x29, 0xdf, 0xd5, 0xcb, 0xc8, 0x5e, 0xbc, 0xe8, 0x54, 0x0d, 0xf0, 0x62, 0x19, 0x71, 0xd2, 0x83,
	0xc6, 0x48, 0x4c, 0xdc, 0x1b, 0x41, 0x09, 0x05, 0xf5, 0x91, 0x98, 0x9c, 0xa5, 0x9a, 0xf6, 0x6f,
	0x15, 0x28, 0xe3, 0x96, 0x26, 0x81, 0x66, 0x53, 0xe1, 0xe3, 0x03, 0x14, 0x9d, 0x34, 0x22, 0x2d,
	0x28, 0x26, 0xc2, 0x4f, 0xf7, 0x36, 0x43, 0x93, 0xd2, 0x24, 0x64, 0xb3, 0x2c, 0xd3, 0x36, 0x20,
	0x04, 0x4a, 0x63, 0xe6, 0xf1, 0x34, 0xcf, 0x38, 0x36, 0x4a, 0x2d, 0x74, 0x9a, 0xe3, 0x9a, 0x63,
	0x03, 0x73, 0x2e, 0x93, 0x05, 0x57, 0xb3, 0x89, 0x8b, 0xeb, 0x54, 0x90, 0xad, 0x1b, 0xf0, 0x05,
	0x9b, 0x7c, 0x63, 0x56, 0x3b, 0x82, 0x9a, 0xd5, 0x88, 0x19, 0x4f, 0xd3, 0x5c, 0x45, 0x5e, 0xcc,
	0xb8, 0x39, 0xaa, 0x0c, 0x03, 0x11, 0x72, 0x5a, 0xb5, 0x47, 0xb5, 0x91, 0x79, 0x99, 0x28, 0x60,
	0xcb, 0x44, 0x05, 0xb4, 0x86, 0x4b, 0x66, 0x21, 0xf9, 0x00, 0x9a, 0xcc, 0xf3, 0x78, 0xa4, 0xdd,
	0xec, 0xe9, 0xa0, 0x5b, 0xec, 0x17, 0x9d, 0x86, 0x45, 0xbf, 0xb3, 0x20, 0x79, 0x04, 0x7b, 0x5e,
	0xa2, 0x14, 0x0f, 0x6f, 0x74, 0x75, 0xdc, 0xa1, 0x99, 0xc2, 0x99, 0xf0, 0x00, 0xca, 0xd1, 0xa5,
	0x2b, 0x7c, 0xba, 0x8b, 0x74, 0x29, 0xba, 0x3c, 0xf7, 0xc9, 0xc7, 0xb0, 0x1f, 0x47, 0xdc, 0x13,
	0x2c, 0x70, 0x99, 0xd6, 0x3c, 0x34, 0x2f, 0x4c, 0x1b, 0x28, 0x68, 0xa5, 0xc4, 0xb3, 0x0c, 0x37,
	0xe9, 0x62, 0x8a, 0x33, 0xda, 0xb4, 0x0b, 0x98, 0xb1, 0xb9, 0xb4, 0xf9, 0xb5, 0x49, 0xd9, 0xb3,
	0x05, 0x6e, 0x00, 0xcc, 0xc8, 0x43, 0x00, 0x24, 0x17, 0x43, 0xb3, 0x6f, 0xcb, 0xa6, 0xc4, 0x20,
	0x2f, 0x87, 0xe7, 0x3e, 0xe9, 0xc2, 0x6e, 0xc6, 0xe2, 0xec, 0x7d, 0x9c, 0x0d, 0x96, 0xc7, 0xf9,
	0x8f, 0xe1, 0x20, 0x53, 0x44, 0x0c, 0xaf, 0x88, 0x42, 0x82, 0xc2, 0x96, 0x15, 0x3e, 0x47, 0x02,
	0xe5, 0x1f, 0xc1, 0xfe, 0x2d, 0xb9, 0xf0, 0xe9, 0x81, 0x4d, 0x46, 0x5e, 0x7c, 0xee, 0x9b, 0xe4,
	0x8e, 0x94, 0x64, 0xbe, 0xc7, 0x62, 0x6d, 0x0b, 0xed, 0x10, 0x75, 0x8d, 0x15, 0x8a, 0xe5, 0xf8,
	0x08, 0xf6, 0xe4, 0x78, 0x2c, 0x30, 0x3f, 0x0b, 0xae, 0xc4, 0x78, 0x49, 0xdf, 0xb1, 0xeb, 0x65,
	0xf0, 0x4b, 0x44, 0x4d, 0x6a, 0x02, 0x11, 0x5e, 0xd2, 0x7b, 0xb6, 0x92, 0xcc, 0xd8, 0x54, 0x92,
	0x27, 0x17, 0x5c, 0xd1, 0xfb, 0xb6, 0x92, 0x30, 0x20, 0xef, 0x02, 0x44, 0x3c, 0xf4, 0xcd, 0xe9,
	0x54, 0x42, 0x29, 0x52, 0xb5, 0x14, 0x71, 0x12, 0xd2, 0x87, 0xd6, 0x0d, 0xed, 0x7a, 0x32, 0x90,
	0x8a, 0x3e, 0x40, 0x51, 0x73, 0x25, 0x3a, 0x33, 0x28, 0x79, 0x1f, 0x9a, 0x39, 0x65, 0x24, 0x3c,
	0xda, 0x46, 0xdd, 0xee, 0x4a, 0xf7, 0x5c, 0x78, 0xa6, 0x70, 0x4d, 0x41, 0xb9, 0x89, 0x0a, 0xdc,
	0xe9, 0xf0, 0xe9, 0x13, 0x7a, 0x64, 0x0b, 0xd7, 0x80, 0x17, 0x2a, 0xf8, 0x72, 0xf8, 0xf4, 0x49,
	0x6f, 0x0e, 0x7b, 0x17, 0xe1, 0xff, 0xb3, 0x39, 0x02, 0xa5, 0x88, 0x4d, 0x78, 0xda, 0x72, 0x38,
	0x46, 0xeb, 0x63, 0x13, 0x1e, 0x8b, 0x57, 0xab, 0x3e, 0xcf, 0xe2, 0xde, 0xcf, 0x15, 0x68, 0xad,
	0xef, 0x19, 0x47, 0xe4, 0xb3, 0x75, 0xe3, 0xe9, 0xff, 0xd3, 0x78, 0x6e, 0x4f, 0x79, 0x4b, 0xeb,
	0xe9, 0x41, 0x23, 0x94, 0xae, 0x11, 0xa7, 0x12, 0x7b, 0xac, 0x7a, 0x28, 0xcd, 0x3a, 0x56, 0xf3,
	0x00, 0xaa, 0x53, 0x16, 0xbb, 0x33, 0xa9, 0x32, 0xf3, 0xd9, 0x99, 0xb2, 0xf8, 0x6b, 0xa9, 0x78,
	0xfb, 0xaf, 0x52, 0x66, 0x3c, 0x59, 0xab, 0xfb, 0x3c, 0xf6, 0xd2, 0xac, 0x60, 0xab, 0x7f, 0xc1,
	0x63, 0x2f, 0xe7, 0x4a, 0xdb, 0x9b, 0x5c, 0xa9, 0xb8, 0xc1, 0x95, 0x4a, 0x9b, 0x5c, 0xa9, 0x9c,
	0x73, 0xa5, 0x8d, 0x7d, 0x5a, 0xf9, 0x97, 0x3e, 0xdd, 0x50, 0xb5, 0x3b, 0x1b, 0xab, 0xf6, 0x18,
	0xd0, 0xc0, 0xdc, 0x58, 0x33, 0x9d, 0xc4, 0xa9, 0x33, 0x81, 0x81, 0xbe, 0x47, 0x64, 0x43, 0x9b,
	0xd4, 0x36, 0xb5, 0x49, 0x66, 0x0c, 0x90, 0x33, 0x86, 0x0e, 0xc0, 0xea, 0xa4, 0x71, 0x6a, 0x49,
	0x39, 0x64, 0xdd, 0x38, 0x76, 0xdf, 0x68, 0x1c, 0x8d, 0x3b, 0x8c, 0xa3, 0xf9, 0x5f, 0x8d, 0x63,
	0xef, 0x6d, 0x8c, 0xa3, 0xb5, 0xd1, 0x38, 0xb2, 0x46, 0xdf, 0xcf, 0x35, 0xfa, 0x29, 0x1c, 0xb2,
	0x30, 0x94, 0x49, 0xe8, 0xf1, 0x99, 0x99, 0xec, 0xc9, 0xd0, 0x5c, 0x33, 0xf5, 0xa9, 0x83, 0x3c,
	0x77, 0x66, 0x29, 0xf3, 0x9e, 0x6b, 0x53, 0xf0, 0x9b, 0x71, 0x90, 0x1e, 0x2f, 0x47, 0x98, 0x6f,
	0xc7, 0xf0, 0x97, 0x02, 0x54, 0x9d, 0xb4, 0x0b, 0xc8, 0xb7, 0x80, 0x0f, 0x64, 0x7b, 0x80, 0x1c,
	0xbf, 0xf9, 0xe3, 0x3c, 0x6f, 0x77, 0xef, 0xfa, 0x7a, 0x93, 0x0b, 0xd8, 0x4d, 0xc2, 0xdc, 0x92,
	0xef, 0xdd, 0xd5, 0x76, 0xf3, 0x76, 0xef, 0xee, 0xce, 0xfc, 0xfc, 0xe1, 0xaf, 0x57, 0x9d, 0xc2,
	0xeb, 0xab, 0x4e, 0xe1, 0xcf, 0xab, 0x4e, 0xe1, 0xa7, 0xeb, 0xce, 0xd6, 0xeb, 0xeb, 0xce, 0xd6,
	0xef, 0xd7, 0x9d, 0xad, 0x1f, 0xb6, 0x17, 0xa7, 0xa3, 0x0a, 0xfe, 0xbf, 0xfa, 0xe4, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x8a, 0x5b, 0xa8, 0xd3, 0xbb, 0x09, 0x00, 0x00,
}
