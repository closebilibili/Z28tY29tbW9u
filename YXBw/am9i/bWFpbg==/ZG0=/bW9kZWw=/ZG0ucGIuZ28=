// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dm.proto

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		dm.proto

	It has these top-level messages:
		DM
		Content
		ContentSpecial
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DM struct {
	ID         int64           `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Type       int32           `protobuf:"varint,2,opt,name=Type,proto3" json:"type"`
	Oid        int64           `protobuf:"varint,3,opt,name=Oid,proto3" json:"oid"`
	Mid        int64           `protobuf:"varint,4,opt,name=Mid,proto3" json:"mid"`
	Progress   int32           `protobuf:"varint,5,opt,name=Progress,proto3" json:"progress"`
	Pool       int32           `protobuf:"varint,6,opt,name=Pool,proto3" json:"pool"`
	Attr       int32           `protobuf:"varint,7,opt,name=Attr,proto3" json:"attr"`
	State      int32           `protobuf:"varint,8,opt,name=State,proto3" json:"state"`
	Ctime      stime           `protobuf:"varint,9,opt,name=Ctime,proto3,casttype=stime" json:"ctime"`
	Mtime      stime           `protobuf:"varint,10,opt,name=Mtime,proto3,casttype=stime" json:"mtime"`
	Content    *Content        `protobuf:"bytes,11,opt,name=Content" json:"content,omitempty"`
	ContentSpe *ContentSpecial `protobuf:"bytes,12,opt,name=ContentSpe" json:"content_special,omitempty"`
}

func (m *DM) Reset()                    { *m = DM{} }
func (m *DM) String() string            { return proto.CompactTextString(m) }
func (*DM) ProtoMessage()               {}
func (*DM) Descriptor() ([]byte, []int) { return fileDescriptorDm, []int{0} }

func (m *DM) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DM) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *DM) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *DM) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *DM) GetProgress() int32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *DM) GetPool() int32 {
	if m != nil {
		return m.Pool
	}
	return 0
}

func (m *DM) GetAttr() int32 {
	if m != nil {
		return m.Attr
	}
	return 0
}

func (m *DM) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *DM) GetCtime() stime {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *DM) GetMtime() stime {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *DM) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *DM) GetContentSpe() *ContentSpecial {
	if m != nil {
		return m.ContentSpe
	}
	return nil
}

type Content struct {
	ID       int64               `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	FontSize int32               `protobuf:"varint,2,opt,name=FontSize,proto3" json:"fontsize"`
	Color    int64               `protobuf:"varint,3,opt,name=Color,proto3" json:"color"`
	Mode     int32               `protobuf:"varint,4,opt,name=Mode,proto3" json:"mode"`
	IP       int64               `protobuf:"varint,5,opt,name=IP,proto3" json:"ip"`
	Plat     int32               `protobuf:"varint,6,opt,name=Plat,proto3" json:"plat"`
	Msg      string              `protobuf:"bytes,7,opt,name=Msg,proto3" json:"msg"`
	Ctime    go_common_time.Time `protobuf:"varint,8,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime    go_common_time.Time `protobuf:"varint,9,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
}

func (m *Content) Reset()                    { *m = Content{} }
func (m *Content) String() string            { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()               {}
func (*Content) Descriptor() ([]byte, []int) { return fileDescriptorDm, []int{1} }

func (m *Content) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Content) GetFontSize() int32 {
	if m != nil {
		return m.FontSize
	}
	return 0
}

func (m *Content) GetColor() int64 {
	if m != nil {
		return m.Color
	}
	return 0
}

func (m *Content) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *Content) GetIP() int64 {
	if m != nil {
		return m.IP
	}
	return 0
}

func (m *Content) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *Content) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Content) GetCtime() go_common_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *Content) GetMtime() go_common_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

type ContentSpecial struct {
	ID    int64               `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Msg   string              `protobuf:"bytes,2,opt,name=Msg,proto3" json:"msg"`
	Ctime go_common_time.Time `protobuf:"varint,3,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime go_common_time.Time `protobuf:"varint,4,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
}

func (m *ContentSpecial) Reset()                    { *m = ContentSpecial{} }
func (m *ContentSpecial) String() string            { return proto.CompactTextString(m) }
func (*ContentSpecial) ProtoMessage()               {}
func (*ContentSpecial) Descriptor() ([]byte, []int) { return fileDescriptorDm, []int{2} }

func (m *ContentSpecial) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ContentSpecial) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ContentSpecial) GetCtime() go_common_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *ContentSpecial) GetMtime() go_common_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func init() {
	proto.RegisterType((*DM)(nil), "model.DM")
	proto.RegisterType((*Content)(nil), "model.Content")
	proto.RegisterType((*ContentSpecial)(nil), "model.ContentSpecial")
}
func (m *DM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DM) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.ID))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Type))
	}
	if m.Oid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Oid))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Mid))
	}
	if m.Progress != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Progress))
	}
	if m.Pool != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Pool))
	}
	if m.Attr != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Attr))
	}
	if m.State != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.State))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Mtime))
	}
	if m.Content != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Content.Size()))
		n1, err := m.Content.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ContentSpe != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.ContentSpe.Size()))
		n2, err := m.ContentSpe.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Content) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Content) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.ID))
	}
	if m.FontSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.FontSize))
	}
	if m.Color != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Color))
	}
	if m.Mode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Mode))
	}
	if m.IP != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.IP))
	}
	if m.Plat != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Plat))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDm(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Mtime))
	}
	return i, nil
}

func (m *ContentSpecial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContentSpecial) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.ID))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDm(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Mtime))
	}
	return i, nil
}

func encodeVarintDm(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DM) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDm(uint64(m.ID))
	}
	if m.Type != 0 {
		n += 1 + sovDm(uint64(m.Type))
	}
	if m.Oid != 0 {
		n += 1 + sovDm(uint64(m.Oid))
	}
	if m.Mid != 0 {
		n += 1 + sovDm(uint64(m.Mid))
	}
	if m.Progress != 0 {
		n += 1 + sovDm(uint64(m.Progress))
	}
	if m.Pool != 0 {
		n += 1 + sovDm(uint64(m.Pool))
	}
	if m.Attr != 0 {
		n += 1 + sovDm(uint64(m.Attr))
	}
	if m.State != 0 {
		n += 1 + sovDm(uint64(m.State))
	}
	if m.Ctime != 0 {
		n += 1 + sovDm(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovDm(uint64(m.Mtime))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovDm(uint64(l))
	}
	if m.ContentSpe != nil {
		l = m.ContentSpe.Size()
		n += 1 + l + sovDm(uint64(l))
	}
	return n
}

func (m *Content) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDm(uint64(m.ID))
	}
	if m.FontSize != 0 {
		n += 1 + sovDm(uint64(m.FontSize))
	}
	if m.Color != 0 {
		n += 1 + sovDm(uint64(m.Color))
	}
	if m.Mode != 0 {
		n += 1 + sovDm(uint64(m.Mode))
	}
	if m.IP != 0 {
		n += 1 + sovDm(uint64(m.IP))
	}
	if m.Plat != 0 {
		n += 1 + sovDm(uint64(m.Plat))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovDm(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovDm(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovDm(uint64(m.Mtime))
	}
	return n
}

func (m *ContentSpecial) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDm(uint64(m.ID))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovDm(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovDm(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovDm(uint64(m.Mtime))
	}
	return n
}

func sovDm(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDm(x uint64) (n int) {
	return sovDm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			m.Pool = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pool |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			m.Attr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (stime(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (stime(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentSpe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContentSpe == nil {
				m.ContentSpe = &ContentSpecial{}
			}
			if err := m.ContentSpe.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Content) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontSize", wireType)
			}
			m.FontSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FontSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			m.IP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IP |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentSpecial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContentSpecial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContentSpecial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDm
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDm
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDm(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDm = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDm   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dm.proto", fileDescriptorDm) }

var fileDescriptorDm = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x6a, 0xdb, 0x4c,
	0x14, 0xc5, 0x3f, 0x49, 0x96, 0x2d, 0x4f, 0x42, 0xf8, 0x3a, 0x25, 0x65, 0x52, 0x5a, 0xcb, 0x78,
	0xa5, 0x45, 0x63, 0x43, 0x0b, 0xd9, 0x96, 0xda, 0xa6, 0xe0, 0x85, 0xa9, 0x19, 0x7b, 0x5f, 0x6c,
	0x69, 0xa2, 0x0e, 0x68, 0x7c, 0x85, 0x34, 0x59, 0x38, 0x4f, 0xd2, 0xf7, 0xe8, 0x4b, 0x14, 0xba,
	0xe9, 0x13, 0x88, 0xe2, 0xee, 0xf4, 0x08, 0x5d, 0x95, 0xb9, 0x92, 0xff, 0x15, 0x12, 0x68, 0x77,
	0x9a, 0x73, 0xce, 0xbd, 0x3a, 0x9e, 0x9f, 0x30, 0xf1, 0x22, 0xd5, 0x4f, 0x33, 0xd0, 0x40, 0x5d,
	0x05, 0x91, 0x48, 0x9e, 0x5f, 0xc7, 0x52, 0x7f, 0xba, 0x5b, 0xf5, 0x43, 0x50, 0x83, 0x18, 0x62,
	0x18, 0xa0, 0xbb, 0xba, 0xbb, 0xc5, 0x13, 0x1e, 0xf0, 0xa9, 0x9a, 0xea, 0x6d, 0x1d, 0x62, 0x8f,
	0xa7, 0xf4, 0x19, 0xb1, 0x27, 0x63, 0x66, 0x75, 0xad, 0xc0, 0x19, 0x36, 0xcb, 0xc2, 0xb7, 0x65,
	0xc4, 0xed, 0xc9, 0x98, 0xbe, 0x20, 0x8d, 0xc5, 0x26, 0x15, 0xcc, 0xee, 0x5a, 0x81, 0x3b, 0xf4,
	0xca, 0xc2, 0x6f, 0xe8, 0x4d, 0x2a, 0x38, 0xaa, 0xf4, 0x8a, 0x38, 0x1f, 0x64, 0xc4, 0x1c, 0x1c,
	0x6b, 0x95, 0x85, 0xef, 0x80, 0x8c, 0xb8, 0xd1, 0x8c, 0x35, 0x95, 0x11, 0x6b, 0x1c, 0x2c, 0x65,
	0xac, 0xa9, 0x8c, 0x68, 0x40, 0xbc, 0x59, 0x06, 0x71, 0x26, 0xf2, 0x9c, 0xb9, 0xb8, 0xf7, 0xbc,
	0x2c, 0x7c, 0x2f, 0xad, 0x35, 0xbe, 0x77, 0xcd, 0xdb, 0x67, 0x00, 0x09, 0x6b, 0x1e, 0xde, 0x9e,
	0x02, 0x24, 0x1c, 0x55, 0xe3, 0xbe, 0xd3, 0x3a, 0x63, 0xad, 0x83, 0xbb, 0xd4, 0x3a, 0xe3, 0xa8,
	0x52, 0x9f, 0xb8, 0x73, 0xbd, 0xd4, 0x82, 0x79, 0x68, 0xb7, 0xcb, 0xc2, 0x77, 0x73, 0x23, 0xf0,
	0x4a, 0xa7, 0x01, 0x71, 0x47, 0x5a, 0x2a, 0xc1, 0xda, 0xd8, 0x91, 0x9a, 0x40, 0x68, 0x84, 0x5f,
	0x98, 0x94, 0x4a, 0xf0, 0x2a, 0x60, 0x92, 0x53, 0x4c, 0x92, 0x43, 0x52, 0xfd, 0x91, 0xc4, 0x00,
	0x7d, 0x4b, 0x5a, 0x23, 0x58, 0x6b, 0xb1, 0xd6, 0xec, 0xac, 0x6b, 0x05, 0x67, 0xaf, 0x2f, 0xfa,
	0x48, 0xa5, 0x5f, 0xab, 0xc3, 0xcb, 0xb2, 0xf0, 0x9f, 0x84, 0xd5, 0xe1, 0x15, 0x28, 0xa9, 0x85,
	0x4a, 0xf5, 0x86, 0xef, 0xa6, 0xe8, 0x82, 0x90, 0xfa, 0x71, 0x9e, 0x0a, 0x76, 0x8e, 0x3b, 0x2e,
	0x4f, 0x77, 0xcc, 0x53, 0x11, 0xca, 0x65, 0x32, 0x7c, 0x59, 0x16, 0xfe, 0x55, 0xbd, 0xea, 0x63,
	0x5e, 0x89, 0x47, 0x2b, 0x8f, 0xf6, 0xf4, 0xbe, 0xd9, 0xfb, 0x5e, 0x0f, 0x92, 0x0e, 0x88, 0xf7,
	0x1e, 0xd6, 0x7a, 0x2e, 0xef, 0x77, 0xb4, 0x91, 0xca, 0x2d, 0xac, 0x75, 0x2e, 0xef, 0x05, 0xdf,
	0xbb, 0xe6, 0x66, 0x47, 0x90, 0x40, 0x56, 0x73, 0xc7, 0x9b, 0x0d, 0x8d, 0xc0, 0x2b, 0xdd, 0x80,
	0x99, 0x42, 0x24, 0x10, 0x7e, 0x0d, 0xc6, 0xfc, 0x02, 0x8e, 0x2a, 0x16, 0x98, 0x21, 0xf8, 0x5d,
	0x81, 0x94, 0xdb, 0x93, 0x19, 0xc2, 0x4e, 0x96, 0xfa, 0x04, 0x76, 0xb2, 0xd4, 0x1c, 0x55, 0xfc,
	0x9e, 0xf2, 0x18, 0x59, 0xb7, 0xeb, 0xef, 0x29, 0x8f, 0xb9, 0xd1, 0xe8, 0xcd, 0x0e, 0xa4, 0x87,
	0x3b, 0xbb, 0xc7, 0x20, 0x9f, 0xc6, 0x70, 0x1d, 0x82, 0x52, 0xb0, 0x1e, 0x18, 0xa5, 0xbf, 0x38,
	0xc2, 0x7a, 0xb3, 0xc3, 0xda, 0x3e, 0xcc, 0xa9, 0x47, 0xe7, 0x30, 0xde, 0xfb, 0x62, 0x91, 0x8b,
	0x53, 0x16, 0x0f, 0x5e, 0x6a, 0xdd, 0xda, 0x7e, 0xac, 0xb5, 0xf3, 0x8f, 0xad, 0x1b, 0x7f, 0xd5,
	0x7a, 0xf8, 0xff, 0xd7, 0x6d, 0xc7, 0xfa, 0xbe, 0xed, 0x58, 0x3f, 0xb6, 0x1d, 0xeb, 0xf3, 0xcf,
	0xce, 0x7f, 0xab, 0x26, 0xfe, 0x03, 0xbc, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x4d, 0x76,
	0xda, 0x43, 0x04, 0x00, 0x00,
}
