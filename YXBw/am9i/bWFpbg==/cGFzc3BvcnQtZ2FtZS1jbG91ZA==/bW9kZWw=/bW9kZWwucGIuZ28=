// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: model.proto

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		model.proto

	It has these top-level messages:
		Perm
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Perm token.
type Perm struct {
	Mid          int64  `protobuf:"varint,1,opt,name=Mid,proto3" json:"mid"`
	AppID        int32  `protobuf:"varint,2,opt,name=AppID,proto3" json:"appid"`
	AppSubID     int32  `protobuf:"varint,3,opt,name=AppSubID,proto3" json:"app_subid"`
	AccessToken  string `protobuf:"bytes,4,opt,name=AccessToken,proto3" json:"access_token"`
	RefreshToken string `protobuf:"bytes,5,opt,name=RefreshToken,proto3" json:"refresh_token"`
	CreateAt     int64  `protobuf:"varint,6,opt,name=CreateAt,proto3" json:"create_at"`
	Expires      int64  `protobuf:"varint,7,opt,name=Expires,proto3" json:"expires"`
}

func (m *Perm) Reset()                    { *m = Perm{} }
func (m *Perm) String() string            { return proto.CompactTextString(m) }
func (*Perm) ProtoMessage()               {}
func (*Perm) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{0} }

func (m *Perm) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Perm) GetAppID() int32 {
	if m != nil {
		return m.AppID
	}
	return 0
}

func (m *Perm) GetAppSubID() int32 {
	if m != nil {
		return m.AppSubID
	}
	return 0
}

func (m *Perm) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *Perm) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *Perm) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *Perm) GetExpires() int64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func init() {
	proto.RegisterType((*Perm)(nil), "model.Perm")
}
func (m *Perm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Perm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Mid))
	}
	if m.AppID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.AppID))
	}
	if m.AppSubID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.AppSubID))
	}
	if len(m.AccessToken) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.AccessToken)))
		i += copy(dAtA[i:], m.AccessToken)
	}
	if len(m.RefreshToken) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.RefreshToken)))
		i += copy(dAtA[i:], m.RefreshToken)
	}
	if m.CreateAt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.CreateAt))
	}
	if m.Expires != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Expires))
	}
	return i, nil
}

func encodeFixed64Model(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Model(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Perm) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovModel(uint64(m.Mid))
	}
	if m.AppID != 0 {
		n += 1 + sovModel(uint64(m.AppID))
	}
	if m.AppSubID != 0 {
		n += 1 + sovModel(uint64(m.AppSubID))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovModel(uint64(m.CreateAt))
	}
	if m.Expires != 0 {
		n += 1 + sovModel(uint64(m.Expires))
	}
	return n
}

func sovModel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Perm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Perm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Perm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			m.AppID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppSubID", wireType)
			}
			m.AppSubID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppSubID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("model.proto", fileDescriptorModel) }

var fileDescriptorModel = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x4f, 0x4a, 0x3b, 0x31,
	0x1c, 0xc5, 0x7f, 0xe9, 0x74, 0x3a, 0xbf, 0xa6, 0x2d, 0xd4, 0xac, 0x46, 0x17, 0x93, 0x22, 0x08,
	0x75, 0x61, 0x0b, 0x8a, 0x07, 0x98, 0xb1, 0x2e, 0xba, 0x10, 0x24, 0xba, 0x2f, 0xf3, 0x27, 0x6d,
	0x83, 0x8e, 0x09, 0x99, 0x0c, 0x78, 0x14, 0xcf, 0xe0, 0x49, 0x5c, 0x7a, 0x82, 0x20, 0x75, 0x97,
	0x53, 0xc8, 0x7c, 0x47, 0x8b, 0xee, 0xf2, 0x3e, 0xef, 0x3d, 0x78, 0xf9, 0xe2, 0x41, 0x29, 0x0b,
	0xfe, 0x38, 0x53, 0x5a, 0x1a, 0x49, 0x7c, 0x10, 0x47, 0x67, 0x1b, 0x61, 0xb6, 0x75, 0x36, 0xcb,
	0x65, 0x39, 0xdf, 0xc8, 0x8d, 0x9c, 0x83, 0x9b, 0xd5, 0x6b, 0x50, 0x20, 0xe0, 0xd5, 0xb6, 0x8e,
	0x5f, 0x3b, 0xb8, 0x7b, 0xcb, 0x75, 0x49, 0x0e, 0xb1, 0x77, 0x23, 0x8a, 0x10, 0x4d, 0xd0, 0xd4,
	0x4b, 0x02, 0x67, 0xa9, 0x57, 0x8a, 0x82, 0x35, 0x8c, 0x50, 0xec, 0xc7, 0x4a, 0x2d, 0x17, 0x61,
	0x67, 0x82, 0xa6, 0x7e, 0xd2, 0x77, 0x96, 0xfa, 0xa9, 0x52, 0xa2, 0x60, 0x2d, 0x27, 0xa7, 0xf8,
	0x7f, 0xac, 0xd4, 0x5d, 0x9d, 0x2d, 0x17, 0xa1, 0x07, 0x99, 0x91, 0xb3, 0xb4, 0x9f, 0x2a, 0xb5,
	0xaa, 0xea, 0x4c, 0x14, 0x6c, 0x6f, 0x93, 0x73, 0x3c, 0x88, 0xf3, 0x9c, 0x57, 0xd5, 0xbd, 0x7c,
	0xe0, 0x4f, 0x61, 0x77, 0x82, 0xa6, 0xfd, 0x64, 0xec, 0x2c, 0x1d, 0xa6, 0x80, 0x57, 0xa6, 0xe1,
	0xec, 0x77, 0x88, 0x5c, 0xe2, 0x21, 0xe3, 0x6b, 0xcd, 0xab, 0x6d, 0x5b, 0xf2, 0xa1, 0x74, 0xe0,
	0x2c, 0x1d, 0xe9, 0x96, 0x7f, 0xb7, 0xfe, 0xc4, 0x9a, 0x55, 0x57, 0x9a, 0xa7, 0x86, 0xc7, 0x26,
	0xec, 0xc1, 0xb7, 0x60, 0x55, 0x0e, 0x6c, 0x95, 0x1a, 0xb6, 0xb7, 0xc9, 0x09, 0x0e, 0xae, 0x9f,
	0x95, 0xd0, 0xbc, 0x0a, 0x03, 0x48, 0x0e, 0x9c, 0xa5, 0x01, 0x6f, 0x11, 0xfb, 0xf1, 0x92, 0xf1,
	0xdb, 0x2e, 0x42, 0xef, 0xbb, 0x08, 0x7d, 0xec, 0x22, 0xf4, 0xf2, 0x19, 0xfd, 0xcb, 0x7a, 0x70,
	0xc5, 0x8b, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xc7, 0xd0, 0xe6, 0x8a, 0x01, 0x00, 0x00,
}
