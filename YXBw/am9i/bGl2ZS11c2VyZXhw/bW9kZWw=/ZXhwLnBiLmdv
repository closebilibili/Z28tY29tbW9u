// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exp.proto

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		exp.proto

	It has these top-level messages:
		Exp
		Level
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Exp struct {
	Uid  int64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"uid"`
	Uexp int64 `protobuf:"varint,2,opt,name=Uexp,proto3" json:"uexp"`
	Rexp int64 `protobuf:"varint,3,opt,name=Rexp,proto3" json:"rexp"`
}

func (m *Exp) Reset()                    { *m = Exp{} }
func (m *Exp) String() string            { return proto.CompactTextString(m) }
func (*Exp) ProtoMessage()               {}
func (*Exp) Descriptor() ([]byte, []int) { return fileDescriptorExp, []int{0} }

func (m *Exp) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Exp) GetUexp() int64 {
	if m != nil {
		return m.Uexp
	}
	return 0
}

func (m *Exp) GetRexp() int64 {
	if m != nil {
		return m.Rexp
	}
	return 0
}

type Level struct {
	Uid    int64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"uid"`
	Uexp   int64 `protobuf:"varint,2,opt,name=Uexp,proto3" json:"uexp"`
	Rexp   int64 `protobuf:"varint,3,opt,name=Rexp,proto3" json:"rexp"`
	Ulevel int32 `protobuf:"varint,4,opt,name=Ulevel,proto3" json:"ulevel"`
	Rlevel int32 `protobuf:"varint,5,opt,name=Rlevel,proto3" json:"rlevel"`
	Color  int32 `protobuf:"varint,6,opt,name=Color,proto3" json:"color"`
	Unext  int64 `protobuf:"varint,7,opt,name=Unext,proto3" json:"unext"`
	Rnext  int64 `protobuf:"varint,8,opt,name=Rnext,proto3" json:"rnext"`
}

func (m *Level) Reset()                    { *m = Level{} }
func (m *Level) String() string            { return proto.CompactTextString(m) }
func (*Level) ProtoMessage()               {}
func (*Level) Descriptor() ([]byte, []int) { return fileDescriptorExp, []int{1} }

func (m *Level) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Level) GetUexp() int64 {
	if m != nil {
		return m.Uexp
	}
	return 0
}

func (m *Level) GetRexp() int64 {
	if m != nil {
		return m.Rexp
	}
	return 0
}

func (m *Level) GetUlevel() int32 {
	if m != nil {
		return m.Ulevel
	}
	return 0
}

func (m *Level) GetRlevel() int32 {
	if m != nil {
		return m.Rlevel
	}
	return 0
}

func (m *Level) GetColor() int32 {
	if m != nil {
		return m.Color
	}
	return 0
}

func (m *Level) GetUnext() int64 {
	if m != nil {
		return m.Unext
	}
	return 0
}

func (m *Level) GetRnext() int64 {
	if m != nil {
		return m.Rnext
	}
	return 0
}

func init() {
	proto.RegisterType((*Exp)(nil), "model.Exp")
	proto.RegisterType((*Level)(nil), "model.Level")
}
func (m *Exp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Exp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Uid))
	}
	if m.Uexp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Uexp))
	}
	if m.Rexp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Rexp))
	}
	return i, nil
}

func (m *Level) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Level) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Uid))
	}
	if m.Uexp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Uexp))
	}
	if m.Rexp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Rexp))
	}
	if m.Ulevel != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Ulevel))
	}
	if m.Rlevel != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Rlevel))
	}
	if m.Color != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Color))
	}
	if m.Unext != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Unext))
	}
	if m.Rnext != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Rnext))
	}
	return i, nil
}

func encodeVarintExp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Exp) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovExp(uint64(m.Uid))
	}
	if m.Uexp != 0 {
		n += 1 + sovExp(uint64(m.Uexp))
	}
	if m.Rexp != 0 {
		n += 1 + sovExp(uint64(m.Rexp))
	}
	return n
}

func (m *Level) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovExp(uint64(m.Uid))
	}
	if m.Uexp != 0 {
		n += 1 + sovExp(uint64(m.Uexp))
	}
	if m.Rexp != 0 {
		n += 1 + sovExp(uint64(m.Rexp))
	}
	if m.Ulevel != 0 {
		n += 1 + sovExp(uint64(m.Ulevel))
	}
	if m.Rlevel != 0 {
		n += 1 + sovExp(uint64(m.Rlevel))
	}
	if m.Color != 0 {
		n += 1 + sovExp(uint64(m.Color))
	}
	if m.Unext != 0 {
		n += 1 + sovExp(uint64(m.Unext))
	}
	if m.Rnext != 0 {
		n += 1 + sovExp(uint64(m.Rnext))
	}
	return n
}

func sovExp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExp(x uint64) (n int) {
	return sovExp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Exp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Exp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Exp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uexp", wireType)
			}
			m.Uexp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uexp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rexp", wireType)
			}
			m.Rexp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rexp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Level) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Level: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Level: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uexp", wireType)
			}
			m.Uexp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uexp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rexp", wireType)
			}
			m.Rexp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rexp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ulevel", wireType)
			}
			m.Ulevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ulevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rlevel", wireType)
			}
			m.Rlevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rlevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unext", wireType)
			}
			m.Unext = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unext |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rnext", wireType)
			}
			m.Rnext = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rnext |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExp   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("exp.proto", fileDescriptorExp) }

var fileDescriptorExp = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x91, 0x31, 0x4e, 0xf3, 0x30,
	0x14, 0x80, 0x7f, 0x37, 0x71, 0xda, 0x7a, 0xfa, 0xe5, 0xc9, 0x20, 0x14, 0x57, 0x99, 0xba, 0xd0,
	0x0e, 0xdc, 0x20, 0x88, 0x8d, 0xc9, 0x52, 0x36, 0xa6, 0x34, 0x26, 0x44, 0x4a, 0xb1, 0x65, 0xc5,
	0xc8, 0x57, 0xe0, 0x06, 0x1c, 0x89, 0x91, 0x13, 0x44, 0x28, 0x6c, 0x39, 0x05, 0x7a, 0xcf, 0x95,
	0x72, 0x02, 0x36, 0xbf, 0xef, 0xfb, 0xac, 0x67, 0xc9, 0x6c, 0xab, 0x83, 0x3d, 0x58, 0x67, 0x06,
	0xc3, 0xe9, 0xd9, 0x34, 0xba, 0xbf, 0xbe, 0x6d, 0xbb, 0xe1, 0xc5, 0xd7, 0x87, 0x93, 0x39, 0x1f,
	0x5b, 0xd3, 0x9a, 0x23, 0xda, 0xda, 0x3f, 0xe3, 0x84, 0x03, 0x9e, 0xe2, 0xad, 0xe2, 0x89, 0x25,
	0x0f, 0xc1, 0xf2, 0x2b, 0x96, 0x54, 0x5d, 0x23, 0xc8, 0x8e, 0xec, 0x93, 0x72, 0x3d, 0x8f, 0x32,
	0xf1, 0x5d, 0xa3, 0x80, 0xf1, 0x1b, 0x96, 0x56, 0x3a, 0x58, 0xb1, 0x42, 0xb7, 0x99, 0x47, 0x99,
	0x7a, 0x1d, 0xac, 0x42, 0x0a, 0x56, 0x81, 0x4d, 0x16, 0xeb, 0xd0, 0x02, 0x2d, 0xde, 0x57, 0x8c,
	0x3e, 0xea, 0x37, 0xdd, 0xff, 0xd1, 0x02, 0x5e, 0xb0, 0xac, 0xea, 0x61, 0x81, 0x48, 0x77, 0x64,
	0x4f, 0x4b, 0x36, 0x8f, 0x32, 0xf3, 0x48, 0xd4, 0xc5, 0x40, 0xa3, 0x62, 0x43, 0x97, 0xc6, 0x5d,
	0x9a, 0x68, 0xb8, 0x64, 0xf4, 0xde, 0xf4, 0xc6, 0x89, 0x0c, 0x93, 0xed, 0x3c, 0x4a, 0x7a, 0x02,
	0xa0, 0x22, 0x87, 0xa0, 0x7a, 0xd5, 0x61, 0x10, 0x6b, 0x7c, 0x07, 0x06, 0x1e, 0x80, 0x8a, 0x1c,
	0x02, 0x85, 0xc1, 0x66, 0x09, 0x5c, 0x0c, 0x90, 0x97, 0xff, 0x3f, 0xa7, 0x9c, 0x7c, 0x4d, 0x39,
	0xf9, 0x9e, 0x72, 0xf2, 0xf1, 0x93, 0xff, 0xab, 0x33, 0xfc, 0x82, 0xbb, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x9c, 0x9c, 0xce, 0x04, 0xc5, 0x01, 0x00, 0x00,
}
