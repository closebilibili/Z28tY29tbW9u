// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/job/bbq/recall/proto/forward_index.proto

package proto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import quality "go-common/app/job/bbq/recall/proto/quality"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ForwardIndex struct {
	SVID                 uint64                `protobuf:"varint,1,opt,name=svid,proto3" json:"svid,omitempty"`
	BasicInfo            *VideoInfo            `protobuf:"bytes,2,opt,name=basic_info,json=basicInfo" json:"basic_info,omitempty"`
	VideoQuality         *quality.VideoQuality `protobuf:"bytes,3,opt,name=video_quality,json=videoQuality" json:"video_quality,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ForwardIndex) Reset()      { *m = ForwardIndex{} }
func (*ForwardIndex) ProtoMessage() {}
func (*ForwardIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_forward_index_5e589502d4b6c032, []int{0}
}
func (m *ForwardIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwardIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForwardIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ForwardIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardIndex.Merge(dst, src)
}
func (m *ForwardIndex) XXX_Size() int {
	return m.Size()
}
func (m *ForwardIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardIndex.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardIndex proto.InternalMessageInfo

type VideoInfo struct {
	SVID                 uint64   `protobuf:"varint,1,opt,name=svid,proto3" json:"svid,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content              string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	MID                  uint64   `protobuf:"varint,4,opt,name=mid,proto3" json:"mid,omitempty"`
	AVID                 uint64   `protobuf:"varint,5,opt,name=avid,proto3" json:"avid,omitempty"`
	CID                  uint64   `protobuf:"varint,6,opt,name=cid,proto3" json:"cid,omitempty"`
	PubTime              int64    `protobuf:"varint,7,opt,name=pubtime,proto3" json:"pubtime,omitempty"`
	CTime                int64    `protobuf:"varint,8,opt,name=ctime,proto3" json:"ctime,omitempty"`
	MTime                int64    `protobuf:"varint,9,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Duration             uint32   `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`
	State                int32    `protobuf:"varint,11,opt,name=state,proto3" json:"state,omitempty"`
	Tags                 []*Tag   `protobuf:"bytes,12,rep,name=tags" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoInfo) Reset()      { *m = VideoInfo{} }
func (*VideoInfo) ProtoMessage() {}
func (*VideoInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_forward_index_5e589502d4b6c032, []int{1}
}
func (m *VideoInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VideoInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoInfo.Merge(dst, src)
}
func (m *VideoInfo) XXX_Size() int {
	return m.Size()
}
func (m *VideoInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VideoInfo proto.InternalMessageInfo

type Tag struct {
	TagName              string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TagType              int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	TagID                int32    `protobuf:"varint,3,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tag) Reset()      { *m = Tag{} }
func (*Tag) ProtoMessage() {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_forward_index_5e589502d4b6c032, []int{2}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(dst, src)
}
func (m *Tag) XXX_Size() int {
	return m.Size()
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ForwardIndex)(nil), "bbq.job.recall.forwardindex.ForwardIndex")
	proto.RegisterType((*VideoInfo)(nil), "bbq.job.recall.forwardindex.VideoInfo")
	proto.RegisterType((*Tag)(nil), "bbq.job.recall.forwardindex.Tag")
}
func (m *ForwardIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SVID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintForwardIndex(dAtA, i, uint64(m.SVID))
	}
	if m.BasicInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintForwardIndex(dAtA, i, uint64(m.BasicInfo.Size()))
		n1, err := m.BasicInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.VideoQuality != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintForwardIndex(dAtA, i, uint64(m.VideoQuality.Size()))
		n2, err := m.VideoQuality.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VideoInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SVID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintForwardIndex(dAtA, i, uint64(m.SVID))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintForwardIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintForwardIndex(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.MID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintForwardIndex(dAtA, i, uint64(m.MID))
	}
	if m.AVID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintForwardIndex(dAtA, i, uint64(m.AVID))
	}
	if m.CID != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintForwardIndex(dAtA, i, uint64(m.CID))
	}
	if m.PubTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintForwardIndex(dAtA, i, uint64(m.PubTime))
	}
	if m.CTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintForwardIndex(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintForwardIndex(dAtA, i, uint64(m.MTime))
	}
	if m.Duration != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintForwardIndex(dAtA, i, uint64(m.Duration))
	}
	if m.State != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintForwardIndex(dAtA, i, uint64(m.State))
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x62
			i++
			i = encodeVarintForwardIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TagName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintForwardIndex(dAtA, i, uint64(len(m.TagName)))
		i += copy(dAtA[i:], m.TagName)
	}
	if m.TagType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintForwardIndex(dAtA, i, uint64(m.TagType))
	}
	if m.TagID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintForwardIndex(dAtA, i, uint64(m.TagID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintForwardIndex(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ForwardIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SVID != 0 {
		n += 1 + sovForwardIndex(uint64(m.SVID))
	}
	if m.BasicInfo != nil {
		l = m.BasicInfo.Size()
		n += 1 + l + sovForwardIndex(uint64(l))
	}
	if m.VideoQuality != nil {
		l = m.VideoQuality.Size()
		n += 1 + l + sovForwardIndex(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SVID != 0 {
		n += 1 + sovForwardIndex(uint64(m.SVID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovForwardIndex(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovForwardIndex(uint64(l))
	}
	if m.MID != 0 {
		n += 1 + sovForwardIndex(uint64(m.MID))
	}
	if m.AVID != 0 {
		n += 1 + sovForwardIndex(uint64(m.AVID))
	}
	if m.CID != 0 {
		n += 1 + sovForwardIndex(uint64(m.CID))
	}
	if m.PubTime != 0 {
		n += 1 + sovForwardIndex(uint64(m.PubTime))
	}
	if m.CTime != 0 {
		n += 1 + sovForwardIndex(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovForwardIndex(uint64(m.MTime))
	}
	if m.Duration != 0 {
		n += 1 + sovForwardIndex(uint64(m.Duration))
	}
	if m.State != 0 {
		n += 1 + sovForwardIndex(uint64(m.State))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovForwardIndex(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Tag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TagName)
	if l > 0 {
		n += 1 + l + sovForwardIndex(uint64(l))
	}
	if m.TagType != 0 {
		n += 1 + sovForwardIndex(uint64(m.TagType))
	}
	if m.TagID != 0 {
		n += 1 + sovForwardIndex(uint64(m.TagID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovForwardIndex(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozForwardIndex(x uint64) (n int) {
	return sovForwardIndex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ForwardIndex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardIndex{`,
		`SVID:` + fmt.Sprintf("%v", this.SVID) + `,`,
		`BasicInfo:` + strings.Replace(fmt.Sprintf("%v", this.BasicInfo), "VideoInfo", "VideoInfo", 1) + `,`,
		`VideoQuality:` + strings.Replace(fmt.Sprintf("%v", this.VideoQuality), "VideoQuality", "quality.VideoQuality", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VideoInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VideoInfo{`,
		`SVID:` + fmt.Sprintf("%v", this.SVID) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`MID:` + fmt.Sprintf("%v", this.MID) + `,`,
		`AVID:` + fmt.Sprintf("%v", this.AVID) + `,`,
		`CID:` + fmt.Sprintf("%v", this.CID) + `,`,
		`PubTime:` + fmt.Sprintf("%v", this.PubTime) + `,`,
		`CTime:` + fmt.Sprintf("%v", this.CTime) + `,`,
		`MTime:` + fmt.Sprintf("%v", this.MTime) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Tags:` + strings.Replace(fmt.Sprintf("%v", this.Tags), "Tag", "Tag", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Tag{`,
		`TagName:` + fmt.Sprintf("%v", this.TagName) + `,`,
		`TagType:` + fmt.Sprintf("%v", this.TagType) + `,`,
		`TagID:` + fmt.Sprintf("%v", this.TagID) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringForwardIndex(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ForwardIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForwardIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SVID", wireType)
			}
			m.SVID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SVID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForwardIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BasicInfo == nil {
				m.BasicInfo = &VideoInfo{}
			}
			if err := m.BasicInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoQuality", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForwardIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VideoQuality == nil {
				m.VideoQuality = &quality.VideoQuality{}
			}
			if err := m.VideoQuality.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForwardIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForwardIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForwardIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SVID", wireType)
			}
			m.SVID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SVID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForwardIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForwardIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MID", wireType)
			}
			m.MID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVID", wireType)
			}
			m.AVID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AVID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CID", wireType)
			}
			m.CID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubTime", wireType)
			}
			m.PubTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PubTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForwardIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForwardIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForwardIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForwardIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForwardIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagType", wireType)
			}
			m.TagType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TagType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagID", wireType)
			}
			m.TagID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TagID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForwardIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForwardIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipForwardIndex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowForwardIndex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowForwardIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthForwardIndex
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowForwardIndex
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipForwardIndex(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthForwardIndex = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowForwardIndex   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/job/bbq/recall/proto/forward_index.proto", fileDescriptor_forward_index_5e589502d4b6c032)
}

var fileDescriptor_forward_index_5e589502d4b6c032 = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcf, 0x6f, 0x9b, 0x30,
	0x14, 0xc7, 0x4b, 0x81, 0x26, 0x38, 0x89, 0x34, 0x71, 0xa2, 0xdd, 0x04, 0xa8, 0xd2, 0x26, 0x0e,
	0x1b, 0x48, 0xdd, 0x7d, 0xd2, 0x28, 0x9a, 0xc4, 0xa1, 0xd3, 0xe6, 0xa2, 0x1e, 0x76, 0x89, 0x6c,
	0x20, 0xcc, 0x55, 0xc0, 0x24, 0x31, 0xd9, 0x72, 0xdb, 0xbf, 0xb5, 0xff, 0x20, 0xc7, 0x1d, 0x77,
	0x42, 0xab, 0xff, 0x92, 0xc9, 0x76, 0x7e, 0xf4, 0xb2, 0xee, 0x64, 0xfb, 0xfb, 0x3e, 0xef, 0xbd,
	0xef, 0xb3, 0x01, 0xbc, 0x46, 0x6d, 0x1b, 0xdd, 0x53, 0x1c, 0x61, 0xbc, 0x88, 0x96, 0x65, 0x8e,
	0xe6, 0xf3, 0xa8, 0x5d, 0x52, 0x46, 0xa3, 0x19, 0x5d, 0x7e, 0x43, 0xcb, 0x62, 0x4a, 0x9a, 0xa2,
	0xfc, 0x1e, 0x4a, 0xcd, 0x7e, 0x8e, 0xf1, 0x22, 0xbc, 0xa7, 0x38, 0x54, 0x64, 0xb8, 0x63, 0x24,
	0x72, 0xf1, 0xa6, 0x22, 0xec, 0x6b, 0x87, 0xc3, 0x9c, 0xd6, 0x51, 0x45, 0x2b, 0xaa, 0xea, 0xe0,
	0x6e, 0x26, 0x4f, 0xaa, 0xa8, 0xd8, 0xa9, 0x5a, 0x17, 0xe1, 0x3f, 0x3b, 0x2f, 0x3a, 0x34, 0x27,
	0x6c, 0xb3, 0x5f, 0x15, 0x7f, 0xb9, 0xd5, 0xc0, 0xf8, 0x83, 0xea, 0x97, 0x8a, 0x7e, 0xf6, 0x0b,
	0x60, 0xac, 0xd6, 0xa4, 0x70, 0x34, 0x5f, 0x0b, 0x8c, 0x78, 0xc8, 0x7b, 0xcf, 0xb8, 0xbd, 0x4b,
	0x13, 0x28, 0x55, 0x3b, 0x03, 0x00, 0xa3, 0x15, 0xc9, 0xa7, 0xa4, 0x99, 0x51, 0xe7, 0xd4, 0xd7,
	0x82, 0xd1, 0xd5, 0xab, 0xf0, 0x09, 0xff, 0xe1, 0x1d, 0x29, 0x4a, 0x9a, 0x36, 0x33, 0x1a, 0x4f,
	0x78, 0xef, 0x59, 0xb1, 0xc8, 0x16, 0x47, 0x68, 0xe1, 0xfd, 0xd6, 0x4e, 0xc0, 0x64, 0x2d, 0xb0,
	0xe9, 0xce, 0x9b, 0xa3, 0xcb, 0xc2, 0x13, 0x95, 0xfc, 0x59, 0x89, 0xf1, 0x33, 0xde, 0x7b, 0xe3,
	0xc7, 0x0a, 0x1c, 0xaf, 0x1f, 0x9d, 0x2e, 0x7f, 0xea, 0xc0, 0x3a, 0x74, 0xfb, 0xcf, 0x1c, 0x1e,
	0x30, 0x19, 0x61, 0xf3, 0x52, 0x8e, 0x60, 0xc5, 0x16, 0xef, 0x3d, 0x33, 0x13, 0x02, 0x54, 0xba,
	0xfd, 0x12, 0x0c, 0x72, 0xda, 0xb0, 0xb2, 0x61, 0xd2, 0x8c, 0x15, 0x8f, 0x78, 0xef, 0x0d, 0xae,
	0x95, 0x04, 0xf7, 0x31, 0xfb, 0x1c, 0xe8, 0x35, 0x29, 0x1c, 0x43, 0x36, 0x19, 0xf0, 0xde, 0xd3,
	0x6f, 0xd2, 0x04, 0x0a, 0x4d, 0x18, 0x40, 0xc2, 0x80, 0x79, 0x34, 0xf0, 0x5e, 0x1a, 0x10, 0xaa,
	0x48, 0xcc, 0x49, 0xe1, 0x9c, 0x1d, 0x13, 0xaf, 0x45, 0x62, 0x4e, 0x0a, 0xd1, 0xba, 0xed, 0x30,
	0x23, 0x75, 0xe9, 0x0c, 0x7c, 0x2d, 0xd0, 0x55, 0xeb, 0x4f, 0x1d, 0xce, 0x48, 0x5d, 0xc2, 0x7d,
	0x4c, 0x8c, 0x90, 0x4b, 0x68, 0x28, 0x21, 0x39, 0xc2, 0xb5, 0x44, 0x94, 0x2e, 0x80, 0x5a, 0x02,
	0xd6, 0x11, 0xb8, 0x51, 0x80, 0xd4, 0xed, 0x00, 0x0c, 0x8b, 0x6e, 0x89, 0x18, 0xa1, 0x8d, 0x03,
	0x7c, 0x2d, 0x98, 0xc4, 0x63, 0xde, 0x7b, 0xc3, 0x64, 0xa7, 0xc1, 0x43, 0x54, 0x94, 0x5a, 0x31,
	0xc4, 0x4a, 0x67, 0xe4, 0x6b, 0x81, 0xa9, 0x4a, 0xdd, 0x0a, 0x01, 0x2a, 0xdd, 0x7e, 0x07, 0x0c,
	0x86, 0xaa, 0x95, 0x33, 0xf6, 0xf5, 0x60, 0x74, 0xe5, 0x3f, 0xf9, 0x45, 0x64, 0xa8, 0x52, 0xd7,
	0x91, 0xa1, 0x6a, 0x05, 0x65, 0xde, 0x25, 0x06, 0x7a, 0x86, 0x2a, 0xdb, 0x03, 0x46, 0x83, 0xea,
	0x52, 0x3e, 0xda, 0xee, 0xca, 0x33, 0x54, 0x7d, 0x44, 0x75, 0x09, 0x65, 0x40, 0x00, 0x6c, 0xd3,
	0xaa, 0x67, 0x33, 0x0f, 0x40, 0xb6, 0x69, 0x4b, 0x28, 0x03, 0xf6, 0x39, 0x38, 0x4d, 0x13, 0xf9,
	0x64, 0x3b, 0x9b, 0x19, 0xaa, 0xd2, 0x04, 0x9e, 0xa6, 0x49, 0xec, 0x6d, 0x1f, 0xdc, 0x93, 0xdf,
	0x0f, 0xee, 0xc9, 0x0f, 0xee, 0x6a, 0x5b, 0xee, 0x6a, 0xbf, 0xb8, 0xab, 0xfd, 0xe1, 0xae, 0xf6,
	0xc5, 0x54, 0xff, 0xd4, 0x99, 0x5c, 0xde, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x68, 0x04,
	0x6a, 0xbe, 0x03, 0x00, 0x00,
}
