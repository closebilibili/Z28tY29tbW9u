// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: room.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RoomMngGetSecondVerifyListReq struct {
	// 房间id
	RoomId int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty" form:"room_id"`
	// 分区id多个
	Area string `protobuf:"bytes,2,opt,name=area,proto3" json:"area,omitempty" form:"area"`
	// 页数
	Page int64 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty" form:"page" validate:"required"`
	// 页码
	Pagesize int64 `protobuf:"varint,4,opt,name=pagesize,proto3" json:"pagesize,omitempty" form:"pagesize"`
	// 业务，0直播监控1直播鉴黄2房间举报
	Biz                  string   `protobuf:"bytes,5,opt,name=biz,proto3" json:"biz,omitempty" form:"biz"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomMngGetSecondVerifyListReq) Reset()         { *m = RoomMngGetSecondVerifyListReq{} }
func (m *RoomMngGetSecondVerifyListReq) String() string { return proto.CompactTextString(m) }
func (*RoomMngGetSecondVerifyListReq) ProtoMessage()    {}
func (*RoomMngGetSecondVerifyListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_room_50fcdc486274d553, []int{0}
}
func (m *RoomMngGetSecondVerifyListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMngGetSecondVerifyListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMngGetSecondVerifyListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMngGetSecondVerifyListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMngGetSecondVerifyListReq.Merge(dst, src)
}
func (m *RoomMngGetSecondVerifyListReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomMngGetSecondVerifyListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMngGetSecondVerifyListReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMngGetSecondVerifyListReq proto.InternalMessageInfo

func (m *RoomMngGetSecondVerifyListReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListReq) GetArea() string {
	if m != nil {
		return m.Area
	}
	return ""
}

func (m *RoomMngGetSecondVerifyListReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListReq) GetPagesize() int64 {
	if m != nil {
		return m.Pagesize
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListReq) GetBiz() string {
	if m != nil {
		return m.Biz
	}
	return ""
}

type RoomMngGetSecondVerifyListResp struct {
	//
	Result []*RoomMngGetSecondVerifyListResp_Result `protobuf:"bytes,1,rep,name=result" json:"result"`
	// 总数
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	// 页码
	Page int64 `protobuf:"varint,3,opt,name=page,proto3" json:"page"`
	// 分页大小
	Pagesize             int64    `protobuf:"varint,4,opt,name=pagesize,proto3" json:"pagesize"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomMngGetSecondVerifyListResp) Reset()         { *m = RoomMngGetSecondVerifyListResp{} }
func (m *RoomMngGetSecondVerifyListResp) String() string { return proto.CompactTextString(m) }
func (*RoomMngGetSecondVerifyListResp) ProtoMessage()    {}
func (*RoomMngGetSecondVerifyListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_room_50fcdc486274d553, []int{1}
}
func (m *RoomMngGetSecondVerifyListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMngGetSecondVerifyListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMngGetSecondVerifyListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMngGetSecondVerifyListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMngGetSecondVerifyListResp.Merge(dst, src)
}
func (m *RoomMngGetSecondVerifyListResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomMngGetSecondVerifyListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMngGetSecondVerifyListResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMngGetSecondVerifyListResp proto.InternalMessageInfo

func (m *RoomMngGetSecondVerifyListResp) GetResult() []*RoomMngGetSecondVerifyListResp_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RoomMngGetSecondVerifyListResp) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListResp) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListResp) GetPagesize() int64 {
	if m != nil {
		return m.Pagesize
	}
	return 0
}

type RoomMngGetSecondVerifyListResp_Result struct {
	// 日志id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 当天切断记录
	RecentCutTimes int64 `protobuf:"varint,2,opt,name=recent_cut_times,json=recentCutTimes,proto3" json:"recent_cut_times"`
	// 当天警告记录
	RecentWarnTimes int64 `protobuf:"varint,3,opt,name=recent_warn_times,json=recentWarnTimes,proto3" json:"recent_warn_times"`
	// 用户名
	Uname string `protobuf:"bytes,4,opt,name=uname,proto3" json:"uname"`
	// 房间号
	RoomId int64 `protobuf:"varint,5,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	// 主播id
	Uid int64 `protobuf:"varint,6,opt,name=uid,proto3" json:"uid"`
	// 房间标题
	Title string `protobuf:"bytes,7,opt,name=title,proto3" json:"title"`
	// 分区名
	AreaV2Name string `protobuf:"bytes,8,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name"`
	// 粉丝数
	Fc int64 `protobuf:"varint,9,opt,name=fc,proto3" json:"fc"`
	// 警告理由
	WarnReason string `protobuf:"bytes,10,opt,name=warn_reason,json=warnReason,proto3" json:"warn_reason"`
	// 图片列表
	Pics []string `protobuf:"bytes,11,rep,name=pics" json:"pics"`
	// 警告时间
	BreakTime string `protobuf:"bytes,12,opt,name=break_time,json=breakTime,proto3" json:"break_time"`
	// 共计警告时间
	WarnTimes            int64    `protobuf:"varint,13,opt,name=warn_times,json=warnTimes,proto3" json:"warn_times"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomMngGetSecondVerifyListResp_Result) Reset()         { *m = RoomMngGetSecondVerifyListResp_Result{} }
func (m *RoomMngGetSecondVerifyListResp_Result) String() string { return proto.CompactTextString(m) }
func (*RoomMngGetSecondVerifyListResp_Result) ProtoMessage()    {}
func (*RoomMngGetSecondVerifyListResp_Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_room_50fcdc486274d553, []int{1, 0}
}
func (m *RoomMngGetSecondVerifyListResp_Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMngGetSecondVerifyListResp_Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMngGetSecondVerifyListResp_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMngGetSecondVerifyListResp_Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMngGetSecondVerifyListResp_Result.Merge(dst, src)
}
func (m *RoomMngGetSecondVerifyListResp_Result) XXX_Size() int {
	return m.Size()
}
func (m *RoomMngGetSecondVerifyListResp_Result) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMngGetSecondVerifyListResp_Result.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMngGetSecondVerifyListResp_Result proto.InternalMessageInfo

func (m *RoomMngGetSecondVerifyListResp_Result) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetRecentCutTimes() int64 {
	if m != nil {
		return m.RecentCutTimes
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetRecentWarnTimes() int64 {
	if m != nil {
		return m.RecentWarnTimes
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetFc() int64 {
	if m != nil {
		return m.Fc
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetWarnReason() string {
	if m != nil {
		return m.WarnReason
	}
	return ""
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetPics() []string {
	if m != nil {
		return m.Pics
	}
	return nil
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetBreakTime() string {
	if m != nil {
		return m.BreakTime
	}
	return ""
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetWarnTimes() int64 {
	if m != nil {
		return m.WarnTimes
	}
	return 0
}

func init() {
	proto.RegisterType((*RoomMngGetSecondVerifyListReq)(nil), "live.liveadmin.v1.RoomMngGetSecondVerifyListReq")
	proto.RegisterType((*RoomMngGetSecondVerifyListResp)(nil), "live.liveadmin.v1.RoomMngGetSecondVerifyListResp")
	proto.RegisterType((*RoomMngGetSecondVerifyListResp_Result)(nil), "live.liveadmin.v1.RoomMngGetSecondVerifyListResp.Result")
}
func (m *RoomMngGetSecondVerifyListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMngGetSecondVerifyListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.RoomId))
	}
	if len(m.Area) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Area)))
		i += copy(dAtA[i:], m.Area)
	}
	if m.Page != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Page))
	}
	if m.Pagesize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Pagesize))
	}
	if len(m.Biz) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Biz)))
		i += copy(dAtA[i:], m.Biz)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomMngGetSecondVerifyListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMngGetSecondVerifyListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, msg := range m.Result {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Count))
	}
	if m.Page != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Page))
	}
	if m.Pagesize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Pagesize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomMngGetSecondVerifyListResp_Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMngGetSecondVerifyListResp_Result) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Id))
	}
	if m.RecentCutTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.RecentCutTimes))
	}
	if m.RecentWarnTimes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.RecentWarnTimes))
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if m.RoomId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.RoomId))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Uid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if m.Fc != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Fc))
	}
	if len(m.WarnReason) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.WarnReason)))
		i += copy(dAtA[i:], m.WarnReason)
	}
	if len(m.Pics) > 0 {
		for _, s := range m.Pics {
			dAtA[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.BreakTime) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.BreakTime)))
		i += copy(dAtA[i:], m.BreakTime)
	}
	if m.WarnTimes != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.WarnTimes))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRoom(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RoomMngGetSecondVerifyListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovRoom(uint64(m.RoomId))
	}
	l = len(m.Area)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovRoom(uint64(m.Page))
	}
	if m.Pagesize != 0 {
		n += 1 + sovRoom(uint64(m.Pagesize))
	}
	l = len(m.Biz)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomMngGetSecondVerifyListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovRoom(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovRoom(uint64(m.Count))
	}
	if m.Page != 0 {
		n += 1 + sovRoom(uint64(m.Page))
	}
	if m.Pagesize != 0 {
		n += 1 + sovRoom(uint64(m.Pagesize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomMngGetSecondVerifyListResp_Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRoom(uint64(m.Id))
	}
	if m.RecentCutTimes != 0 {
		n += 1 + sovRoom(uint64(m.RecentCutTimes))
	}
	if m.RecentWarnTimes != 0 {
		n += 1 + sovRoom(uint64(m.RecentWarnTimes))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.RoomId != 0 {
		n += 1 + sovRoom(uint64(m.RoomId))
	}
	if m.Uid != 0 {
		n += 1 + sovRoom(uint64(m.Uid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.Fc != 0 {
		n += 1 + sovRoom(uint64(m.Fc))
	}
	l = len(m.WarnReason)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if len(m.Pics) > 0 {
		for _, s := range m.Pics {
			l = len(s)
			n += 1 + l + sovRoom(uint64(l))
		}
	}
	l = len(m.BreakTime)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.WarnTimes != 0 {
		n += 1 + sovRoom(uint64(m.WarnTimes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRoom(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRoom(x uint64) (n int) {
	return sovRoom(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoomMngGetSecondVerifyListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomMngGetSecondVerifyListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomMngGetSecondVerifyListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Area = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagesize", wireType)
			}
			m.Pagesize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pagesize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Biz", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Biz = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMngGetSecondVerifyListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomMngGetSecondVerifyListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomMngGetSecondVerifyListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &RoomMngGetSecondVerifyListResp_Result{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagesize", wireType)
			}
			m.Pagesize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pagesize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMngGetSecondVerifyListResp_Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentCutTimes", wireType)
			}
			m.RecentCutTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecentCutTimes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentWarnTimes", wireType)
			}
			m.RecentWarnTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecentWarnTimes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fc", wireType)
			}
			m.Fc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fc |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarnReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WarnReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pics = append(m.Pics, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BreakTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BreakTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarnTimes", wireType)
			}
			m.WarnTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WarnTimes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoom(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRoom
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRoom
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRoom(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRoom = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoom   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("room.proto", fileDescriptor_room_50fcdc486274d553) }

var fileDescriptor_room_50fcdc486274d553 = []byte{
	// 671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x57, 0x9a, 0x36, 0x5b, 0x5e, 0xc7, 0xfe, 0x18, 0x98, 0xc2, 0x80, 0xba, 0xca, 0x38, 0x54,
	0x42, 0xcb, 0xb6, 0x72, 0x00, 0xed, 0x80, 0x44, 0x39, 0x20, 0x24, 0x86, 0x90, 0x41, 0x9b, 0x84,
	0x90, 0xaa, 0x34, 0x71, 0x33, 0x8b, 0x26, 0xd9, 0x12, 0xa7, 0x13, 0x3b, 0x72, 0xe4, 0xc0, 0x67,
	0xe0, 0xe3, 0x70, 0xe4, 0x13, 0x58, 0x68, 0xc7, 0x1c, 0x7b, 0x47, 0x42, 0xb6, 0xb3, 0xb6, 0x53,
	0xa5, 0x49, 0xbb, 0xe4, 0xf9, 0xfd, 0xde, 0xcf, 0xcf, 0xcf, 0xbf, 0xf7, 0x1c, 0x80, 0x2c, 0x4d,
	0x63, 0xef, 0x34, 0x4b, 0x79, 0x8a, 0x36, 0x46, 0x6c, 0x4c, 0x3d, 0xf9, 0xf1, 0xc3, 0x98, 0x25,
	0xde, 0x78, 0x7f, 0x6b, 0x27, 0x62, 0xfc, 0xa4, 0x18, 0x78, 0x41, 0x1a, 0xef, 0x46, 0x69, 0x94,
	0xee, 0x2a, 0xe6, 0xa0, 0x18, 0x2a, 0x4f, 0x39, 0x6a, 0xa5, 0x33, 0xb8, 0xff, 0x0c, 0x78, 0x4c,
	0xd2, 0x34, 0x3e, 0x4c, 0xa2, 0x37, 0x94, 0x7f, 0xa4, 0x41, 0x9a, 0x84, 0x47, 0x34, 0x63, 0xc3,
	0x6f, 0xef, 0x58, 0xce, 0x09, 0x3d, 0x43, 0x4f, 0x61, 0x49, 0x9e, 0xd8, 0x67, 0xa1, 0x63, 0xb4,
	0x8d, 0x8e, 0xd9, 0x43, 0x13, 0x81, 0x57, 0x87, 0x69, 0x16, 0x1f, 0xb8, 0x55, 0xc0, 0x25, 0x96,
	0x5c, 0xbd, 0x0d, 0xd1, 0x36, 0xd4, 0xfd, 0x8c, 0xfa, 0x4e, 0xad, 0x6d, 0x74, 0xec, 0xde, 0xda,
	0x44, 0xe0, 0xa6, 0x66, 0x4a, 0xd4, 0x25, 0x2a, 0x88, 0x9e, 0x43, 0xfd, 0xd4, 0x8f, 0xa8, 0x63,
	0xaa, 0x74, 0xdb, 0x13, 0x81, 0xb1, 0x26, 0x49, 0xd4, 0x6d, 0x8f, 0xfd, 0x11, 0x0b, 0x7d, 0x4e,
	0x0f, 0xdc, 0x8c, 0x9e, 0x15, 0x2c, 0xa3, 0xa1, 0x4b, 0xd4, 0x06, 0xb4, 0x0b, 0xcb, 0xd2, 0xe6,
	0xec, 0x82, 0x3a, 0x75, 0xb5, 0xf9, 0xee, 0x44, 0xe0, 0xb5, 0xd9, 0x66, 0x19, 0x71, 0xc9, 0x94,
	0x84, 0xda, 0x60, 0x0e, 0xd8, 0x85, 0xd3, 0x50, 0xd5, 0xac, 0x4e, 0x04, 0x06, 0xcd, 0x1d, 0xb0,
	0x0b, 0x97, 0xc8, 0x90, 0xfb, 0xc3, 0x82, 0xd6, 0x4d, 0xf7, 0xcf, 0x4f, 0xd1, 0x17, 0xb0, 0x32,
	0x9a, 0x17, 0x23, 0xee, 0x18, 0x6d, 0xb3, 0xd3, 0xec, 0xbe, 0xf0, 0x16, 0x54, 0xf7, 0x6e, 0x4e,
	0xe1, 0x11, 0xb5, 0xbf, 0x07, 0xa5, 0xc0, 0x55, 0x2e, 0x52, 0x59, 0x84, 0xa1, 0x11, 0xa4, 0x45,
	0xc2, 0x95, 0x64, 0x66, 0xcf, 0x2e, 0x05, 0xd6, 0x00, 0xd1, 0x06, 0x3d, 0xba, 0xa6, 0xd6, 0x72,
	0x29, 0xb0, 0xf2, 0x2b, 0x49, 0x3a, 0x0b, 0x92, 0xac, 0x94, 0x02, 0x4f, 0xb1, 0x99, 0x16, 0x5b,
	0xbf, 0xea, 0x60, 0xe9, 0x3a, 0xd0, 0x26, 0xd4, 0xa6, 0xdd, 0xb4, 0x4a, 0x81, 0x6b, 0x2c, 0x24,
	0x35, 0x16, 0xa2, 0x97, 0xb0, 0x9e, 0xd1, 0x80, 0x26, 0xbc, 0x1f, 0x14, 0xbc, 0xcf, 0x59, 0x4c,
	0xf3, 0xaa, 0xac, 0x7b, 0xa5, 0xc0, 0x0b, 0x31, 0xb2, 0xaa, 0x91, 0xd7, 0x05, 0xff, 0x24, 0x7d,
	0xf4, 0x0a, 0x36, 0x2a, 0xce, 0xb9, 0x9f, 0x25, 0x55, 0x02, 0x5d, 0xf7, 0xfd, 0x52, 0xe0, 0xc5,
	0x20, 0x59, 0xd3, 0xd0, 0xb1, 0x9f, 0x25, 0x3a, 0x05, 0x86, 0x46, 0x91, 0xf8, 0xb1, 0xbe, 0x8c,
	0xad, 0xe5, 0x50, 0x00, 0xd1, 0x06, 0x3d, 0x99, 0x8d, 0x63, 0x43, 0x65, 0x6e, 0x96, 0x02, 0x5f,
	0x41, 0xd3, 0x39, 0x7c, 0x00, 0x66, 0xc1, 0x42, 0xc7, 0x52, 0x8c, 0xa5, 0x52, 0x60, 0xe9, 0x12,
	0xf9, 0x91, 0x27, 0x70, 0xc6, 0x47, 0xd4, 0x59, 0x9a, 0x9d, 0xa0, 0x00, 0xa2, 0x0d, 0xea, 0xc2,
	0x8a, 0x1c, 0xd3, 0xfe, 0xb8, 0xdb, 0x57, 0x95, 0x2c, 0x2b, 0xde, 0x7a, 0x29, 0xf0, 0x35, 0x9c,
	0x80, 0xf4, 0x8e, 0xba, 0xef, 0x65, 0x55, 0x9b, 0x50, 0x1b, 0x06, 0x8e, 0x3d, 0x53, 0x74, 0x18,
	0x90, 0xda, 0x30, 0x40, 0x7b, 0xd0, 0x54, 0xb7, 0xcd, 0xa8, 0x9f, 0xa7, 0x89, 0x03, 0xfa, 0x59,
	0x94, 0x02, 0xcf, 0xc3, 0x04, 0xa4, 0x43, 0xd4, 0x5a, 0xb5, 0x9b, 0x05, 0xb9, 0xd3, 0x6c, 0x9b,
	0x1d, 0xbb, 0x6a, 0x37, 0x0b, 0x72, 0xa2, 0xbe, 0x68, 0x07, 0x60, 0x90, 0x51, 0xff, 0xab, 0x92,
	0xcf, 0x59, 0xd1, 0x73, 0x5d, 0x0a, 0x3c, 0x87, 0x12, 0x5b, 0xad, 0xa5, 0x9c, 0x92, 0x3e, 0xd7,
	0x89, 0x3b, 0xaa, 0x3c, 0x45, 0x9f, 0x6b, 0x81, 0x7d, 0x7e, 0x25, 0x7e, 0xf7, 0xa7, 0xa1, 0xc5,
	0x3d, 0x4c, 0x22, 0xf4, 0xdd, 0x80, 0x87, 0xd1, 0xe2, 0x38, 0x1f, 0x33, 0x7e, 0xf2, 0x41, 0x56,
	0xb2, 0x77, 0xcb, 0x57, 0x70, 0xb6, 0xb5, 0x7f, 0xeb, 0x77, 0xd3, 0x5b, 0xff, 0x7d, 0xd9, 0x32,
	0xfe, 0x5c, 0xb6, 0x8c, 0xbf, 0x97, 0x2d, 0xe3, 0x73, 0x6d, 0xbc, 0x3f, 0xb0, 0xd4, 0x6f, 0xeb,
	0xd9, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x23, 0x5c, 0xc0, 0x4f, 0x06, 0x05, 0x00, 0x00,
}
