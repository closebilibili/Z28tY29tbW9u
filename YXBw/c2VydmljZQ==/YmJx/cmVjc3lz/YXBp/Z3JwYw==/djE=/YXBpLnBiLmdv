// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/bbq/recsys/api/grpc/v1/api.proto

// use {app_id}.{version} as package name

package v1

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RecsysRequest struct {
	MID                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid" form:"mid"`
	BUVID                string   `protobuf:"bytes,2,opt,name=buvid,proto3" json:"buvid" form:"buvid"`
	Limit                int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit" form:"limit"`
	Offset               int32    `protobuf:"varint,4,opt,name=offset,proto3" json:"offset" form:"offset"`
	SVID                 int64    `protobuf:"varint,5,opt,name=svid,proto3" json:"svid" form:"svid"`
	Abtest               string   `protobuf:"bytes,6,opt,name=abtest,proto3" json:"abtest" form:"abtest"`
	TraceID              string   `protobuf:"bytes,7,opt,name=traceID,proto3" json:"traceID" form:"traceID"`
	DebugFlag            bool     `protobuf:"varint,8,opt,name=debug_flag,json=debugFlag,proto3" json:"debugFlag" form:"debugFlag"`
	DebugType            string   `protobuf:"bytes,9,opt,name=debug_type,json=debugType,proto3" json:"debugType" form:"debugType"`
	QueryID              string   `protobuf:"bytes,10,opt,name=queryID,proto3" json:"queryID" form:"queryID"`
	App                  string   `protobuf:"bytes,11,opt,name=app,proto3" json:"app" form:"app"`
	AppVersion           string   `protobuf:"bytes,12,opt,name=appVersion,proto3" json:"appVersion" form:"appVersion"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecsysRequest) Reset()      { *m = RecsysRequest{} }
func (*RecsysRequest) ProtoMessage() {}
func (*RecsysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b9e00c05e1192e6, []int{0}
}
func (m *RecsysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecsysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecsysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecsysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecsysRequest.Merge(m, src)
}
func (m *RecsysRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecsysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecsysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecsysRequest proto.InternalMessageInfo

type RecsysResponse struct {
	Message              map[string]string `protobuf:"bytes,1,rep,name=message,proto3" json:"message,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	List                 []*RecsysRecord   `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RecsysResponse) Reset()      { *m = RecsysResponse{} }
func (*RecsysResponse) ProtoMessage() {}
func (*RecsysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b9e00c05e1192e6, []int{1}
}
func (m *RecsysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecsysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecsysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecsysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecsysResponse.Merge(m, src)
}
func (m *RecsysResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecsysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecsysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecsysResponse proto.InternalMessageInfo

type RecsysRecord struct {
	Svid                 int64             `protobuf:"varint,1,opt,name=svid,proto3" json:"svid,omitempty"`
	Score                float64           `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	Map                  map[string]string `protobuf:"bytes,3,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RecsysRecord) Reset()      { *m = RecsysRecord{} }
func (*RecsysRecord) ProtoMessage() {}
func (*RecsysRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b9e00c05e1192e6, []int{2}
}
func (m *RecsysRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecsysRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecsysRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecsysRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecsysRecord.Merge(m, src)
}
func (m *RecsysRecord) XXX_Size() int {
	return m.Size()
}
func (m *RecsysRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_RecsysRecord.DiscardUnknown(m)
}

var xxx_messageInfo_RecsysRecord proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RecsysRequest)(nil), "bbq.service.recsys.v1.RecsysRequest")
	proto.RegisterType((*RecsysResponse)(nil), "bbq.service.recsys.v1.RecsysResponse")
	proto.RegisterMapType((map[string]string)(nil), "bbq.service.recsys.v1.RecsysResponse.MessageEntry")
	proto.RegisterType((*RecsysRecord)(nil), "bbq.service.recsys.v1.RecsysRecord")
	proto.RegisterMapType((map[string]string)(nil), "bbq.service.recsys.v1.RecsysRecord.MapEntry")
}

func init() {
	proto.RegisterFile("app/service/bbq/recsys/api/grpc/v1/api.proto", fileDescriptor_3b9e00c05e1192e6)
}

var fileDescriptor_3b9e00c05e1192e6 = []byte{
	// 716 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x41, 0x6f, 0xd3, 0x3e,
	0x18, 0xc6, 0x9b, 0xa6, 0xe9, 0xd6, 0x77, 0xdd, 0xb4, 0x59, 0x9b, 0x94, 0x7f, 0xff, 0x50, 0x17,
	0x0f, 0x44, 0x0f, 0x23, 0xd1, 0x36, 0x89, 0x4d, 0x3b, 0x20, 0x54, 0x06, 0xd2, 0x24, 0x76, 0xf1,
	0xd8, 0x0e, 0x20, 0x81, 0x92, 0xd4, 0x0d, 0x11, 0xed, 0xe2, 0xc6, 0x69, 0xa5, 0xde, 0xf8, 0x3a,
	0x1c, 0x90, 0xf8, 0x18, 0x3b, 0x4e, 0xe2, 0xc2, 0x29, 0x62, 0x3d, 0xf6, 0xd8, 0x4f, 0x80, 0x62,
	0xa7, 0x4b, 0x41, 0x48, 0x1b, 0x87, 0xdd, 0xfc, 0xfe, 0x5e, 0x3f, 0xcf, 0xfb, 0x58, 0xb1, 0x03,
	0x5b, 0x0e, 0xe7, 0xb6, 0x60, 0xd1, 0x30, 0xf0, 0x98, 0xed, 0xba, 0x7d, 0x3b, 0x62, 0x9e, 0x18,
	0x09, 0xdb, 0xe1, 0x81, 0xed, 0x47, 0xdc, 0xb3, 0x87, 0xdb, 0xe9, 0xda, 0xe2, 0x51, 0x18, 0x87,
	0x68, 0xc3, 0x75, 0xfb, 0x56, 0xb6, 0xdb, 0x52, 0x3b, 0xad, 0xe1, 0x76, 0xed, 0x89, 0x1f, 0xc4,
	0x1f, 0x07, 0xae, 0xe5, 0x85, 0x3d, 0xdb, 0x0f, 0xfd, 0xd0, 0x96, 0xbb, 0xdd, 0x41, 0x47, 0x56,
	0xb2, 0x90, 0x2b, 0xe5, 0x42, 0xbe, 0x1a, 0xb0, 0x4c, 0xa5, 0x98, 0xb2, 0xfe, 0x80, 0x89, 0x18,
	0x59, 0xa0, 0xf7, 0x82, 0xb6, 0xa9, 0x35, 0xb4, 0xa6, 0xde, 0xba, 0x37, 0x4e, 0xb0, 0x7e, 0x7c,
	0x74, 0x38, 0x49, 0x70, 0x4a, 0xa7, 0x09, 0x86, 0x4e, 0x18, 0xf5, 0x0e, 0x48, 0x2f, 0x68, 0x13,
	0x9a, 0x22, 0xb4, 0x0f, 0x86, 0x3b, 0x18, 0x06, 0x6d, 0xb3, 0xd8, 0xd0, 0x9a, 0x95, 0x16, 0x19,
	0x27, 0xd8, 0x68, 0x9d, 0x9e, 0x49, 0x8d, 0xea, 0x4c, 0x13, 0x5c, 0x55, 0x2a, 0x59, 0x12, 0xaa,
	0x30, 0xb2, 0xc1, 0xe8, 0x06, 0xbd, 0x20, 0x36, 0xf5, 0x86, 0xd6, 0x34, 0x5a, 0xff, 0xa5, 0x02,
	0x09, 0x72, 0x81, 0x2c, 0x09, 0x55, 0x18, 0xed, 0x42, 0x39, 0xec, 0x74, 0x04, 0x8b, 0xcd, 0x92,
	0x54, 0xfc, 0x3f, 0x49, 0x70, 0x46, 0xa6, 0x09, 0x5e, 0x56, 0x12, 0x55, 0x13, 0x9a, 0x35, 0xd0,
	0x2e, 0x94, 0x44, 0x1a, 0xcf, 0x90, 0x07, 0xc2, 0xe3, 0x04, 0x97, 0x4e, 0x54, 0x3a, 0xc9, 0xa7,
	0x09, 0x5e, 0x52, 0x42, 0x21, 0xb3, 0x49, 0x98, 0x4e, 0x72, 0xdc, 0x98, 0x89, 0xd8, 0x2c, 0xcb,
	0x53, 0xc9, 0x49, 0x8a, 0xe4, 0x93, 0x54, 0x4d, 0x68, 0xd6, 0x40, 0x7b, 0xb0, 0x10, 0x47, 0x8e,
	0xc7, 0x8e, 0x0e, 0xcd, 0x05, 0xa9, 0xba, 0x3f, 0x49, 0xf0, 0x0c, 0x4d, 0x13, 0xbc, 0xa2, 0x64,
	0x19, 0x20, 0x74, 0xd6, 0x42, 0xcf, 0x01, 0xda, 0xcc, 0x1d, 0xf8, 0x1f, 0x3a, 0x5d, 0xc7, 0x37,
	0x17, 0x1b, 0x5a, 0x73, 0xb1, 0xf5, 0x60, 0x92, 0xe0, 0x8a, 0xa4, 0xaf, 0xba, 0x8e, 0x3f, 0x4d,
	0xf0, 0xaa, 0x52, 0x5f, 0x23, 0x42, 0xf3, 0x76, 0xee, 0x10, 0x8f, 0x38, 0x33, 0x2b, 0x72, 0x7a,
	0xee, 0xf0, 0x66, 0xc4, 0xd9, 0x1f, 0x0e, 0x29, 0x9a, 0x39, 0xa4, 0xeb, 0x34, 0x7c, 0x7f, 0xc0,
	0xa2, 0xd1, 0xd1, 0xa1, 0x09, 0x79, 0xf8, 0x0c, 0xe5, 0xe1, 0x33, 0x40, 0xe8, 0xac, 0x85, 0x1e,
	0x83, 0xee, 0x70, 0x6e, 0x2e, 0x49, 0xd1, 0x46, 0x7a, 0x51, 0x1c, 0xce, 0xf3, 0x8b, 0xe2, 0x70,
	0x4e, 0x68, 0x8a, 0xd0, 0x0b, 0x00, 0x87, 0xf3, 0x33, 0x16, 0x89, 0x20, 0x3c, 0x37, 0xab, 0x72,
	0xff, 0xe6, 0x24, 0xc1, 0x73, 0x74, 0x9a, 0xe0, 0xb5, 0x6b, 0x59, 0xc6, 0x08, 0x9d, 0xdb, 0x40,
	0xbe, 0x6b, 0xb0, 0x32, 0xbb, 0xaf, 0x82, 0x87, 0xe7, 0x82, 0xa1, 0xd7, 0xb0, 0xd0, 0x63, 0x42,
	0x38, 0x3e, 0x33, 0xb5, 0x86, 0xde, 0x5c, 0xda, 0xd9, 0xb1, 0xfe, 0xfa, 0x34, 0xac, 0xdf, 0x75,
	0xd6, 0xb1, 0x12, 0xbd, 0x3c, 0x8f, 0xa3, 0x11, 0x9d, 0x59, 0xa0, 0x3d, 0x28, 0x75, 0x03, 0x11,
	0x9b, 0x45, 0x69, 0xb5, 0x79, 0x83, 0x95, 0x17, 0x46, 0x6d, 0x2a, 0x05, 0xb5, 0x03, 0xa8, 0xce,
	0x3b, 0xa2, 0x55, 0xd0, 0x3f, 0xb1, 0x91, 0x7c, 0x47, 0x15, 0x9a, 0x2e, 0xd1, 0x3a, 0x18, 0x43,
	0xa7, 0x3b, 0x60, 0xea, 0xa5, 0x50, 0x55, 0x1c, 0x14, 0xf7, 0x35, 0xf2, 0x4d, 0x83, 0xea, 0xbc,
	0x25, 0x42, 0xd9, 0xa5, 0x95, 0xaf, 0x30, 0xbb, 0x93, 0xeb, 0x60, 0x08, 0x2f, 0x8c, 0x94, 0x5c,
	0xa3, 0xaa, 0x40, 0xcf, 0x40, 0xef, 0x39, 0xdc, 0xd4, 0x65, 0xdc, 0xad, 0x5b, 0xc4, 0xb5, 0x8e,
	0x1d, 0xae, 0xce, 0x9c, 0x0a, 0x6b, 0x4f, 0x61, 0x71, 0x06, 0xfe, 0x25, 0xf2, 0xce, 0x97, 0x22,
	0x94, 0x95, 0x2d, 0x7a, 0x07, 0x40, 0x99, 0x77, 0xa2, 0xa6, 0xa2, 0x87, 0x37, 0x64, 0x90, 0x7f,
	0x99, 0xda, 0xa3, 0x5b, 0x7d, 0x23, 0x52, 0x40, 0x2e, 0xac, 0x51, 0xd6, 0x75, 0x62, 0xd6, 0xbe,
	0xbb, 0x19, 0xef, 0x61, 0xf9, 0x94, 0x8b, 0x3b, 0xf3, 0x6f, 0x35, 0x2e, 0xae, 0xea, 0x85, 0xcb,
	0xab, 0x7a, 0xe1, 0xc7, 0x55, 0xbd, 0xf0, 0x79, 0x5c, 0xd7, 0x2e, 0xc6, 0x75, 0xed, 0x72, 0x5c,
	0xd7, 0x7e, 0x8e, 0xeb, 0xda, 0xdb, 0xe2, 0x70, 0xdb, 0x2d, 0xcb, 0xbf, 0xf1, 0xee, 0xaf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xc5, 0x8b, 0xff, 0x09, 0x03, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RecsysClient is the client API for Recsys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecsysClient interface {
	RecService(ctx context.Context, in *RecsysRequest, opts ...grpc.CallOption) (*RecsysResponse, error)
	RelatedRecService(ctx context.Context, in *RecsysRequest, opts ...grpc.CallOption) (*RecsysResponse, error)
	UpsRecService(ctx context.Context, in *RecsysRequest, opts ...grpc.CallOption) (*RecsysResponse, error)
}

type recsysClient struct {
	cc *grpc.ClientConn
}

func NewRecsysClient(cc *grpc.ClientConn) RecsysClient {
	return &recsysClient{cc}
}

func (c *recsysClient) RecService(ctx context.Context, in *RecsysRequest, opts ...grpc.CallOption) (*RecsysResponse, error) {
	out := new(RecsysResponse)
	err := c.cc.Invoke(ctx, "/bbq.service.recsys.v1.Recsys/RecService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recsysClient) RelatedRecService(ctx context.Context, in *RecsysRequest, opts ...grpc.CallOption) (*RecsysResponse, error) {
	out := new(RecsysResponse)
	err := c.cc.Invoke(ctx, "/bbq.service.recsys.v1.Recsys/RelatedRecService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recsysClient) UpsRecService(ctx context.Context, in *RecsysRequest, opts ...grpc.CallOption) (*RecsysResponse, error) {
	out := new(RecsysResponse)
	err := c.cc.Invoke(ctx, "/bbq.service.recsys.v1.Recsys/UpsRecService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecsysServer is the server API for Recsys service.
type RecsysServer interface {
	RecService(context.Context, *RecsysRequest) (*RecsysResponse, error)
	RelatedRecService(context.Context, *RecsysRequest) (*RecsysResponse, error)
	UpsRecService(context.Context, *RecsysRequest) (*RecsysResponse, error)
}

func RegisterRecsysServer(s *grpc.Server, srv RecsysServer) {
	s.RegisterService(&_Recsys_serviceDesc, srv)
}

func _Recsys_RecService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecsysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecsysServer).RecService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.recsys.v1.Recsys/RecService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecsysServer).RecService(ctx, req.(*RecsysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recsys_RelatedRecService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecsysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecsysServer).RelatedRecService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.recsys.v1.Recsys/RelatedRecService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecsysServer).RelatedRecService(ctx, req.(*RecsysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recsys_UpsRecService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecsysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecsysServer).UpsRecService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.recsys.v1.Recsys/UpsRecService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecsysServer).UpsRecService(ctx, req.(*RecsysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Recsys_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bbq.service.recsys.v1.Recsys",
	HandlerType: (*RecsysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecService",
			Handler:    _Recsys_RecService_Handler,
		},
		{
			MethodName: "RelatedRecService",
			Handler:    _Recsys_RelatedRecService_Handler,
		},
		{
			MethodName: "UpsRecService",
			Handler:    _Recsys_UpsRecService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/bbq/recsys/api/grpc/v1/api.proto",
}

func (m *RecsysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecsysRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MID))
	}
	if len(m.BUVID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BUVID)))
		i += copy(dAtA[i:], m.BUVID)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
	}
	if m.SVID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SVID))
	}
	if len(m.Abtest) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Abtest)))
		i += copy(dAtA[i:], m.Abtest)
	}
	if len(m.TraceID) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.TraceID)))
		i += copy(dAtA[i:], m.TraceID)
	}
	if m.DebugFlag {
		dAtA[i] = 0x40
		i++
		if m.DebugFlag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.DebugType) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.DebugType)))
		i += copy(dAtA[i:], m.DebugType)
	}
	if len(m.QueryID) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.QueryID)))
		i += copy(dAtA[i:], m.QueryID)
	}
	if len(m.App) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.App)))
		i += copy(dAtA[i:], m.App)
	}
	if len(m.AppVersion) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AppVersion)))
		i += copy(dAtA[i:], m.AppVersion)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecsysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecsysResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		for k, _ := range m.Message {
			dAtA[i] = 0xa
			i++
			v := m.Message[k]
			mapSize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecsysRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecsysRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Svid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Svid))
	}
	if m.Score != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
		i += 8
	}
	if len(m.Map) > 0 {
		for k, _ := range m.Map {
			dAtA[i] = 0x1a
			i++
			v := m.Map[k]
			mapSize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RecsysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MID != 0 {
		n += 1 + sovApi(uint64(m.MID))
	}
	l = len(m.BUVID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovApi(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.SVID != 0 {
		n += 1 + sovApi(uint64(m.SVID))
	}
	l = len(m.Abtest)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TraceID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DebugFlag {
		n += 2
	}
	l = len(m.DebugType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.QueryID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.App)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecsysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Message) > 0 {
		for k, v := range m.Message {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecsysRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Svid != 0 {
		n += 1 + sovApi(uint64(m.Svid))
	}
	if m.Score != 0 {
		n += 9
	}
	if len(m.Map) > 0 {
		for k, v := range m.Map {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RecsysRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecsysRequest{`,
		`MID:` + fmt.Sprintf("%v", this.MID) + `,`,
		`BUVID:` + fmt.Sprintf("%v", this.BUVID) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`SVID:` + fmt.Sprintf("%v", this.SVID) + `,`,
		`Abtest:` + fmt.Sprintf("%v", this.Abtest) + `,`,
		`TraceID:` + fmt.Sprintf("%v", this.TraceID) + `,`,
		`DebugFlag:` + fmt.Sprintf("%v", this.DebugFlag) + `,`,
		`DebugType:` + fmt.Sprintf("%v", this.DebugType) + `,`,
		`QueryID:` + fmt.Sprintf("%v", this.QueryID) + `,`,
		`App:` + fmt.Sprintf("%v", this.App) + `,`,
		`AppVersion:` + fmt.Sprintf("%v", this.AppVersion) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecsysResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForMessage := make([]string, 0, len(this.Message))
	for k, _ := range this.Message {
		keysForMessage = append(keysForMessage, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMessage)
	mapStringForMessage := "map[string]string{"
	for _, k := range keysForMessage {
		mapStringForMessage += fmt.Sprintf("%v: %v,", k, this.Message[k])
	}
	mapStringForMessage += "}"
	s := strings.Join([]string{`&RecsysResponse{`,
		`Message:` + mapStringForMessage + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "RecsysRecord", "RecsysRecord", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecsysRecord) String() string {
	if this == nil {
		return "nil"
	}
	keysForMap := make([]string, 0, len(this.Map))
	for k, _ := range this.Map {
		keysForMap = append(keysForMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMap)
	mapStringForMap := "map[string]string{"
	for _, k := range keysForMap {
		mapStringForMap += fmt.Sprintf("%v: %v,", k, this.Map[k])
	}
	mapStringForMap += "}"
	s := strings.Join([]string{`&RecsysRecord{`,
		`Svid:` + fmt.Sprintf("%v", this.Svid) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Map:` + mapStringForMap + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RecsysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecsysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecsysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MID", wireType)
			}
			m.MID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BUVID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BUVID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SVID", wireType)
			}
			m.SVID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SVID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abtest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abtest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugFlag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DebugFlag = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DebugType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.App = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecsysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecsysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecsysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Message[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RecsysRecord{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecsysRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecsysRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecsysRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Svid", wireType)
			}
			m.Svid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Svid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Map[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)
