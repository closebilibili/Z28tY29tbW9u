// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/favorite/model/fav.proto

package model

/*

	v0.1.0
	收藏夹信息
*/

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Folder struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Mid                  int64                       `protobuf:"varint,2,opt,name=Mid,proto3" json:"mid"`
	Count                int                         `protobuf:"varint,3,opt,name=Count,proto3,casttype=int" json:"count"`
	Name                 string                      `protobuf:"bytes,4,opt,name=Name,proto3" json:"name"`
	Cover                string                      `protobuf:"bytes,5,opt,name=Cover,proto3" json:"cover"`
	Description          string                      `protobuf:"bytes,6,opt,name=Description,proto3" json:"description"`
	Type                 int8                        `protobuf:"varint,7,opt,name=Type,proto3,casttype=int8" json:"type"`
	Attr                 int32                       `protobuf:"varint,8,opt,name=Attr,proto3" json:"attr"`
	State                int8                        `protobuf:"varint,9,opt,name=State,proto3,casttype=int8" json:"state"`
	Favored              int8                        `protobuf:"varint,10,opt,name=Favored,proto3,casttype=int8" json:"favored"`
	CTime                go_common_library_time.Time `protobuf:"varint,11,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MTime                go_common_library_time.Time `protobuf:"varint,12,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	RecentOids           []int64                     `protobuf:"varint,13,rep,packed,name=RecentOids" json:"recent_oids"`
	FavedCount           int32                       `protobuf:"varint,14,opt,name=FavedCount,proto3" json:"faved_count"`
	PlayCount            int32                       `protobuf:"varint,15,opt,name=PlayCount,proto3" json:"play_count"`
	ShareCount           int32                       `protobuf:"varint,16,opt,name=ShareCount,proto3" json:"share_count"`
	LikeCount            int32                       `protobuf:"varint,17,opt,name=LikeCount,proto3" json:"like_count"`
	ReplyCount           int32                       `protobuf:"varint,18,opt,name=ReplyCount,proto3" json:"reply_count"`
	RecentRes            []*Resource                 `protobuf:"bytes,19,rep,name=RecentRes" json:"recent_res"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Folder) Reset()      { *m = Folder{} }
func (*Folder) ProtoMessage() {}
func (*Folder) Descriptor() ([]byte, []int) {
	return fileDescriptor_fav_0a9cbc27b44f3533, []int{0}
}
func (m *Folder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Folder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Folder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Folder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Folder.Merge(dst, src)
}
func (m *Folder) XXX_Size() int {
	return m.Size()
}
func (m *Folder) XXX_DiscardUnknown() {
	xxx_messageInfo_Folder.DiscardUnknown(m)
}

var xxx_messageInfo_Folder proto.InternalMessageInfo

type Resource struct {
	Oid                  int64    `protobuf:"varint,1,opt,name=Oid,proto3" json:"oid"`
	Typ                  int32    `protobuf:"varint,2,opt,name=Typ,proto3" json:"typ"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resource) Reset()      { *m = Resource{} }
func (*Resource) ProtoMessage() {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_fav_0a9cbc27b44f3533, []int{1}
}
func (m *Resource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(dst, src)
}
func (m *Resource) XXX_Size() int {
	return m.Size()
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Folder)(nil), "model.Folder")
	proto.RegisterType((*Resource)(nil), "model.Resource")
}
func (m *Folder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Folder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFav(dAtA, i, uint64(m.ID))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFav(dAtA, i, uint64(m.Mid))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFav(dAtA, i, uint64(m.Count))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFav(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFav(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFav(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Type != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFav(dAtA, i, uint64(m.Type))
	}
	if m.Attr != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintFav(dAtA, i, uint64(m.Attr))
	}
	if m.State != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintFav(dAtA, i, uint64(m.State))
	}
	if m.Favored != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintFav(dAtA, i, uint64(m.Favored))
	}
	if m.CTime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintFav(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintFav(dAtA, i, uint64(m.MTime))
	}
	if len(m.RecentOids) > 0 {
		dAtA2 := make([]byte, len(m.RecentOids)*10)
		var j1 int
		for _, num1 := range m.RecentOids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x6a
		i++
		i = encodeVarintFav(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.FavedCount != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintFav(dAtA, i, uint64(m.FavedCount))
	}
	if m.PlayCount != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintFav(dAtA, i, uint64(m.PlayCount))
	}
	if m.ShareCount != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFav(dAtA, i, uint64(m.ShareCount))
	}
	if m.LikeCount != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFav(dAtA, i, uint64(m.LikeCount))
	}
	if m.ReplyCount != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFav(dAtA, i, uint64(m.ReplyCount))
	}
	if len(m.RecentRes) > 0 {
		for _, msg := range m.RecentRes {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintFav(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Oid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFav(dAtA, i, uint64(m.Oid))
	}
	if m.Typ != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFav(dAtA, i, uint64(m.Typ))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintFav(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Folder) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovFav(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovFav(uint64(m.Mid))
	}
	if m.Count != 0 {
		n += 1 + sovFav(uint64(m.Count))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFav(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovFav(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFav(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovFav(uint64(m.Type))
	}
	if m.Attr != 0 {
		n += 1 + sovFav(uint64(m.Attr))
	}
	if m.State != 0 {
		n += 1 + sovFav(uint64(m.State))
	}
	if m.Favored != 0 {
		n += 1 + sovFav(uint64(m.Favored))
	}
	if m.CTime != 0 {
		n += 1 + sovFav(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovFav(uint64(m.MTime))
	}
	if len(m.RecentOids) > 0 {
		l = 0
		for _, e := range m.RecentOids {
			l += sovFav(uint64(e))
		}
		n += 1 + sovFav(uint64(l)) + l
	}
	if m.FavedCount != 0 {
		n += 1 + sovFav(uint64(m.FavedCount))
	}
	if m.PlayCount != 0 {
		n += 1 + sovFav(uint64(m.PlayCount))
	}
	if m.ShareCount != 0 {
		n += 2 + sovFav(uint64(m.ShareCount))
	}
	if m.LikeCount != 0 {
		n += 2 + sovFav(uint64(m.LikeCount))
	}
	if m.ReplyCount != 0 {
		n += 2 + sovFav(uint64(m.ReplyCount))
	}
	if len(m.RecentRes) > 0 {
		for _, e := range m.RecentRes {
			l = e.Size()
			n += 2 + l + sovFav(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Resource) Size() (n int) {
	var l int
	_ = l
	if m.Oid != 0 {
		n += 1 + sovFav(uint64(m.Oid))
	}
	if m.Typ != 0 {
		n += 1 + sovFav(uint64(m.Typ))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFav(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFav(x uint64) (n int) {
	return sovFav(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Folder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Folder{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Cover:` + fmt.Sprintf("%v", this.Cover) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Attr:` + fmt.Sprintf("%v", this.Attr) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Favored:` + fmt.Sprintf("%v", this.Favored) + `,`,
		`CTime:` + fmt.Sprintf("%v", this.CTime) + `,`,
		`MTime:` + fmt.Sprintf("%v", this.MTime) + `,`,
		`RecentOids:` + fmt.Sprintf("%v", this.RecentOids) + `,`,
		`FavedCount:` + fmt.Sprintf("%v", this.FavedCount) + `,`,
		`PlayCount:` + fmt.Sprintf("%v", this.PlayCount) + `,`,
		`ShareCount:` + fmt.Sprintf("%v", this.ShareCount) + `,`,
		`LikeCount:` + fmt.Sprintf("%v", this.LikeCount) + `,`,
		`ReplyCount:` + fmt.Sprintf("%v", this.ReplyCount) + `,`,
		`RecentRes:` + strings.Replace(fmt.Sprintf("%v", this.RecentRes), "Resource", "Resource", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Resource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Resource{`,
		`Oid:` + fmt.Sprintf("%v", this.Oid) + `,`,
		`Typ:` + fmt.Sprintf("%v", this.Typ) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFav(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Folder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFav
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Folder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Folder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFav
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFav
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFav
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			m.Attr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Favored", wireType)
			}
			m.Favored = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Favored |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFav
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RecentOids = append(m.RecentOids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFav
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFav
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFav
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RecentOids = append(m.RecentOids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentOids", wireType)
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FavedCount", wireType)
			}
			m.FavedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FavedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayCount", wireType)
			}
			m.PlayCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareCount", wireType)
			}
			m.ShareCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeCount", wireType)
			}
			m.LikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyCount", wireType)
			}
			m.ReplyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentRes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFav
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentRes = append(m.RecentRes, &Resource{})
			if err := m.RecentRes[len(m.RecentRes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFav(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFav
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFav
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFav(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFav
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFav(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFav
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFav
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFav
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFav
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFav
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFav(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFav = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFav   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/main/favorite/model/fav.proto", fileDescriptor_fav_0a9cbc27b44f3533)
}

var fileDescriptor_fav_0a9cbc27b44f3533 = []byte{
	// 608 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6f, 0xd3, 0x3e,
	0x18, 0xc6, 0x97, 0xa6, 0x69, 0x57, 0xf7, 0xfb, 0xdd, 0x0f, 0x4f, 0x42, 0x06, 0xa6, 0xa4, 0x9a,
	0x10, 0x14, 0x89, 0x35, 0x02, 0x2e, 0x5c, 0x40, 0xd0, 0x4d, 0x93, 0x26, 0x31, 0x86, 0xbc, 0xdd,
	0xa7, 0x34, 0x76, 0x3b, 0x6b, 0x49, 0x1c, 0x39, 0x6e, 0xa5, 0xdc, 0xf8, 0xf3, 0x76, 0xdc, 0x91,
	0x53, 0xc4, 0x7a, 0xcc, 0x9f, 0xb0, 0x13, 0xf2, 0xeb, 0x76, 0xd9, 0x91, 0x5b, 0xf3, 0x3c, 0x9f,
	0xe7, 0xe9, 0x6b, 0x5b, 0x2f, 0x7a, 0x1b, 0xe5, 0x79, 0x58, 0x70, 0xb5, 0x10, 0x31, 0x0f, 0xd3,
	0x48, 0x64, 0xe1, 0x34, 0x5a, 0x48, 0x25, 0x34, 0x0f, 0x53, 0xc9, 0x78, 0x62, 0x3e, 0x47, 0xb9,
	0x92, 0x5a, 0x62, 0x0f, 0x84, 0x17, 0x87, 0x33, 0xa1, 0xaf, 0xe7, 0x93, 0x51, 0x2c, 0xd3, 0x70,
	0x26, 0x67, 0x32, 0x04, 0x77, 0x32, 0x9f, 0xc2, 0x17, 0x7c, 0xc0, 0x2f, 0x9b, 0x3a, 0xb8, 0xeb,
	0xa0, 0xce, 0x89, 0x4c, 0x18, 0x57, 0xf8, 0x19, 0x6a, 0x9d, 0x1e, 0x13, 0x67, 0xe0, 0x0c, 0xdd,
	0x71, 0xa7, 0xae, 0x82, 0x96, 0x60, 0xb4, 0x75, 0x7a, 0x8c, 0x9f, 0x23, 0xf7, 0x4c, 0x30, 0xd2,
	0x02, 0xa3, 0x5b, 0x57, 0x81, 0x9b, 0x0a, 0x46, 0x8d, 0x86, 0x5f, 0x23, 0xef, 0x48, 0xce, 0x33,
	0x4d, 0xdc, 0x81, 0x33, 0xf4, 0xc6, 0x3b, 0x75, 0x15, 0x78, 0xb1, 0x11, 0x1e, 0xaa, 0xc0, 0x15,
	0x99, 0xa6, 0xd6, 0xc6, 0xfb, 0xa8, 0xfd, 0x23, 0x4a, 0x39, 0x69, 0x0f, 0x9c, 0x61, 0x6f, 0xbc,
	0x59, 0x57, 0x41, 0x3b, 0x8b, 0x52, 0x4e, 0x41, 0xc5, 0x81, 0x69, 0x59, 0x70, 0x45, 0x3c, 0xb0,
	0x7b, 0xb6, 0x65, 0xc1, 0x15, 0xb5, 0x3a, 0x7e, 0x8f, 0xfa, 0xc7, 0xbc, 0x88, 0x95, 0xc8, 0xb5,
	0x90, 0x19, 0xe9, 0x00, 0xb6, 0x5d, 0x57, 0x41, 0x9f, 0x35, 0x32, 0x7d, 0xca, 0xe0, 0x57, 0xa8,
	0x7d, 0x59, 0xe6, 0x9c, 0x74, 0x1f, 0x07, 0x6b, 0xeb, 0x32, 0xe7, 0x0f, 0x55, 0xd0, 0x16, 0x99,
	0xfe, 0x44, 0xc1, 0x35, 0x73, 0x7d, 0xd3, 0x5a, 0x91, 0x4d, 0xa0, 0x60, 0xae, 0x48, 0x6b, 0x45,
	0x41, 0xc5, 0x6f, 0x90, 0x77, 0xa1, 0x23, 0xcd, 0x49, 0x0f, 0xec, 0x5d, 0x33, 0x57, 0x61, 0x84,
	0xc7, 0x16, 0xeb, 0xe3, 0x43, 0xd4, 0x3d, 0x31, 0xcf, 0xc2, 0x19, 0x41, 0x80, 0xee, 0xd5, 0x55,
	0xd0, 0x9d, 0x5a, 0xe9, 0x11, 0x5e, 0x33, 0xf8, 0x0b, 0xf2, 0x8e, 0x2e, 0x45, 0xca, 0x49, 0x1f,
	0xae, 0x74, 0x08, 0xe7, 0xd5, 0x22, 0x35, 0xbd, 0x2f, 0x67, 0xf2, 0x30, 0x96, 0x69, 0x2a, 0xb3,
	0x30, 0x11, 0x13, 0x15, 0xa9, 0x32, 0x34, 0xce, 0xc8, 0xf0, 0xd4, 0xc6, 0x4c, 0xfe, 0x0c, 0xf2,
	0xff, 0x35, 0xf9, 0xf4, 0x9f, 0xf2, 0x10, 0xc3, 0x21, 0x42, 0x94, 0xc7, 0x3c, 0xd3, 0xe7, 0x82,
	0x15, 0xe4, 0xff, 0x81, 0x3b, 0x74, 0xed, 0x6d, 0x2a, 0x50, 0xaf, 0xa4, 0x60, 0x05, 0x7d, 0x82,
	0x98, 0xc0, 0x49, 0xb4, 0xe0, 0xcc, 0xbe, 0xf5, 0x16, 0x1c, 0x11, 0x02, 0x53, 0xa3, 0x5e, 0xc1,
	0x8b, 0xd3, 0x27, 0x08, 0x7e, 0x87, 0x7a, 0x3f, 0x93, 0xa8, 0xb4, 0xfc, 0x36, 0xf0, 0x5b, 0x75,
	0x15, 0xa0, 0x3c, 0x89, 0xca, 0x15, 0xde, 0x00, 0xa6, 0xfe, 0xe2, 0x3a, 0x52, 0xdc, 0xe2, 0x3b,
	0x4d, 0x7d, 0x61, 0xd4, 0x75, 0x7d, 0x83, 0x98, 0xfa, 0xef, 0xe2, 0x66, 0xc5, 0xef, 0x36, 0xf5,
	0x89, 0xb8, 0x59, 0xe3, 0x0d, 0x60, 0x8f, 0x9b, 0x27, 0xab, 0x69, 0x70, 0x53, 0xaf, 0x8c, 0xba,
	0xae, 0x6f, 0x10, 0xfc, 0x19, 0xf5, 0xec, 0xe1, 0x29, 0x2f, 0xc8, 0xde, 0xc0, 0x1d, 0xf6, 0x3f,
	0x6c, 0x8f, 0x60, 0xbb, 0x46, 0x94, 0x17, 0x72, 0xae, 0x62, 0x6e, 0xff, 0x6f, 0x75, 0x5f, 0x8a,
	0x17, 0xb4, 0x49, 0x1c, 0x7c, 0x45, 0x9b, 0x6b, 0xcc, 0xec, 0xce, 0xb9, 0x60, 0xab, 0xa5, 0x82,
	0xdd, 0x91, 0x66, 0x77, 0xce, 0x05, 0x33, 0xd6, 0x65, 0x99, 0xc3, 0x5a, 0x79, 0xd6, 0xd2, 0x65,
	0x4e, 0x8d, 0x36, 0xde, 0xbf, 0xbd, 0xf7, 0x37, 0xee, 0xee, 0xfd, 0x8d, 0xdf, 0xf7, 0xfe, 0xc6,
	0xaf, 0xa5, 0xef, 0xdc, 0x2e, 0x7d, 0xe7, 0x6e, 0xe9, 0x3b, 0x7f, 0x96, 0xbe, 0x33, 0xe9, 0xc0,
	0xe6, 0x7e, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x42, 0xda, 0x16, 0xbc, 0x1c, 0x04, 0x00, 0x00,
}
