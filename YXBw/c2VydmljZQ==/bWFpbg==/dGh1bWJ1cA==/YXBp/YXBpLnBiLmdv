// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/thumbup/api/api.proto

/*
	Package api is a generated protocol buffer package.

	It is generated from these files:
		app/service/main/thumbup/api/api.proto

	It has these top-level messages:
		LikeReq
		StatState
		LikeReply
		StatsReq
		StatsReply
		HasLikeReq
		HasLikeReply
		UserLikeState
		UserLikesReq
		ItemRecord
		UserLikesReply
		UserRecord
		ItemLikesReq
		ItemLikesReply
		UpdateCountReq
		RawStatReq
		RawStatReply
		MultiStatsReq
		MultiStatsReply
*/
package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import go_common_library_time "go-common/library/time"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Action int32

const (
	// The first value represents the default and must be == 0.
	Action_ACTION_UNSPECIFIED    Action = 0
	Action_ACTION_LIKE           Action = 1
	Action_ACTION_CANCEL_LIKE    Action = 2
	Action_ACTION_DISLIKE        Action = 3
	Action_ACTION_CANCEL_DISLIKE Action = 4
)

var Action_name = map[int32]string{
	0: "ACTION_UNSPECIFIED",
	1: "ACTION_LIKE",
	2: "ACTION_CANCEL_LIKE",
	3: "ACTION_DISLIKE",
	4: "ACTION_CANCEL_DISLIKE",
}
var Action_value = map[string]int32{
	"ACTION_UNSPECIFIED":    0,
	"ACTION_LIKE":           1,
	"ACTION_CANCEL_LIKE":    2,
	"ACTION_DISLIKE":        3,
	"ACTION_CANCEL_DISLIKE": 4,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}
func (Action) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

type State int32

const (
	// The first value represents the default and must be == 0.
	State_STATE_UNSPECIFIED State = 0
	State_STATE_LIKE        State = 1
	State_STATE_DISLIKE     State = 2
)

var State_name = map[int32]string{
	0: "STATE_UNSPECIFIED",
	1: "STATE_LIKE",
	2: "STATE_DISLIKE",
}
var State_value = map[string]int32{
	"STATE_UNSPECIFIED": 0,
	"STATE_LIKE":        1,
	"STATE_DISLIKE":     2,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (State) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

type LikeReq struct {
	// 业务
	Business string `protobuf:"bytes,1,opt,name=business,proto3" json:"business,omitempty" form:"business" validate:"required"`
	// mid
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"required,min=1"`
	// up 主mid
	UpMid int64 `protobuf:"varint,3,opt,name=up_mid,json=upMid,proto3" json:"up_mid,omitempty" form:"up_mid"`
	// 来源id
	OriginID int64 `protobuf:"varint,4,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty" form:"origin_id"`
	// 对象id
	MessageID int64  `protobuf:"varint,5,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty" form:"message_id" validate:"required"`
	Action    Action `protobuf:"varint,6,opt,name=action,proto3,enum=community.service.thumbup.v1.Action" json:"action,omitempty" form:"action_id" validate:"required"`
	// ip
	IP string `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip"`
}

func (m *LikeReq) Reset()                    { *m = LikeReq{} }
func (m *LikeReq) String() string            { return proto.CompactTextString(m) }
func (*LikeReq) ProtoMessage()               {}
func (*LikeReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

type StatState struct {
	// 来源id
	OriginID int64 `protobuf:"varint,1,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"`
	// 对象id
	MessageID int64 `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 点赞数
	LikeNumber int64 `protobuf:"varint,3,opt,name=like_number,json=likeNumber,proto3" json:"like_number,omitempty"`
	// 点踩数
	DislikeNumber int64 `protobuf:"varint,4,opt,name=dislike_number,json=dislikeNumber,proto3" json:"dislike_number,omitempty"`
	// 点赞状态
	LikeState State `protobuf:"varint,5,opt,name=like_state,json=likeState,proto3,enum=community.service.thumbup.v1.State" json:"like_state,omitempty"`
}

func (m *StatState) Reset()                    { *m = StatState{} }
func (m *StatState) String() string            { return proto.CompactTextString(m) }
func (*StatState) ProtoMessage()               {}
func (*StatState) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

type LikeReply struct {
	// 来源id
	OriginID int64 `protobuf:"varint,1,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"`
	// 对象id
	MessageID int64 `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 点赞数
	LikeNumber int64 `protobuf:"varint,3,opt,name=like_number,json=likeNumber,proto3" json:"like_number,omitempty"`
	// 点踩数
	DislikeNumber int64 `protobuf:"varint,4,opt,name=dislike_number,json=dislikeNumber,proto3" json:"dislike_number,omitempty"`
}

func (m *LikeReply) Reset()                    { *m = LikeReply{} }
func (m *LikeReply) String() string            { return proto.CompactTextString(m) }
func (*LikeReply) ProtoMessage()               {}
func (*LikeReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

type StatsReq struct {
	// 业务
	Business string `protobuf:"bytes,1,opt,name=business,proto3" json:"business,omitempty" form:"business" validate:"required"`
	// 来源id
	OriginID int64 `protobuf:"varint,2,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty" form:"origin_id"`
	// 对象id
	MessageIds []int64 `protobuf:"varint,3,rep,packed,name=message_ids,json=messageIds" json:"message_ids,omitempty" form:"message_ids" validate:"required"`
	// mid 可选参数 不需要返回like_state不要填
	Mid int64 `protobuf:"varint,4,opt,name=mid,proto3" json:"mid,omitempty" form:"mid"`
	// ip
	IP string `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip"`
}

func (m *StatsReq) Reset()                    { *m = StatsReq{} }
func (m *StatsReq) String() string            { return proto.CompactTextString(m) }
func (*StatsReq) ProtoMessage()               {}
func (*StatsReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

type StatsReply struct {
	Stats map[int64]*StatState `protobuf:"bytes,1,rep,name=stats" json:"stats,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StatsReply) Reset()                    { *m = StatsReply{} }
func (m *StatsReply) String() string            { return proto.CompactTextString(m) }
func (*StatsReply) ProtoMessage()               {}
func (*StatsReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

type HasLikeReq struct {
	// 业务
	Business string `protobuf:"bytes,1,opt,name=business,proto3" json:"business,omitempty" form:"business" validate:"required"`
	// 对象id
	MessageIds []int64 `protobuf:"varint,2,rep,packed,name=message_ids,json=messageIds" json:"message_ids,omitempty" form:"message_ids" validate:"required"`
	// mid
	Mid int64 `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"required"`
	// ip
	IP string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip"`
}

func (m *HasLikeReq) Reset()                    { *m = HasLikeReq{} }
func (m *HasLikeReq) String() string            { return proto.CompactTextString(m) }
func (*HasLikeReq) ProtoMessage()               {}
func (*HasLikeReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

type HasLikeReply struct {
	States map[int64]*UserLikeState `protobuf:"bytes,1,rep,name=states" json:"states,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HasLikeReply) Reset()                    { *m = HasLikeReply{} }
func (m *HasLikeReply) String() string            { return proto.CompactTextString(m) }
func (*HasLikeReply) ProtoMessage()               {}
func (*HasLikeReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

type UserLikeState struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// 点赞时间
	Time  go_common_library_time.Time `protobuf:"varint,2,opt,name=time,proto3,casttype=go-common/library/time.Time" json:"time,omitempty"`
	State State                       `protobuf:"varint,3,opt,name=state,proto3,enum=community.service.thumbup.v1.State" json:"state,omitempty"`
}

func (m *UserLikeState) Reset()                    { *m = UserLikeState{} }
func (m *UserLikeState) String() string            { return proto.CompactTextString(m) }
func (*UserLikeState) ProtoMessage()               {}
func (*UserLikeState) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{7} }

type UserLikesReq struct {
	// 业务
	Business string `protobuf:"bytes,1,opt,name=business,proto3" json:"business,omitempty" form:"business" validate:"required"`
	// mid
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"required"`
	// pn
	Pn int64 `protobuf:"varint,3,opt,name=pn,proto3" json:"pn,omitempty" form:"pn" validate:"required,min=1"`
	// ps
	Ps int64 `protobuf:"varint,4,opt,name=ps,proto3" json:"ps,omitempty" form:"ps" validate:"required,min=1"`
	// ip
	IP string `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip"`
}

func (m *UserLikesReq) Reset()                    { *m = UserLikesReq{} }
func (m *UserLikesReq) String() string            { return proto.CompactTextString(m) }
func (*UserLikesReq) ProtoMessage()               {}
func (*UserLikesReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{8} }

type ItemRecord struct {
	// 对象id
	MessageID int64 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 点赞时间
	Time go_common_library_time.Time `protobuf:"varint,2,opt,name=time,proto3,casttype=go-common/library/time.Time" json:"time,omitempty"`
}

func (m *ItemRecord) Reset()                    { *m = ItemRecord{} }
func (m *ItemRecord) String() string            { return proto.CompactTextString(m) }
func (*ItemRecord) ProtoMessage()               {}
func (*ItemRecord) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{9} }

type UserLikesReply struct {
	Total int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*ItemRecord `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (m *UserLikesReply) Reset()                    { *m = UserLikesReply{} }
func (m *UserLikesReply) String() string            { return proto.CompactTextString(m) }
func (*UserLikesReply) ProtoMessage()               {}
func (*UserLikesReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{10} }

type UserRecord struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// 点赞时间
	Time go_common_library_time.Time `protobuf:"varint,2,opt,name=time,proto3,casttype=go-common/library/time.Time" json:"time,omitempty"`
}

func (m *UserRecord) Reset()                    { *m = UserRecord{} }
func (m *UserRecord) String() string            { return proto.CompactTextString(m) }
func (*UserRecord) ProtoMessage()               {}
func (*UserRecord) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{11} }

type ItemLikesReq struct {
	// 业务
	Business string `protobuf:"bytes,1,opt,name=business,proto3" json:"business,omitempty" form:"business" validate:"required"`
	// 来源id
	OriginID int64 `protobuf:"varint,2,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty" form:"origin_id"`
	// 对象id
	MessageID int64 `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty" form:"message_id" validate:"required"`
	// last_mid 上个mid 去重用
	LastMid int64 `protobuf:"varint,4,opt,name=last_mid,json=lastMid,proto3" json:"last_mid,omitempty" form:"last_mid" json:"last_mid"`
	// pn
	Pn int64 `protobuf:"varint,5,opt,name=pn,proto3" json:"pn,omitempty" form:"pn" validate:"required,min=1"`
	// ps
	Ps int64 `protobuf:"varint,6,opt,name=ps,proto3" json:"ps,omitempty" form:"ps" validate:"required,min=1"`
	// ip
	IP string `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip"`
}

func (m *ItemLikesReq) Reset()                    { *m = ItemLikesReq{} }
func (m *ItemLikesReq) String() string            { return proto.CompactTextString(m) }
func (*ItemLikesReq) ProtoMessage()               {}
func (*ItemLikesReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{12} }

type ItemLikesReply struct {
	Users []*UserRecord `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *ItemLikesReply) Reset()                    { *m = ItemLikesReply{} }
func (m *ItemLikesReply) String() string            { return proto.CompactTextString(m) }
func (*ItemLikesReply) ProtoMessage()               {}
func (*ItemLikesReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{13} }

type UpdateCountReq struct {
	// 业务
	Business string `protobuf:"bytes,1,opt,name=business,proto3" json:"business,omitempty" form:"business" validate:"required"`
	// 来源id
	OriginID int64 `protobuf:"varint,2,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty" form:"origin_id"`
	// 对象id
	MessageID int64 `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty" form:"message_id" validate:"required"`
	// 点赞数修改(增量)
	LikeChange int64 `protobuf:"varint,4,opt,name=like_change,json=likeChange,proto3" json:"like_change,omitempty"`
	// 点踩数修改(增量)
	DislikeChange int64 `protobuf:"varint,5,opt,name=dislike_change,json=dislikeChange,proto3" json:"dislike_change,omitempty"`
	// 操作人
	Operator string `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
	// ip
	IP string `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip"`
}

func (m *UpdateCountReq) Reset()                    { *m = UpdateCountReq{} }
func (m *UpdateCountReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateCountReq) ProtoMessage()               {}
func (*UpdateCountReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{14} }

type RawStatReq struct {
	// 业务
	Business string `protobuf:"bytes,1,opt,name=business,proto3" json:"business,omitempty" form:"business" validate:"required"`
	// 来源id
	OriginID int64 `protobuf:"varint,2,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty" form:"origin_id"`
	// 对象id
	MessageID int64 `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty" form:"message_id" validate:"required"`
	// ip
	IP string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip"`
}

func (m *RawStatReq) Reset()                    { *m = RawStatReq{} }
func (m *RawStatReq) String() string            { return proto.CompactTextString(m) }
func (*RawStatReq) ProtoMessage()               {}
func (*RawStatReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{15} }

type RawStatReply struct {
	// 来源id
	OriginID int64 `protobuf:"varint,1,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty" form:"origin_id"`
	// 对象id
	MessageID int64 `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty" form:"message_id" validate:"required"`
	// 点赞数
	LikeNumber int64 `protobuf:"varint,3,opt,name=like_number,json=likeNumber,proto3" json:"like_number,omitempty"`
	// 点踩数
	DislikeNumber int64 `protobuf:"varint,4,opt,name=dislike_number,json=dislikeNumber,proto3" json:"dislike_number,omitempty"`
	// 点赞数修改(增量)
	LikeChange int64 `protobuf:"varint,5,opt,name=like_change,json=likeChange,proto3" json:"like_change,omitempty"`
	// 点踩数修改(增量)
	DislikeChange int64 `protobuf:"varint,6,opt,name=dislike_change,json=dislikeChange,proto3" json:"dislike_change,omitempty"`
}

func (m *RawStatReply) Reset()                    { *m = RawStatReply{} }
func (m *RawStatReply) String() string            { return proto.CompactTextString(m) }
func (*RawStatReply) ProtoMessage()               {}
func (*RawStatReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{16} }

type MultiStatsReq struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"required"`
	// business and records
	Business map[string]*MultiStatsReq_Business `protobuf:"bytes,2,rep,name=business" json:"business,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// ip
	IP string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip"`
}

func (m *MultiStatsReq) Reset()                    { *m = MultiStatsReq{} }
func (m *MultiStatsReq) String() string            { return proto.CompactTextString(m) }
func (*MultiStatsReq) ProtoMessage()               {}
func (*MultiStatsReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{17} }

type MultiStatsReq_Record struct {
	// 来源id
	OriginID int64 `protobuf:"varint,1,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty" form:"origin_id"`
	// 对象id
	MessageID int64 `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty" form:"message_id" validate:"required"`
}

func (m *MultiStatsReq_Record) Reset()                    { *m = MultiStatsReq_Record{} }
func (m *MultiStatsReq_Record) String() string            { return proto.CompactTextString(m) }
func (*MultiStatsReq_Record) ProtoMessage()               {}
func (*MultiStatsReq_Record) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{17, 0} }

type MultiStatsReq_Business struct {
	Records []*MultiStatsReq_Record `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *MultiStatsReq_Business) Reset()                    { *m = MultiStatsReq_Business{} }
func (m *MultiStatsReq_Business) String() string            { return proto.CompactTextString(m) }
func (*MultiStatsReq_Business) ProtoMessage()               {}
func (*MultiStatsReq_Business) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{17, 1} }

type MultiStatsReply struct {
	// business and records
	Business map[string]*MultiStatsReply_Records `protobuf:"bytes,1,rep,name=business" json:"business,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MultiStatsReply) Reset()                    { *m = MultiStatsReply{} }
func (m *MultiStatsReply) String() string            { return proto.CompactTextString(m) }
func (*MultiStatsReply) ProtoMessage()               {}
func (*MultiStatsReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{18} }

type MultiStatsReply_Records struct {
	Records map[int64]*StatState `protobuf:"bytes,1,rep,name=records" json:"records,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MultiStatsReply_Records) Reset()                    { *m = MultiStatsReply_Records{} }
func (m *MultiStatsReply_Records) String() string            { return proto.CompactTextString(m) }
func (*MultiStatsReply_Records) ProtoMessage()               {}
func (*MultiStatsReply_Records) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{18, 0} }

func init() {
	proto.RegisterType((*LikeReq)(nil), "community.service.thumbup.v1.LikeReq")
	proto.RegisterType((*StatState)(nil), "community.service.thumbup.v1.StatState")
	proto.RegisterType((*LikeReply)(nil), "community.service.thumbup.v1.LikeReply")
	proto.RegisterType((*StatsReq)(nil), "community.service.thumbup.v1.StatsReq")
	proto.RegisterType((*StatsReply)(nil), "community.service.thumbup.v1.StatsReply")
	proto.RegisterType((*HasLikeReq)(nil), "community.service.thumbup.v1.HasLikeReq")
	proto.RegisterType((*HasLikeReply)(nil), "community.service.thumbup.v1.HasLikeReply")
	proto.RegisterType((*UserLikeState)(nil), "community.service.thumbup.v1.UserLikeState")
	proto.RegisterType((*UserLikesReq)(nil), "community.service.thumbup.v1.UserLikesReq")
	proto.RegisterType((*ItemRecord)(nil), "community.service.thumbup.v1.ItemRecord")
	proto.RegisterType((*UserLikesReply)(nil), "community.service.thumbup.v1.UserLikesReply")
	proto.RegisterType((*UserRecord)(nil), "community.service.thumbup.v1.UserRecord")
	proto.RegisterType((*ItemLikesReq)(nil), "community.service.thumbup.v1.ItemLikesReq")
	proto.RegisterType((*ItemLikesReply)(nil), "community.service.thumbup.v1.ItemLikesReply")
	proto.RegisterType((*UpdateCountReq)(nil), "community.service.thumbup.v1.UpdateCountReq")
	proto.RegisterType((*RawStatReq)(nil), "community.service.thumbup.v1.RawStatReq")
	proto.RegisterType((*RawStatReply)(nil), "community.service.thumbup.v1.RawStatReply")
	proto.RegisterType((*MultiStatsReq)(nil), "community.service.thumbup.v1.MultiStatsReq")
	proto.RegisterType((*MultiStatsReq_Record)(nil), "community.service.thumbup.v1.MultiStatsReq.Record")
	proto.RegisterType((*MultiStatsReq_Business)(nil), "community.service.thumbup.v1.MultiStatsReq.Business")
	proto.RegisterType((*MultiStatsReply)(nil), "community.service.thumbup.v1.MultiStatsReply")
	proto.RegisterType((*MultiStatsReply_Records)(nil), "community.service.thumbup.v1.MultiStatsReply.Records")
	proto.RegisterEnum("community.service.thumbup.v1.Action", Action_name, Action_value)
	proto.RegisterEnum("community.service.thumbup.v1.State", State_name, State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Thumbup service

type ThumbupClient interface {
	// 点赞接口
	Like(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*LikeReply, error)
	// 查询计数接口
	Stats(ctx context.Context, in *StatsReq, opts ...grpc.CallOption) (*StatsReply, error)
	// 批量查询计数接口
	MultiStats(ctx context.Context, in *MultiStatsReq, opts ...grpc.CallOption) (*MultiStatsReply, error)
	// 查询是否点赞接口
	HasLike(ctx context.Context, in *HasLikeReq, opts ...grpc.CallOption) (*HasLikeReply, error)
	// 用户对业务的点赞列表
	UserLikes(ctx context.Context, in *UserLikesReq, opts ...grpc.CallOption) (*UserLikesReply, error)
	// 对象的点赞人列表
	ItemLikes(ctx context.Context, in *ItemLikesReq, opts ...grpc.CallOption) (*ItemLikesReply, error)
	// 修改计数的值
	UpdateCount(ctx context.Context, in *UpdateCountReq, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// 查询原始计数 未修改的值
	RawStat(ctx context.Context, in *RawStatReq, opts ...grpc.CallOption) (*RawStatReply, error)
}

type thumbupClient struct {
	cc *grpc.ClientConn
}

func NewThumbupClient(cc *grpc.ClientConn) ThumbupClient {
	return &thumbupClient{cc}
}

func (c *thumbupClient) Like(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*LikeReply, error) {
	out := new(LikeReply)
	err := grpc.Invoke(ctx, "/community.service.thumbup.v1.Thumbup/Like", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbupClient) Stats(ctx context.Context, in *StatsReq, opts ...grpc.CallOption) (*StatsReply, error) {
	out := new(StatsReply)
	err := grpc.Invoke(ctx, "/community.service.thumbup.v1.Thumbup/Stats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbupClient) MultiStats(ctx context.Context, in *MultiStatsReq, opts ...grpc.CallOption) (*MultiStatsReply, error) {
	out := new(MultiStatsReply)
	err := grpc.Invoke(ctx, "/community.service.thumbup.v1.Thumbup/MultiStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbupClient) HasLike(ctx context.Context, in *HasLikeReq, opts ...grpc.CallOption) (*HasLikeReply, error) {
	out := new(HasLikeReply)
	err := grpc.Invoke(ctx, "/community.service.thumbup.v1.Thumbup/HasLike", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbupClient) UserLikes(ctx context.Context, in *UserLikesReq, opts ...grpc.CallOption) (*UserLikesReply, error) {
	out := new(UserLikesReply)
	err := grpc.Invoke(ctx, "/community.service.thumbup.v1.Thumbup/UserLikes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbupClient) ItemLikes(ctx context.Context, in *ItemLikesReq, opts ...grpc.CallOption) (*ItemLikesReply, error) {
	out := new(ItemLikesReply)
	err := grpc.Invoke(ctx, "/community.service.thumbup.v1.Thumbup/ItemLikes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbupClient) UpdateCount(ctx context.Context, in *UpdateCountReq, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/community.service.thumbup.v1.Thumbup/UpdateCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbupClient) RawStat(ctx context.Context, in *RawStatReq, opts ...grpc.CallOption) (*RawStatReply, error) {
	out := new(RawStatReply)
	err := grpc.Invoke(ctx, "/community.service.thumbup.v1.Thumbup/RawStat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Thumbup service

type ThumbupServer interface {
	// 点赞接口
	Like(context.Context, *LikeReq) (*LikeReply, error)
	// 查询计数接口
	Stats(context.Context, *StatsReq) (*StatsReply, error)
	// 批量查询计数接口
	MultiStats(context.Context, *MultiStatsReq) (*MultiStatsReply, error)
	// 查询是否点赞接口
	HasLike(context.Context, *HasLikeReq) (*HasLikeReply, error)
	// 用户对业务的点赞列表
	UserLikes(context.Context, *UserLikesReq) (*UserLikesReply, error)
	// 对象的点赞人列表
	ItemLikes(context.Context, *ItemLikesReq) (*ItemLikesReply, error)
	// 修改计数的值
	UpdateCount(context.Context, *UpdateCountReq) (*google_protobuf1.Empty, error)
	// 查询原始计数 未修改的值
	RawStat(context.Context, *RawStatReq) (*RawStatReply, error)
}

func RegisterThumbupServer(s *grpc.Server, srv ThumbupServer) {
	s.RegisterService(&_Thumbup_serviceDesc, srv)
}

func _Thumbup_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbupServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.thumbup.v1.Thumbup/Like",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbupServer).Like(ctx, req.(*LikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thumbup_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbupServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.thumbup.v1.Thumbup/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbupServer).Stats(ctx, req.(*StatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thumbup_MultiStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbupServer).MultiStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.thumbup.v1.Thumbup/MultiStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbupServer).MultiStats(ctx, req.(*MultiStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thumbup_HasLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbupServer).HasLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.thumbup.v1.Thumbup/HasLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbupServer).HasLike(ctx, req.(*HasLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thumbup_UserLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLikesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbupServer).UserLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.thumbup.v1.Thumbup/UserLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbupServer).UserLikes(ctx, req.(*UserLikesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thumbup_ItemLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemLikesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbupServer).ItemLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.thumbup.v1.Thumbup/ItemLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbupServer).ItemLikes(ctx, req.(*ItemLikesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thumbup_UpdateCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbupServer).UpdateCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.thumbup.v1.Thumbup/UpdateCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbupServer).UpdateCount(ctx, req.(*UpdateCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thumbup_RawStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbupServer).RawStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.thumbup.v1.Thumbup/RawStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbupServer).RawStat(ctx, req.(*RawStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Thumbup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "community.service.thumbup.v1.Thumbup",
	HandlerType: (*ThumbupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Like",
			Handler:    _Thumbup_Like_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Thumbup_Stats_Handler,
		},
		{
			MethodName: "MultiStats",
			Handler:    _Thumbup_MultiStats_Handler,
		},
		{
			MethodName: "HasLike",
			Handler:    _Thumbup_HasLike_Handler,
		},
		{
			MethodName: "UserLikes",
			Handler:    _Thumbup_UserLikes_Handler,
		},
		{
			MethodName: "ItemLikes",
			Handler:    _Thumbup_ItemLikes_Handler,
		},
		{
			MethodName: "UpdateCount",
			Handler:    _Thumbup_UpdateCount_Handler,
		},
		{
			MethodName: "RawStat",
			Handler:    _Thumbup_RawStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/main/thumbup/api/api.proto",
}

func (m *LikeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Business) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Business)))
		i += copy(dAtA[i:], m.Business)
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.UpMid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UpMid))
	}
	if m.OriginID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OriginID))
	}
	if m.MessageID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MessageID))
	}
	if m.Action != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Action))
	}
	if len(m.IP) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	return i, nil
}

func (m *StatState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OriginID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OriginID))
	}
	if m.MessageID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MessageID))
	}
	if m.LikeNumber != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LikeNumber))
	}
	if m.DislikeNumber != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DislikeNumber))
	}
	if m.LikeState != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LikeState))
	}
	return i, nil
}

func (m *LikeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OriginID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OriginID))
	}
	if m.MessageID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MessageID))
	}
	if m.LikeNumber != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LikeNumber))
	}
	if m.DislikeNumber != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DislikeNumber))
	}
	return i, nil
}

func (m *StatsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Business) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Business)))
		i += copy(dAtA[i:], m.Business)
	}
	if m.OriginID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OriginID))
	}
	if len(m.MessageIds) > 0 {
		dAtA2 := make([]byte, len(m.MessageIds)*10)
		var j1 int
		for _, num1 := range m.MessageIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.Mid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.IP) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	return i, nil
}

func (m *StatsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for k, _ := range m.Stats {
			dAtA[i] = 0xa
			i++
			v := m.Stats[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + sovApi(uint64(k)) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	return i, nil
}

func (m *HasLikeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HasLikeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Business) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Business)))
		i += copy(dAtA[i:], m.Business)
	}
	if len(m.MessageIds) > 0 {
		dAtA5 := make([]byte, len(m.MessageIds)*10)
		var j4 int
		for _, num1 := range m.MessageIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	if m.Mid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.IP) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	return i, nil
}

func (m *HasLikeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HasLikeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.States) > 0 {
		for k, _ := range m.States {
			dAtA[i] = 0xa
			i++
			v := m.States[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + sovApi(uint64(k)) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	return i, nil
}

func (m *UserLikeState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLikeState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Time))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *UserLikesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLikesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Business) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Business)))
		i += copy(dAtA[i:], m.Business)
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Pn != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
	}
	if m.Ps != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
	}
	if len(m.IP) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	return i, nil
}

func (m *ItemRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MessageID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MessageID))
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *UserLikesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLikesReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *ItemLikesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemLikesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Business) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Business)))
		i += copy(dAtA[i:], m.Business)
	}
	if m.OriginID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OriginID))
	}
	if m.MessageID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MessageID))
	}
	if m.LastMid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LastMid))
	}
	if m.Pn != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
	}
	if m.Ps != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
	}
	if len(m.IP) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	return i, nil
}

func (m *ItemLikesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemLikesReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateCountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCountReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Business) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Business)))
		i += copy(dAtA[i:], m.Business)
	}
	if m.OriginID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OriginID))
	}
	if m.MessageID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MessageID))
	}
	if m.LikeChange != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LikeChange))
	}
	if m.DislikeChange != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DislikeChange))
	}
	if len(m.Operator) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Operator)))
		i += copy(dAtA[i:], m.Operator)
	}
	if len(m.IP) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	return i, nil
}

func (m *RawStatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawStatReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Business) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Business)))
		i += copy(dAtA[i:], m.Business)
	}
	if m.OriginID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OriginID))
	}
	if m.MessageID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MessageID))
	}
	if len(m.IP) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	return i, nil
}

func (m *RawStatReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawStatReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OriginID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OriginID))
	}
	if m.MessageID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MessageID))
	}
	if m.LikeNumber != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LikeNumber))
	}
	if m.DislikeNumber != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DislikeNumber))
	}
	if m.LikeChange != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LikeChange))
	}
	if m.DislikeChange != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DislikeChange))
	}
	return i, nil
}

func (m *MultiStatsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiStatsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Business) > 0 {
		for k, _ := range m.Business {
			dAtA[i] = 0x12
			i++
			v := m.Business[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovApi(uint64(len(k))) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n7, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n7
			}
		}
	}
	if len(m.IP) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	return i, nil
}

func (m *MultiStatsReq_Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiStatsReq_Record) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OriginID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OriginID))
	}
	if m.MessageID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MessageID))
	}
	return i, nil
}

func (m *MultiStatsReq_Business) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiStatsReq_Business) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MultiStatsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiStatsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Business) > 0 {
		for k, _ := range m.Business {
			dAtA[i] = 0xa
			i++
			v := m.Business[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovApi(uint64(len(k))) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n8, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n8
			}
		}
	}
	return i, nil
}

func (m *MultiStatsReply_Records) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiStatsReply_Records) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for k, _ := range m.Records {
			dAtA[i] = 0xa
			i++
			v := m.Records[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + sovApi(uint64(k)) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n9, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n9
			}
		}
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LikeReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.UpMid != 0 {
		n += 1 + sovApi(uint64(m.UpMid))
	}
	if m.OriginID != 0 {
		n += 1 + sovApi(uint64(m.OriginID))
	}
	if m.MessageID != 0 {
		n += 1 + sovApi(uint64(m.MessageID))
	}
	if m.Action != 0 {
		n += 1 + sovApi(uint64(m.Action))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *StatState) Size() (n int) {
	var l int
	_ = l
	if m.OriginID != 0 {
		n += 1 + sovApi(uint64(m.OriginID))
	}
	if m.MessageID != 0 {
		n += 1 + sovApi(uint64(m.MessageID))
	}
	if m.LikeNumber != 0 {
		n += 1 + sovApi(uint64(m.LikeNumber))
	}
	if m.DislikeNumber != 0 {
		n += 1 + sovApi(uint64(m.DislikeNumber))
	}
	if m.LikeState != 0 {
		n += 1 + sovApi(uint64(m.LikeState))
	}
	return n
}

func (m *LikeReply) Size() (n int) {
	var l int
	_ = l
	if m.OriginID != 0 {
		n += 1 + sovApi(uint64(m.OriginID))
	}
	if m.MessageID != 0 {
		n += 1 + sovApi(uint64(m.MessageID))
	}
	if m.LikeNumber != 0 {
		n += 1 + sovApi(uint64(m.LikeNumber))
	}
	if m.DislikeNumber != 0 {
		n += 1 + sovApi(uint64(m.DislikeNumber))
	}
	return n
}

func (m *StatsReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.OriginID != 0 {
		n += 1 + sovApi(uint64(m.OriginID))
	}
	if len(m.MessageIds) > 0 {
		l = 0
		for _, e := range m.MessageIds {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *StatsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for k, v := range m.Stats {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *HasLikeReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.MessageIds) > 0 {
		l = 0
		for _, e := range m.MessageIds {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *HasLikeReply) Size() (n int) {
	var l int
	_ = l
	if len(m.States) > 0 {
		for k, v := range m.States {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UserLikeState) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Time != 0 {
		n += 1 + sovApi(uint64(m.Time))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	return n
}

func (m *UserLikesReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ItemRecord) Size() (n int) {
	var l int
	_ = l
	if m.MessageID != 0 {
		n += 1 + sovApi(uint64(m.MessageID))
	}
	if m.Time != 0 {
		n += 1 + sovApi(uint64(m.Time))
	}
	return n
}

func (m *UserLikesReply) Size() (n int) {
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *UserRecord) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Time != 0 {
		n += 1 + sovApi(uint64(m.Time))
	}
	return n
}

func (m *ItemLikesReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.OriginID != 0 {
		n += 1 + sovApi(uint64(m.OriginID))
	}
	if m.MessageID != 0 {
		n += 1 + sovApi(uint64(m.MessageID))
	}
	if m.LastMid != 0 {
		n += 1 + sovApi(uint64(m.LastMid))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ItemLikesReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *UpdateCountReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.OriginID != 0 {
		n += 1 + sovApi(uint64(m.OriginID))
	}
	if m.MessageID != 0 {
		n += 1 + sovApi(uint64(m.MessageID))
	}
	if m.LikeChange != 0 {
		n += 1 + sovApi(uint64(m.LikeChange))
	}
	if m.DislikeChange != 0 {
		n += 1 + sovApi(uint64(m.DislikeChange))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RawStatReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.OriginID != 0 {
		n += 1 + sovApi(uint64(m.OriginID))
	}
	if m.MessageID != 0 {
		n += 1 + sovApi(uint64(m.MessageID))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RawStatReply) Size() (n int) {
	var l int
	_ = l
	if m.OriginID != 0 {
		n += 1 + sovApi(uint64(m.OriginID))
	}
	if m.MessageID != 0 {
		n += 1 + sovApi(uint64(m.MessageID))
	}
	if m.LikeNumber != 0 {
		n += 1 + sovApi(uint64(m.LikeNumber))
	}
	if m.DislikeNumber != 0 {
		n += 1 + sovApi(uint64(m.DislikeNumber))
	}
	if m.LikeChange != 0 {
		n += 1 + sovApi(uint64(m.LikeChange))
	}
	if m.DislikeChange != 0 {
		n += 1 + sovApi(uint64(m.DislikeChange))
	}
	return n
}

func (m *MultiStatsReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if len(m.Business) > 0 {
		for k, v := range m.Business {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *MultiStatsReq_Record) Size() (n int) {
	var l int
	_ = l
	if m.OriginID != 0 {
		n += 1 + sovApi(uint64(m.OriginID))
	}
	if m.MessageID != 0 {
		n += 1 + sovApi(uint64(m.MessageID))
	}
	return n
}

func (m *MultiStatsReq_Business) Size() (n int) {
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *MultiStatsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Business) > 0 {
		for k, v := range m.Business {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MultiStatsReply_Records) Size() (n int) {
	var l int
	_ = l
	if len(m.Records) > 0 {
		for k, v := range m.Records {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LikeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpMid", wireType)
			}
			m.UpMid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpMid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginID", wireType)
			}
			m.OriginID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (Action(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginID", wireType)
			}
			m.OriginID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeNumber", wireType)
			}
			m.LikeNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DislikeNumber", wireType)
			}
			m.DislikeNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DislikeNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeState", wireType)
			}
			m.LikeState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeState |= (State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginID", wireType)
			}
			m.OriginID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeNumber", wireType)
			}
			m.LikeNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DislikeNumber", wireType)
			}
			m.DislikeNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DislikeNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginID", wireType)
			}
			m.OriginID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageIds = append(m.MessageIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageIds = append(m.MessageIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageIds", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = make(map[int64]*StatState)
			}
			var mapkey int64
			var mapvalue *StatState
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StatState{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Stats[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HasLikeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HasLikeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HasLikeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageIds = append(m.MessageIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageIds = append(m.MessageIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageIds", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HasLikeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HasLikeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HasLikeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field States", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.States == nil {
				m.States = make(map[int64]*UserLikeState)
			}
			var mapkey int64
			var mapvalue *UserLikeState
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &UserLikeState{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.States[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLikeState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLikeState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLikeState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLikesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLikesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLikesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLikesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLikesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLikesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ItemRecord{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemLikesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemLikesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemLikesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginID", wireType)
			}
			m.OriginID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMid", wireType)
			}
			m.LastMid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemLikesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemLikesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemLikesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserRecord{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginID", wireType)
			}
			m.OriginID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeChange", wireType)
			}
			m.LikeChange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeChange |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DislikeChange", wireType)
			}
			m.DislikeChange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DislikeChange |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawStatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawStatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawStatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginID", wireType)
			}
			m.OriginID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawStatReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawStatReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawStatReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginID", wireType)
			}
			m.OriginID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeNumber", wireType)
			}
			m.LikeNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DislikeNumber", wireType)
			}
			m.DislikeNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DislikeNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeChange", wireType)
			}
			m.LikeChange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeChange |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DislikeChange", wireType)
			}
			m.DislikeChange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DislikeChange |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiStatsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiStatsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiStatsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Business == nil {
				m.Business = make(map[string]*MultiStatsReq_Business)
			}
			var mapkey string
			var mapvalue *MultiStatsReq_Business
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MultiStatsReq_Business{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Business[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiStatsReq_Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginID", wireType)
			}
			m.OriginID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiStatsReq_Business) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Business: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Business: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &MultiStatsReq_Record{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiStatsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiStatsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiStatsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Business == nil {
				m.Business = make(map[string]*MultiStatsReply_Records)
			}
			var mapkey string
			var mapvalue *MultiStatsReply_Records
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MultiStatsReply_Records{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Business[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiStatsReply_Records) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Records: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Records: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Records == nil {
				m.Records = make(map[int64]*StatState)
			}
			var mapkey int64
			var mapvalue *StatState
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StatState{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Records[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/service/main/thumbup/api/api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 1515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0xcb, 0x6f, 0xdb, 0x46,
	0x13, 0x0f, 0x49, 0x4b, 0xb6, 0x46, 0xb6, 0xe2, 0x2c, 0xbe, 0x04, 0xfe, 0x98, 0xc0, 0x14, 0x98,
	0x97, 0x3e, 0x27, 0x91, 0x10, 0xc7, 0x5f, 0xda, 0xb8, 0x70, 0x00, 0xdb, 0x71, 0x51, 0x35, 0xb6,
	0x13, 0xd0, 0x76, 0x5f, 0x28, 0x20, 0x50, 0xd2, 0x5a, 0xde, 0x46, 0x7c, 0x98, 0x0f, 0xb7, 0xfe,
	0x03, 0x7a, 0xea, 0xa9, 0xc7, 0xa2, 0x40, 0xcf, 0x3d, 0xb4, 0xb7, 0x5e, 0xda, 0x3f, 0xa0, 0xc8,
	0xa1, 0x87, 0xfc, 0x05, 0x42, 0xeb, 0x63, 0x81, 0x02, 0x85, 0x8e, 0x3d, 0x15, 0xfb, 0xa0, 0x44,
	0xaa, 0xb6, 0x24, 0x3b, 0x2a, 0x10, 0xe4, 0x20, 0x88, 0x9c, 0x9d, 0xd9, 0xd9, 0x99, 0xdf, 0x6f,
	0x67, 0x67, 0x09, 0x37, 0x4c, 0xd7, 0x2d, 0xf9, 0xd8, 0x3b, 0x20, 0x35, 0x5c, 0xb2, 0x4c, 0x62,
	0x97, 0x82, 0xbd, 0xd0, 0xaa, 0x86, 0x6e, 0xc9, 0x74, 0x09, 0xfd, 0x15, 0x5d, 0xcf, 0x09, 0x1c,
	0x74, 0xa5, 0xe6, 0x58, 0x56, 0x68, 0x93, 0xe0, 0xb0, 0x28, 0xb4, 0x8b, 0x42, 0xb1, 0x78, 0x70,
	0x57, 0xbd, 0xd3, 0x20, 0xc1, 0x5e, 0x58, 0x2d, 0xd6, 0x1c, 0xab, 0xd4, 0x70, 0x1a, 0x4e, 0x89,
	0x19, 0x55, 0xc3, 0x5d, 0xf6, 0xc6, 0x5e, 0xd8, 0x13, 0x9f, 0x4c, 0xbd, 0xdc, 0x70, 0x9c, 0x46,
	0x13, 0x77, 0xb5, 0xb0, 0xe5, 0x06, 0x87, 0x7c, 0x50, 0x7f, 0xa1, 0xc0, 0xf8, 0x3a, 0x79, 0x86,
	0x0d, 0xbc, 0x8f, 0x56, 0x61, 0xa2, 0x1a, 0xfa, 0xc4, 0xc6, 0xbe, 0x3f, 0x23, 0xe5, 0xa5, 0x42,
	0x66, 0xe5, 0x66, 0xbb, 0xa5, 0x5d, 0xdd, 0x75, 0x3c, 0x6b, 0x51, 0x8f, 0x46, 0xf4, 0xfc, 0x81,
	0xd9, 0x24, 0x75, 0x33, 0xc0, 0x8b, 0xba, 0x87, 0xf7, 0x43, 0xe2, 0xe1, 0xba, 0x6e, 0x74, 0x0c,
	0xd1, 0x22, 0x28, 0x16, 0xa9, 0xcf, 0xc8, 0x79, 0xa9, 0xa0, 0xac, 0x14, 0xda, 0x2d, 0xed, 0x1a,
	0xb7, 0xb7, 0x48, 0xfd, 0x38, 0xd3, 0xdb, 0x16, 0xb1, 0x97, 0xee, 0xea, 0x06, 0x35, 0x42, 0x05,
	0x48, 0x87, 0x6e, 0x85, 0x9a, 0x2b, 0xcc, 0xfc, 0x42, 0xbb, 0xa5, 0x4d, 0x71, 0x73, 0x2e, 0xd7,
	0x8d, 0x54, 0xe8, 0x6e, 0x90, 0x3a, 0x5a, 0x82, 0x8c, 0xe3, 0x91, 0x06, 0xb1, 0x2b, 0xa4, 0x3e,
	0x33, 0xc6, 0x94, 0xf3, 0x47, 0x2d, 0x6d, 0xe2, 0x09, 0x13, 0x96, 0x1f, 0xb5, 0x5b, 0xda, 0x34,
	0x37, 0xec, 0xa8, 0xe9, 0xc6, 0x04, 0x7f, 0x2e, 0xd7, 0xd1, 0x0e, 0x80, 0x85, 0x7d, 0xdf, 0x6c,
	0x60, 0x6a, 0x9f, 0x62, 0xf6, 0xf7, 0x8f, 0x5a, 0x5a, 0x66, 0x83, 0x4b, 0xd9, 0x04, 0xd7, 0xc5,
	0xc2, 0x3b, 0x8a, 0xc7, 0x87, 0x9e, 0x11, 0x0a, 0xe5, 0x3a, 0xda, 0x85, 0xb4, 0x59, 0x0b, 0x88,
	0x63, 0xcf, 0xa4, 0xf3, 0x52, 0x21, 0x37, 0x7f, 0xad, 0xd8, 0x0f, 0xc7, 0xe2, 0x32, 0xd3, 0x8d,
	0x27, 0x89, 0x5b, 0x9f, 0xe8, 0x4a, 0xcc, 0x8e, 0xae, 0x80, 0x4c, 0xdc, 0x99, 0x71, 0x06, 0xd1,
	0xe4, 0x51, 0x4b, 0x93, 0xcb, 0x4f, 0x7f, 0x6f, 0x69, 0x32, 0x71, 0x0d, 0x99, 0xb8, 0xfa, 0x9f,
	0x12, 0x64, 0xb6, 0x02, 0x33, 0xa0, 0x3f, 0x8c, 0xfe, 0x17, 0xcf, 0x94, 0xc4, 0x22, 0x9d, 0x8c,
	0x67, 0x2a, 0x96, 0x95, 0xdb, 0x89, 0xac, 0x70, 0x04, 0xa7, 0x12, 0x59, 0x89, 0x07, 0xab, 0x41,
	0xb6, 0x49, 0x9e, 0xe1, 0x8a, 0x1d, 0x5a, 0x55, 0xec, 0x71, 0xc4, 0x0c, 0xa0, 0xa2, 0x4d, 0x26,
	0x41, 0xd7, 0x21, 0x57, 0x27, 0x7e, 0x5c, 0x87, 0x01, 0x65, 0x4c, 0x09, 0xa9, 0x50, 0x5b, 0x01,
	0x66, 0x54, 0xf1, 0xe9, 0x72, 0x19, 0x16, 0xb9, 0xf9, 0xab, 0xfd, 0x13, 0xc7, 0x22, 0x33, 0x32,
	0xd4, 0x8c, 0x3d, 0xea, 0xdf, 0x49, 0x90, 0xe1, 0x2c, 0x76, 0x9b, 0x87, 0xaf, 0x7c, 0xc8, 0xfa,
	0xd7, 0x32, 0x4c, 0xd0, 0x85, 0xfb, 0x23, 0xdb, 0x75, 0x89, 0xfd, 0x20, 0x9f, 0x7a, 0x3f, 0x3c,
	0x86, 0x6c, 0x37, 0x0d, 0xfe, 0x8c, 0x92, 0x57, 0x0a, 0xca, 0xca, 0x5c, 0xbb, 0xa5, 0xdd, 0xe8,
	0xdd, 0x03, 0x27, 0xac, 0x04, 0x3a, 0x49, 0xf2, 0x51, 0x9e, 0x57, 0x00, 0xbe, 0x2b, 0x73, 0xed,
	0x96, 0x06, 0xdd, 0x0a, 0xc0, 0xf7, 0x39, 0xe7, 0x6f, 0xea, 0x04, 0xfe, 0xfe, 0x24, 0x01, 0x88,
	0xec, 0x50, 0x34, 0xcb, 0x90, 0xa2, 0xd4, 0xa0, 0xc9, 0x51, 0x0a, 0xd9, 0xf9, 0x7b, 0x83, 0xa9,
	0xc1, 0x0d, 0xf9, 0xe3, 0x9a, 0x1d, 0x78, 0x87, 0x06, 0x9f, 0x41, 0x35, 0xc5, 0xc4, 0x4c, 0x88,
	0xa6, 0x41, 0x79, 0x86, 0x0f, 0x39, 0x41, 0x0c, 0xfa, 0x88, 0x96, 0x20, 0x75, 0x60, 0x36, 0x43,
	0xcc, 0x32, 0x98, 0x9d, 0xbf, 0x39, 0xd8, 0x15, 0x67, 0x22, 0xb7, 0x5a, 0x94, 0xdf, 0x94, 0xf4,
	0xb6, 0x04, 0xf0, 0x8e, 0xe9, 0x8f, 0xb4, 0xa4, 0xf6, 0xa0, 0x23, 0xbf, 0x14, 0x3a, 0x0b, 0x1c,
	0x1d, 0x5e, 0x60, 0xf5, 0x76, 0x4b, 0x9b, 0xed, 0x5b, 0x9f, 0x13, 0x88, 0x8d, 0x9d, 0x80, 0xd8,
	0xcf, 0x12, 0x4c, 0x76, 0x82, 0xa6, 0x98, 0x6d, 0x42, 0x9a, 0x6d, 0xe7, 0x08, 0xb4, 0xfb, 0xfd,
	0x33, 0x19, 0xb7, 0xe5, 0x9b, 0x5b, 0xe0, 0x26, 0x66, 0x51, 0x77, 0x21, 0x1b, 0x13, 0x1f, 0x83,
	0xdc, 0x72, 0x12, 0xb9, 0x5b, 0xfd, 0xfd, 0xed, 0xf8, 0xd8, 0x5b, 0x8f, 0x8a, 0x47, 0x1c, 0xbd,
	0x2f, 0x25, 0x98, 0x4a, 0x0c, 0x52, 0x57, 0x56, 0x54, 0x45, 0x78, 0x2a, 0xee, 0xc1, 0x58, 0x40,
	0x2c, 0x2c, 0x76, 0x99, 0xf6, 0x57, 0x4b, 0xbb, 0xdc, 0x70, 0xee, 0x50, 0x7f, 0x8e, 0x5d, 0x6a,
	0x92, 0xaa, 0x67, 0x7a, 0x87, 0x25, 0xaa, 0x51, 0xdc, 0x26, 0x16, 0x36, 0x98, 0x32, 0x7a, 0xc0,
	0x49, 0x8c, 0x59, 0xde, 0x87, 0xac, 0x6f, 0xdc, 0x42, 0xff, 0x4a, 0x86, 0xc9, 0x68, 0x4d, 0xa3,
	0x2b, 0x18, 0x0b, 0xf1, 0x63, 0x7a, 0x68, 0x1a, 0xbc, 0x01, 0xb2, 0x6b, 0x0b, 0xee, 0xc4, 0x9c,
	0xba, 0x76, 0xbf, 0xa3, 0x5d, 0x76, 0x6d, 0x66, 0xe8, 0x8b, 0x92, 0x10, 0x37, 0xf4, 0xfb, 0x1b,
	0xfa, 0x03, 0x4a, 0x85, 0x03, 0x50, 0x0e, 0xb0, 0x65, 0xe0, 0x9a, 0xe3, 0xf5, 0x16, 0x73, 0x69,
	0x40, 0x31, 0x3f, 0x0b, 0x8e, 0xfa, 0x2e, 0xe4, 0x62, 0x58, 0x50, 0xaa, 0xff, 0x07, 0x52, 0x81,
	0x13, 0x98, 0x4d, 0x41, 0x11, 0xfe, 0x82, 0x1e, 0x42, 0x8a, 0x04, 0xd8, 0xe2, 0x9b, 0x35, 0x3b,
	0x5f, 0xe8, 0x8f, 0x77, 0x37, 0x06, 0x83, 0x9b, 0xe9, 0x5b, 0x00, 0xd4, 0x8f, 0x08, 0x6c, 0x34,
	0x24, 0xd4, 0x7f, 0x54, 0x60, 0x92, 0xba, 0x1a, 0x2d, 0x93, 0x5e, 0xf2, 0xe8, 0x49, 0xb6, 0x62,
	0xca, 0xa8, 0x5a, 0xb1, 0x87, 0x30, 0xd1, 0x34, 0xfd, 0xa0, 0xd2, 0x3d, 0x89, 0xae, 0xb6, 0x5b,
	0x9a, 0xc6, 0xe7, 0x89, 0x46, 0xf4, 0xfc, 0x27, 0xbe, 0x63, 0xc7, 0xde, 0x8d, 0x71, 0xfa, 0xb8,
	0xd1, 0x61, 0x7a, 0xea, 0xac, 0x4c, 0x4f, 0x9f, 0x95, 0xe9, 0x27, 0x35, 0x75, 0x4f, 0x21, 0x17,
	0x83, 0x8e, 0x12, 0xef, 0x21, 0xa4, 0x42, 0x1f, 0x7b, 0x51, 0x89, 0x2d, 0x0c, 0x2e, 0x79, 0x11,
	0xc5, 0x98, 0x99, 0xfe, 0x87, 0x0c, 0xb9, 0x1d, 0x97, 0xae, 0x67, 0xd5, 0x09, 0xed, 0xe0, 0x35,
	0xe7, 0x43, 0xd4, 0xba, 0xd5, 0xf6, 0x4c, 0xbb, 0x81, 0x45, 0x5b, 0xc6, 0x5a, 0xb7, 0x55, 0x26,
	0x89, 0xb7, 0x6e, 0x42, 0x27, 0x95, 0x68, 0xdd, 0x84, 0x9a, 0x0a, 0x13, 0x8e, 0x8b, 0x3d, 0x33,
	0x70, 0x3c, 0x06, 0x72, 0xc6, 0xe8, 0xbc, 0x0f, 0x40, 0xf0, 0x73, 0x19, 0xc0, 0x30, 0x3f, 0xa5,
	0xb5, 0xfd, 0x35, 0xcf, 0x75, 0xff, 0x66, 0xe1, 0x07, 0x19, 0x26, 0x3b, 0x79, 0xa0, 0x44, 0x5e,
	0xfa, 0x67, 0xbb, 0x7e, 0xf6, 0x20, 0xe4, 0x51, 0x13, 0xe6, 0x65, 0xaf, 0x37, 0x3d, 0xc4, 0x4b,
	0x0d, 0x41, 0xbc, 0xf4, 0x31, 0xc4, 0xd3, 0xbf, 0x1d, 0x83, 0xa9, 0x8d, 0xb0, 0x19, 0x90, 0xce,
	0xc5, 0x61, 0x21, 0x76, 0x2a, 0x0c, 0x7f, 0x84, 0xef, 0xc4, 0x78, 0xc7, 0x0f, 0xa7, 0x07, 0xfd,
	0x2b, 0x47, 0xc2, 0x69, 0x71, 0x45, 0xd8, 0xf2, 0xfe, 0xac, 0xcb, 0x44, 0x8e, 0xb9, 0x72, 0x3c,
	0xe6, 0xea, 0x37, 0x12, 0xa4, 0xc5, 0x59, 0xf6, 0x4a, 0xa2, 0xad, 0x7e, 0x00, 0x13, 0x51, 0x64,
	0x68, 0x1d, 0xc6, 0x3d, 0xb6, 0xd6, 0xa8, 0xb4, 0xce, 0x9f, 0x26, 0x41, 0xa2, 0xc8, 0x46, 0x53,
	0xa8, 0xfb, 0x30, 0x95, 0xc8, 0x59, 0xbc, 0x79, 0xcd, 0xf0, 0xe6, 0xf5, 0xdd, 0x64, 0xf3, 0xba,
	0x70, 0x16, 0x3c, 0xe2, 0x5d, 0xec, 0xf7, 0x0a, 0x9c, 0x8f, 0x6b, 0xd1, 0x4d, 0xf6, 0x7e, 0xa2,
	0xdc, 0xd0, 0xa8, 0xde, 0x1a, 0xde, 0x0d, 0x6d, 0xcb, 0x4f, 0x00, 0x5e, 0xfd, 0x45, 0x82, 0x71,
	0x1e, 0xb3, 0x8f, 0x3e, 0xee, 0xcd, 0xdc, 0xca, 0xe9, 0x7c, 0x88, 0x79, 0xa2, 0x7f, 0xee, 0xaa,
	0x93, 0xc9, 0x1a, 0x4c, 0xc6, 0x07, 0xfe, 0x95, 0xfb, 0x9b, 0xea, 0x0d, 0x86, 0xeb, 0x71, 0xd2,
	0xcb, 0xff, 0xcf, 0x14, 0x63, 0xcc, 0xe7, 0xdc, 0x67, 0x90, 0xe6, 0x9f, 0x82, 0xd0, 0x25, 0x40,
	0xcb, 0xab, 0xdb, 0xe5, 0x27, 0x9b, 0x95, 0x9d, 0xcd, 0xad, 0xa7, 0x6b, 0xab, 0xe5, 0xb7, 0xcb,
	0x6b, 0x8f, 0xa6, 0xcf, 0xa1, 0xf3, 0x90, 0x15, 0xf2, 0xf5, 0xf2, 0xe3, 0xb5, 0x69, 0x29, 0xa6,
	0xb8, 0xba, 0xbc, 0xb9, 0xba, 0xb6, 0xce, 0xe5, 0x32, 0x42, 0x90, 0x13, 0xf2, 0x47, 0xe5, 0x2d,
	0x26, 0x53, 0xd0, 0x7f, 0xe1, 0x62, 0x52, 0x37, 0x1a, 0x1a, 0x9b, 0x5b, 0x86, 0x14, 0xbf, 0xe6,
	0x5c, 0x84, 0x0b, 0x5b, 0xdb, 0xcb, 0xdb, 0x6b, 0x3d, 0x7e, 0x73, 0x00, 0x5c, 0x2c, 0xdc, 0x5e,
	0x80, 0x29, 0xfe, 0x1e, 0x4d, 0x21, 0xcf, 0x7f, 0x91, 0x86, 0xf1, 0x6d, 0x1e, 0x2e, 0x7a, 0x0f,
	0xc6, 0x68, 0x83, 0x82, 0xae, 0xf7, 0x4f, 0x89, 0xb8, 0x1c, 0xab, 0x37, 0x87, 0x51, 0xa3, 0xe4,
	0xfd, 0x90, 0x2f, 0xd3, 0x47, 0x37, 0x86, 0xba, 0xfc, 0xef, 0xab, 0x85, 0x61, 0x3f, 0x12, 0xa0,
	0x3d, 0x80, 0x2e, 0x42, 0xe8, 0xd6, 0x29, 0xb6, 0x9e, 0x7a, 0xe7, 0x54, 0xc0, 0xa3, 0x0a, 0x8c,
	0x8b, 0x7b, 0x2e, 0x2a, 0x0c, 0x79, 0x1d, 0xde, 0x57, 0xe7, 0x86, 0xbf, 0x38, 0x23, 0x0c, 0x99,
	0xce, 0xdd, 0x04, 0xcd, 0x0d, 0x77, 0x03, 0x66, 0x81, 0xdc, 0x1e, 0x5a, 0x57, 0xb8, 0xe9, 0x74,
	0xa2, 0x83, 0xdc, 0xc4, 0x6f, 0x1b, 0x83, 0xdc, 0xf4, 0xb4, 0xb7, 0x5b, 0x90, 0x8d, 0x75, 0xa7,
	0x68, 0xd0, 0x1a, 0x13, 0x8d, 0xac, 0x7a, 0xa9, 0xc8, 0xbf, 0x79, 0x17, 0xa3, 0x6f, 0xde, 0xc5,
	0x35, 0xcb, 0x0d, 0x18, 0x06, 0xa2, 0xf5, 0x18, 0x84, 0x41, 0xb7, 0x53, 0x1b, 0x84, 0x41, 0xbc,
	0x97, 0x59, 0xb9, 0xf8, 0xfc, 0xb7, 0xd9, 0x73, 0xcf, 0x8f, 0x66, 0xa5, 0x17, 0x47, 0xb3, 0xd2,
	0xaf, 0x47, 0xb3, 0xd2, 0x47, 0x8a, 0xe9, 0x92, 0x6a, 0x9a, 0xad, 0xe3, 0xde, 0xdf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x03, 0xbf, 0xe5, 0xd9, 0x00, 0x18, 0x00, 0x00,
}
