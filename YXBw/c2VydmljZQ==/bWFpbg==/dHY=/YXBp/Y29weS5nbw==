// +build !ignore_autogenerated

// Code generated by deepcopy-gen. DO NOT EDIT.

package api

import (
	model "go-common/app/service/main/tv/internal/model"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChangeHistoryReply) DeepCopyInto(out *ChangeHistoryReply) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChangeHistoryReply.
func (in *ChangeHistoryReply) DeepCopy() *ChangeHistoryReply {
	if in == nil {
		return nil
	}
	out := new(ChangeHistoryReply)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyAsIntoUserChangeHistory is an autogenerated deepcopy function, copying the receiver, writing into model.UserChangeHistory.
func (in *ChangeHistoryReply) DeepCopyAsIntoUserChangeHistory(out *model.UserChangeHistory) {
	out.ChangeType = in.ChangeType
	out.ChangeTime = in.ChangeTime
	out.OrderNo = in.OrderNo
	out.Days = in.Days
	out.OperatorId = in.OperatorId
	out.Ctime = in.Ctime
	out.Mtime = in.Mtime
	return
}

// DeepCopyFromUserChangeHistory is an autogenerated deepcopy function, copying the receiver, writing into model.UserChangeHistory.
func (out *ChangeHistoryReply) DeepCopyFromUserChangeHistory(in *model.UserChangeHistory) {
	out.ChangeType = in.ChangeType
	out.ChangeTime = in.ChangeTime
	out.OrderNo = in.OrderNo
	out.Days = in.Days
	out.OperatorId = in.OperatorId
	out.Ctime = in.Ctime
	out.Mtime = in.Mtime
	return
}

// DeepCopyAsUserChangeHistory is an autogenerated deepcopy function, copying the receiver, creating a new model.UserChangeHistory.
func (in *ChangeHistoryReply) DeepCopyAsUserChangeHistory() *model.UserChangeHistory {
	if in == nil {
		return nil
	}
	out := new(model.UserChangeHistory)
	in.DeepCopyAsIntoUserChangeHistory(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChangeHistoryReq) DeepCopyInto(out *ChangeHistoryReq) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChangeHistoryReq.
func (in *ChangeHistoryReq) DeepCopy() *ChangeHistoryReq {
	if in == nil {
		return nil
	}
	out := new(ChangeHistoryReq)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChangeHistorysReply) DeepCopyInto(out *ChangeHistorysReply) {
	*out = *in
	if in.Historys != nil {
		in, out := &in.Historys, &out.Historys
		*out = make([]*ChangeHistoryReply, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(ChangeHistoryReply)
				(*in).DeepCopyInto(*out)
			}
		}
	}
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChangeHistorysReply.
func (in *ChangeHistorysReply) DeepCopy() *ChangeHistorysReply {
	if in == nil {
		return nil
	}
	out := new(ChangeHistorysReply)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChangeHistorysReq) DeepCopyInto(out *ChangeHistorysReq) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChangeHistorysReq.
func (in *ChangeHistorysReq) DeepCopy() *ChangeHistorysReq {
	if in == nil {
		return nil
	}
	out := new(ChangeHistorysReq)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CreateGuestOrderReply) DeepCopyInto(out *CreateGuestOrderReply) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CreateGuestOrderReply.
func (in *CreateGuestOrderReply) DeepCopy() *CreateGuestOrderReply {
	if in == nil {
		return nil
	}
	out := new(CreateGuestOrderReply)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyAsIntoPayInfo is an autogenerated deepcopy function, copying the receiver, writing into model.PayInfo.
func (in *CreateGuestOrderReply) DeepCopyAsIntoPayInfo(out *model.PayInfo) {
	out.OrderNo = in.OrderNo
	out.PaymentType = in.PaymentType
	out.CodeUrl = in.CodeUrl
	out.PaymentMoney = in.PaymentMoney
	return
}

// DeepCopyFromPayInfo is an autogenerated deepcopy function, copying the receiver, writing into model.PayInfo.
func (out *CreateGuestOrderReply) DeepCopyFromPayInfo(in *model.PayInfo) {
	out.OrderNo = in.OrderNo
	out.PaymentType = in.PaymentType
	out.CodeUrl = in.CodeUrl
	out.PaymentMoney = in.PaymentMoney
	return
}

// DeepCopyAsPayInfo is an autogenerated deepcopy function, copying the receiver, creating a new model.PayInfo.
func (in *CreateGuestOrderReply) DeepCopyAsPayInfo() *model.PayInfo {
	if in == nil {
		return nil
	}
	out := new(model.PayInfo)
	in.DeepCopyAsIntoPayInfo(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CreateGuestOrderReq) DeepCopyInto(out *CreateGuestOrderReq) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CreateGuestOrderReq.
func (in *CreateGuestOrderReq) DeepCopy() *CreateGuestOrderReq {
	if in == nil {
		return nil
	}
	out := new(CreateGuestOrderReq)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CreateGuestQrReply) DeepCopyInto(out *CreateGuestQrReply) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CreateGuestQrReply.
func (in *CreateGuestQrReply) DeepCopy() *CreateGuestQrReply {
	if in == nil {
		return nil
	}
	out := new(CreateGuestQrReply)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyAsIntoQR is an autogenerated deepcopy function, copying the receiver, writing into model.QR.
func (in *CreateGuestQrReply) DeepCopyAsIntoQR(out *model.QR) {
	out.Token = in.Token
	return
}

// DeepCopyFromQR is an autogenerated deepcopy function, copying the receiver, writing into model.QR.
func (out *CreateGuestQrReply) DeepCopyFromQR(in *model.QR) {
	out.Url = in.URL
	out.ExpireAt = in.ExpireAt
	out.Token = in.Token
	return
}

// DeepCopyAsQR is an autogenerated deepcopy function, copying the receiver, creating a new model.QR.
func (in *CreateGuestQrReply) DeepCopyAsQR() *model.QR {
	if in == nil {
		return nil
	}
	out := new(model.QR)
	in.DeepCopyAsIntoQR(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CreateGuestQrReq) DeepCopyInto(out *CreateGuestQrReq) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CreateGuestQrReq.
func (in *CreateGuestQrReq) DeepCopy() *CreateGuestQrReq {
	if in == nil {
		return nil
	}
	out := new(CreateGuestQrReq)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CreateOrderReply) DeepCopyInto(out *CreateOrderReply) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CreateOrderReply.
func (in *CreateOrderReply) DeepCopy() *CreateOrderReply {
	if in == nil {
		return nil
	}
	out := new(CreateOrderReply)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyAsIntoPayInfo is an autogenerated deepcopy function, copying the receiver, writing into model.PayInfo.
func (in *CreateOrderReply) DeepCopyAsIntoPayInfo(out *model.PayInfo) {
	out.OrderNo = in.OrderNo
	out.PaymentType = in.PaymentType
	out.CodeUrl = in.CodeUrl
	out.PaymentMoney = in.PaymentMoney
	return
}

// DeepCopyFromPayInfo is an autogenerated deepcopy function, copying the receiver, writing into model.PayInfo.
func (out *CreateOrderReply) DeepCopyFromPayInfo(in *model.PayInfo) {
	out.OrderNo = in.OrderNo
	out.PaymentType = in.PaymentType
	out.CodeUrl = in.CodeUrl
	out.PaymentMoney = in.PaymentMoney
	return
}

// DeepCopyAsPayInfo is an autogenerated deepcopy function, copying the receiver, creating a new model.PayInfo.
func (in *CreateOrderReply) DeepCopyAsPayInfo() *model.PayInfo {
	if in == nil {
		return nil
	}
	out := new(model.PayInfo)
	in.DeepCopyAsIntoPayInfo(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CreateOrderReq) DeepCopyInto(out *CreateOrderReq) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CreateOrderReq.
func (in *CreateOrderReq) DeepCopy() *CreateOrderReq {
	if in == nil {
		return nil
	}
	out := new(CreateOrderReq)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CreateQrReply) DeepCopyInto(out *CreateQrReply) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CreateQrReply.
func (in *CreateQrReply) DeepCopy() *CreateQrReply {
	if in == nil {
		return nil
	}
	out := new(CreateQrReply)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyAsIntoQR is an autogenerated deepcopy function, copying the receiver, writing into model.QR.
func (in *CreateQrReply) DeepCopyAsIntoQR(out *model.QR) {
	out.Token = in.Token
	return
}

// DeepCopyFromQR is an autogenerated deepcopy function, copying the receiver, writing into model.QR.
func (out *CreateQrReply) DeepCopyFromQR(in *model.QR) {
	out.Url = in.URL
	out.ExpireAt = in.ExpireAt
	out.Token = in.Token
	return
}

// DeepCopyAsQR is an autogenerated deepcopy function, copying the receiver, creating a new model.QR.
func (in *CreateQrReply) DeepCopyAsQR() *model.QR {
	if in == nil {
		return nil
	}
	out := new(model.QR)
	in.DeepCopyAsIntoQR(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CreateQrReq) DeepCopyInto(out *CreateQrReq) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CreateQrReq.
func (in *CreateQrReq) DeepCopy() *CreateQrReq {
	if in == nil {
		return nil
	}
	out := new(CreateQrReq)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GuestPanelInfoReq) DeepCopyInto(out *GuestPanelInfoReq) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GuestPanelInfoReq.
func (in *GuestPanelInfoReq) DeepCopy() *GuestPanelInfoReq {
	if in == nil {
		return nil
	}
	out := new(GuestPanelInfoReq)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PanelInfoReq) DeepCopyInto(out *PanelInfoReq) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PanelInfoReq.
func (in *PanelInfoReq) DeepCopy() *PanelInfoReq {
	if in == nil {
		return nil
	}
	out := new(PanelInfoReq)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PanelPriceConfig) DeepCopyInto(out *PanelPriceConfig) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PanelPriceConfig.
func (in *PanelPriceConfig) DeepCopy() *PanelPriceConfig {
	if in == nil {
		return nil
	}
	out := new(PanelPriceConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyAsIntoPanelPriceConfig is an autogenerated deepcopy function, copying the receiver, writing into model.PanelPriceConfig.
func (in *PanelPriceConfig) DeepCopyAsIntoPanelPriceConfig(out *model.PanelPriceConfig) {
	out.OriginPrice = in.OriginPrice
	out.MaxNum = in.MaxNum
	return
}

// DeepCopyFromPanelPriceConfig is an autogenerated deepcopy function, copying the receiver, writing into model.PanelPriceConfig.
func (out *PanelPriceConfig) DeepCopyFromPanelPriceConfig(in *model.PanelPriceConfig) {
	out.Id = in.ID
	out.Pid = in.Pid
	out.Platform = in.Platform
	out.ProductName = in.ProductName
	out.SuitType = in.SubType
	out.Month = in.Month
	out.SubType = in.SubType
	out.Price = in.Price
	out.Remark = in.Remark
	out.Status = in.Status
	out.Superscript = in.Superscript
	out.MaxNum = in.MaxNum
	out.OriginPrice = in.OriginPrice
	return
}

// DeepCopyAsPanelPriceConfig is an autogenerated deepcopy function, copying the receiver, creating a new model.PanelPriceConfig.
func (in *PanelPriceConfig) DeepCopyAsPanelPriceConfig() *model.PanelPriceConfig {
	if in == nil {
		return nil
	}
	out := new(model.PanelPriceConfig)
	in.DeepCopyAsIntoPanelPriceConfig(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PanelPriceConfigs) DeepCopyInto(out *PanelPriceConfigs) {
	*out = *in
	if in.PriceConfigs != nil {
		in, out := &in.PriceConfigs, &out.PriceConfigs
		*out = make([]*PanelPriceConfig, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(PanelPriceConfig)
				(*in).DeepCopyInto(*out)
			}
		}
	}
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PanelPriceConfigs.
func (in *PanelPriceConfigs) DeepCopy() *PanelPriceConfigs {
	if in == nil {
		return nil
	}
	out := new(PanelPriceConfigs)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PayCallbackReply) DeepCopyInto(out *PayCallbackReply) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PayCallbackReply.
func (in *PayCallbackReply) DeepCopy() *PayCallbackReply {
	if in == nil {
		return nil
	}
	out := new(PayCallbackReply)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyAsIntoYstPayCallbackReply is an autogenerated deepcopy function, copying the receiver, writing into model.YstPayCallbackReply.
func (in *PayCallbackReply) DeepCopyAsIntoYstPayCallbackReply(out *model.YstPayCallbackReply) {
	out.TraceNo = in.TraceNo
	out.Result = in.Result
	out.Msg = in.Msg
	return
}

// DeepCopyFromYstPayCallbackReply is an autogenerated deepcopy function, copying the receiver, writing into model.YstPayCallbackReply.
func (out *PayCallbackReply) DeepCopyFromYstPayCallbackReply(in *model.YstPayCallbackReply) {
	out.TraceNo = in.TraceNo
	out.Result = in.Result
	out.Msg = in.Msg
	return
}

// DeepCopyAsYstPayCallbackReply is an autogenerated deepcopy function, copying the receiver, creating a new model.YstPayCallbackReply.
func (in *PayCallbackReply) DeepCopyAsYstPayCallbackReply() *model.YstPayCallbackReply {
	if in == nil {
		return nil
	}
	out := new(model.YstPayCallbackReply)
	in.DeepCopyAsIntoYstPayCallbackReply(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PayCallbackReq) DeepCopyInto(out *PayCallbackReq) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PayCallbackReq.
func (in *PayCallbackReq) DeepCopy() *PayCallbackReq {
	if in == nil {
		return nil
	}
	out := new(PayCallbackReq)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyAsIntoYstPayCallbackReq is an autogenerated deepcopy function, copying the receiver, writing into model.YstPayCallbackReq.
func (in *PayCallbackReq) DeepCopyAsIntoYstPayCallbackReq(out *model.YstPayCallbackReq) {
	out.SeqNo = in.SeqNo
	out.TraceNo = in.TraceNo
	out.TradeState = in.TradeState
	out.ContractId = in.ContractId
	out.Sign = in.Sign
	return
}

// DeepCopyFromYstPayCallbackReq is an autogenerated deepcopy function, copying the receiver, writing into model.YstPayCallbackReq.
func (out *PayCallbackReq) DeepCopyFromYstPayCallbackReq(in *model.YstPayCallbackReq) {
	out.SeqNo = in.SeqNo
	out.TraceNo = in.TraceNo
	out.TradeState = in.TradeState
	out.ContractId = in.ContractId
	out.Sign = in.Sign
	return
}

// DeepCopyAsYstPayCallbackReq is an autogenerated deepcopy function, copying the receiver, creating a new model.YstPayCallbackReq.
func (in *PayCallbackReq) DeepCopyAsYstPayCallbackReq() *model.YstPayCallbackReq {
	if in == nil {
		return nil
	}
	out := new(model.YstPayCallbackReq)
	in.DeepCopyAsIntoYstPayCallbackReq(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PayOrderReply) DeepCopyInto(out *PayOrderReply) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PayOrderReply.
func (in *PayOrderReply) DeepCopy() *PayOrderReply {
	if in == nil {
		return nil
	}
	out := new(PayOrderReply)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyAsIntoPayOrder is an autogenerated deepcopy function, copying the receiver, writing into model.PayOrder.
func (in *PayOrderReply) DeepCopyAsIntoPayOrder(out *model.PayOrder) {
	out.OrderNo = in.OrderNo
	out.Platform = in.Platform
	out.OrderType = in.OrderType
	out.BuyMonths = in.BuyMonths
	out.ProductId = in.ProductId
	out.Money = in.Money
	out.Quantity = in.Quantity
	out.Status = in.Status
	out.ThirdTradeNo = in.ThirdTradeNo
	out.PaymentMoney = in.PaymentMoney
	out.PaymentType = in.PaymentType
	out.PaymentTime = in.PaymentTime
	out.Ctime = in.Ctime
	out.Mtime = in.Mtime
	return
}

// DeepCopyFromPayOrder is an autogenerated deepcopy function, copying the receiver, writing into model.PayOrder.
func (out *PayOrderReply) DeepCopyFromPayOrder(in *model.PayOrder) {
	out.OrderNo = in.OrderNo
	out.Platform = in.Platform
	out.OrderType = in.OrderType
	out.BuyMonths = in.BuyMonths
	out.ProductId = in.ProductId
	out.Money = in.Money
	out.Quantity = in.Quantity
	out.Status = in.Status
	out.ThirdTradeNo = in.ThirdTradeNo
	out.PaymentMoney = in.PaymentMoney
	out.PaymentType = in.PaymentType
	out.PaymentTime = in.PaymentTime
	out.Ctime = in.Ctime
	out.Mtime = in.Mtime
	return
}

// DeepCopyAsPayOrder is an autogenerated deepcopy function, copying the receiver, creating a new model.PayOrder.
func (in *PayOrderReply) DeepCopyAsPayOrder() *model.PayOrder {
	if in == nil {
		return nil
	}
	out := new(model.PayOrder)
	in.DeepCopyAsIntoPayOrder(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PayOrderReq) DeepCopyInto(out *PayOrderReq) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PayOrderReq.
func (in *PayOrderReq) DeepCopy() *PayOrderReq {
	if in == nil {
		return nil
	}
	out := new(PayOrderReq)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RenewVipReply) DeepCopyInto(out *RenewVipReply) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RenewVipReply.
func (in *RenewVipReply) DeepCopy() *RenewVipReply {
	if in == nil {
		return nil
	}
	out := new(RenewVipReply)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RenewVipReq) DeepCopyInto(out *RenewVipReq) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RenewVipReq.
func (in *RenewVipReq) DeepCopy() *RenewVipReq {
	if in == nil {
		return nil
	}
	out := new(RenewVipReq)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TokenInfo) DeepCopyInto(out *TokenInfo) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TokenInfo.
func (in *TokenInfo) DeepCopy() *TokenInfo {
	if in == nil {
		return nil
	}
	out := new(TokenInfo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyAsIntoTokenInfo is an autogenerated deepcopy function, copying the receiver, writing into model.TokenInfo.
func (in *TokenInfo) DeepCopyAsIntoTokenInfo(out *model.TokenInfo) {
	out.OrderNo = in.OrderNo
	out.Status = in.Status
	return
}

// DeepCopyFromTokenInfo is an autogenerated deepcopy function, copying the receiver, writing into model.TokenInfo.
func (out *TokenInfo) DeepCopyFromTokenInfo(in *model.TokenInfo) {
	out.Token = in.Token
	out.OrderNo = in.OrderNo
	out.Status = in.Status
	out.Mid = in.Mid
	return
}

// DeepCopyAsTokenInfo is an autogenerated deepcopy function, copying the receiver, creating a new model.TokenInfo.
func (in *TokenInfo) DeepCopyAsTokenInfo() *model.TokenInfo {
	if in == nil {
		return nil
	}
	out := new(model.TokenInfo)
	in.DeepCopyAsIntoTokenInfo(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TokenInfoReq) DeepCopyInto(out *TokenInfoReq) {
	*out = *in
	if in.Token != nil {
		in, out := &in.Token, &out.Token
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TokenInfoReq.
func (in *TokenInfoReq) DeepCopy() *TokenInfoReq {
	if in == nil {
		return nil
	}
	out := new(TokenInfoReq)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserInfoReply) DeepCopyInto(out *UserInfoReply) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserInfoReply.
func (in *UserInfoReply) DeepCopy() *UserInfoReply {
	if in == nil {
		return nil
	}
	out := new(UserInfoReply)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyAsIntoUserInfo is an autogenerated deepcopy function, copying the receiver, writing into model.UserInfo.
func (in *UserInfoReply) DeepCopyAsIntoUserInfo(out *model.UserInfo) {
	out.VipType = in.VipType
	out.PayType = in.PayType
	out.PayChannelId = in.PayChannelId
	out.Status = in.Status
	out.OverdueTime = in.OverdueTime
	return
}

// DeepCopyFromUserInfo is an autogenerated deepcopy function, copying the receiver, writing into model.UserInfo.
func (out *UserInfoReply) DeepCopyFromUserInfo(in *model.UserInfo) {
	out.Mid = in.Mid
	out.VipType = in.VipType
	out.PayType = in.PayType
	out.PayChannelId = in.PayChannelId
	out.Status = in.Status
	out.OverdueTime = in.OverdueTime
	return
}

// DeepCopyAsUserInfo is an autogenerated deepcopy function, copying the receiver, creating a new model.UserInfo.
func (in *UserInfoReply) DeepCopyAsUserInfo() *model.UserInfo {
	if in == nil {
		return nil
	}
	out := new(model.UserInfo)
	in.DeepCopyAsIntoUserInfo(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserInfoReq) DeepCopyInto(out *UserInfoReq) {
	*out = *in
	out.XXX_NoUnkeyedLiteral = in.XXX_NoUnkeyedLiteral
	if in.XXX_unrecognized != nil {
		in, out := &in.XXX_unrecognized, &out.XXX_unrecognized
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserInfoReq.
func (in *UserInfoReq) DeepCopy() *UserInfoReq {
	if in == nil {
		return nil
	}
	out := new(UserInfoReq)
	in.DeepCopyInto(out)
	return out
}

func (out *YstUserInfoReply) DeepCopyFromUserInfo(in *model.UserInfo) {
	out.Mid = in.Mid
	out.PayType = in.PayType
	out.Status = in.Status
	out.PayChannelId = in.PayChannelId
	out.OverdueTime = in.OverdueTime
}

func (in *YstUserInfoReq) DeepCopyAsYstUserInfoReq() *model.YstUserInfoReq {
	if in == nil {
		return nil
	}
	out := new(model.YstUserInfoReq)
	out.Mid = int32(in.Mid)
	out.Sign = in.Sign
	return out
}
