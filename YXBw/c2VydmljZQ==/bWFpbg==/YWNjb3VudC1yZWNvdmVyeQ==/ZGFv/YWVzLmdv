package dao

import (
	"crypto/aes"
	"crypto/cipher"
	"encoding/base64"
	"errors"
)

//func pad(src []byte) []byte {
//	padding := aes.BlockSize - len(src)%aes.BlockSize
//	padText := bytes.Repeat([]byte{byte(padding)}, padding)
//	return append(src, padText...)
//}

func unpad(src []byte) ([]byte, error) {
	length := len(src)
	unpadding := int(src[length-1])

	if unpadding > length {
		return nil, errors.New("unpad error. This could happen when incorrect encryption key is used")
	}

	return src[:(length - unpadding)], nil
}

//func (s *Service) encrypt(text string) (string, error) {
//	msg := pad([]byte(text))
//	cipherText := make([]byte, aes.BlockSize+len(msg))
//	iv := cipherText[:aes.BlockSize]
//	if _, err := io.ReadFull(rand.Reader, iv); err != nil {
//		return "", err
//	}
//
//	cfb := cipher.NewCFBEncrypter(s.AESBlock, iv)
//	cfb.XORKeyStream(cipherText[aes.BlockSize:], []byte(msg))
//	finalMsg := base64.URLEncoding.EncodeToString(cipherText)
//	return finalMsg, nil
//}

func (d *Dao) decrypt(text string) (string, error) {
	decodedMsg, err := base64.URLEncoding.DecodeString(text)
	if err != nil {
		return "", err
	}

	if (len(decodedMsg) % aes.BlockSize) != 0 {
		return "", errors.New("blocksize must be multipe of decoded message length")
	}

	iv := decodedMsg[:aes.BlockSize]
	msg := decodedMsg[aes.BlockSize:]

	cfb := cipher.NewCFBDecrypter(d.AESBlock, iv)
	cfb.XORKeyStream(msg, msg)

	unpadMsg, err := unpad(msg)
	if err != nil {
		return "", err
	}

	return string(unpadMsg), nil
}
