// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/coupon/api/api.proto

/*
	Package v1 is a generated protocol buffer package.

	use {app_id}.{version} as package name

	It is generated from these files:
		app/service/main/coupon/api/api.proto

	It has these top-level messages:
		CaptchaTokenReq
		CaptchaTokenReply
		UseCouponCodeReq
		UseCouponCodeResp
		UsableAllowanceCouponV2Req
		ModelPriceInfo
		UsableAllowanceCouponV2Reply
		ModelCouponAllowancePanelInfo
*/
package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CaptchaTokenReq struct {
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *CaptchaTokenReq) Reset()                    { *m = CaptchaTokenReq{} }
func (m *CaptchaTokenReq) String() string            { return proto.CompactTextString(m) }
func (*CaptchaTokenReq) ProtoMessage()               {}
func (*CaptchaTokenReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

func (m *CaptchaTokenReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type CaptchaTokenReply struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Url   string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *CaptchaTokenReply) Reset()                    { *m = CaptchaTokenReply{} }
func (m *CaptchaTokenReply) String() string            { return proto.CompactTextString(m) }
func (*CaptchaTokenReply) ProtoMessage()               {}
func (*CaptchaTokenReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *CaptchaTokenReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CaptchaTokenReply) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type UseCouponCodeReq struct {
	Token  string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Code   string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Verify string `protobuf:"bytes,3,opt,name=verify,proto3" json:"verify,omitempty"`
	Ip     string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Mid    int64  `protobuf:"varint,5,opt,name=mid,proto3" json:"mid,omitempty"`
}

func (m *UseCouponCodeReq) Reset()                    { *m = UseCouponCodeReq{} }
func (m *UseCouponCodeReq) String() string            { return proto.CompactTextString(m) }
func (*UseCouponCodeReq) ProtoMessage()               {}
func (*UseCouponCodeReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

func (m *UseCouponCodeReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UseCouponCodeReq) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *UseCouponCodeReq) GetVerify() string {
	if m != nil {
		return m.Verify
	}
	return ""
}

func (m *UseCouponCodeReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *UseCouponCodeReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type UseCouponCodeResp struct {
	CouponToken          string  `protobuf:"bytes,1,opt,name=coupon_token,json=couponToken,proto3" json:"coupon_token,omitempty"`
	CouponAmount         float64 `protobuf:"fixed64,2,opt,name=coupon_amount,json=couponAmount,proto3" json:"coupon_amount,omitempty"`
	FullAmount           float64 `protobuf:"fixed64,3,opt,name=full_amount,json=fullAmount,proto3" json:"full_amount,omitempty"`
	PlatfromLimitExplain string  `protobuf:"bytes,4,opt,name=platfrom_limit_explain,json=platfromLimitExplain,proto3" json:"platfrom_limit_explain,omitempty"`
	ProductLimitMonth    int32   `protobuf:"varint,5,opt,name=product_limit_month,json=productLimitMonth,proto3" json:"product_limit_month,omitempty"`
	ProductLimitRenewal  int32   `protobuf:"varint,6,opt,name=product_limit_renewal,json=productLimitRenewal,proto3" json:"product_limit_renewal,omitempty"`
}

func (m *UseCouponCodeResp) Reset()                    { *m = UseCouponCodeResp{} }
func (m *UseCouponCodeResp) String() string            { return proto.CompactTextString(m) }
func (*UseCouponCodeResp) ProtoMessage()               {}
func (*UseCouponCodeResp) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

func (m *UseCouponCodeResp) GetCouponToken() string {
	if m != nil {
		return m.CouponToken
	}
	return ""
}

func (m *UseCouponCodeResp) GetCouponAmount() float64 {
	if m != nil {
		return m.CouponAmount
	}
	return 0
}

func (m *UseCouponCodeResp) GetFullAmount() float64 {
	if m != nil {
		return m.FullAmount
	}
	return 0
}

func (m *UseCouponCodeResp) GetPlatfromLimitExplain() string {
	if m != nil {
		return m.PlatfromLimitExplain
	}
	return ""
}

func (m *UseCouponCodeResp) GetProductLimitMonth() int32 {
	if m != nil {
		return m.ProductLimitMonth
	}
	return 0
}

func (m *UseCouponCodeResp) GetProductLimitRenewal() int32 {
	if m != nil {
		return m.ProductLimitRenewal
	}
	return 0
}

type UsableAllowanceCouponV2Req struct {
	Mid       int64             `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	PriceInfo []*ModelPriceInfo `protobuf:"bytes,2,rep,name=priceInfo" json:"priceInfo,omitempty"`
}

func (m *UsableAllowanceCouponV2Req) Reset()                    { *m = UsableAllowanceCouponV2Req{} }
func (m *UsableAllowanceCouponV2Req) String() string            { return proto.CompactTextString(m) }
func (*UsableAllowanceCouponV2Req) ProtoMessage()               {}
func (*UsableAllowanceCouponV2Req) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

func (m *UsableAllowanceCouponV2Req) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UsableAllowanceCouponV2Req) GetPriceInfo() []*ModelPriceInfo {
	if m != nil {
		return m.PriceInfo
	}
	return nil
}

type ModelPriceInfo struct {
	Price          float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	Plat           int64   `protobuf:"varint,2,opt,name=plat,proto3" json:"plat,omitempty"`
	ProdLimMonth   int32   `protobuf:"varint,3,opt,name=prodLimMonth,proto3" json:"prodLimMonth,omitempty"`
	ProdLimRenewal int32   `protobuf:"varint,4,opt,name=prodLimRenewal,proto3" json:"prodLimRenewal,omitempty"`
}

func (m *ModelPriceInfo) Reset()                    { *m = ModelPriceInfo{} }
func (m *ModelPriceInfo) String() string            { return proto.CompactTextString(m) }
func (*ModelPriceInfo) ProtoMessage()               {}
func (*ModelPriceInfo) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

func (m *ModelPriceInfo) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *ModelPriceInfo) GetPlat() int64 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *ModelPriceInfo) GetProdLimMonth() int32 {
	if m != nil {
		return m.ProdLimMonth
	}
	return 0
}

func (m *ModelPriceInfo) GetProdLimRenewal() int32 {
	if m != nil {
		return m.ProdLimRenewal
	}
	return 0
}

type UsableAllowanceCouponV2Reply struct {
	CouponTip  string                         `protobuf:"bytes,1,opt,name=coupon_tip,json=couponTip,proto3" json:"coupon_tip,omitempty"`
	CouponInfo *ModelCouponAllowancePanelInfo `protobuf:"bytes,2,opt,name=coupon_info,json=couponInfo" json:"coupon_info,omitempty"`
}

func (m *UsableAllowanceCouponV2Reply) Reset()                    { *m = UsableAllowanceCouponV2Reply{} }
func (m *UsableAllowanceCouponV2Reply) String() string            { return proto.CompactTextString(m) }
func (*UsableAllowanceCouponV2Reply) ProtoMessage()               {}
func (*UsableAllowanceCouponV2Reply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

func (m *UsableAllowanceCouponV2Reply) GetCouponTip() string {
	if m != nil {
		return m.CouponTip
	}
	return ""
}

func (m *UsableAllowanceCouponV2Reply) GetCouponInfo() *ModelCouponAllowancePanelInfo {
	if m != nil {
		return m.CouponInfo
	}
	return nil
}

type ModelCouponAllowancePanelInfo struct {
	CouponToken         string  `protobuf:"bytes,1,opt,name=coupon_token,json=couponToken,proto3" json:"coupon_token,omitempty"`
	CouponAmount        float64 `protobuf:"fixed64,2,opt,name=coupon_amount,json=couponAmount,proto3" json:"coupon_amount,omitempty"`
	State               int32   `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	FullLimitExplain    string  `protobuf:"bytes,4,opt,name=full_limit_explain,json=fullLimitExplain,proto3" json:"full_limit_explain,omitempty"`
	ScopeExplain        string  `protobuf:"bytes,5,opt,name=scope_explain,json=scopeExplain,proto3" json:"scope_explain,omitempty"`
	FullAmount          float64 `protobuf:"fixed64,6,opt,name=full_amount,json=fullAmount,proto3" json:"full_amount,omitempty"`
	CouponDiscountPrice float64 `protobuf:"fixed64,7,opt,name=coupon_discount_price,json=couponDiscountPrice,proto3" json:"coupon_discount_price,omitempty"`
	StartTime           int64   `protobuf:"varint,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	ExpireTime          int64   `protobuf:"varint,9,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	Selected            int32   `protobuf:"varint,10,opt,name=selected,proto3" json:"selected,omitempty"`
	DisablesExplains    string  `protobuf:"bytes,11,opt,name=disables_explains,json=disablesExplains,proto3" json:"disables_explains,omitempty"`
	OrderNo             string  `protobuf:"bytes,12,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	Name                string  `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	Usable              int32   `protobuf:"varint,14,opt,name=usable,proto3" json:"usable,omitempty"`
}

func (m *ModelCouponAllowancePanelInfo) Reset()                    { *m = ModelCouponAllowancePanelInfo{} }
func (m *ModelCouponAllowancePanelInfo) String() string            { return proto.CompactTextString(m) }
func (*ModelCouponAllowancePanelInfo) ProtoMessage()               {}
func (*ModelCouponAllowancePanelInfo) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{7} }

func (m *ModelCouponAllowancePanelInfo) GetCouponToken() string {
	if m != nil {
		return m.CouponToken
	}
	return ""
}

func (m *ModelCouponAllowancePanelInfo) GetCouponAmount() float64 {
	if m != nil {
		return m.CouponAmount
	}
	return 0
}

func (m *ModelCouponAllowancePanelInfo) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ModelCouponAllowancePanelInfo) GetFullLimitExplain() string {
	if m != nil {
		return m.FullLimitExplain
	}
	return ""
}

func (m *ModelCouponAllowancePanelInfo) GetScopeExplain() string {
	if m != nil {
		return m.ScopeExplain
	}
	return ""
}

func (m *ModelCouponAllowancePanelInfo) GetFullAmount() float64 {
	if m != nil {
		return m.FullAmount
	}
	return 0
}

func (m *ModelCouponAllowancePanelInfo) GetCouponDiscountPrice() float64 {
	if m != nil {
		return m.CouponDiscountPrice
	}
	return 0
}

func (m *ModelCouponAllowancePanelInfo) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ModelCouponAllowancePanelInfo) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *ModelCouponAllowancePanelInfo) GetSelected() int32 {
	if m != nil {
		return m.Selected
	}
	return 0
}

func (m *ModelCouponAllowancePanelInfo) GetDisablesExplains() string {
	if m != nil {
		return m.DisablesExplains
	}
	return ""
}

func (m *ModelCouponAllowancePanelInfo) GetOrderNo() string {
	if m != nil {
		return m.OrderNo
	}
	return ""
}

func (m *ModelCouponAllowancePanelInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModelCouponAllowancePanelInfo) GetUsable() int32 {
	if m != nil {
		return m.Usable
	}
	return 0
}

func init() {
	proto.RegisterType((*CaptchaTokenReq)(nil), "account.coupon.CaptchaTokenReq")
	proto.RegisterType((*CaptchaTokenReply)(nil), "account.coupon.CaptchaTokenReply")
	proto.RegisterType((*UseCouponCodeReq)(nil), "account.coupon.UseCouponCodeReq")
	proto.RegisterType((*UseCouponCodeResp)(nil), "account.coupon.UseCouponCodeResp")
	proto.RegisterType((*UsableAllowanceCouponV2Req)(nil), "account.coupon.UsableAllowanceCouponV2Req")
	proto.RegisterType((*ModelPriceInfo)(nil), "account.coupon.ModelPriceInfo")
	proto.RegisterType((*UsableAllowanceCouponV2Reply)(nil), "account.coupon.UsableAllowanceCouponV2Reply")
	proto.RegisterType((*ModelCouponAllowancePanelInfo)(nil), "account.coupon.ModelCouponAllowancePanelInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Coupon service

type CouponClient interface {
	// CaptchaToken captcha token.
	CaptchaToken(ctx context.Context, in *CaptchaTokenReq, opts ...grpc.CallOption) (*CaptchaTokenReply, error)
	// UseCouponCode use coupon code.
	UseCouponCode(ctx context.Context, in *UseCouponCodeReq, opts ...grpc.CallOption) (*UseCouponCodeResp, error)
	// UsableAllowanceCouponV2 use allowance coupon v2.
	UsableAllowanceCouponV2(ctx context.Context, in *UsableAllowanceCouponV2Req, opts ...grpc.CallOption) (*UsableAllowanceCouponV2Reply, error)
}

type couponClient struct {
	cc *grpc.ClientConn
}

func NewCouponClient(cc *grpc.ClientConn) CouponClient {
	return &couponClient{cc}
}

func (c *couponClient) CaptchaToken(ctx context.Context, in *CaptchaTokenReq, opts ...grpc.CallOption) (*CaptchaTokenReply, error) {
	out := new(CaptchaTokenReply)
	err := grpc.Invoke(ctx, "/account.coupon.Coupon/CaptchaToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponClient) UseCouponCode(ctx context.Context, in *UseCouponCodeReq, opts ...grpc.CallOption) (*UseCouponCodeResp, error) {
	out := new(UseCouponCodeResp)
	err := grpc.Invoke(ctx, "/account.coupon.Coupon/UseCouponCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponClient) UsableAllowanceCouponV2(ctx context.Context, in *UsableAllowanceCouponV2Req, opts ...grpc.CallOption) (*UsableAllowanceCouponV2Reply, error) {
	out := new(UsableAllowanceCouponV2Reply)
	err := grpc.Invoke(ctx, "/account.coupon.Coupon/UsableAllowanceCouponV2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Coupon service

type CouponServer interface {
	// CaptchaToken captcha token.
	CaptchaToken(context.Context, *CaptchaTokenReq) (*CaptchaTokenReply, error)
	// UseCouponCode use coupon code.
	UseCouponCode(context.Context, *UseCouponCodeReq) (*UseCouponCodeResp, error)
	// UsableAllowanceCouponV2 use allowance coupon v2.
	UsableAllowanceCouponV2(context.Context, *UsableAllowanceCouponV2Req) (*UsableAllowanceCouponV2Reply, error)
}

func RegisterCouponServer(s *grpc.Server, srv CouponServer) {
	s.RegisterService(&_Coupon_serviceDesc, srv)
}

func _Coupon_CaptchaToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServer).CaptchaToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.coupon.Coupon/CaptchaToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServer).CaptchaToken(ctx, req.(*CaptchaTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupon_UseCouponCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseCouponCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServer).UseCouponCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.coupon.Coupon/UseCouponCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServer).UseCouponCode(ctx, req.(*UseCouponCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupon_UsableAllowanceCouponV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsableAllowanceCouponV2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServer).UsableAllowanceCouponV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.coupon.Coupon/UsableAllowanceCouponV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServer).UsableAllowanceCouponV2(ctx, req.(*UsableAllowanceCouponV2Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _Coupon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "account.coupon.Coupon",
	HandlerType: (*CouponServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CaptchaToken",
			Handler:    _Coupon_CaptchaToken_Handler,
		},
		{
			MethodName: "UseCouponCode",
			Handler:    _Coupon_UseCouponCode_Handler,
		},
		{
			MethodName: "UsableAllowanceCouponV2",
			Handler:    _Coupon_UsableAllowanceCouponV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/main/coupon/api/api.proto",
}

func (m *CaptchaTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaptchaTokenReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	return i, nil
}

func (m *CaptchaTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaptchaTokenReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *UseCouponCodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UseCouponCodeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if len(m.Verify) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Verify)))
		i += copy(dAtA[i:], m.Verify)
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Mid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	return i, nil
}

func (m *UseCouponCodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UseCouponCodeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CouponToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CouponToken)))
		i += copy(dAtA[i:], m.CouponToken)
	}
	if m.CouponAmount != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CouponAmount))))
		i += 8
	}
	if m.FullAmount != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FullAmount))))
		i += 8
	}
	if len(m.PlatfromLimitExplain) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlatfromLimitExplain)))
		i += copy(dAtA[i:], m.PlatfromLimitExplain)
	}
	if m.ProductLimitMonth != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ProductLimitMonth))
	}
	if m.ProductLimitRenewal != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ProductLimitRenewal))
	}
	return i, nil
}

func (m *UsableAllowanceCouponV2Req) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsableAllowanceCouponV2Req) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.PriceInfo) > 0 {
		for _, msg := range m.PriceInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ModelPriceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelPriceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i += 8
	}
	if m.Plat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
	}
	if m.ProdLimMonth != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ProdLimMonth))
	}
	if m.ProdLimRenewal != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ProdLimRenewal))
	}
	return i, nil
}

func (m *UsableAllowanceCouponV2Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsableAllowanceCouponV2Reply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CouponTip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CouponTip)))
		i += copy(dAtA[i:], m.CouponTip)
	}
	if m.CouponInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CouponInfo.Size()))
		n1, err := m.CouponInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ModelCouponAllowancePanelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelCouponAllowancePanelInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CouponToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CouponToken)))
		i += copy(dAtA[i:], m.CouponToken)
	}
	if m.CouponAmount != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CouponAmount))))
		i += 8
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.State))
	}
	if len(m.FullLimitExplain) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.FullLimitExplain)))
		i += copy(dAtA[i:], m.FullLimitExplain)
	}
	if len(m.ScopeExplain) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ScopeExplain)))
		i += copy(dAtA[i:], m.ScopeExplain)
	}
	if m.FullAmount != 0 {
		dAtA[i] = 0x31
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FullAmount))))
		i += 8
	}
	if m.CouponDiscountPrice != 0 {
		dAtA[i] = 0x39
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CouponDiscountPrice))))
		i += 8
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
	}
	if m.ExpireTime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ExpireTime))
	}
	if m.Selected != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Selected))
	}
	if len(m.DisablesExplains) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.DisablesExplains)))
		i += copy(dAtA[i:], m.DisablesExplains)
	}
	if len(m.OrderNo) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrderNo)))
		i += copy(dAtA[i:], m.OrderNo)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Usable != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Usable))
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CaptchaTokenReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *CaptchaTokenReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *UseCouponCodeReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Verify)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	return n
}

func (m *UseCouponCodeResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.CouponToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CouponAmount != 0 {
		n += 9
	}
	if m.FullAmount != 0 {
		n += 9
	}
	l = len(m.PlatfromLimitExplain)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ProductLimitMonth != 0 {
		n += 1 + sovApi(uint64(m.ProductLimitMonth))
	}
	if m.ProductLimitRenewal != 0 {
		n += 1 + sovApi(uint64(m.ProductLimitRenewal))
	}
	return n
}

func (m *UsableAllowanceCouponV2Req) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if len(m.PriceInfo) > 0 {
		for _, e := range m.PriceInfo {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *ModelPriceInfo) Size() (n int) {
	var l int
	_ = l
	if m.Price != 0 {
		n += 9
	}
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	if m.ProdLimMonth != 0 {
		n += 1 + sovApi(uint64(m.ProdLimMonth))
	}
	if m.ProdLimRenewal != 0 {
		n += 1 + sovApi(uint64(m.ProdLimRenewal))
	}
	return n
}

func (m *UsableAllowanceCouponV2Reply) Size() (n int) {
	var l int
	_ = l
	l = len(m.CouponTip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CouponInfo != nil {
		l = m.CouponInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ModelCouponAllowancePanelInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.CouponToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CouponAmount != 0 {
		n += 9
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	l = len(m.FullLimitExplain)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ScopeExplain)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FullAmount != 0 {
		n += 9
	}
	if m.CouponDiscountPrice != 0 {
		n += 9
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovApi(uint64(m.ExpireTime))
	}
	if m.Selected != 0 {
		n += 1 + sovApi(uint64(m.Selected))
	}
	l = len(m.DisablesExplains)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OrderNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Usable != 0 {
		n += 1 + sovApi(uint64(m.Usable))
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CaptchaTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaptchaTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaptchaTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaptchaTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaptchaTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaptchaTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UseCouponCodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseCouponCodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseCouponCodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verify", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verify = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UseCouponCodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseCouponCodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseCouponCodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponAmount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CouponAmount = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullAmount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FullAmount = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatfromLimitExplain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatfromLimitExplain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductLimitMonth", wireType)
			}
			m.ProductLimitMonth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductLimitMonth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductLimitRenewal", wireType)
			}
			m.ProductLimitRenewal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductLimitRenewal |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsableAllowanceCouponV2Req) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsableAllowanceCouponV2Req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsableAllowanceCouponV2Req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceInfo = append(m.PriceInfo, &ModelPriceInfo{})
			if err := m.PriceInfo[len(m.PriceInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelPriceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelPriceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelPriceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProdLimMonth", wireType)
			}
			m.ProdLimMonth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProdLimMonth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProdLimRenewal", wireType)
			}
			m.ProdLimRenewal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProdLimRenewal |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsableAllowanceCouponV2Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsableAllowanceCouponV2Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsableAllowanceCouponV2Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponTip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponTip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CouponInfo == nil {
				m.CouponInfo = &ModelCouponAllowancePanelInfo{}
			}
			if err := m.CouponInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelCouponAllowancePanelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelCouponAllowancePanelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelCouponAllowancePanelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponAmount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CouponAmount = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullLimitExplain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullLimitExplain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeExplain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeExplain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullAmount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FullAmount = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponDiscountPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CouponDiscountPrice = float64(math.Float64frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selected", wireType)
			}
			m.Selected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selected |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablesExplains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisablesExplains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usable", wireType)
			}
			m.Usable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Usable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/service/main/coupon/api/api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 787 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcb, 0x6e, 0x2b, 0x45,
	0x10, 0xd5, 0xd8, 0xb1, 0x13, 0x97, 0x1f, 0xd8, 0x9d, 0x07, 0x83, 0x45, 0x1c, 0x67, 0x22, 0x90,
	0x05, 0x89, 0x2d, 0x0c, 0x3b, 0xd8, 0x84, 0xc0, 0x02, 0x29, 0x89, 0xa2, 0x51, 0xc2, 0x82, 0x8d,
	0xd5, 0x9e, 0x69, 0x27, 0x2d, 0x7a, 0xa6, 0x9b, 0x79, 0x38, 0xc9, 0x0f, 0xb0, 0x63, 0xcb, 0x2f,
	0xf0, 0x2b, 0x2c, 0xf9, 0x04, 0x94, 0x7f, 0x60, 0x8f, 0xba, 0xba, 0xc7, 0x37, 0xb6, 0x93, 0xe8,
	0x2e, 0xee, 0x22, 0x52, 0x57, 0x9d, 0x53, 0xae, 0xae, 0xd3, 0x67, 0x2a, 0xf0, 0x19, 0x55, 0x6a,
	0x94, 0xb2, 0x64, 0xce, 0x03, 0x36, 0x8a, 0x28, 0x8f, 0x47, 0x81, 0xcc, 0x95, 0x8c, 0x47, 0x54,
	0x71, 0xfd, 0x37, 0x54, 0x89, 0xcc, 0x24, 0x69, 0xd1, 0x20, 0x90, 0x79, 0x9c, 0x0d, 0x0d, 0xda,
	0x3d, 0xb9, 0xe5, 0xd9, 0x5d, 0x3e, 0x1d, 0x06, 0x32, 0x1a, 0xdd, 0xca, 0x5b, 0x39, 0x42, 0xda,
	0x34, 0x9f, 0x61, 0x84, 0x01, 0x9e, 0x4c, 0xb9, 0x77, 0x08, 0x1f, 0x9d, 0x51, 0x95, 0x05, 0x77,
	0xf4, 0x5a, 0xfe, 0xca, 0x62, 0x9f, 0xfd, 0x46, 0x5a, 0x50, 0xe2, 0xca, 0x75, 0xfa, 0xce, 0xa0,
	0xe6, 0x97, 0xb8, 0xf2, 0xbe, 0x85, 0xce, 0x32, 0x45, 0x89, 0x47, 0xb2, 0x03, 0x95, 0x4c, 0x47,
	0x96, 0x67, 0x02, 0xd2, 0x86, 0x72, 0x9e, 0x08, 0xb7, 0x84, 0x39, 0x7d, 0xf4, 0xe6, 0xd0, 0xbe,
	0x49, 0xd9, 0x19, 0xde, 0xed, 0x4c, 0x86, 0x4c, 0x37, 0x78, 0xb9, 0x96, 0xc0, 0x46, 0x20, 0x43,
	0x66, 0x8b, 0xf1, 0x4c, 0xf6, 0xa0, 0x3a, 0x67, 0x09, 0x9f, 0x3d, 0xba, 0x65, 0xcc, 0xda, 0xc8,
	0x5e, 0x71, 0xa3, 0xb8, 0xa2, 0xee, 0x1b, 0xf1, 0xd0, 0xad, 0xf4, 0x9d, 0x41, 0xd9, 0xd7, 0x47,
	0xef, 0xcf, 0x12, 0x74, 0x56, 0x1a, 0xa7, 0x8a, 0x1c, 0x42, 0xc3, 0xc8, 0x34, 0x79, 0x7e, 0x81,
	0xba, 0xc9, 0xe1, 0x74, 0xe4, 0x08, 0x9a, 0x96, 0x42, 0x23, 0xad, 0x2b, 0xde, 0xc7, 0xf1, 0x6d,
	0xdd, 0x29, 0xe6, 0xc8, 0x01, 0xd4, 0x67, 0xb9, 0x10, 0x05, 0xa5, 0x8c, 0x14, 0xd0, 0x29, 0x4b,
	0xf8, 0x06, 0xf6, 0x94, 0xa0, 0xd9, 0x2c, 0x91, 0xd1, 0x44, 0xf0, 0x88, 0x67, 0x13, 0xf6, 0xa0,
	0x04, 0xe5, 0xb1, 0xbd, 0xf4, 0x4e, 0x81, 0x9e, 0x6b, 0xf0, 0x47, 0x83, 0x91, 0x21, 0x6c, 0xab,
	0x44, 0x86, 0x79, 0x90, 0xd9, 0xa2, 0x48, 0xc6, 0xd9, 0x1d, 0x8e, 0x55, 0xf1, 0x3b, 0x16, 0xc2,
	0x8a, 0x0b, 0x0d, 0x90, 0x31, 0xec, 0x2e, 0xf3, 0x13, 0x16, 0xb3, 0x7b, 0x2a, 0xdc, 0x2a, 0x56,
	0x6c, 0x3f, 0xaf, 0xf0, 0x0d, 0xe4, 0x09, 0xe8, 0xde, 0xa4, 0x74, 0x2a, 0xd8, 0xa9, 0x10, 0xf2,
	0x9e, 0xc6, 0x81, 0xd5, 0xe8, 0xe7, 0xb1, 0x7e, 0x1a, 0x2b, 0xa4, 0xb3, 0x10, 0x92, 0x7c, 0x07,
	0x35, 0x95, 0xf0, 0x80, 0xfd, 0x14, 0xcf, 0xa4, 0x5b, 0xea, 0x97, 0x07, 0xf5, 0x71, 0x6f, 0xb8,
	0xec, 0xb9, 0xe1, 0x85, 0x0c, 0x99, 0xb8, 0x2a, 0x58, 0xfe, 0xbb, 0x02, 0xef, 0x77, 0x07, 0x5a,
	0xcb, 0xa8, 0x7e, 0x7d, 0xc4, 0xb1, 0x89, 0xe3, 0x9b, 0x40, 0xbf, 0xbe, 0x96, 0x04, 0xd5, 0x2e,
	0xfb, 0x78, 0x26, 0x1e, 0x34, 0xf4, 0x04, 0xe7, 0x3c, 0xc2, 0x71, 0x51, 0xe6, 0x8a, 0xbf, 0x94,
	0x23, 0x9f, 0x43, 0xcb, 0xc6, 0x76, 0x40, 0x14, 0xb8, 0xe2, 0xaf, 0x64, 0xbd, 0x3f, 0x1c, 0xf8,
	0xf4, 0xd5, 0xb9, 0xb5, 0xa1, 0xf7, 0x01, 0x0a, 0x6b, 0x2c, 0xdc, 0x5f, 0xb3, 0xc6, 0xe0, 0x8a,
	0x5c, 0x82, 0x75, 0xc9, 0x84, 0x1b, 0x21, 0x9c, 0x41, 0x7d, 0x7c, 0xf2, 0xa2, 0x10, 0xe6, 0x77,
	0x17, 0x6d, 0xae, 0x68, 0xcc, 0x04, 0xea, 0x62, 0x1b, 0xa0, 0x30, 0xff, 0x95, 0x61, 0xff, 0x4d,
	0xf6, 0x07, 0xf3, 0xea, 0x0e, 0x54, 0xd2, 0x8c, 0x66, 0xcc, 0xca, 0x67, 0x02, 0x72, 0x0c, 0x04,
	0x1d, 0xfc, 0x92, 0x39, 0xdb, 0x1a, 0x59, 0x32, 0xe6, 0x11, 0x34, 0xd3, 0x40, 0x2a, 0xb6, 0x20,
	0x56, 0x90, 0xd8, 0xc0, 0x64, 0x41, 0x5a, 0xf9, 0x28, 0xaa, 0x6b, 0x1f, 0xc5, 0x18, 0x76, 0xed,
	0x75, 0x43, 0x9e, 0xa2, 0x6e, 0x13, 0xe3, 0x84, 0x4d, 0xa4, 0x6e, 0x1b, 0xf0, 0x07, 0x8b, 0xa1,
	0x63, 0xf4, 0xb3, 0xa4, 0x19, 0x4d, 0xb2, 0x49, 0xc6, 0x23, 0xe6, 0x6e, 0xa1, 0x3b, 0x6a, 0x98,
	0xb9, 0xe6, 0x11, 0xd3, 0x3d, 0xd9, 0x83, 0xe2, 0x09, 0x33, 0x78, 0x0d, 0x71, 0x30, 0x29, 0x24,
	0x74, 0x61, 0x2b, 0x65, 0x82, 0x05, 0x19, 0x0b, 0x5d, 0x40, 0x01, 0x16, 0x31, 0xf9, 0x12, 0x3a,
	0x21, 0x47, 0x4f, 0xa4, 0xc5, 0x60, 0xa9, 0x5b, 0x37, 0x12, 0x14, 0x80, 0x1d, 0x2e, 0x25, 0x9f,
	0xc0, 0x96, 0x4c, 0x42, 0x96, 0x4c, 0x62, 0xe9, 0x36, 0x90, 0xb3, 0x89, 0xf1, 0xa5, 0xd4, 0xde,
	0x8d, 0x69, 0xc4, 0xdc, 0xa6, 0xd9, 0x5c, 0xfa, 0xac, 0x37, 0x57, 0x8e, 0xbf, 0xe0, 0xb6, 0xb0,
	0xab, 0x8d, 0xc6, 0x7f, 0x95, 0xa0, 0x6a, 0x9e, 0x9c, 0xf8, 0xd0, 0x78, 0xbe, 0x57, 0xc9, 0xc1,
	0xaa, 0x9b, 0x56, 0x16, 0x73, 0xf7, 0xf0, 0x6d, 0x82, 0x76, 0xf1, 0x35, 0x34, 0x97, 0xb6, 0x1e,
	0xe9, 0xaf, 0xd6, 0xac, 0x6e, 0xe3, 0xf5, 0x5f, 0x5d, 0x5f, 0x9b, 0x29, 0x7c, 0xfc, 0xca, 0xb7,
	0x43, 0xbe, 0x58, 0xaf, 0x7e, 0x6d, 0xb9, 0x74, 0x8f, 0xdf, 0x9b, 0xab, 0xc4, 0xe3, 0xf7, 0xed,
	0xbf, 0x9f, 0x7a, 0xce, 0x3f, 0x4f, 0x3d, 0xe7, 0xdf, 0xa7, 0x9e, 0xf3, 0x4b, 0x69, 0xfe, 0xd5,
	0xb4, 0x8a, 0xff, 0xb2, 0xbe, 0xfe, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x0e, 0xdd, 0x2c, 0x1a,
	0x07, 0x00, 0x00,
}
