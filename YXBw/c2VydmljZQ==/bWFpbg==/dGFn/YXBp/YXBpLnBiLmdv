// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/tag/api/api.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("app/service/main/tag/api/api.proto", fileDescriptor_764f462ed144ab7b) }

var fileDescriptor_764f462ed144ab7b = []byte{
	// 491 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xdf, 0x8a, 0x13, 0x31,
	0x18, 0xc5, 0xa9, 0x4a, 0xb5, 0xc1, 0xc5, 0x35, 0x57, 0x32, 0x17, 0x45, 0xd6, 0xdd, 0xee, 0x2e,
	0x6a, 0xc6, 0xd5, 0x27, 0xd8, 0x76, 0x41, 0x45, 0x2b, 0x32, 0x54, 0x84, 0xf5, 0x0f, 0xa4, 0x6d,
	0x9a, 0x0d, 0xce, 0x4c, 0xd2, 0x99, 0x4c, 0x61, 0x5e, 0xcf, 0x2b, 0x2f, 0x7d, 0x04, 0xe9, 0x93,
	0xc8, 0x97, 0x64, 0x8b, 0x8b, 0xcc, 0x24, 0xbd, 0xe8, 0x45, 0xa1, 0x49, 0x7f, 0xe7, 0x9c, 0xf4,
	0x9b, 0x43, 0x06, 0x1d, 0x50, 0xa5, 0xe2, 0x92, 0x15, 0x2b, 0x31, 0x63, 0x71, 0x46, 0x45, 0x1e,
	0x6b, 0xca, 0x63, 0xaa, 0x04, 0x7c, 0x88, 0x2a, 0xa4, 0x96, 0xf8, 0xd1, 0x4c, 0x66, 0x59, 0x95,
	0x0b, 0x5d, 0x13, 0x47, 0x12, 0x4d, 0x39, 0x59, 0x9d, 0x45, 0x83, 0x46, 0x75, 0xc1, 0x96, 0x15,
	0x2b, 0xb5, 0x75, 0x88, 0x0e, 0x5b, 0x38, 0x95, 0xd6, 0x8e, 0x7a, 0xce, 0x85, 0xbe, 0xaa, 0xa6,
	0x64, 0x26, 0xb3, 0x98, 0x4b, 0x2e, 0x63, 0xb3, 0x3d, 0xad, 0x16, 0x66, 0x65, 0x16, 0xe6, 0x9b,
	0xc5, 0x5f, 0xfe, 0xdc, 0x43, 0xdd, 0x09, 0xe5, 0xc9, 0xc7, 0x11, 0xfe, 0x86, 0x7a, 0xe7, 0xf3,
	0x79, 0xc2, 0x94, 0x2c, 0x34, 0x1e, 0x90, 0xa6, 0xf3, 0x92, 0x0d, 0x94, 0xb0, 0x65, 0x74, 0x12,
	0xc4, 0xa9, 0xb4, 0xc6, 0x15, 0x7a, 0x38, 0xba, 0xa2, 0x79, 0xce, 0xd2, 0x11, 0xd5, 0x8c, 0xcb,
	0x42, 0xb0, 0x12, 0x93, 0x66, 0xf9, 0x7f, 0x30, 0xc4, 0xbd, 0xd8, 0x8a, 0x87, 0xd8, 0x4b, 0x74,
	0xcf, 0xfd, 0x52, 0xe2, 0x23, 0xaf, 0xda, 0x84, 0x1c, 0x87, 0x60, 0xe0, 0xbd, 0x40, 0xf7, 0xdd,
	0x46, 0x52, 0xa5, 0xac, 0xc4, 0xa7, 0x5e, 0xa1, 0xe1, 0x20, 0xe3, 0x69, 0x28, 0x7a, 0x33, 0xe7,
	0x75, 0x21, 0x2b, 0x15, 0x90, 0x63, 0xb8, 0xb0, 0x1c, 0x87, 0x42, 0xce, 0x3b, 0x74, 0x7b, 0x42,
	0x39, 0x7e, 0xdc, 0xac, 0x81, 0xaa, 0xb0, 0x65, 0x74, 0xe0, 0x21, 0xc0, 0xec, 0x33, 0xea, 0x4d,
	0x28, 0x1f, 0xd6, 0x1f, 0x68, 0xc6, 0xda, 0xea, 0xb4, 0x81, 0x42, 0x8d, 0xbf, 0x9a, 0xc6, 0x8e,
	0xa9, 0xc2, 0xc7, 0xad, 0xf4, 0x98, 0xaa, 0x61, 0xfd, 0xf6, 0x02, 0x6c, 0x4f, 0xc3, 0x40, 0x70,
	0x9f, 0xa0, 0x6e, 0xc2, 0x4a, 0x18, 0xc3, 0x93, 0x66, 0x91, 0x25, 0xc0, 0xf9, 0xc8, 0x0f, 0xd9,
	0x16, 0xf6, 0xec, 0x12, 0x8e, 0x1d, 0x64, 0x7c, 0xe2, 0x83, 0xc6, 0x54, 0x5d, 0x0f, 0xfa, 0xae,
	0xdd, 0x29, 0xf1, 0xa1, 0x4f, 0x64, 0xba, 0x37, 0x08, 0xa0, 0xc0, 0xf8, 0x3b, 0xba, 0xf3, 0x5e,
	0xfc, 0x60, 0x6d, 0x75, 0xb3, 0xfc, 0xf9, 0x4c, 0x0b, 0x99, 0x7b, 0xea, 0x76, 0x13, 0x75, 0xfe,
	0x6f, 0xa8, 0xde, 0x9d, 0xbf, 0x44, 0x0f, 0xfe, 0xdd, 0x84, 0xd1, 0x3f, 0x0b, 0xd3, 0x9b, 0xd9,
	0x2e, 0x23, 0xb2, 0x05, 0xed, 0xba, 0xf3, 0x49, 0x0d, 0x45, 0x3e, 0x6f, 0x7b, 0xc4, 0x96, 0xf0,
	0x74, 0xe7, 0x1a, 0x02, 0x57, 0x73, 0x2f, 0x67, 0x22, 0x37, 0xc6, 0xad, 0xf7, 0xb2, 0x83, 0xbc,
	0xf7, 0xf2, 0x86, 0x03, 0xfb, 0x2f, 0x68, 0xef, 0x82, 0x2d, 0x68, 0x95, 0xea, 0x1d, 0x9c, 0x7d,
	0x8e, 0xf6, 0x9d, 0xf9, 0x0e, 0xff, 0xc2, 0x70, 0xff, 0xd7, 0xba, 0xdf, 0xf9, 0xbd, 0xee, 0x77,
	0xfe, 0xac, 0xfb, 0x9d, 0xcb, 0x5b, 0xab, 0xb3, 0x69, 0xd7, 0xbc, 0xdd, 0x5e, 0xfd, 0x0d, 0x00,
	0x00, 0xff, 0xff, 0x16, 0xbe, 0x63, 0x20, 0x9a, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TagRPCClient is the client API for TagRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TagRPCClient interface {
	// add a oid-type-tid tag report.
	AddReport(ctx context.Context, in *AddReportReq, opts ...grpc.CallOption) (*AddReportReply, error)
	// channel
	ChannelCategories(ctx context.Context, in *ChannelCategoriesReq, opts ...grpc.CallOption) (*ChannelCategoriesReply, error)
	Channels(ctx context.Context, in *ChannelsReq, opts ...grpc.CallOption) (*ChannelsReply, error)
	ChannelRules(ctx context.Context, in *ChannelRulesReq, opts ...grpc.CallOption) (*ChannelRulesReply, error)
	ChannelGroup(ctx context.Context, in *ChannelGroupReq, opts ...grpc.CallOption) (*ChannelGroupReply, error)
	// tag
	Tag(ctx context.Context, in *TagReq, opts ...grpc.CallOption) (*TagReply, error)
	TagByName(ctx context.Context, in *TagByNameReq, opts ...grpc.CallOption) (*TagReply, error)
	TagMap(ctx context.Context, in *TagMapByIDReq, opts ...grpc.CallOption) (*TagMapByIDReply, error)
	ResTag(ctx context.Context, in *ResTagReq, opts ...grpc.CallOption) (*ResTagReply, error)
	ResTagMap(ctx context.Context, in *ResTagReq, opts ...grpc.CallOption) (*ResTagMapReply, error)
	ResTags(ctx context.Context, in *ResTagsReq, opts ...grpc.CallOption) (*ResTagsReply, error)
	Like(ctx context.Context, in *ResTagActionReq, opts ...grpc.CallOption) (*ResTagActionReply, error)
	Hate(ctx context.Context, in *ResTagActionReq, opts ...grpc.CallOption) (*ResTagActionReply, error)
	ResTagActionMap(ctx context.Context, in *ResTagActionMapReq, opts ...grpc.CallOption) (*ResTagActionMapReply, error)
	UpBind(ctx context.Context, in *UpBindReq, opts ...grpc.CallOption) (*UpBindReply, error)
	AdminBind(ctx context.Context, in *AdminBindReq, opts ...grpc.CallOption) (*AdminBindReply, error)
	DefaultUpBind(ctx context.Context, in *UpBindReq, opts ...grpc.CallOption) (*UpBindReply, error)
	DefaultAdminBind(ctx context.Context, in *AdminBindReq, opts ...grpc.CallOption) (*AdminBindReply, error)
}

type tagRPCClient struct {
	cc *grpc.ClientConn
}

func NewTagRPCClient(cc *grpc.ClientConn) TagRPCClient {
	return &tagRPCClient{cc}
}

func (c *tagRPCClient) AddReport(ctx context.Context, in *AddReportReq, opts ...grpc.CallOption) (*AddReportReply, error) {
	out := new(AddReportReply)
	err := c.cc.Invoke(ctx, "/community.service.tag.v1.TagRPC/AddReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRPCClient) ChannelCategories(ctx context.Context, in *ChannelCategoriesReq, opts ...grpc.CallOption) (*ChannelCategoriesReply, error) {
	out := new(ChannelCategoriesReply)
	err := c.cc.Invoke(ctx, "/community.service.tag.v1.TagRPC/ChannelCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRPCClient) Channels(ctx context.Context, in *ChannelsReq, opts ...grpc.CallOption) (*ChannelsReply, error) {
	out := new(ChannelsReply)
	err := c.cc.Invoke(ctx, "/community.service.tag.v1.TagRPC/Channels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRPCClient) ChannelRules(ctx context.Context, in *ChannelRulesReq, opts ...grpc.CallOption) (*ChannelRulesReply, error) {
	out := new(ChannelRulesReply)
	err := c.cc.Invoke(ctx, "/community.service.tag.v1.TagRPC/ChannelRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRPCClient) ChannelGroup(ctx context.Context, in *ChannelGroupReq, opts ...grpc.CallOption) (*ChannelGroupReply, error) {
	out := new(ChannelGroupReply)
	err := c.cc.Invoke(ctx, "/community.service.tag.v1.TagRPC/ChannelGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRPCClient) Tag(ctx context.Context, in *TagReq, opts ...grpc.CallOption) (*TagReply, error) {
	out := new(TagReply)
	err := c.cc.Invoke(ctx, "/community.service.tag.v1.TagRPC/Tag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRPCClient) TagByName(ctx context.Context, in *TagByNameReq, opts ...grpc.CallOption) (*TagReply, error) {
	out := new(TagReply)
	err := c.cc.Invoke(ctx, "/community.service.tag.v1.TagRPC/TagByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRPCClient) TagMap(ctx context.Context, in *TagMapByIDReq, opts ...grpc.CallOption) (*TagMapByIDReply, error) {
	out := new(TagMapByIDReply)
	err := c.cc.Invoke(ctx, "/community.service.tag.v1.TagRPC/TagMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRPCClient) ResTag(ctx context.Context, in *ResTagReq, opts ...grpc.CallOption) (*ResTagReply, error) {
	out := new(ResTagReply)
	err := c.cc.Invoke(ctx, "/community.service.tag.v1.TagRPC/ResTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRPCClient) ResTagMap(ctx context.Context, in *ResTagReq, opts ...grpc.CallOption) (*ResTagMapReply, error) {
	out := new(ResTagMapReply)
	err := c.cc.Invoke(ctx, "/community.service.tag.v1.TagRPC/ResTagMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRPCClient) ResTags(ctx context.Context, in *ResTagsReq, opts ...grpc.CallOption) (*ResTagsReply, error) {
	out := new(ResTagsReply)
	err := c.cc.Invoke(ctx, "/community.service.tag.v1.TagRPC/ResTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRPCClient) Like(ctx context.Context, in *ResTagActionReq, opts ...grpc.CallOption) (*ResTagActionReply, error) {
	out := new(ResTagActionReply)
	err := c.cc.Invoke(ctx, "/community.service.tag.v1.TagRPC/Like", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRPCClient) Hate(ctx context.Context, in *ResTagActionReq, opts ...grpc.CallOption) (*ResTagActionReply, error) {
	out := new(ResTagActionReply)
	err := c.cc.Invoke(ctx, "/community.service.tag.v1.TagRPC/Hate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRPCClient) ResTagActionMap(ctx context.Context, in *ResTagActionMapReq, opts ...grpc.CallOption) (*ResTagActionMapReply, error) {
	out := new(ResTagActionMapReply)
	err := c.cc.Invoke(ctx, "/community.service.tag.v1.TagRPC/ResTagActionMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRPCClient) UpBind(ctx context.Context, in *UpBindReq, opts ...grpc.CallOption) (*UpBindReply, error) {
	out := new(UpBindReply)
	err := c.cc.Invoke(ctx, "/community.service.tag.v1.TagRPC/UpBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRPCClient) AdminBind(ctx context.Context, in *AdminBindReq, opts ...grpc.CallOption) (*AdminBindReply, error) {
	out := new(AdminBindReply)
	err := c.cc.Invoke(ctx, "/community.service.tag.v1.TagRPC/AdminBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRPCClient) DefaultUpBind(ctx context.Context, in *UpBindReq, opts ...grpc.CallOption) (*UpBindReply, error) {
	out := new(UpBindReply)
	err := c.cc.Invoke(ctx, "/community.service.tag.v1.TagRPC/DefaultUpBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagRPCClient) DefaultAdminBind(ctx context.Context, in *AdminBindReq, opts ...grpc.CallOption) (*AdminBindReply, error) {
	out := new(AdminBindReply)
	err := c.cc.Invoke(ctx, "/community.service.tag.v1.TagRPC/DefaultAdminBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagRPCServer is the server API for TagRPC service.
type TagRPCServer interface {
	// add a oid-type-tid tag report.
	AddReport(context.Context, *AddReportReq) (*AddReportReply, error)
	// channel
	ChannelCategories(context.Context, *ChannelCategoriesReq) (*ChannelCategoriesReply, error)
	Channels(context.Context, *ChannelsReq) (*ChannelsReply, error)
	ChannelRules(context.Context, *ChannelRulesReq) (*ChannelRulesReply, error)
	ChannelGroup(context.Context, *ChannelGroupReq) (*ChannelGroupReply, error)
	// tag
	Tag(context.Context, *TagReq) (*TagReply, error)
	TagByName(context.Context, *TagByNameReq) (*TagReply, error)
	TagMap(context.Context, *TagMapByIDReq) (*TagMapByIDReply, error)
	ResTag(context.Context, *ResTagReq) (*ResTagReply, error)
	ResTagMap(context.Context, *ResTagReq) (*ResTagMapReply, error)
	ResTags(context.Context, *ResTagsReq) (*ResTagsReply, error)
	Like(context.Context, *ResTagActionReq) (*ResTagActionReply, error)
	Hate(context.Context, *ResTagActionReq) (*ResTagActionReply, error)
	ResTagActionMap(context.Context, *ResTagActionMapReq) (*ResTagActionMapReply, error)
	UpBind(context.Context, *UpBindReq) (*UpBindReply, error)
	AdminBind(context.Context, *AdminBindReq) (*AdminBindReply, error)
	DefaultUpBind(context.Context, *UpBindReq) (*UpBindReply, error)
	DefaultAdminBind(context.Context, *AdminBindReq) (*AdminBindReply, error)
}

func RegisterTagRPCServer(s *grpc.Server, srv TagRPCServer) {
	s.RegisterService(&_TagRPC_serviceDesc, srv)
}

func _TagRPC_AddReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRPCServer).AddReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.tag.v1.TagRPC/AddReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRPCServer).AddReport(ctx, req.(*AddReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRPC_ChannelCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelCategoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRPCServer).ChannelCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.tag.v1.TagRPC/ChannelCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRPCServer).ChannelCategories(ctx, req.(*ChannelCategoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRPC_Channels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRPCServer).Channels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.tag.v1.TagRPC/Channels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRPCServer).Channels(ctx, req.(*ChannelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRPC_ChannelRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRPCServer).ChannelRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.tag.v1.TagRPC/ChannelRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRPCServer).ChannelRules(ctx, req.(*ChannelRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRPC_ChannelGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRPCServer).ChannelGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.tag.v1.TagRPC/ChannelGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRPCServer).ChannelGroup(ctx, req.(*ChannelGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRPC_Tag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRPCServer).Tag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.tag.v1.TagRPC/Tag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRPCServer).Tag(ctx, req.(*TagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRPC_TagByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRPCServer).TagByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.tag.v1.TagRPC/TagByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRPCServer).TagByName(ctx, req.(*TagByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRPC_TagMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagMapByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRPCServer).TagMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.tag.v1.TagRPC/TagMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRPCServer).TagMap(ctx, req.(*TagMapByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRPC_ResTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRPCServer).ResTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.tag.v1.TagRPC/ResTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRPCServer).ResTag(ctx, req.(*ResTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRPC_ResTagMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRPCServer).ResTagMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.tag.v1.TagRPC/ResTagMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRPCServer).ResTagMap(ctx, req.(*ResTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRPC_ResTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResTagsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRPCServer).ResTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.tag.v1.TagRPC/ResTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRPCServer).ResTags(ctx, req.(*ResTagsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRPC_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResTagActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRPCServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.tag.v1.TagRPC/Like",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRPCServer).Like(ctx, req.(*ResTagActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRPC_Hate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResTagActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRPCServer).Hate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.tag.v1.TagRPC/Hate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRPCServer).Hate(ctx, req.(*ResTagActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRPC_ResTagActionMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResTagActionMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRPCServer).ResTagActionMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.tag.v1.TagRPC/ResTagActionMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRPCServer).ResTagActionMap(ctx, req.(*ResTagActionMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRPC_UpBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRPCServer).UpBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.tag.v1.TagRPC/UpBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRPCServer).UpBind(ctx, req.(*UpBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRPC_AdminBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRPCServer).AdminBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.tag.v1.TagRPC/AdminBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRPCServer).AdminBind(ctx, req.(*AdminBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRPC_DefaultUpBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRPCServer).DefaultUpBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.tag.v1.TagRPC/DefaultUpBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRPCServer).DefaultUpBind(ctx, req.(*UpBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagRPC_DefaultAdminBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagRPCServer).DefaultAdminBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/community.service.tag.v1.TagRPC/DefaultAdminBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagRPCServer).DefaultAdminBind(ctx, req.(*AdminBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TagRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "community.service.tag.v1.TagRPC",
	HandlerType: (*TagRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddReport",
			Handler:    _TagRPC_AddReport_Handler,
		},
		{
			MethodName: "ChannelCategories",
			Handler:    _TagRPC_ChannelCategories_Handler,
		},
		{
			MethodName: "Channels",
			Handler:    _TagRPC_Channels_Handler,
		},
		{
			MethodName: "ChannelRules",
			Handler:    _TagRPC_ChannelRules_Handler,
		},
		{
			MethodName: "ChannelGroup",
			Handler:    _TagRPC_ChannelGroup_Handler,
		},
		{
			MethodName: "Tag",
			Handler:    _TagRPC_Tag_Handler,
		},
		{
			MethodName: "TagByName",
			Handler:    _TagRPC_TagByName_Handler,
		},
		{
			MethodName: "TagMap",
			Handler:    _TagRPC_TagMap_Handler,
		},
		{
			MethodName: "ResTag",
			Handler:    _TagRPC_ResTag_Handler,
		},
		{
			MethodName: "ResTagMap",
			Handler:    _TagRPC_ResTagMap_Handler,
		},
		{
			MethodName: "ResTags",
			Handler:    _TagRPC_ResTags_Handler,
		},
		{
			MethodName: "Like",
			Handler:    _TagRPC_Like_Handler,
		},
		{
			MethodName: "Hate",
			Handler:    _TagRPC_Hate_Handler,
		},
		{
			MethodName: "ResTagActionMap",
			Handler:    _TagRPC_ResTagActionMap_Handler,
		},
		{
			MethodName: "UpBind",
			Handler:    _TagRPC_UpBind_Handler,
		},
		{
			MethodName: "AdminBind",
			Handler:    _TagRPC_AdminBind_Handler,
		},
		{
			MethodName: "DefaultUpBind",
			Handler:    _TagRPC_DefaultUpBind_Handler,
		},
		{
			MethodName: "DefaultAdminBind",
			Handler:    _TagRPC_DefaultAdminBind_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/main/tag/api/api.proto",
}
