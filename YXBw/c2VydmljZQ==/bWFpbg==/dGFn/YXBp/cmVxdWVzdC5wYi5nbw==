// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/tag/api/request.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AddReportReq struct {
	Oid                  int64    `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Tid                  int64    `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
	Type                 int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Mid                  int64    `protobuf:"varint,4,opt,name=mid,proto3" json:"mid,omitempty"`
	PartId               int32    `protobuf:"varint,5,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty"`
	ReasonId             int32    `protobuf:"varint,6,opt,name=reason_id,json=reasonId,proto3" json:"reason_id,omitempty"`
	Score                int32    `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddReportReq) Reset()         { *m = AddReportReq{} }
func (m *AddReportReq) String() string { return proto.CompactTextString(m) }
func (*AddReportReq) ProtoMessage()    {}
func (*AddReportReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_82626eda9470264d, []int{0}
}
func (m *AddReportReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddReportReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddReportReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddReportReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddReportReq.Merge(m, src)
}
func (m *AddReportReq) XXX_Size() int {
	return m.Size()
}
func (m *AddReportReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddReportReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddReportReq proto.InternalMessageInfo

func (m *AddReportReq) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *AddReportReq) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *AddReportReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *AddReportReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *AddReportReq) GetPartId() int32 {
	if m != nil {
		return m.PartId
	}
	return 0
}

func (m *AddReportReq) GetReasonId() int32 {
	if m != nil {
		return m.ReasonId
	}
	return 0
}

func (m *AddReportReq) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type TagReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Tid                  int64    `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagReq) Reset()         { *m = TagReq{} }
func (m *TagReq) String() string { return proto.CompactTextString(m) }
func (*TagReq) ProtoMessage()    {}
func (*TagReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_82626eda9470264d, []int{1}
}
func (m *TagReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagReq.Merge(m, src)
}
func (m *TagReq) XXX_Size() int {
	return m.Size()
}
func (m *TagReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TagReq.DiscardUnknown(m)
}

var xxx_messageInfo_TagReq proto.InternalMessageInfo

func (m *TagReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *TagReq) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

type TagByNameReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Tname                string   `protobuf:"bytes,2,opt,name=tname,proto3" json:"tname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagByNameReq) Reset()         { *m = TagByNameReq{} }
func (m *TagByNameReq) String() string { return proto.CompactTextString(m) }
func (*TagByNameReq) ProtoMessage()    {}
func (*TagByNameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_82626eda9470264d, []int{2}
}
func (m *TagByNameReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagByNameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagByNameReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagByNameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagByNameReq.Merge(m, src)
}
func (m *TagByNameReq) XXX_Size() int {
	return m.Size()
}
func (m *TagByNameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TagByNameReq.DiscardUnknown(m)
}

var xxx_messageInfo_TagByNameReq proto.InternalMessageInfo

func (m *TagByNameReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *TagByNameReq) GetTname() string {
	if m != nil {
		return m.Tname
	}
	return ""
}

type TagMapByIDReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Tids                 []int64  `protobuf:"varint,2,rep,packed,name=tids,proto3" json:"tids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagMapByIDReq) Reset()         { *m = TagMapByIDReq{} }
func (m *TagMapByIDReq) String() string { return proto.CompactTextString(m) }
func (*TagMapByIDReq) ProtoMessage()    {}
func (*TagMapByIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_82626eda9470264d, []int{3}
}
func (m *TagMapByIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagMapByIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagMapByIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagMapByIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagMapByIDReq.Merge(m, src)
}
func (m *TagMapByIDReq) XXX_Size() int {
	return m.Size()
}
func (m *TagMapByIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TagMapByIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_TagMapByIDReq proto.InternalMessageInfo

func (m *TagMapByIDReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *TagMapByIDReq) GetTids() []int64 {
	if m != nil {
		return m.Tids
	}
	return nil
}

type ChannelCategoriesReq struct {
	StartId              int64    `protobuf:"varint,1,opt,name=start_id,json=startId,proto3" json:"start_id,omitempty"`
	Num                  int32    `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	State                int32    `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelCategoriesReq) Reset()         { *m = ChannelCategoriesReq{} }
func (m *ChannelCategoriesReq) String() string { return proto.CompactTextString(m) }
func (*ChannelCategoriesReq) ProtoMessage()    {}
func (*ChannelCategoriesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_82626eda9470264d, []int{4}
}
func (m *ChannelCategoriesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelCategoriesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelCategoriesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelCategoriesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelCategoriesReq.Merge(m, src)
}
func (m *ChannelCategoriesReq) XXX_Size() int {
	return m.Size()
}
func (m *ChannelCategoriesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelCategoriesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelCategoriesReq proto.InternalMessageInfo

func (m *ChannelCategoriesReq) GetStartId() int64 {
	if m != nil {
		return m.StartId
	}
	return 0
}

func (m *ChannelCategoriesReq) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *ChannelCategoriesReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type ChannelsReq struct {
	StartId              int64    `protobuf:"varint,1,opt,name=start_id,json=startId,proto3" json:"start_id,omitempty"`
	Num                  int32    `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelsReq) Reset()         { *m = ChannelsReq{} }
func (m *ChannelsReq) String() string { return proto.CompactTextString(m) }
func (*ChannelsReq) ProtoMessage()    {}
func (*ChannelsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_82626eda9470264d, []int{5}
}
func (m *ChannelsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelsReq.Merge(m, src)
}
func (m *ChannelsReq) XXX_Size() int {
	return m.Size()
}
func (m *ChannelsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelsReq proto.InternalMessageInfo

func (m *ChannelsReq) GetStartId() int64 {
	if m != nil {
		return m.StartId
	}
	return 0
}

func (m *ChannelsReq) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type ChannelRulesReq struct {
	StartId              int64    `protobuf:"varint,1,opt,name=start_id,json=startId,proto3" json:"start_id,omitempty"`
	Num                  int32    `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	State                int32    `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelRulesReq) Reset()         { *m = ChannelRulesReq{} }
func (m *ChannelRulesReq) String() string { return proto.CompactTextString(m) }
func (*ChannelRulesReq) ProtoMessage()    {}
func (*ChannelRulesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_82626eda9470264d, []int{6}
}
func (m *ChannelRulesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelRulesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelRulesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelRulesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelRulesReq.Merge(m, src)
}
func (m *ChannelRulesReq) XXX_Size() int {
	return m.Size()
}
func (m *ChannelRulesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelRulesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelRulesReq proto.InternalMessageInfo

func (m *ChannelRulesReq) GetStartId() int64 {
	if m != nil {
		return m.StartId
	}
	return 0
}

func (m *ChannelRulesReq) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *ChannelRulesReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type ChannelGroupReq struct {
	Tid                  int64    `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelGroupReq) Reset()         { *m = ChannelGroupReq{} }
func (m *ChannelGroupReq) String() string { return proto.CompactTextString(m) }
func (*ChannelGroupReq) ProtoMessage()    {}
func (*ChannelGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_82626eda9470264d, []int{7}
}
func (m *ChannelGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelGroupReq.Merge(m, src)
}
func (m *ChannelGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *ChannelGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelGroupReq proto.InternalMessageInfo

func (m *ChannelGroupReq) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

type ResTagReq struct {
	Oid                  int64    `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResTagReq) Reset()         { *m = ResTagReq{} }
func (m *ResTagReq) String() string { return proto.CompactTextString(m) }
func (*ResTagReq) ProtoMessage()    {}
func (*ResTagReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_82626eda9470264d, []int{8}
}
func (m *ResTagReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResTagReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResTagReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResTagReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResTagReq.Merge(m, src)
}
func (m *ResTagReq) XXX_Size() int {
	return m.Size()
}
func (m *ResTagReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ResTagReq.DiscardUnknown(m)
}

var xxx_messageInfo_ResTagReq proto.InternalMessageInfo

func (m *ResTagReq) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *ResTagReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type ResTagsReq struct {
	Oids                 []int64  `protobuf:"varint,1,rep,packed,name=oids,proto3" json:"oids,omitempty"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResTagsReq) Reset()         { *m = ResTagsReq{} }
func (m *ResTagsReq) String() string { return proto.CompactTextString(m) }
func (*ResTagsReq) ProtoMessage()    {}
func (*ResTagsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_82626eda9470264d, []int{9}
}
func (m *ResTagsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResTagsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResTagsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResTagsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResTagsReq.Merge(m, src)
}
func (m *ResTagsReq) XXX_Size() int {
	return m.Size()
}
func (m *ResTagsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ResTagsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ResTagsReq proto.InternalMessageInfo

func (m *ResTagsReq) GetOids() []int64 {
	if m != nil {
		return m.Oids
	}
	return nil
}

func (m *ResTagsReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type ResTagActionReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"required,min=1"`
	Tid                  int64    `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty" form:"tid" validate:"required,min=1"`
	Oid                  int64    `protobuf:"varint,3,opt,name=oid,proto3" json:"oid,omitempty" form:"oid" validate:"required,min=1"`
	Type                 int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty" form:"type" validate:"gte=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResTagActionReq) Reset()         { *m = ResTagActionReq{} }
func (m *ResTagActionReq) String() string { return proto.CompactTextString(m) }
func (*ResTagActionReq) ProtoMessage()    {}
func (*ResTagActionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_82626eda9470264d, []int{10}
}
func (m *ResTagActionReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResTagActionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResTagActionReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResTagActionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResTagActionReq.Merge(m, src)
}
func (m *ResTagActionReq) XXX_Size() int {
	return m.Size()
}
func (m *ResTagActionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ResTagActionReq.DiscardUnknown(m)
}

var xxx_messageInfo_ResTagActionReq proto.InternalMessageInfo

func (m *ResTagActionReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ResTagActionReq) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *ResTagActionReq) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *ResTagActionReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type ResTagActionMapReq struct {
	Oid                  int64    `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty" form:"oid" validate:"required,min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"required,min=1"`
	Type                 int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty" form:"type" validate:"gte=0"`
	Tids                 []int64  `protobuf:"varint,4,rep,packed,name=tids,proto3" json:"tids,omitempty" form:"tids,split" validate:"required,min=1,dive,gt=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResTagActionMapReq) Reset()         { *m = ResTagActionMapReq{} }
func (m *ResTagActionMapReq) String() string { return proto.CompactTextString(m) }
func (*ResTagActionMapReq) ProtoMessage()    {}
func (*ResTagActionMapReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_82626eda9470264d, []int{11}
}
func (m *ResTagActionMapReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResTagActionMapReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResTagActionMapReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResTagActionMapReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResTagActionMapReq.Merge(m, src)
}
func (m *ResTagActionMapReq) XXX_Size() int {
	return m.Size()
}
func (m *ResTagActionMapReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ResTagActionMapReq.DiscardUnknown(m)
}

var xxx_messageInfo_ResTagActionMapReq proto.InternalMessageInfo

func (m *ResTagActionMapReq) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *ResTagActionMapReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ResTagActionMapReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ResTagActionMapReq) GetTids() []int64 {
	if m != nil {
		return m.Tids
	}
	return nil
}

type UpBindReq struct {
	Oid                  int64    `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty" form:"oid" validate:"required,min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"required,min=1"`
	Type                 int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty" form:"type" validate:"gte=0"`
	Tids                 []int64  `protobuf:"varint,4,rep,packed,name=tids,proto3" json:"tids,omitempty" form:"tids,split" validate:"required,min=1,dive,gt=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpBindReq) Reset()         { *m = UpBindReq{} }
func (m *UpBindReq) String() string { return proto.CompactTextString(m) }
func (*UpBindReq) ProtoMessage()    {}
func (*UpBindReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_82626eda9470264d, []int{12}
}
func (m *UpBindReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpBindReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpBindReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpBindReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpBindReq.Merge(m, src)
}
func (m *UpBindReq) XXX_Size() int {
	return m.Size()
}
func (m *UpBindReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpBindReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpBindReq proto.InternalMessageInfo

func (m *UpBindReq) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *UpBindReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpBindReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UpBindReq) GetTids() []int64 {
	if m != nil {
		return m.Tids
	}
	return nil
}

type AdminBindReq struct {
	Oid                  int64    `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty" form:"oid" validate:"required,min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"required,min=1"`
	Type                 int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty" form:"type" validate:"gte=0"`
	Tids                 []int64  `protobuf:"varint,4,rep,packed,name=tids,proto3" json:"tids,omitempty" form:"tids,split" validate:"required,min=1,dive,gt=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdminBindReq) Reset()         { *m = AdminBindReq{} }
func (m *AdminBindReq) String() string { return proto.CompactTextString(m) }
func (*AdminBindReq) ProtoMessage()    {}
func (*AdminBindReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_82626eda9470264d, []int{13}
}
func (m *AdminBindReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminBindReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminBindReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminBindReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminBindReq.Merge(m, src)
}
func (m *AdminBindReq) XXX_Size() int {
	return m.Size()
}
func (m *AdminBindReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminBindReq.DiscardUnknown(m)
}

var xxx_messageInfo_AdminBindReq proto.InternalMessageInfo

func (m *AdminBindReq) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *AdminBindReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *AdminBindReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *AdminBindReq) GetTids() []int64 {
	if m != nil {
		return m.Tids
	}
	return nil
}

func init() {
	proto.RegisterType((*AddReportReq)(nil), "community.service.tag.v1.AddReportReq")
	proto.RegisterType((*TagReq)(nil), "community.service.tag.v1.TagReq")
	proto.RegisterType((*TagByNameReq)(nil), "community.service.tag.v1.TagByNameReq")
	proto.RegisterType((*TagMapByIDReq)(nil), "community.service.tag.v1.TagMapByIDReq")
	proto.RegisterType((*ChannelCategoriesReq)(nil), "community.service.tag.v1.ChannelCategoriesReq")
	proto.RegisterType((*ChannelsReq)(nil), "community.service.tag.v1.ChannelsReq")
	proto.RegisterType((*ChannelRulesReq)(nil), "community.service.tag.v1.ChannelRulesReq")
	proto.RegisterType((*ChannelGroupReq)(nil), "community.service.tag.v1.ChannelGroupReq")
	proto.RegisterType((*ResTagReq)(nil), "community.service.tag.v1.ResTagReq")
	proto.RegisterType((*ResTagsReq)(nil), "community.service.tag.v1.ResTagsReq")
	proto.RegisterType((*ResTagActionReq)(nil), "community.service.tag.v1.ResTagActionReq")
	proto.RegisterType((*ResTagActionMapReq)(nil), "community.service.tag.v1.ResTagActionMapReq")
	proto.RegisterType((*UpBindReq)(nil), "community.service.tag.v1.UpBindReq")
	proto.RegisterType((*AdminBindReq)(nil), "community.service.tag.v1.AdminBindReq")
}

func init() {
	proto.RegisterFile("app/service/main/tag/api/request.proto", fileDescriptor_82626eda9470264d)
}

var fileDescriptor_82626eda9470264d = []byte{
	// 632 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0xcf, 0x6a, 0xdb, 0x4e,
	0x10, 0xc7, 0x91, 0x6c, 0x39, 0xf1, 0xfe, 0xf2, 0x23, 0x41, 0x04, 0xaa, 0xfe, 0x21, 0x31, 0xdb,
	0x52, 0x7c, 0x70, 0xad, 0x9a, 0x26, 0x85, 0x1a, 0x72, 0x88, 0x52, 0x28, 0x3e, 0xa4, 0x07, 0xe1,
	0x1e, 0xda, 0x4b, 0xd9, 0x78, 0x37, 0xca, 0x82, 0x57, 0xbb, 0x91, 0x46, 0x06, 0xbf, 0x41, 0xa1,
	0xa7, 0xbe, 0x43, 0x1f, 0xa6, 0xc7, 0x3e, 0x41, 0x28, 0x79, 0x84, 0x5c, 0x7b, 0x29, 0xfb, 0x27,
	0xb1, 0x08, 0x2e, 0x49, 0x4b, 0x6f, 0xed, 0x6d, 0x66, 0x77, 0x3f, 0xb3, 0x33, 0xdf, 0xd9, 0x91,
	0xd0, 0x63, 0xa2, 0x54, 0x5c, 0xb2, 0x62, 0xc6, 0x27, 0x2c, 0x16, 0x84, 0xe7, 0x31, 0x90, 0x2c,
	0x26, 0x8a, 0xc7, 0x05, 0x3b, 0xad, 0x58, 0x09, 0x7d, 0x55, 0x48, 0x90, 0x61, 0x34, 0x91, 0x42,
	0x54, 0x39, 0x87, 0x79, 0xdf, 0x9d, 0xee, 0x03, 0xc9, 0xfa, 0xb3, 0xc1, 0xbd, 0x27, 0x19, 0x87,
	0x93, 0xea, 0xa8, 0x3f, 0x91, 0x22, 0xce, 0x64, 0x26, 0x63, 0x03, 0x1c, 0x55, 0xc7, 0xc6, 0x33,
	0x8e, 0xb1, 0x6c, 0x20, 0xfc, 0xd9, 0x43, 0x6b, 0xfb, 0x94, 0xa6, 0x4c, 0xc9, 0x02, 0x52, 0x76,
	0x1a, 0x6e, 0xa0, 0x86, 0xe4, 0x34, 0xf2, 0x3a, 0x5e, 0xb7, 0x91, 0x6a, 0x53, 0xaf, 0x00, 0xa7,
	0x91, 0x6f, 0x57, 0x80, 0xd3, 0x30, 0x44, 0x4d, 0x98, 0x2b, 0x16, 0x35, 0x3a, 0x5e, 0x37, 0x48,
	0x8d, 0xad, 0x4f, 0x09, 0x4e, 0xa3, 0xa6, 0x3d, 0x25, 0x38, 0x0d, 0xef, 0xa0, 0x15, 0x45, 0x0a,
	0x78, 0xcf, 0x69, 0x14, 0x98, 0x83, 0x2d, 0xed, 0x8e, 0x68, 0x78, 0x1f, 0xb5, 0x0b, 0x46, 0x4a,
	0x99, 0xeb, 0xad, 0x96, 0xd9, 0x5a, 0xb5, 0x0b, 0x23, 0x1a, 0x6e, 0xa2, 0xa0, 0x9c, 0xc8, 0x82,
	0x45, 0x2b, 0x66, 0xc3, 0x3a, 0xb8, 0x87, 0x5a, 0x63, 0x92, 0xb9, 0xfc, 0xc4, 0x22, 0x3f, 0xb1,
	0x2c, 0x3f, 0xfc, 0x1c, 0xad, 0x8d, 0x49, 0x96, 0xcc, 0x5f, 0x13, 0xc1, 0x96, 0x33, 0x9b, 0x28,
	0x80, 0x9c, 0x08, 0x66, 0xa8, 0x76, 0x6a, 0x1d, 0xbc, 0x8b, 0xfe, 0x1f, 0x93, 0xec, 0x90, 0xa8,
	0x64, 0x3e, 0x7a, 0xb9, 0x1c, 0xd4, 0xa5, 0x73, 0x5a, 0x46, 0x7e, 0xa7, 0xd1, 0x6d, 0xa4, 0xc6,
	0xc6, 0x6f, 0xd1, 0xe6, 0xc1, 0x09, 0xc9, 0x73, 0x36, 0x3d, 0x20, 0xc0, 0x32, 0x59, 0x70, 0x56,
	0x6a, 0xfa, 0x2e, 0x5a, 0x2d, 0xc1, 0x29, 0x60, 0x43, 0xac, 0x18, 0x7f, 0x64, 0x72, 0xce, 0x2b,
	0x61, 0x6e, 0x0f, 0x52, 0x6d, 0x9a, 0xba, 0x81, 0xc0, 0xa5, 0xa8, 0xd6, 0xc1, 0x43, 0xf4, 0x9f,
	0x0b, 0xfd, 0xcb, 0x11, 0xf1, 0x18, 0xad, 0x3b, 0x36, 0xad, 0xa6, 0x7f, 0x2c, 0xa3, 0x87, 0x57,
	0x51, 0x5f, 0x15, 0xb2, 0x52, 0x4e, 0x25, 0x58, 0xa8, 0xa4, 0x1b, 0x30, 0x40, 0xed, 0x94, 0x95,
	0x8b, 0x8e, 0x5d, 0x7b, 0x51, 0x97, 0xef, 0xc7, 0x5f, 0xbc, 0x1f, 0xbc, 0x83, 0x90, 0x45, 0x4c,
	0xa2, 0x21, 0x6a, 0x4a, 0x2d, 0xb3, 0x67, 0x65, 0xd6, 0xf6, 0x52, 0xea, 0xbb, 0x87, 0xd6, 0x2d,
	0xb6, 0x3f, 0x01, 0x2e, 0x73, 0xcd, 0x0e, 0x6b, 0x4d, 0x4b, 0xba, 0x17, 0x67, 0xdb, 0x8f, 0x8e,
	0x65, 0x21, 0x86, 0x58, 0x70, 0x8a, 0x3b, 0x33, 0x32, 0xe5, 0x94, 0x00, 0x1b, 0x62, 0x3d, 0x50,
	0xbc, 0x60, 0xb4, 0x27, 0x78, 0xbe, 0x37, 0xc0, 0xb6, 0xbd, 0xc3, 0xda, 0x5b, 0xaa, 0xb3, 0x70,
	0x03, 0x0b, 0x96, 0xd5, 0x75, 0x36, 0xae, 0xb3, 0xf2, 0x06, 0x56, 0x2b, 0xb2, 0xe3, 0x6a, 0xd3,
	0xe3, 0x13, 0x24, 0x9d, 0x8b, 0xb3, 0xed, 0x07, 0xee, 0x62, 0x5d, 0x65, 0x8d, 0xce, 0x80, 0xed,
	0x3d, 0xc5, 0xae, 0xfa, 0x4f, 0x3e, 0x0a, 0xeb, 0xd5, 0x1f, 0x12, 0xe5, 0x04, 0x90, 0xcb, 0x04,
	0xb8, 0x4d, 0x22, 0x4e, 0x3c, 0xff, 0x77, 0xc4, 0xdb, 0xa9, 0x7f, 0x16, 0x6e, 0x5b, 0x44, 0x78,
	0xe8, 0x26, 0xaa, 0xa9, 0x5b, 0x9d, 0xbc, 0xb8, 0x38, 0xdb, 0xde, 0xbd, 0xd2, 0xbc, 0xec, 0x95,
	0x6a, 0xca, 0xe1, 0xe7, 0x37, 0xf7, 0x28, 0x9f, 0xb1, 0x5e, 0x06, 0x36, 0x9c, 0x1e, 0xc6, 0x0f,
	0x3e, 0x6a, 0xbf, 0x51, 0x09, 0xcf, 0xe9, 0x5f, 0x2f, 0xc5, 0x47, 0x5f, 0x7f, 0xdb, 0x05, 0xcf,
	0xff, 0xa9, 0x41, 0xcb, 0x64, 0xe3, 0xcb, 0xf9, 0x96, 0xf7, 0xf5, 0x7c, 0xcb, 0xfb, 0x76, 0xbe,
	0xe5, 0xbd, 0xf3, 0x67, 0x83, 0xa3, 0x96, 0xf9, 0x05, 0x3e, 0xfb, 0x11, 0x00, 0x00, 0xff, 0xff,
	0x22, 0x4d, 0x6f, 0x0f, 0x75, 0x07, 0x00, 0x00,
}

func (m *AddReportReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddReportReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Oid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Oid))
	}
	if m.Tid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Tid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Type))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.PartId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.PartId))
	}
	if m.ReasonId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.ReasonId))
	}
	if m.Score != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.Tid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Tid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagByNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagByNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if len(m.Tname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Tname)))
		i += copy(dAtA[i:], m.Tname)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagMapByIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagMapByIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if len(m.Tids) > 0 {
		dAtA2 := make([]byte, len(m.Tids)*10)
		var j1 int
		for _, num1 := range m.Tids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintRequest(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelCategoriesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelCategoriesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.StartId))
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Num))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.StartId))
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Num))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelRulesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelRulesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.StartId))
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Num))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelGroupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Tid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResTagReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResTagReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Oid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Oid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResTagsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResTagsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Oids) > 0 {
		dAtA4 := make([]byte, len(m.Oids)*10)
		var j3 int
		for _, num1 := range m.Oids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRequest(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResTagActionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResTagActionReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.Tid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Tid))
	}
	if m.Oid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Oid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResTagActionMapReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResTagActionMapReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Oid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Oid))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Type))
	}
	if len(m.Tids) > 0 {
		dAtA6 := make([]byte, len(m.Tids)*10)
		var j5 int
		for _, num1 := range m.Tids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintRequest(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpBindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpBindReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Oid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Oid))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Type))
	}
	if len(m.Tids) > 0 {
		dAtA8 := make([]byte, len(m.Tids)*10)
		var j7 int
		for _, num1 := range m.Tids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintRequest(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminBindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminBindReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Oid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Oid))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Type))
	}
	if len(m.Tids) > 0 {
		dAtA10 := make([]byte, len(m.Tids)*10)
		var j9 int
		for _, num1 := range m.Tids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintRequest(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRequest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AddReportReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oid != 0 {
		n += 1 + sovRequest(uint64(m.Oid))
	}
	if m.Tid != 0 {
		n += 1 + sovRequest(uint64(m.Tid))
	}
	if m.Type != 0 {
		n += 1 + sovRequest(uint64(m.Type))
	}
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.PartId != 0 {
		n += 1 + sovRequest(uint64(m.PartId))
	}
	if m.ReasonId != 0 {
		n += 1 + sovRequest(uint64(m.ReasonId))
	}
	if m.Score != 0 {
		n += 1 + sovRequest(uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.Tid != 0 {
		n += 1 + sovRequest(uint64(m.Tid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagByNameReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	l = len(m.Tname)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagMapByIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if len(m.Tids) > 0 {
		l = 0
		for _, e := range m.Tids {
			l += sovRequest(uint64(e))
		}
		n += 1 + sovRequest(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelCategoriesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartId != 0 {
		n += 1 + sovRequest(uint64(m.StartId))
	}
	if m.Num != 0 {
		n += 1 + sovRequest(uint64(m.Num))
	}
	if m.State != 0 {
		n += 1 + sovRequest(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartId != 0 {
		n += 1 + sovRequest(uint64(m.StartId))
	}
	if m.Num != 0 {
		n += 1 + sovRequest(uint64(m.Num))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelRulesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartId != 0 {
		n += 1 + sovRequest(uint64(m.StartId))
	}
	if m.Num != 0 {
		n += 1 + sovRequest(uint64(m.Num))
	}
	if m.State != 0 {
		n += 1 + sovRequest(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tid != 0 {
		n += 1 + sovRequest(uint64(m.Tid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResTagReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oid != 0 {
		n += 1 + sovRequest(uint64(m.Oid))
	}
	if m.Type != 0 {
		n += 1 + sovRequest(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResTagsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Oids) > 0 {
		l = 0
		for _, e := range m.Oids {
			l += sovRequest(uint64(e))
		}
		n += 1 + sovRequest(uint64(l)) + l
	}
	if m.Type != 0 {
		n += 1 + sovRequest(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResTagActionReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.Tid != 0 {
		n += 1 + sovRequest(uint64(m.Tid))
	}
	if m.Oid != 0 {
		n += 1 + sovRequest(uint64(m.Oid))
	}
	if m.Type != 0 {
		n += 1 + sovRequest(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResTagActionMapReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oid != 0 {
		n += 1 + sovRequest(uint64(m.Oid))
	}
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.Type != 0 {
		n += 1 + sovRequest(uint64(m.Type))
	}
	if len(m.Tids) > 0 {
		l = 0
		for _, e := range m.Tids {
			l += sovRequest(uint64(e))
		}
		n += 1 + sovRequest(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpBindReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oid != 0 {
		n += 1 + sovRequest(uint64(m.Oid))
	}
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.Type != 0 {
		n += 1 + sovRequest(uint64(m.Type))
	}
	if len(m.Tids) > 0 {
		l = 0
		for _, e := range m.Tids {
			l += sovRequest(uint64(e))
		}
		n += 1 + sovRequest(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminBindReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oid != 0 {
		n += 1 + sovRequest(uint64(m.Oid))
	}
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.Type != 0 {
		n += 1 + sovRequest(uint64(m.Type))
	}
	if len(m.Tids) > 0 {
		l = 0
		for _, e := range m.Tids {
			l += sovRequest(uint64(e))
		}
		n += 1 + sovRequest(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRequest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRequest(x uint64) (n int) {
	return sovRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddReportReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddReportReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddReportReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartId", wireType)
			}
			m.PartId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReasonId", wireType)
			}
			m.ReasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReasonId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagByNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagByNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagByNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagMapByIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagMapByIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagMapByIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tids = append(m.Tids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Tids) == 0 {
					m.Tids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tids = append(m.Tids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelCategoriesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelCategoriesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelCategoriesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartId", wireType)
			}
			m.StartId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartId", wireType)
			}
			m.StartId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelRulesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelRulesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelRulesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartId", wireType)
			}
			m.StartId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResTagReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResTagReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResTagReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResTagsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResTagsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResTagsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Oids = append(m.Oids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Oids) == 0 {
					m.Oids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Oids = append(m.Oids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Oids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResTagActionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResTagActionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResTagActionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResTagActionMapReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResTagActionMapReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResTagActionMapReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tids = append(m.Tids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Tids) == 0 {
					m.Tids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tids = append(m.Tids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpBindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpBindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpBindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tids = append(m.Tids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Tids) == 0 {
					m.Tids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tids = append(m.Tids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminBindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminBindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminBindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tids = append(m.Tids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Tids) == 0 {
					m.Tids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tids = append(m.Tids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRequest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRequest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRequest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequest   = fmt.Errorf("proto: integer overflow")
)
