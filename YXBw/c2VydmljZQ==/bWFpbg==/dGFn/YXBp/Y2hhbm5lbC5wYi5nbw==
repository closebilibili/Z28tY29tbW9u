// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/tag/api/channel.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	go_common_library_time "go-common/library/time"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Channel struct {
	Tid                  int64                       `protobuf:"varint,1,opt,name=tid,proto3" json:"tid"`
	Type                 int64                       `protobuf:"varint,2,opt,name=type,proto3" json:"type"`
	Rank                 int32                       `protobuf:"varint,3,opt,name=rank,proto3" json:"rank"`
	Operator             string                      `protobuf:"bytes,4,opt,name=operator,proto3" json:"-"`
	Attr                 int32                       `protobuf:"varint,5,opt,name=attr,proto3" json:"attr"`
	State                int32                       `protobuf:"varint,6,opt,name=state,proto3" json:"state"`
	Ctime                go_common_library_time.Time `protobuf:"varint,7,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,8,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"-"`
	TopRank              int32                       `protobuf:"varint,9,opt,name=top_rank,json=topRank,proto3" json:"top_rank"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d04ec40b347b79d2, []int{0}
}
func (m *Channel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(m, src)
}
func (m *Channel) XXX_Size() int {
	return m.Size()
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *Channel) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Channel) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *Channel) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *Channel) GetAttr() int32 {
	if m != nil {
		return m.Attr
	}
	return 0
}

func (m *Channel) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Channel) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *Channel) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *Channel) GetTopRank() int32 {
	if m != nil {
		return m.TopRank
	}
	return 0
}

type ChannelCategory struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name                 string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	State                int32                       `protobuf:"varint,3,opt,name=state,proto3" json:"-"`
	Ctime                go_common_library_time.Time `protobuf:"varint,4,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,5,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"-"`
	Order                int32                       `protobuf:"varint,6,opt,name=order,proto3" json:"order"`
	IntShield            int32                       `protobuf:"varint,7,opt,name=int_shield,json=intShield,proto3" json:"int_shield"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ChannelCategory) Reset()         { *m = ChannelCategory{} }
func (m *ChannelCategory) String() string { return proto.CompactTextString(m) }
func (*ChannelCategory) ProtoMessage()    {}
func (*ChannelCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_d04ec40b347b79d2, []int{1}
}
func (m *ChannelCategory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelCategory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelCategory.Merge(m, src)
}
func (m *ChannelCategory) XXX_Size() int {
	return m.Size()
}
func (m *ChannelCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelCategory.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelCategory proto.InternalMessageInfo

func (m *ChannelCategory) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChannelCategory) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChannelCategory) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ChannelCategory) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *ChannelCategory) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *ChannelCategory) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *ChannelCategory) GetIntShield() int32 {
	if m != nil {
		return m.IntShield
	}
	return 0
}

type ChannelRule struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Tid                  int64    `protobuf:"varint,2,opt,name=tid,proto3" json:"tid"`
	InRule               string   `protobuf:"bytes,3,opt,name=in_rule,json=inRule,proto3" json:"in_rule"`
	NotinRule            string   `protobuf:"bytes,4,opt,name=notin_rule,json=notinRule,proto3" json:"notin_rule"`
	State                int32    `protobuf:"varint,5,opt,name=state,proto3" json:"state"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelRule) Reset()         { *m = ChannelRule{} }
func (m *ChannelRule) String() string { return proto.CompactTextString(m) }
func (*ChannelRule) ProtoMessage()    {}
func (*ChannelRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_d04ec40b347b79d2, []int{2}
}
func (m *ChannelRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelRule.Merge(m, src)
}
func (m *ChannelRule) XXX_Size() int {
	return m.Size()
}
func (m *ChannelRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelRule.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelRule proto.InternalMessageInfo

func (m *ChannelRule) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChannelRule) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *ChannelRule) GetInRule() string {
	if m != nil {
		return m.InRule
	}
	return ""
}

func (m *ChannelRule) GetNotinRule() string {
	if m != nil {
		return m.NotinRule
	}
	return ""
}

func (m *ChannelRule) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type ChannelGroup struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Ptid                 int64                       `protobuf:"varint,2,opt,name=ptid,proto3" json:"ptid"`
	Tid                  int64                       `protobuf:"varint,3,opt,name=tid,proto3" json:"tid"`
	Tname                string                      `protobuf:"bytes,4,opt,name=tname,proto3" json:"tname"`
	Alias                string                      `protobuf:"bytes,5,opt,name=alias,proto3" json:"alias"`
	Rank                 string                      `protobuf:"bytes,6,opt,name=rank,proto3" json:"rank"`
	CTime                go_common_library_time.Time `protobuf:"varint,7,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MTime                go_common_library_time.Time `protobuf:"varint,8,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ChannelGroup) Reset()         { *m = ChannelGroup{} }
func (m *ChannelGroup) String() string { return proto.CompactTextString(m) }
func (*ChannelGroup) ProtoMessage()    {}
func (*ChannelGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_d04ec40b347b79d2, []int{3}
}
func (m *ChannelGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelGroup.Merge(m, src)
}
func (m *ChannelGroup) XXX_Size() int {
	return m.Size()
}
func (m *ChannelGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelGroup proto.InternalMessageInfo

func (m *ChannelGroup) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChannelGroup) GetPtid() int64 {
	if m != nil {
		return m.Ptid
	}
	return 0
}

func (m *ChannelGroup) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *ChannelGroup) GetTname() string {
	if m != nil {
		return m.Tname
	}
	return ""
}

func (m *ChannelGroup) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *ChannelGroup) GetRank() string {
	if m != nil {
		return m.Rank
	}
	return ""
}

func (m *ChannelGroup) GetCTime() go_common_library_time.Time {
	if m != nil {
		return m.CTime
	}
	return 0
}

func (m *ChannelGroup) GetMTime() go_common_library_time.Time {
	if m != nil {
		return m.MTime
	}
	return 0
}

func init() {
	proto.RegisterType((*Channel)(nil), "community.service.tag.v1.Channel")
	proto.RegisterType((*ChannelCategory)(nil), "community.service.tag.v1.ChannelCategory")
	proto.RegisterType((*ChannelRule)(nil), "community.service.tag.v1.ChannelRule")
	proto.RegisterType((*ChannelGroup)(nil), "community.service.tag.v1.ChannelGroup")
}

func init() {
	proto.RegisterFile("app/service/main/tag/api/channel.proto", fileDescriptor_d04ec40b347b79d2)
}

var fileDescriptor_d04ec40b347b79d2 = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x3f, 0x8f, 0xd3, 0x30,
	0x14, 0x57, 0xd2, 0x73, 0xdb, 0xf8, 0x4e, 0x80, 0x32, 0xa0, 0xc0, 0xa1, 0x73, 0xa9, 0x4e, 0xd0,
	0xa5, 0x89, 0x4e, 0x6c, 0x0c, 0x37, 0xb4, 0x03, 0x13, 0x8b, 0xe9, 0xc4, 0x52, 0xb9, 0xad, 0x49,
	0xad, 0x4b, 0xec, 0xc8, 0x75, 0x2a, 0xf5, 0x5b, 0x31, 0xb1, 0xf0, 0x05, 0x18, 0xf9, 0x04, 0x11,
	0xea, 0x82, 0x94, 0x8f, 0xc0, 0x84, 0xfc, 0x9c, 0xfe, 0x11, 0x2a, 0xa0, 0x83, 0xe5, 0x39, 0xef,
	0xf7, 0xfe, 0xe8, 0xe7, 0x9f, 0xdf, 0x0b, 0x7e, 0xc1, 0x8a, 0x22, 0x59, 0x71, 0xbd, 0x16, 0x73,
	0x9e, 0xe4, 0x4c, 0xc8, 0xc4, 0xb0, 0x34, 0x61, 0x85, 0x48, 0xe6, 0x4b, 0x26, 0x25, 0xcf, 0xe2,
	0x42, 0x2b, 0xa3, 0xc2, 0x68, 0xae, 0xf2, 0xbc, 0x94, 0xc2, 0x6c, 0xe2, 0x26, 0x3b, 0x36, 0x2c,
	0x8d, 0xd7, 0x37, 0x4f, 0x87, 0xa9, 0x30, 0xcb, 0x72, 0x16, 0xcf, 0x55, 0x9e, 0xa4, 0x2a, 0x55,
	0x09, 0x14, 0xcc, 0xca, 0x0f, 0xe0, 0x81, 0x03, 0x5f, 0xae, 0x51, 0xff, 0xbb, 0x8f, 0x3b, 0x63,
	0xd7, 0x3a, 0x7c, 0x82, 0x5b, 0x46, 0x2c, 0x22, 0xaf, 0xe7, 0x0d, 0x5a, 0xa3, 0x4e, 0x5d, 0x11,
	0xeb, 0x52, 0x6b, 0xc2, 0x67, 0xf8, 0xcc, 0x6c, 0x0a, 0x1e, 0xf9, 0x10, 0xeb, 0xd6, 0x15, 0x01,
	0x9f, 0x82, 0xb5, 0x51, 0xcd, 0xe4, 0x5d, 0xd4, 0xea, 0x79, 0x03, 0xe4, 0xa2, 0xd6, 0xa7, 0x60,
	0xc3, 0xe7, 0xb8, 0xab, 0x0a, 0xae, 0x99, 0x51, 0x3a, 0x3a, 0xeb, 0x79, 0x83, 0x60, 0x84, 0xea,
	0x8a, 0x78, 0x43, 0xba, 0x87, 0x6d, 0x03, 0x66, 0x8c, 0x8e, 0xd0, 0xa1, 0x81, 0xf5, 0x29, 0xd8,
	0x90, 0x60, 0xb4, 0x32, 0xcc, 0xf0, 0xa8, 0x0d, 0xe1, 0xa0, 0xae, 0x88, 0x03, 0xa8, 0x3b, 0xc2,
	0x5b, 0x8c, 0xe6, 0x46, 0xe4, 0x3c, 0xea, 0x00, 0xbd, 0x81, 0x4d, 0x00, 0xe0, 0x47, 0x45, 0x2e,
	0x53, 0x35, 0xb4, 0x62, 0x29, 0x99, 0x64, 0x62, 0xa6, 0x99, 0xde, 0x24, 0x36, 0x12, 0x4f, 0x44,
	0xce, 0xa9, 0xcb, 0x0a, 0x5f, 0x63, 0x94, 0x43, 0x7d, 0x17, 0xea, 0xaf, 0x81, 0xde, 0x5f, 0x6b,
	0xa1, 0x24, 0x7c, 0x89, 0xbb, 0x46, 0x15, 0x53, 0xb8, 0x7f, 0x00, 0xfc, 0x2e, 0xea, 0x8a, 0xec,
	0x31, 0xda, 0x31, 0xaa, 0xa0, 0x4c, 0xde, 0xf5, 0x3f, 0xfa, 0xf8, 0x61, 0xa3, 0xf4, 0x98, 0x19,
	0x9e, 0x2a, 0xbd, 0x09, 0x1f, 0x63, 0x7f, 0x2f, 0x78, 0xbb, 0xae, 0x88, 0x2f, 0x16, 0xd4, 0x77,
	0x72, 0x4b, 0x96, 0x3b, 0xb9, 0x03, 0xa7, 0x87, 0xf5, 0x29, 0xd8, 0xf0, 0x72, 0xa7, 0x87, 0xd3,
	0xbb, 0x51, 0xf3, 0x57, 0x2d, 0xce, 0xfe, 0x53, 0x0b, 0x74, 0x7f, 0x2d, 0x08, 0x46, 0x4a, 0x2f,
	0xb8, 0x3e, 0x7e, 0x28, 0x00, 0xa8, 0x3b, 0xc2, 0x21, 0xc6, 0x42, 0x9a, 0xe9, 0x6a, 0x29, 0x78,
	0xb6, 0x80, 0xd7, 0x42, 0xa3, 0x07, 0x75, 0x45, 0x8e, 0x50, 0x1a, 0x08, 0x69, 0xde, 0xc1, 0x67,
	0xff, 0x93, 0x87, 0xcf, 0x1b, 0xc9, 0x68, 0x99, 0xf1, 0xdf, 0xca, 0xd5, 0x0c, 0xae, 0x7f, 0x62,
	0x70, 0xaf, 0x71, 0x47, 0xc8, 0xa9, 0x2e, 0x33, 0xa7, 0x56, 0x30, 0x3a, 0xaf, 0x2b, 0xb2, 0x83,
	0x68, 0x5b, 0x48, 0x68, 0x3c, 0xc4, 0x58, 0x2a, 0xb3, 0x4b, 0x74, 0x43, 0x0a, 0xbc, 0x0e, 0x28,
	0x0d, 0xe0, 0x1b, 0xd2, 0xf7, 0x03, 0x89, 0x4e, 0x0f, 0x64, 0xff, 0xb3, 0x8f, 0x2f, 0x1a, 0xe2,
	0x6f, 0xb4, 0x2a, 0x8b, 0x3f, 0x3d, 0x74, 0x71, 0xa0, 0x0e, 0x0f, 0x6d, 0x7d, 0x0a, 0x76, 0x77,
	0xaf, 0xd6, 0x89, 0x7b, 0x11, 0x8c, 0x0c, 0x8c, 0x88, 0x23, 0x0b, 0x14, 0x00, 0xa0, 0xee, 0xb0,
	0x09, 0x2c, 0x13, 0x6c, 0x05, 0x1c, 0x9b, 0x04, 0x00, 0xa8, 0x3b, 0xf6, 0x4b, 0xdb, 0x3e, 0xcc,
	0xd8, 0xd1, 0xd2, 0xde, 0x62, 0x34, 0x9e, 0xfc, 0xd3, 0x4a, 0x41, 0x99, 0x1d, 0xa3, 0xb7, 0x93,
	0x7b, 0xaf, 0x14, 0x94, 0x8c, 0x1e, 0x7d, 0xd9, 0x5e, 0x79, 0x5f, 0xb7, 0x57, 0xde, 0xb7, 0xed,
	0x95, 0xf7, 0xde, 0x5f, 0xdf, 0xcc, 0xda, 0xf0, 0xb3, 0x7a, 0xf5, 0x33, 0x00, 0x00, 0xff, 0xff,
	0x44, 0xaf, 0x0d, 0x3c, 0x1f, 0x05, 0x00, 0x00,
}

func (m *Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Channel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Tid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Type))
	}
	if m.Rank != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Rank))
	}
	if len(m.Operator) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.Operator)))
		i += copy(dAtA[i:], m.Operator)
	}
	if m.Attr != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Attr))
	}
	if m.State != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.State))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Mtime))
	}
	if m.TopRank != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.TopRank))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelCategory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.State))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Mtime))
	}
	if m.Order != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Order))
	}
	if m.IntShield != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.IntShield))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Id))
	}
	if m.Tid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Tid))
	}
	if len(m.InRule) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.InRule)))
		i += copy(dAtA[i:], m.InRule)
	}
	if len(m.NotinRule) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.NotinRule)))
		i += copy(dAtA[i:], m.NotinRule)
	}
	if m.State != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Id))
	}
	if m.Ptid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Ptid))
	}
	if m.Tid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Tid))
	}
	if len(m.Tname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.Tname)))
		i += copy(dAtA[i:], m.Tname)
	}
	if len(m.Alias) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.Alias)))
		i += copy(dAtA[i:], m.Alias)
	}
	if len(m.Rank) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.Rank)))
		i += copy(dAtA[i:], m.Rank)
	}
	if m.CTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintChannel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Channel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tid != 0 {
		n += 1 + sovChannel(uint64(m.Tid))
	}
	if m.Type != 0 {
		n += 1 + sovChannel(uint64(m.Type))
	}
	if m.Rank != 0 {
		n += 1 + sovChannel(uint64(m.Rank))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	if m.Attr != 0 {
		n += 1 + sovChannel(uint64(m.Attr))
	}
	if m.State != 0 {
		n += 1 + sovChannel(uint64(m.State))
	}
	if m.Ctime != 0 {
		n += 1 + sovChannel(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovChannel(uint64(m.Mtime))
	}
	if m.TopRank != 0 {
		n += 1 + sovChannel(uint64(m.TopRank))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelCategory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovChannel(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovChannel(uint64(m.State))
	}
	if m.Ctime != 0 {
		n += 1 + sovChannel(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovChannel(uint64(m.Mtime))
	}
	if m.Order != 0 {
		n += 1 + sovChannel(uint64(m.Order))
	}
	if m.IntShield != 0 {
		n += 1 + sovChannel(uint64(m.IntShield))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovChannel(uint64(m.Id))
	}
	if m.Tid != 0 {
		n += 1 + sovChannel(uint64(m.Tid))
	}
	l = len(m.InRule)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	l = len(m.NotinRule)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovChannel(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovChannel(uint64(m.Id))
	}
	if m.Ptid != 0 {
		n += 1 + sovChannel(uint64(m.Ptid))
	}
	if m.Tid != 0 {
		n += 1 + sovChannel(uint64(m.Tid))
	}
	l = len(m.Tname)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	l = len(m.Rank)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	if m.CTime != 0 {
		n += 1 + sovChannel(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovChannel(uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovChannel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChannel(x uint64) (n int) {
	return sovChannel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			m.Attr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRank", wireType)
			}
			m.TopRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntShield", wireType)
			}
			m.IntShield = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntShield |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotinRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotinRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptid", wireType)
			}
			m.Ptid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ptid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rank = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChannel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChannel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChannel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChannel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChannel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChannel   = fmt.Errorf("proto: integer overflow")
)
