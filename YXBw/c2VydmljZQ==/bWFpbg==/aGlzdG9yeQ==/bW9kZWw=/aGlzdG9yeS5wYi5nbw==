// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/history/model/history.proto

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		app/service/main/history/model/history.proto

	It has these top-level messages:
		History
		Business
		Merge
*/
package model

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// History model
type History struct {
	// ctime
	Ctime go_common_library_time.Time `protobuf:"varint,1,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	// mtime
	Mtime go_common_library_time.Time `protobuf:"varint,2,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	// mid
	Mid int64 `protobuf:"varint,3,opt,name=mid,proto3" json:"mid" form:"mid" validate:"required,min=1"`
	// business_id
	BusinessID int64 `protobuf:"varint,4,opt,name=business_id,json=businessId,proto3" json:"business_id"`
	// business 业务
	Business string `protobuf:"bytes,5,opt,name=business,proto3" json:"business" form:"business" validate:"required"`
	// kid 业务中唯一id
	Kid int64 `protobuf:"varint,6,opt,name=kid,proto3" json:"kid" form:"kid"`
	// aid
	Aid int64 `protobuf:"varint,7,opt,name=aid,proto3" json:"aid,omitempty" form:"aid"`
	// sid
	Sid int64 `protobuf:"varint,8,opt,name=sid,proto3" json:"sid,omitempty" form:"sid"`
	// epid
	Epid int64 `protobuf:"varint,9,opt,name=epid,proto3" json:"epid,omitempty" form:"epid"`
	// cid
	Cid int64 `protobuf:"varint,10,opt,name=cid,proto3" json:"cid,omitempty" form:"cid"`
	// sub_type 子类型
	SubType int32 `protobuf:"varint,11,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty" form:"sub_type"`
	// device 设备类型
	Device int32 `protobuf:"varint,12,opt,name=device,proto3" json:"device" form:"device"`
	// progress 进度
	Progress int32 `protobuf:"varint,13,opt,name=progress,proto3" json:"progress" form:"progress"`
	// 观看时间
	ViewAt int64 `protobuf:"varint,14,opt,name=view_at,json=viewAt,proto3" json:"view_at" form:"view_at"`
}

func (m *History) Reset()                    { *m = History{} }
func (m *History) String() string            { return proto.CompactTextString(m) }
func (*History) ProtoMessage()               {}
func (*History) Descriptor() ([]byte, []int) { return fileDescriptorHistory, []int{0} }

func (m *History) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *History) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *History) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *History) GetBusinessID() int64 {
	if m != nil {
		return m.BusinessID
	}
	return 0
}

func (m *History) GetBusiness() string {
	if m != nil {
		return m.Business
	}
	return ""
}

func (m *History) GetKid() int64 {
	if m != nil {
		return m.Kid
	}
	return 0
}

func (m *History) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *History) GetSid() int64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *History) GetEpid() int64 {
	if m != nil {
		return m.Epid
	}
	return 0
}

func (m *History) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *History) GetSubType() int32 {
	if m != nil {
		return m.SubType
	}
	return 0
}

func (m *History) GetDevice() int32 {
	if m != nil {
		return m.Device
	}
	return 0
}

func (m *History) GetProgress() int32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *History) GetViewAt() int64 {
	if m != nil {
		return m.ViewAt
	}
	return 0
}

// Business model
type Business struct {
	// id
	ID int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// ttl
	TTL int64 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (m *Business) Reset()                    { *m = Business{} }
func (m *Business) String() string            { return proto.CompactTextString(m) }
func (*Business) ProtoMessage()               {}
func (*Business) Descriptor() ([]byte, []int) { return fileDescriptorHistory, []int{1} }

func (m *Business) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Business) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Business) GetTTL() int64 {
	if m != nil {
		return m.TTL
	}
	return 0
}

// Merge model
type Merge struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	// bid
	Bid int64 `protobuf:"varint,2,opt,name=bid,proto3" json:"bid" validate:"required"`
	// business 业务
	Business string `protobuf:"bytes,3,opt,name=business,proto3" json:"-"`
	// time
	Time int64 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty" validate:"required"`
	// kid
	Kid int64 `protobuf:"varint,5,opt,name=kid,proto3" json:"kid,omitempty" validate:"required"`
}

func (m *Merge) Reset()                    { *m = Merge{} }
func (m *Merge) String() string            { return proto.CompactTextString(m) }
func (*Merge) ProtoMessage()               {}
func (*Merge) Descriptor() ([]byte, []int) { return fileDescriptorHistory, []int{2} }

func (m *Merge) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Merge) GetBid() int64 {
	if m != nil {
		return m.Bid
	}
	return 0
}

func (m *Merge) GetBusiness() string {
	if m != nil {
		return m.Business
	}
	return ""
}

func (m *Merge) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Merge) GetKid() int64 {
	if m != nil {
		return m.Kid
	}
	return 0
}

func init() {
	proto.RegisterType((*History)(nil), "History")
	proto.RegisterType((*Business)(nil), "Business")
	proto.RegisterType((*Merge)(nil), "Merge")
}
func (m *History) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *History) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ctime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.Mtime))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.Mid))
	}
	if m.BusinessID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.BusinessID))
	}
	if len(m.Business) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Business)))
		i += copy(dAtA[i:], m.Business)
	}
	if m.Kid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.Kid))
	}
	if m.Aid != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.Aid))
	}
	if m.Sid != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.Sid))
	}
	if m.Epid != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.Epid))
	}
	if m.Cid != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.Cid))
	}
	if m.SubType != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.SubType))
	}
	if m.Device != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.Device))
	}
	if m.Progress != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.Progress))
	}
	if m.ViewAt != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.ViewAt))
	}
	return i, nil
}

func (m *Business) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Business) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.ID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.TTL != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.TTL))
	}
	return i, nil
}

func (m *Merge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Merge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.Mid))
	}
	if m.Bid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.Bid))
	}
	if len(m.Business) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Business)))
		i += copy(dAtA[i:], m.Business)
	}
	if m.Time != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.Time))
	}
	if m.Kid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHistory(dAtA, i, uint64(m.Kid))
	}
	return i, nil
}

func encodeVarintHistory(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *History) Size() (n int) {
	var l int
	_ = l
	if m.Ctime != 0 {
		n += 1 + sovHistory(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovHistory(uint64(m.Mtime))
	}
	if m.Mid != 0 {
		n += 1 + sovHistory(uint64(m.Mid))
	}
	if m.BusinessID != 0 {
		n += 1 + sovHistory(uint64(m.BusinessID))
	}
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Kid != 0 {
		n += 1 + sovHistory(uint64(m.Kid))
	}
	if m.Aid != 0 {
		n += 1 + sovHistory(uint64(m.Aid))
	}
	if m.Sid != 0 {
		n += 1 + sovHistory(uint64(m.Sid))
	}
	if m.Epid != 0 {
		n += 1 + sovHistory(uint64(m.Epid))
	}
	if m.Cid != 0 {
		n += 1 + sovHistory(uint64(m.Cid))
	}
	if m.SubType != 0 {
		n += 1 + sovHistory(uint64(m.SubType))
	}
	if m.Device != 0 {
		n += 1 + sovHistory(uint64(m.Device))
	}
	if m.Progress != 0 {
		n += 1 + sovHistory(uint64(m.Progress))
	}
	if m.ViewAt != 0 {
		n += 1 + sovHistory(uint64(m.ViewAt))
	}
	return n
}

func (m *Business) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovHistory(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.TTL != 0 {
		n += 1 + sovHistory(uint64(m.TTL))
	}
	return n
}

func (m *Merge) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovHistory(uint64(m.Mid))
	}
	if m.Bid != 0 {
		n += 1 + sovHistory(uint64(m.Bid))
	}
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovHistory(uint64(m.Time))
	}
	if m.Kid != 0 {
		n += 1 + sovHistory(uint64(m.Kid))
	}
	return n
}

func sovHistory(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHistory(x uint64) (n int) {
	return sovHistory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *History) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: History: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: History: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessID", wireType)
			}
			m.BusinessID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusinessID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kid", wireType)
			}
			m.Kid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epid", wireType)
			}
			m.Epid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			m.SubType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			m.Device = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Device |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewAt", wireType)
			}
			m.ViewAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Business) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Business: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Business: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTL", wireType)
			}
			m.TTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TTL |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Merge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Merge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Merge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			m.Bid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kid", wireType)
			}
			m.Kid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHistory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHistory
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHistory
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHistory(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHistory = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHistory   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/service/main/history/model/history.proto", fileDescriptorHistory) }

var fileDescriptorHistory = []byte{
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0x66, 0xb3, 0xd9, 0x24, 0x9d, 0xfe, 0x82, 0x29, 0xe2, 0x6a, 0x6b, 0x27, 0x4e, 0x15, 0x23,
	0xb6, 0x59, 0xa4, 0xa0, 0x50, 0xb1, 0xd0, 0xe0, 0xc1, 0x82, 0x22, 0x2c, 0x39, 0x79, 0x29, 0xbb,
	0x99, 0x69, 0xfa, 0x48, 0x36, 0xbb, 0xee, 0x6e, 0x2a, 0xf9, 0x0f, 0x3d, 0xfa, 0x17, 0x0c, 0x92,
	0x83, 0x87, 0xf5, 0xb6, 0x47, 0x4f, 0x32, 0x6f, 0x76, 0xdb, 0x52, 0x8a, 0x7a, 0x09, 0xfb, 0x7d,
	0xef, 0xfb, 0xde, 0xbc, 0x99, 0x7c, 0x33, 0x64, 0x3f, 0x48, 0x12, 0x2f, 0x93, 0xe9, 0x25, 0x8c,
	0xa4, 0x17, 0x05, 0x30, 0xf3, 0x2e, 0x20, 0xcb, 0xe3, 0x74, 0xe1, 0x45, 0xb1, 0x90, 0xd3, 0x1a,
	0xf5, 0x93, 0x34, 0xce, 0xe3, 0x87, 0x07, 0x63, 0xc8, 0x2f, 0xe6, 0x61, 0x7f, 0x14, 0x47, 0xde,
	0x38, 0x1e, 0xc7, 0x1e, 0xd2, 0xe1, 0xfc, 0x1c, 0x11, 0x02, 0xfc, 0x32, 0x72, 0xfe, 0xcb, 0x21,
	0xed, 0xf7, 0xa6, 0x01, 0x3d, 0x26, 0xce, 0x28, 0x87, 0x48, 0xba, 0x56, 0xd7, 0xea, 0xd9, 0x83,
	0x5e, 0xa1, 0x98, 0x21, 0x7e, 0x2b, 0xb6, 0x3d, 0x8e, 0x0f, 0x46, 0x71, 0x14, 0xc5, 0x33, 0x6f,
	0x0a, 0x61, 0x1a, 0xa4, 0x0b, 0x4f, 0x57, 0xfa, 0x43, 0x88, 0xa4, 0x6f, 0x54, 0xda, 0x1f, 0xa1,
	0xbf, 0x71, 0xed, 0x8f, 0xfe, 0xcb, 0x8f, 0x2a, 0x7a, 0x42, 0xec, 0x08, 0x84, 0x6b, 0xa3, 0xdb,
	0x2b, 0x14, 0xd3, 0xb0, 0x54, 0xec, 0xc9, 0x79, 0x9c, 0x46, 0x47, 0x3c, 0x02, 0xc1, 0xbb, 0x97,
	0xc1, 0x14, 0x44, 0x90, 0xcb, 0x23, 0x9e, 0xca, 0x2f, 0x73, 0x48, 0xa5, 0xd8, 0x8f, 0x60, 0xf6,
	0xf6, 0x25, 0xf7, 0xb5, 0x98, 0x1e, 0x93, 0xd5, 0x70, 0x9e, 0xc1, 0x4c, 0x66, 0xd9, 0x19, 0x08,
	0xb7, 0x89, 0xad, 0x1e, 0x2d, 0x15, 0x23, 0x83, 0x8a, 0x3e, 0x7d, 0x57, 0x28, 0x76, 0x53, 0xe4,
	0x93, 0x1a, 0x9c, 0x0a, 0xfa, 0x89, 0x74, 0x6a, 0xe4, 0x3a, 0x5d, 0xab, 0xb7, 0x32, 0x38, 0x2c,
	0x14, 0xbb, 0xe2, 0x4a, 0xc5, 0xf6, 0xcc, 0x30, 0x35, 0x73, 0xd7, 0x44, 0xdc, 0xbf, 0x32, 0xd0,
	0x67, 0xc4, 0x9e, 0x80, 0x70, 0x5b, 0x38, 0xc8, 0x3d, 0xbd, 0xa7, 0x09, 0xee, 0x89, 0x98, 0x36,
	0x13, 0x10, 0xdc, 0xd7, 0x14, 0xed, 0x12, 0x3b, 0x00, 0xe1, 0xb6, 0x51, 0xb8, 0x71, 0xad, 0x08,
	0x50, 0x11, 0x18, 0x45, 0x06, 0xc2, 0xed, 0xdc, 0x56, 0x64, 0xa8, 0xc8, 0x40, 0xd0, 0x3d, 0xd2,
	0x94, 0x09, 0x08, 0x77, 0x05, 0x25, 0x9b, 0xa5, 0x62, 0xab, 0x46, 0xa2, 0x59, 0xee, 0x63, 0x51,
	0xb7, 0x19, 0x81, 0x70, 0xc9, 0xed, 0x36, 0x23, 0x6c, 0x33, 0x02, 0x41, 0xfb, 0xa4, 0x93, 0xcd,
	0xc3, 0xb3, 0x7c, 0x91, 0x48, 0x77, 0xb5, 0x6b, 0xf5, 0x9c, 0xc1, 0x56, 0xa9, 0xd8, 0x66, 0xb5,
	0x5a, 0x55, 0xe1, 0x7e, 0x3b, 0x9b, 0x87, 0xc3, 0x45, 0x22, 0xe9, 0x21, 0x69, 0x09, 0xa9, 0xd3,
	0xe9, 0xae, 0xa1, 0x7a, 0xbb, 0x50, 0xac, 0x62, 0x4a, 0xc5, 0xd6, 0x8d, 0xcf, 0x60, 0xee, 0x57,
	0x05, 0xfa, 0x86, 0x74, 0x92, 0x34, 0x1e, 0xa7, 0xfa, 0xa4, 0xd7, 0xd1, 0xc6, 0xf4, 0x49, 0xd7,
	0xdc, 0xf5, 0x82, 0x35, 0xc3, 0xfd, 0xab, 0x22, 0x7d, 0x45, 0xda, 0x97, 0x20, 0xbf, 0x9e, 0x05,
	0xb9, 0xbb, 0x61, 0xfe, 0xe2, 0x42, 0xb1, 0x9a, 0x2a, 0x15, 0xdb, 0x30, 0xd6, 0x8a, 0xe0, 0x7e,
	0x4b, 0x7f, 0x9d, 0xe4, 0x3c, 0x20, 0x9d, 0x3a, 0x07, 0x74, 0x87, 0x34, 0x40, 0x54, 0x51, 0x5f,
	0x5b, 0x2a, 0xd6, 0xc0, 0x64, 0x34, 0x40, 0xf8, 0x0d, 0x10, 0x74, 0x87, 0x34, 0x67, 0x41, 0x15,
	0xe5, 0x95, 0x41, 0xa7, 0x50, 0x0c, 0xb1, 0x8f, 0xbf, 0xf4, 0x01, 0xb1, 0xf3, 0x7c, 0x5a, 0x25,
	0xb5, 0xbd, 0x54, 0xcc, 0x1e, 0x0e, 0x3f, 0xf8, 0x9a, 0xe3, 0x3f, 0x2d, 0xe2, 0x7c, 0x94, 0xe9,
	0x58, 0xd2, 0xe7, 0x26, 0xce, 0x66, 0x85, 0xfb, 0xa5, 0x62, 0x5b, 0x77, 0x45, 0x05, 0x63, 0xfb,
	0x9a, 0xd8, 0x21, 0x88, 0xea, 0xde, 0x3c, 0xd5, 0xfd, 0x06, 0x20, 0x74, 0x58, 0x42, 0x0c, 0xcb,
	0xdd, 0xc6, 0x10, 0x04, 0x7d, 0x7c, 0x23, 0xaf, 0x36, 0x8e, 0xea, 0x14, 0x8a, 0x59, 0x07, 0x37,
	0x12, 0xf8, 0x82, 0x34, 0xf1, 0x52, 0x36, 0xff, 0x3e, 0x07, 0x8a, 0xf4, 0xcc, 0x3a, 0xae, 0xce,
	0x3f, 0x66, 0x9e, 0x80, 0x18, 0x6c, 0x7d, 0x5b, 0xee, 0x5a, 0xdf, 0x97, 0xbb, 0xd6, 0x8f, 0xe5,
	0xae, 0xf5, 0xd9, 0xc1, 0xb7, 0x28, 0x6c, 0xe1, 0xab, 0x72, 0xf8, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x78, 0xc8, 0xb8, 0x32, 0xb4, 0x04, 0x00, 0x00,
}
