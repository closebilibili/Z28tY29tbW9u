// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/member/api/api.proto

package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MidReq struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// 真实ip
	RealIP               string   `protobuf:"bytes,3,opt,name=realIP,proto3" json:"realIP"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MidReq) Reset()         { *m = MidReq{} }
func (m *MidReq) String() string { return proto.CompactTextString(m) }
func (*MidReq) ProtoMessage()    {}
func (*MidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{0}
}
func (m *MidReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MidReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MidReq.Merge(dst, src)
}
func (m *MidReq) XXX_Size() int {
	return m.Size()
}
func (m *MidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MidReq.DiscardUnknown(m)
}

var xxx_messageInfo_MidReq proto.InternalMessageInfo

func (m *MidReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *MidReq) GetRealIP() string {
	if m != nil {
		return m.RealIP
	}
	return ""
}

type MemberMidReq struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// 远端ip
	RemoteIP             string   `protobuf:"bytes,2,opt,name=remoteIP,proto3" json:"remoteIP"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemberMidReq) Reset()         { *m = MemberMidReq{} }
func (m *MemberMidReq) String() string { return proto.CompactTextString(m) }
func (*MemberMidReq) ProtoMessage()    {}
func (*MemberMidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{1}
}
func (m *MemberMidReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberMidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberMidReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MemberMidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberMidReq.Merge(dst, src)
}
func (m *MemberMidReq) XXX_Size() int {
	return m.Size()
}
func (m *MemberMidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberMidReq.DiscardUnknown(m)
}

var xxx_messageInfo_MemberMidReq proto.InternalMessageInfo

func (m *MemberMidReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *MemberMidReq) GetRemoteIP() string {
	if m != nil {
		return m.RemoteIP
	}
	return ""
}

type MemberMidsReq struct {
	// mid 列表
	Mids []int64 `protobuf:"varint,1,rep,packed,name=mids" json:"mids"`
	// 远端ip
	RemoteIP             string   `protobuf:"bytes,2,opt,name=remoteIP,proto3" json:"remoteIP"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemberMidsReq) Reset()         { *m = MemberMidsReq{} }
func (m *MemberMidsReq) String() string { return proto.CompactTextString(m) }
func (*MemberMidsReq) ProtoMessage()    {}
func (*MemberMidsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{2}
}
func (m *MemberMidsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberMidsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberMidsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MemberMidsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberMidsReq.Merge(dst, src)
}
func (m *MemberMidsReq) XXX_Size() int {
	return m.Size()
}
func (m *MemberMidsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberMidsReq.DiscardUnknown(m)
}

var xxx_messageInfo_MemberMidsReq proto.InternalMessageInfo

func (m *MemberMidsReq) GetMids() []int64 {
	if m != nil {
		return m.Mids
	}
	return nil
}

func (m *MemberMidsReq) GetRemoteIP() string {
	if m != nil {
		return m.RemoteIP
	}
	return ""
}

type MidByRealnameCardsReq struct {
	// 身份证号
	CardCode []string `protobuf:"bytes,1,rep,name=card_code,json=cardCode" json:"card_code,omitempty" form:"card_code" validate:"required"`
	// 国家
	Country int16 `protobuf:"varint,2,opt,name=country,proto3,casttype=int16" json:"country" form:"country"`
	// 证件类型
	CardType             int8     `protobuf:"varint,3,opt,name=card_type,json=cardType,proto3,casttype=int8" json:"card_type" form:"card_type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MidByRealnameCardsReq) Reset()         { *m = MidByRealnameCardsReq{} }
func (m *MidByRealnameCardsReq) String() string { return proto.CompactTextString(m) }
func (*MidByRealnameCardsReq) ProtoMessage()    {}
func (*MidByRealnameCardsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{3}
}
func (m *MidByRealnameCardsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MidByRealnameCardsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MidByRealnameCardsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MidByRealnameCardsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MidByRealnameCardsReq.Merge(dst, src)
}
func (m *MidByRealnameCardsReq) XXX_Size() int {
	return m.Size()
}
func (m *MidByRealnameCardsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MidByRealnameCardsReq.DiscardUnknown(m)
}

var xxx_messageInfo_MidByRealnameCardsReq proto.InternalMessageInfo

func (m *MidByRealnameCardsReq) GetCardCode() []string {
	if m != nil {
		return m.CardCode
	}
	return nil
}

func (m *MidByRealnameCardsReq) GetCountry() int16 {
	if m != nil {
		return m.Country
	}
	return 0
}

func (m *MidByRealnameCardsReq) GetCardType() int8 {
	if m != nil {
		return m.CardType
	}
	return 0
}

// 空的message，对应真实service只返回error，没有具体返回值
type EmptyStruct struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyStruct) Reset()         { *m = EmptyStruct{} }
func (m *EmptyStruct) String() string { return proto.CompactTextString(m) }
func (*EmptyStruct) ProtoMessage()    {}
func (*EmptyStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{4}
}
func (m *EmptyStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EmptyStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyStruct.Merge(dst, src)
}
func (m *EmptyStruct) XXX_Size() int {
	return m.Size()
}
func (m *EmptyStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyStruct.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyStruct proto.InternalMessageInfo

type LevelInfoReply struct {
	// 当前的等级信息
	Cur int32 `protobuf:"varint,1,opt,name=cur,proto3" json:"current_level"`
	// 当前等级的经验阀值
	Min int32 `protobuf:"varint,2,opt,name=min,proto3" json:"current_min"`
	// 当前的经验值
	NowExp int32 `protobuf:"varint,3,opt,name=now_exp,json=nowExp,proto3" json:"current_exp"`
	// 下个等级的经验阀值
	NextExp              int32    `protobuf:"varint,4,opt,name=next_exp,json=nextExp,proto3" json:"next_exp"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LevelInfoReply) Reset()         { *m = LevelInfoReply{} }
func (m *LevelInfoReply) String() string { return proto.CompactTextString(m) }
func (*LevelInfoReply) ProtoMessage()    {}
func (*LevelInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{5}
}
func (m *LevelInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LevelInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LevelInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LevelInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelInfoReply.Merge(dst, src)
}
func (m *LevelInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *LevelInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_LevelInfoReply proto.InternalMessageInfo

func (m *LevelInfoReply) GetCur() int32 {
	if m != nil {
		return m.Cur
	}
	return 0
}

func (m *LevelInfoReply) GetMin() int32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *LevelInfoReply) GetNowExp() int32 {
	if m != nil {
		return m.NowExp
	}
	return 0
}

func (m *LevelInfoReply) GetNextExp() int32 {
	if m != nil {
		return m.NextExp
	}
	return 0
}

type UserLogReply struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// ip
	Ip string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip"`
	// 时间戳
	Ts int64 `protobuf:"varint,3,opt,name=ts,proto3" json:"ts"`
	// logId
	LogId string `protobuf:"bytes,4,opt,name=log_id,json=logId,proto3" json:"log_id"`
	// 具体内容
	Content              map[string]string `protobuf:"bytes,5,rep,name=content" json:"content" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UserLogReply) Reset()         { *m = UserLogReply{} }
func (m *UserLogReply) String() string { return proto.CompactTextString(m) }
func (*UserLogReply) ProtoMessage()    {}
func (*UserLogReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{6}
}
func (m *UserLogReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLogReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserLogReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserLogReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLogReply.Merge(dst, src)
}
func (m *UserLogReply) XXX_Size() int {
	return m.Size()
}
func (m *UserLogReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLogReply.DiscardUnknown(m)
}

var xxx_messageInfo_UserLogReply proto.InternalMessageInfo

func (m *UserLogReply) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UserLogReply) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *UserLogReply) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *UserLogReply) GetLogId() string {
	if m != nil {
		return m.LogId
	}
	return ""
}

func (m *UserLogReply) GetContent() map[string]string {
	if m != nil {
		return m.Content
	}
	return nil
}

type UserLogsReply struct {
	// UserLog的集合
	UserLogs             []*UserLogReply `protobuf:"bytes,1,rep,name=user_logs,json=userLogs" json:"user_logs"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UserLogsReply) Reset()         { *m = UserLogsReply{} }
func (m *UserLogsReply) String() string { return proto.CompactTextString(m) }
func (*UserLogsReply) ProtoMessage()    {}
func (*UserLogsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{7}
}
func (m *UserLogsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLogsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserLogsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserLogsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLogsReply.Merge(dst, src)
}
func (m *UserLogsReply) XXX_Size() int {
	return m.Size()
}
func (m *UserLogsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLogsReply.DiscardUnknown(m)
}

var xxx_messageInfo_UserLogsReply proto.InternalMessageInfo

func (m *UserLogsReply) GetUserLogs() []*UserLogReply {
	if m != nil {
		return m.UserLogs
	}
	return nil
}

type AddExpReq struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// 增量
	Count float64 `protobuf:"fixed64,2,opt,name=count,proto3" json:"count"`
	// 修改原因
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason"`
	// 操作类型
	Operate string `protobuf:"bytes,4,opt,name=operate,proto3" json:"operate"`
	// ip
	Ip                   string   `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddExpReq) Reset()         { *m = AddExpReq{} }
func (m *AddExpReq) String() string { return proto.CompactTextString(m) }
func (*AddExpReq) ProtoMessage()    {}
func (*AddExpReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{8}
}
func (m *AddExpReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddExpReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddExpReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddExpReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddExpReq.Merge(dst, src)
}
func (m *AddExpReq) XXX_Size() int {
	return m.Size()
}
func (m *AddExpReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddExpReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddExpReq proto.InternalMessageInfo

func (m *AddExpReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *AddExpReq) GetCount() float64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *AddExpReq) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *AddExpReq) GetOperate() string {
	if m != nil {
		return m.Operate
	}
	return ""
}

func (m *AddExpReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type ExpStatReply struct {
	// 是否获取过登陆奖励
	Login bool `protobuf:"varint,1,opt,name=login,proto3" json:"login"`
	// 是否获取过看视频的奖励
	Watch bool `protobuf:"varint,2,opt,name=watch,proto3" json:"watch_av"`
	// 是否获得投币奖励
	Coin int64 `protobuf:"varint,3,opt,name=coin,proto3" json:"coins_av"`
	// 是否获得分享过视频的奖励
	Share                bool     `protobuf:"varint,4,opt,name=share,proto3" json:"share_av"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExpStatReply) Reset()         { *m = ExpStatReply{} }
func (m *ExpStatReply) String() string { return proto.CompactTextString(m) }
func (*ExpStatReply) ProtoMessage()    {}
func (*ExpStatReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{9}
}
func (m *ExpStatReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpStatReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpStatReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ExpStatReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpStatReply.Merge(dst, src)
}
func (m *ExpStatReply) XXX_Size() int {
	return m.Size()
}
func (m *ExpStatReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpStatReply.DiscardUnknown(m)
}

var xxx_messageInfo_ExpStatReply proto.InternalMessageInfo

func (m *ExpStatReply) GetLogin() bool {
	if m != nil {
		return m.Login
	}
	return false
}

func (m *ExpStatReply) GetWatch() bool {
	if m != nil {
		return m.Watch
	}
	return false
}

func (m *ExpStatReply) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *ExpStatReply) GetShare() bool {
	if m != nil {
		return m.Share
	}
	return false
}

// member
type BaseInfoReply struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// 性别
	Sex int64 `protobuf:"varint,3,opt,name=sex,proto3" json:"sex"`
	// 头像
	Face string `protobuf:"bytes,4,opt,name=face,proto3" json:"face"`
	// 签名
	Sign string `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign"`
	// 排名
	Rank int64 `protobuf:"varint,6,opt,name=rank,proto3" json:"rank"`
	// 生日
	Birthday             go_common_library_time.Time `protobuf:"varint,7,opt,name=birthday,proto3,casttype=go-common/library/time.Time" json:"birthday"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *BaseInfoReply) Reset()         { *m = BaseInfoReply{} }
func (m *BaseInfoReply) String() string { return proto.CompactTextString(m) }
func (*BaseInfoReply) ProtoMessage()    {}
func (*BaseInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{10}
}
func (m *BaseInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BaseInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseInfoReply.Merge(dst, src)
}
func (m *BaseInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *BaseInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_BaseInfoReply proto.InternalMessageInfo

func (m *BaseInfoReply) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *BaseInfoReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BaseInfoReply) GetSex() int64 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *BaseInfoReply) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *BaseInfoReply) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *BaseInfoReply) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *BaseInfoReply) GetBirthday() go_common_library_time.Time {
	if m != nil {
		return m.Birthday
	}
	return 0
}

type OfficialInfoReply struct {
	// 角色类别
	Role int8 `protobuf:"varint,1,opt,name=role,proto3,casttype=int8" json:"role"`
	// 标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 描述
	Desc                 string   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OfficialInfoReply) Reset()         { *m = OfficialInfoReply{} }
func (m *OfficialInfoReply) String() string { return proto.CompactTextString(m) }
func (*OfficialInfoReply) ProtoMessage()    {}
func (*OfficialInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{11}
}
func (m *OfficialInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OfficialInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OfficialInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OfficialInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfficialInfoReply.Merge(dst, src)
}
func (m *OfficialInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *OfficialInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_OfficialInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_OfficialInfoReply proto.InternalMessageInfo

func (m *OfficialInfoReply) GetRole() int8 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *OfficialInfoReply) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *OfficialInfoReply) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type BaseInfosReply struct {
	// member基本信息集合
	BaseInfos            map[int64]*BaseInfoReply `protobuf:"bytes,1,rep,name=base_infos,json=baseInfos" json:"base_infos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *BaseInfosReply) Reset()         { *m = BaseInfosReply{} }
func (m *BaseInfosReply) String() string { return proto.CompactTextString(m) }
func (*BaseInfosReply) ProtoMessage()    {}
func (*BaseInfosReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{12}
}
func (m *BaseInfosReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseInfosReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseInfosReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BaseInfosReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseInfosReply.Merge(dst, src)
}
func (m *BaseInfosReply) XXX_Size() int {
	return m.Size()
}
func (m *BaseInfosReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseInfosReply.DiscardUnknown(m)
}

var xxx_messageInfo_BaseInfosReply proto.InternalMessageInfo

func (m *BaseInfosReply) GetBaseInfos() map[int64]*BaseInfoReply {
	if m != nil {
		return m.BaseInfos
	}
	return nil
}

type MemberInfoReply struct {
	// 基本信息
	BaseInfo *BaseInfoReply `protobuf:"bytes,1,opt,name=base_info,json=baseInfo" json:"base_info,omitempty"`
	// 等级信息
	LevelInfo *LevelInfoReply `protobuf:"bytes,2,opt,name=level_info,json=levelInfo" json:"level_info,omitempty"`
	// 官方认证信息
	OfficialInfo         *OfficialInfoReply `protobuf:"bytes,3,opt,name=official_info,json=officialInfo" json:"official_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MemberInfoReply) Reset()         { *m = MemberInfoReply{} }
func (m *MemberInfoReply) String() string { return proto.CompactTextString(m) }
func (*MemberInfoReply) ProtoMessage()    {}
func (*MemberInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{13}
}
func (m *MemberInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MemberInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberInfoReply.Merge(dst, src)
}
func (m *MemberInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *MemberInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_MemberInfoReply proto.InternalMessageInfo

func (m *MemberInfoReply) GetBaseInfo() *BaseInfoReply {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

func (m *MemberInfoReply) GetLevelInfo() *LevelInfoReply {
	if m != nil {
		return m.LevelInfo
	}
	return nil
}

func (m *MemberInfoReply) GetOfficialInfo() *OfficialInfoReply {
	if m != nil {
		return m.OfficialInfo
	}
	return nil
}

type MemberInfosReply struct {
	MemberInfos          map[int64]*MemberInfoReply `protobuf:"bytes,1,rep,name=member_infos,json=memberInfos" json:"member_infos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *MemberInfosReply) Reset()         { *m = MemberInfosReply{} }
func (m *MemberInfosReply) String() string { return proto.CompactTextString(m) }
func (*MemberInfosReply) ProtoMessage()    {}
func (*MemberInfosReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{14}
}
func (m *MemberInfosReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberInfosReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberInfosReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MemberInfosReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberInfosReply.Merge(dst, src)
}
func (m *MemberInfosReply) XXX_Size() int {
	return m.Size()
}
func (m *MemberInfosReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberInfosReply.DiscardUnknown(m)
}

var xxx_messageInfo_MemberInfosReply proto.InternalMessageInfo

func (m *MemberInfosReply) GetMemberInfos() map[int64]*MemberInfoReply {
	if m != nil {
		return m.MemberInfos
	}
	return nil
}

type NickUpdatedReply struct {
	// 昵称是否修改过
	NickUpdated          bool     `protobuf:"varint,1,opt,name=nick_updated,json=nickUpdated,proto3" json:"nick_updated"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NickUpdatedReply) Reset()         { *m = NickUpdatedReply{} }
func (m *NickUpdatedReply) String() string { return proto.CompactTextString(m) }
func (*NickUpdatedReply) ProtoMessage()    {}
func (*NickUpdatedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{15}
}
func (m *NickUpdatedReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NickUpdatedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NickUpdatedReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NickUpdatedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NickUpdatedReply.Merge(dst, src)
}
func (m *NickUpdatedReply) XXX_Size() int {
	return m.Size()
}
func (m *NickUpdatedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NickUpdatedReply.DiscardUnknown(m)
}

var xxx_messageInfo_NickUpdatedReply proto.InternalMessageInfo

func (m *NickUpdatedReply) GetNickUpdated() bool {
	if m != nil {
		return m.NickUpdated
	}
	return false
}

type OfficialDocReq struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// 审核状态
	State int8 `protobuf:"varint,3,opt,name=state,proto3,casttype=int8" json:"state"`
	// 角色
	Role int8 `protobuf:"varint,4,opt,name=role,proto3,casttype=int8" json:"role"`
	// 标题
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title"`
	// 描述
	Desc string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc"`
	// 拒绝原因
	RejectReason string `protobuf:"bytes,7,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason"`
	// 真实名字
	Realname int8 `protobuf:"varint,8,opt,name=realname,proto3,casttype=int8" json:"realname"`
	// 操作人
	Operator string `protobuf:"bytes,9,opt,name=operator,proto3" json:"operator"`
	// 电话
	Telephone string `protobuf:"bytes,10,opt,name=telephone,proto3" json:"telephone"`
	// 邮箱
	Email string `protobuf:"bytes,11,opt,name=email,proto3" json:"email"`
	// 地址
	Address string `protobuf:"bytes,12,opt,name=address,proto3" json:"address"`
	// 公司
	Company string `protobuf:"bytes,13,opt,name=company,proto3" json:"company"`
	// 统一信用代码
	CreditCode string `protobuf:"bytes,14,opt,name=credit_code,json=creditCode,proto3" json:"credit_code"`
	// 组织机构
	Organization string `protobuf:"bytes,15,opt,name=organization,proto3" json:"organization"`
	// 组织机构类型
	OrganizationType string `protobuf:"bytes,16,opt,name=organization_type,json=organizationType,proto3" json:"organization_type"`
	// 营业执照
	BusinessLicense string `protobuf:"bytes,17,opt,name=business_license,json=businessLicense,proto3" json:"business_license"`
	// 企业规模
	BusinessScale string `protobuf:"bytes,18,opt,name=business_scale,json=businessScale,proto3" json:"business_scale"`
	// 企业等级
	BusinessLevel string `protobuf:"bytes,19,opt,name=business_level,json=businessLevel,proto3" json:"business_level"`
	// 企业授权函
	BusinessAuth string `protobuf:"bytes,20,opt,name=business_auth,json=businessAuth,proto3" json:"business_auth"`
	// 其他补充资料
	Supplement string `protobuf:"bytes,21,opt,name=supplement,proto3" json:"supplement"`
	// 专业资质
	Professional string `protobuf:"bytes,22,opt,name=professional,proto3" json:"professional"`
	// 身份证明
	Identification string `protobuf:"bytes,23,opt,name=identification,proto3" json:"identification"`
	// 提交来源
	SubmitSource         string   `protobuf:"bytes,24,opt,name=submit_source,json=submitSource,proto3" json:"submit_source"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OfficialDocReq) Reset()         { *m = OfficialDocReq{} }
func (m *OfficialDocReq) String() string { return proto.CompactTextString(m) }
func (*OfficialDocReq) ProtoMessage()    {}
func (*OfficialDocReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{16}
}
func (m *OfficialDocReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OfficialDocReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OfficialDocReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OfficialDocReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfficialDocReq.Merge(dst, src)
}
func (m *OfficialDocReq) XXX_Size() int {
	return m.Size()
}
func (m *OfficialDocReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OfficialDocReq.DiscardUnknown(m)
}

var xxx_messageInfo_OfficialDocReq proto.InternalMessageInfo

func (m *OfficialDocReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *OfficialDocReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OfficialDocReq) GetState() int8 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *OfficialDocReq) GetRole() int8 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *OfficialDocReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *OfficialDocReq) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *OfficialDocReq) GetRejectReason() string {
	if m != nil {
		return m.RejectReason
	}
	return ""
}

func (m *OfficialDocReq) GetRealname() int8 {
	if m != nil {
		return m.Realname
	}
	return 0
}

func (m *OfficialDocReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *OfficialDocReq) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *OfficialDocReq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *OfficialDocReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *OfficialDocReq) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *OfficialDocReq) GetCreditCode() string {
	if m != nil {
		return m.CreditCode
	}
	return ""
}

func (m *OfficialDocReq) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *OfficialDocReq) GetOrganizationType() string {
	if m != nil {
		return m.OrganizationType
	}
	return ""
}

func (m *OfficialDocReq) GetBusinessLicense() string {
	if m != nil {
		return m.BusinessLicense
	}
	return ""
}

func (m *OfficialDocReq) GetBusinessScale() string {
	if m != nil {
		return m.BusinessScale
	}
	return ""
}

func (m *OfficialDocReq) GetBusinessLevel() string {
	if m != nil {
		return m.BusinessLevel
	}
	return ""
}

func (m *OfficialDocReq) GetBusinessAuth() string {
	if m != nil {
		return m.BusinessAuth
	}
	return ""
}

func (m *OfficialDocReq) GetSupplement() string {
	if m != nil {
		return m.Supplement
	}
	return ""
}

func (m *OfficialDocReq) GetProfessional() string {
	if m != nil {
		return m.Professional
	}
	return ""
}

func (m *OfficialDocReq) GetIdentification() string {
	if m != nil {
		return m.Identification
	}
	return ""
}

func (m *OfficialDocReq) GetSubmitSource() string {
	if m != nil {
		return m.SubmitSource
	}
	return ""
}

type UpdateSexReq struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// 性别
	Sex int64 `protobuf:"varint,2,opt,name=sex,proto3" json:"sex"`
	// 远端ip
	Remote_IP            string   `protobuf:"bytes,3,opt,name=remote_IP,json=remoteIP,proto3" json:"remoteIP"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSexReq) Reset()         { *m = UpdateSexReq{} }
func (m *UpdateSexReq) String() string { return proto.CompactTextString(m) }
func (*UpdateSexReq) ProtoMessage()    {}
func (*UpdateSexReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{17}
}
func (m *UpdateSexReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSexReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSexReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateSexReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSexReq.Merge(dst, src)
}
func (m *UpdateSexReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSexReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSexReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSexReq proto.InternalMessageInfo

func (m *UpdateSexReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpdateSexReq) GetSex() int64 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UpdateSexReq) GetRemote_IP() string {
	if m != nil {
		return m.Remote_IP
	}
	return ""
}

type UpdateUnameReq struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// 远端ip
	Remote_IP            string   `protobuf:"bytes,3,opt,name=remote_IP,json=remoteIP,proto3" json:"remoteIP"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateUnameReq) Reset()         { *m = UpdateUnameReq{} }
func (m *UpdateUnameReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUnameReq) ProtoMessage()    {}
func (*UpdateUnameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{18}
}
func (m *UpdateUnameReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUnameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUnameReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateUnameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUnameReq.Merge(dst, src)
}
func (m *UpdateUnameReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUnameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUnameReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUnameReq proto.InternalMessageInfo

func (m *UpdateUnameReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpdateUnameReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateUnameReq) GetRemote_IP() string {
	if m != nil {
		return m.Remote_IP
	}
	return ""
}

type UpdateFaceReq struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// 头像
	Face string `protobuf:"bytes,2,opt,name=face,proto3" json:"face"`
	// 远端ip
	Remote_IP            string   `protobuf:"bytes,3,opt,name=remote_IP,json=remoteIP,proto3" json:"remoteIP"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateFaceReq) Reset()         { *m = UpdateFaceReq{} }
func (m *UpdateFaceReq) String() string { return proto.CompactTextString(m) }
func (*UpdateFaceReq) ProtoMessage()    {}
func (*UpdateFaceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{19}
}
func (m *UpdateFaceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateFaceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateFaceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateFaceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFaceReq.Merge(dst, src)
}
func (m *UpdateFaceReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateFaceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFaceReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFaceReq proto.InternalMessageInfo

func (m *UpdateFaceReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpdateFaceReq) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *UpdateFaceReq) GetRemote_IP() string {
	if m != nil {
		return m.Remote_IP
	}
	return ""
}

type UpdateRankReq struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// 排行
	Rank int64 `protobuf:"varint,2,opt,name=rank,proto3" json:"rank"`
	// 远端ip
	Remote_IP            string   `protobuf:"bytes,3,opt,name=remote_IP,json=remoteIP,proto3" json:"remoteIP"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRankReq) Reset()         { *m = UpdateRankReq{} }
func (m *UpdateRankReq) String() string { return proto.CompactTextString(m) }
func (*UpdateRankReq) ProtoMessage()    {}
func (*UpdateRankReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{20}
}
func (m *UpdateRankReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRankReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRankReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateRankReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRankReq.Merge(dst, src)
}
func (m *UpdateRankReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRankReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRankReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRankReq proto.InternalMessageInfo

func (m *UpdateRankReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpdateRankReq) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *UpdateRankReq) GetRemote_IP() string {
	if m != nil {
		return m.Remote_IP
	}
	return ""
}

type UpdateBirthdayReq struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// 生日
	Birthday go_common_library_time.Time `protobuf:"varint,2,opt,name=birthday,proto3,casttype=go-common/library/time.Time" json:"birthday"`
	// 远端ip
	Remote_IP            string   `protobuf:"bytes,3,opt,name=remote_IP,json=remoteIP,proto3" json:"remoteIP"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBirthdayReq) Reset()         { *m = UpdateBirthdayReq{} }
func (m *UpdateBirthdayReq) String() string { return proto.CompactTextString(m) }
func (*UpdateBirthdayReq) ProtoMessage()    {}
func (*UpdateBirthdayReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{21}
}
func (m *UpdateBirthdayReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBirthdayReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBirthdayReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateBirthdayReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBirthdayReq.Merge(dst, src)
}
func (m *UpdateBirthdayReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBirthdayReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBirthdayReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBirthdayReq proto.InternalMessageInfo

func (m *UpdateBirthdayReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpdateBirthdayReq) GetBirthday() go_common_library_time.Time {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *UpdateBirthdayReq) GetRemote_IP() string {
	if m != nil {
		return m.Remote_IP
	}
	return ""
}

type UpdateSignReq struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// 签名
	Sign string `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign"`
	// 远端ip
	Remote_IP            string   `protobuf:"bytes,3,opt,name=remote_IP,json=remoteIP,proto3" json:"remoteIP"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSignReq) Reset()         { *m = UpdateSignReq{} }
func (m *UpdateSignReq) String() string { return proto.CompactTextString(m) }
func (*UpdateSignReq) ProtoMessage()    {}
func (*UpdateSignReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{22}
}
func (m *UpdateSignReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSignReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSignReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateSignReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSignReq.Merge(dst, src)
}
func (m *UpdateSignReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSignReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSignReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSignReq proto.InternalMessageInfo

func (m *UpdateSignReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpdateSignReq) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *UpdateSignReq) GetRemote_IP() string {
	if m != nil {
		return m.Remote_IP
	}
	return ""
}

type OfficialDocInfoReply struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// 审核状态
	State int32 `protobuf:"varint,3,opt,name=state,proto3" json:"state"`
	// 角色类型
	Role int8 `protobuf:"varint,4,opt,name=role,proto3,casttype=int8" json:"role"`
	// 认证称号
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title"`
	// 认证后缀
	Desc string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc"`
	// 被拒绝原因
	RejectReason string `protobuf:"bytes,7,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason"`
	// 真实姓名
	Realname int8 `protobuf:"varint,8,opt,name=realname,proto3,casttype=int8" json:"realname"`
	// 经营人
	Operator string `protobuf:"bytes,9,opt,name=operator,proto3" json:"operator"`
	// 电话好吗
	Telephone string `protobuf:"bytes,10,opt,name=telephone,proto3" json:"telephone"`
	// 邮箱
	Email string `protobuf:"bytes,11,opt,name=email,proto3" json:"email"`
	// 地址
	Address string `protobuf:"bytes,12,opt,name=address,proto3" json:"address"`
	// 公司
	Company string `protobuf:"bytes,13,opt,name=company,proto3" json:"company"`
	// 社会信用代码
	CreditCode string `protobuf:"bytes,14,opt,name=credit_code,json=creditCode,proto3" json:"credit_code"`
	// 政府或组织机构名称
	Organization string `protobuf:"bytes,15,opt,name=organization,proto3" json:"organization"`
	// 组织或机构类型
	OrganizationType string `protobuf:"bytes,16,opt,name=organization_type,json=organizationType,proto3" json:"organization_type"`
	// 营业执照
	BusinessLicense string `protobuf:"bytes,17,opt,name=business_license,json=businessLicense,proto3" json:"business_license"`
	// 企业规模
	BusinessScale string `protobuf:"bytes,18,opt,name=business_scale,json=businessScale,proto3" json:"business_scale"`
	// 企业等级
	BusinessLevel string `protobuf:"bytes,19,opt,name=business_level,json=businessLevel,proto3" json:"business_level"`
	// 企业授权函
	BusinessAuth string `protobuf:"bytes,20,opt,name=business_auth,json=businessAuth,proto3" json:"business_auth"`
	// 其他补充资料
	Supplement string `protobuf:"bytes,21,opt,name=supplement,proto3" json:"supplement"`
	// 专业资质
	Professional string `protobuf:"bytes,22,opt,name=professional,proto3" json:"professional"`
	// 身份证明
	Identification       string   `protobuf:"bytes,23,opt,name=identification,proto3" json:"identification"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OfficialDocInfoReply) Reset()         { *m = OfficialDocInfoReply{} }
func (m *OfficialDocInfoReply) String() string { return proto.CompactTextString(m) }
func (*OfficialDocInfoReply) ProtoMessage()    {}
func (*OfficialDocInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{23}
}
func (m *OfficialDocInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OfficialDocInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OfficialDocInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OfficialDocInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfficialDocInfoReply.Merge(dst, src)
}
func (m *OfficialDocInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *OfficialDocInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_OfficialDocInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_OfficialDocInfoReply proto.InternalMessageInfo

func (m *OfficialDocInfoReply) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *OfficialDocInfoReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OfficialDocInfoReply) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *OfficialDocInfoReply) GetRole() int8 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *OfficialDocInfoReply) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *OfficialDocInfoReply) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *OfficialDocInfoReply) GetRejectReason() string {
	if m != nil {
		return m.RejectReason
	}
	return ""
}

func (m *OfficialDocInfoReply) GetRealname() int8 {
	if m != nil {
		return m.Realname
	}
	return 0
}

func (m *OfficialDocInfoReply) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *OfficialDocInfoReply) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *OfficialDocInfoReply) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *OfficialDocInfoReply) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *OfficialDocInfoReply) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *OfficialDocInfoReply) GetCreditCode() string {
	if m != nil {
		return m.CreditCode
	}
	return ""
}

func (m *OfficialDocInfoReply) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *OfficialDocInfoReply) GetOrganizationType() string {
	if m != nil {
		return m.OrganizationType
	}
	return ""
}

func (m *OfficialDocInfoReply) GetBusinessLicense() string {
	if m != nil {
		return m.BusinessLicense
	}
	return ""
}

func (m *OfficialDocInfoReply) GetBusinessScale() string {
	if m != nil {
		return m.BusinessScale
	}
	return ""
}

func (m *OfficialDocInfoReply) GetBusinessLevel() string {
	if m != nil {
		return m.BusinessLevel
	}
	return ""
}

func (m *OfficialDocInfoReply) GetBusinessAuth() string {
	if m != nil {
		return m.BusinessAuth
	}
	return ""
}

func (m *OfficialDocInfoReply) GetSupplement() string {
	if m != nil {
		return m.Supplement
	}
	return ""
}

func (m *OfficialDocInfoReply) GetProfessional() string {
	if m != nil {
		return m.Professional
	}
	return ""
}

func (m *OfficialDocInfoReply) GetIdentification() string {
	if m != nil {
		return m.Identification
	}
	return ""
}

// moral
type MoralReply struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// 节操值
	Moral int64 `protobuf:"varint,2,opt,name=moral,proto3" json:"moral"`
	// 增量
	Added int64 `protobuf:"varint,3,opt,name=added,proto3" json:"added"`
	// 减量
	Deducted int64 `protobuf:"varint,4,opt,name=deducted,proto3" json:"deducted"`
	// 上一次节操低于70时的恢复时间
	LastRecoverDate      go_common_library_time.Time `protobuf:"varint,5,opt,name=last_recover_date,json=lastRecoverDate,proto3,casttype=go-common/library/time.Time" json:"last_recover_date"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *MoralReply) Reset()         { *m = MoralReply{} }
func (m *MoralReply) String() string { return proto.CompactTextString(m) }
func (*MoralReply) ProtoMessage()    {}
func (*MoralReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{24}
}
func (m *MoralReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoralReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoralReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MoralReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoralReply.Merge(dst, src)
}
func (m *MoralReply) XXX_Size() int {
	return m.Size()
}
func (m *MoralReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MoralReply.DiscardUnknown(m)
}

var xxx_messageInfo_MoralReply proto.InternalMessageInfo

func (m *MoralReply) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *MoralReply) GetMoral() int64 {
	if m != nil {
		return m.Moral
	}
	return 0
}

func (m *MoralReply) GetAdded() int64 {
	if m != nil {
		return m.Added
	}
	return 0
}

func (m *MoralReply) GetDeducted() int64 {
	if m != nil {
		return m.Deducted
	}
	return 0
}

func (m *MoralReply) GetLastRecoverDate() go_common_library_time.Time {
	if m != nil {
		return m.LastRecoverDate
	}
	return 0
}

type UpdateMoralReq struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// 增量
	Delta int64 `protobuf:"varint,2,opt,name=delta,proto3" json:"delta"`
	// 类型
	Origin int64 `protobuf:"varint,3,opt,name=origin,proto3" json:"origin"`
	// 操作原因
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason"`
	// 操纵原因类型
	ReasonType int64 `protobuf:"varint,5,opt,name=reason_type,json=reasonType,proto3" json:"reason_type"`
	// 操作人
	Operator string `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator"`
	// 备注
	Remark string `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark"`
	// 状态
	Status int64 `protobuf:"varint,8,opt,name=status,proto3" json:"status"`
	// 是否通知
	IsNotify bool `protobuf:"varint,9,opt,name=is_notify,json=isNotify,proto3" json:"is_notify"`
	// ip地址
	Ip                   string   `protobuf:"bytes,10,opt,name=ip,proto3" json:"ip"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMoralReq) Reset()         { *m = UpdateMoralReq{} }
func (m *UpdateMoralReq) String() string { return proto.CompactTextString(m) }
func (*UpdateMoralReq) ProtoMessage()    {}
func (*UpdateMoralReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{25}
}
func (m *UpdateMoralReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMoralReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMoralReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateMoralReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMoralReq.Merge(dst, src)
}
func (m *UpdateMoralReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMoralReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMoralReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMoralReq proto.InternalMessageInfo

func (m *UpdateMoralReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpdateMoralReq) GetDelta() int64 {
	if m != nil {
		return m.Delta
	}
	return 0
}

func (m *UpdateMoralReq) GetOrigin() int64 {
	if m != nil {
		return m.Origin
	}
	return 0
}

func (m *UpdateMoralReq) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *UpdateMoralReq) GetReasonType() int64 {
	if m != nil {
		return m.ReasonType
	}
	return 0
}

func (m *UpdateMoralReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *UpdateMoralReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *UpdateMoralReq) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UpdateMoralReq) GetIsNotify() bool {
	if m != nil {
		return m.IsNotify
	}
	return false
}

func (m *UpdateMoralReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type UpdateMoralsReq struct {
	// mid 列表
	Mids []int64 `protobuf:"varint,1,rep,packed,name=mids" json:"mid"`
	// 增量
	Delta int64 `protobuf:"varint,2,opt,name=delta,proto3" json:"delta"`
	// 类型
	Origin int64 `protobuf:"varint,3,opt,name=origin,proto3" json:"origin"`
	// 操作原因
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason"`
	// 操纵原因类型
	ReasonType int64 `protobuf:"varint,5,opt,name=reason_type,json=reasonType,proto3" json:"reason_type"`
	// 操作人
	Operator string `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator"`
	// 备注
	Remark string `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark"`
	// 状态
	Status int64 `protobuf:"varint,8,opt,name=status,proto3" json:"status"`
	// 是否通知
	IsNotify bool `protobuf:"varint,9,opt,name=is_notify,json=isNotify,proto3" json:"is_notify"`
	// ip
	Ip                   string   `protobuf:"bytes,10,opt,name=ip,proto3" json:"ip"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMoralsReq) Reset()         { *m = UpdateMoralsReq{} }
func (m *UpdateMoralsReq) String() string { return proto.CompactTextString(m) }
func (*UpdateMoralsReq) ProtoMessage()    {}
func (*UpdateMoralsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{26}
}
func (m *UpdateMoralsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMoralsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMoralsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateMoralsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMoralsReq.Merge(dst, src)
}
func (m *UpdateMoralsReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMoralsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMoralsReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMoralsReq proto.InternalMessageInfo

func (m *UpdateMoralsReq) GetMids() []int64 {
	if m != nil {
		return m.Mids
	}
	return nil
}

func (m *UpdateMoralsReq) GetDelta() int64 {
	if m != nil {
		return m.Delta
	}
	return 0
}

func (m *UpdateMoralsReq) GetOrigin() int64 {
	if m != nil {
		return m.Origin
	}
	return 0
}

func (m *UpdateMoralsReq) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *UpdateMoralsReq) GetReasonType() int64 {
	if m != nil {
		return m.ReasonType
	}
	return 0
}

func (m *UpdateMoralsReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *UpdateMoralsReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *UpdateMoralsReq) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UpdateMoralsReq) GetIsNotify() bool {
	if m != nil {
		return m.IsNotify
	}
	return false
}

func (m *UpdateMoralsReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type UpdateMoralsReply struct {
	// 批量更新后节操值
	AfterMorals          map[int64]int64 `protobuf:"bytes,1,rep,name=after_morals,json=afterMorals" json:"after_morals" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdateMoralsReply) Reset()         { *m = UpdateMoralsReply{} }
func (m *UpdateMoralsReply) String() string { return proto.CompactTextString(m) }
func (*UpdateMoralsReply) ProtoMessage()    {}
func (*UpdateMoralsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{27}
}
func (m *UpdateMoralsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMoralsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMoralsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateMoralsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMoralsReply.Merge(dst, src)
}
func (m *UpdateMoralsReply) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMoralsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMoralsReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMoralsReply proto.InternalMessageInfo

func (m *UpdateMoralsReply) GetAfterMorals() map[int64]int64 {
	if m != nil {
		return m.AfterMorals
	}
	return nil
}

// property_review
type AddUserMonitorReq struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// 操作人
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator"`
	// 备注
	Remark               string   `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddUserMonitorReq) Reset()         { *m = AddUserMonitorReq{} }
func (m *AddUserMonitorReq) String() string { return proto.CompactTextString(m) }
func (*AddUserMonitorReq) ProtoMessage()    {}
func (*AddUserMonitorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{28}
}
func (m *AddUserMonitorReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddUserMonitorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddUserMonitorReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddUserMonitorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddUserMonitorReq.Merge(dst, src)
}
func (m *AddUserMonitorReq) XXX_Size() int {
	return m.Size()
}
func (m *AddUserMonitorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddUserMonitorReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddUserMonitorReq proto.InternalMessageInfo

func (m *AddUserMonitorReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *AddUserMonitorReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *AddUserMonitorReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

type IsInMonitorReply struct {
	// member是否处在受监控列表中
	IsInMonitor          bool     `protobuf:"varint,1,opt,name=is_in_monitor,json=isInMonitor,proto3" json:"is_in_monitor"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsInMonitorReply) Reset()         { *m = IsInMonitorReply{} }
func (m *IsInMonitorReply) String() string { return proto.CompactTextString(m) }
func (*IsInMonitorReply) ProtoMessage()    {}
func (*IsInMonitorReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{29}
}
func (m *IsInMonitorReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsInMonitorReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsInMonitorReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IsInMonitorReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsInMonitorReply.Merge(dst, src)
}
func (m *IsInMonitorReply) XXX_Size() int {
	return m.Size()
}
func (m *IsInMonitorReply) XXX_DiscardUnknown() {
	xxx_messageInfo_IsInMonitorReply.DiscardUnknown(m)
}

var xxx_messageInfo_IsInMonitorReply proto.InternalMessageInfo

func (m *IsInMonitorReply) GetIsInMonitor() bool {
	if m != nil {
		return m.IsInMonitor
	}
	return false
}

// realname
type RealnameStatusReply struct {
	// 实名认证状态
	RealnameStatus       int8     `protobuf:"varint,1,opt,name=realname_status,json=realnameStatus,proto3,casttype=int8" json:"realname_status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RealnameStatusReply) Reset()         { *m = RealnameStatusReply{} }
func (m *RealnameStatusReply) String() string { return proto.CompactTextString(m) }
func (*RealnameStatusReply) ProtoMessage()    {}
func (*RealnameStatusReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{30}
}
func (m *RealnameStatusReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RealnameStatusReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RealnameStatusReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RealnameStatusReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RealnameStatusReply.Merge(dst, src)
}
func (m *RealnameStatusReply) XXX_Size() int {
	return m.Size()
}
func (m *RealnameStatusReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RealnameStatusReply.DiscardUnknown(m)
}

var xxx_messageInfo_RealnameStatusReply proto.InternalMessageInfo

func (m *RealnameStatusReply) GetRealnameStatus() int8 {
	if m != nil {
		return m.RealnameStatus
	}
	return 0
}

type RealnameApplyInfoReply struct {
	// 认证流程状态
	Status int8 `protobuf:"varint,1,opt,name=status,proto3,casttype=int8" json:"status"`
	// 备注
	Remark               string   `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RealnameApplyInfoReply) Reset()         { *m = RealnameApplyInfoReply{} }
func (m *RealnameApplyInfoReply) String() string { return proto.CompactTextString(m) }
func (*RealnameApplyInfoReply) ProtoMessage()    {}
func (*RealnameApplyInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{31}
}
func (m *RealnameApplyInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RealnameApplyInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RealnameApplyInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RealnameApplyInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RealnameApplyInfoReply.Merge(dst, src)
}
func (m *RealnameApplyInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *RealnameApplyInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RealnameApplyInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_RealnameApplyInfoReply proto.InternalMessageInfo

func (m *RealnameApplyInfoReply) GetStatus() int8 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RealnameApplyInfoReply) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

type ArgRealnameApplyReq struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// 验证码
	CaptureCode int64 `protobuf:"varint,2,opt,name=capture_code,json=captureCode,proto3" json:"capture_code"`
	// 真实的名字
	Realname string `protobuf:"bytes,3,opt,name=realname,proto3" json:"realname"`
	// 证件类型
	CardType int8 `protobuf:"varint,4,opt,name=card_type,json=cardType,proto3,casttype=int8" json:"card_type"`
	// 证件码
	CardCode string `protobuf:"bytes,5,opt,name=card_code,json=cardCode,proto3" json:"card_code"`
	// 国家
	Country int16 `protobuf:"varint,6,opt,name=country,proto3,casttype=int16" json:"country"`
	// 手持照的路径
	HandIMGToken string `protobuf:"bytes,7,opt,name=handIMG_token,json=handIMGToken,proto3" json:"handIMG_token,omitempty"`
	// 证件照的前面
	FrontIMGToken string `protobuf:"bytes,8,opt,name=frontIMG_token,json=frontIMGToken,proto3" json:"frontIMG_token,omitempty"`
	// 证件照的后面
	BackIMGToken         string   `protobuf:"bytes,9,opt,name=backIMG_token,json=backIMGToken,proto3" json:"backIMG_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArgRealnameApplyReq) Reset()         { *m = ArgRealnameApplyReq{} }
func (m *ArgRealnameApplyReq) String() string { return proto.CompactTextString(m) }
func (*ArgRealnameApplyReq) ProtoMessage()    {}
func (*ArgRealnameApplyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{32}
}
func (m *ArgRealnameApplyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgRealnameApplyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArgRealnameApplyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ArgRealnameApplyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgRealnameApplyReq.Merge(dst, src)
}
func (m *ArgRealnameApplyReq) XXX_Size() int {
	return m.Size()
}
func (m *ArgRealnameApplyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgRealnameApplyReq.DiscardUnknown(m)
}

var xxx_messageInfo_ArgRealnameApplyReq proto.InternalMessageInfo

func (m *ArgRealnameApplyReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ArgRealnameApplyReq) GetCaptureCode() int64 {
	if m != nil {
		return m.CaptureCode
	}
	return 0
}

func (m *ArgRealnameApplyReq) GetRealname() string {
	if m != nil {
		return m.Realname
	}
	return ""
}

func (m *ArgRealnameApplyReq) GetCardType() int8 {
	if m != nil {
		return m.CardType
	}
	return 0
}

func (m *ArgRealnameApplyReq) GetCardCode() string {
	if m != nil {
		return m.CardCode
	}
	return ""
}

func (m *ArgRealnameApplyReq) GetCountry() int16 {
	if m != nil {
		return m.Country
	}
	return 0
}

func (m *ArgRealnameApplyReq) GetHandIMGToken() string {
	if m != nil {
		return m.HandIMGToken
	}
	return ""
}

func (m *ArgRealnameApplyReq) GetFrontIMGToken() string {
	if m != nil {
		return m.FrontIMGToken
	}
	return ""
}

func (m *ArgRealnameApplyReq) GetBackIMGToken() string {
	if m != nil {
		return m.BackIMGToken
	}
	return ""
}

type RealnameDetailReply struct {
	// 实名姓名
	Realname string `protobuf:"bytes,1,opt,name=realname,proto3" json:"realname"`
	// 证件码
	Card string `protobuf:"bytes,2,opt,name=card,proto3" json:"card"`
	// 证件类型
	CardType int8 `protobuf:"varint,3,opt,name=card_type,json=cardType,proto3,casttype=int8" json:"card_type"`
	// 实名状态
	Status int8 `protobuf:"varint,4,opt,name=status,proto3,casttype=int8" json:"status"`
	// 性别
	Gender string `protobuf:"bytes,5,opt,name=gender,proto3" json:"gender"`
	// 手持照IMG User
	HandImg              string   `protobuf:"bytes,6,opt,name=hand_img,json=handImg,proto3" json:"hand_img"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RealnameDetailReply) Reset()         { *m = RealnameDetailReply{} }
func (m *RealnameDetailReply) String() string { return proto.CompactTextString(m) }
func (*RealnameDetailReply) ProtoMessage()    {}
func (*RealnameDetailReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{33}
}
func (m *RealnameDetailReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RealnameDetailReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RealnameDetailReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RealnameDetailReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RealnameDetailReply.Merge(dst, src)
}
func (m *RealnameDetailReply) XXX_Size() int {
	return m.Size()
}
func (m *RealnameDetailReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RealnameDetailReply.DiscardUnknown(m)
}

var xxx_messageInfo_RealnameDetailReply proto.InternalMessageInfo

func (m *RealnameDetailReply) GetRealname() string {
	if m != nil {
		return m.Realname
	}
	return ""
}

func (m *RealnameDetailReply) GetCard() string {
	if m != nil {
		return m.Card
	}
	return ""
}

func (m *RealnameDetailReply) GetCardType() int8 {
	if m != nil {
		return m.CardType
	}
	return 0
}

func (m *RealnameDetailReply) GetStatus() int8 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RealnameDetailReply) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *RealnameDetailReply) GetHandImg() string {
	if m != nil {
		return m.HandImg
	}
	return ""
}

type RealnameStrippedInfoReply struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	Status               int8     `protobuf:"varint,2,opt,name=status,proto3,casttype=int8" json:"status"`
	Channel              int8     `protobuf:"varint,3,opt,name=channel,proto3,casttype=int8" json:"channel"`
	Country              int16    `protobuf:"varint,4,opt,name=country,proto3,casttype=int16" json:"country"`
	CardType             int8     `protobuf:"varint,5,opt,name=card_type,json=cardType,proto3,casttype=int8" json:"card_type"`
	AdultType            int8     `protobuf:"varint,6,opt,name=adult_type,json=adultType,proto3,casttype=int8" json:"adult_type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RealnameStrippedInfoReply) Reset()         { *m = RealnameStrippedInfoReply{} }
func (m *RealnameStrippedInfoReply) String() string { return proto.CompactTextString(m) }
func (*RealnameStrippedInfoReply) ProtoMessage()    {}
func (*RealnameStrippedInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{34}
}
func (m *RealnameStrippedInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RealnameStrippedInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RealnameStrippedInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RealnameStrippedInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RealnameStrippedInfoReply.Merge(dst, src)
}
func (m *RealnameStrippedInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *RealnameStrippedInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RealnameStrippedInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_RealnameStrippedInfoReply proto.InternalMessageInfo

func (m *RealnameStrippedInfoReply) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *RealnameStrippedInfoReply) GetStatus() int8 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RealnameStrippedInfoReply) GetChannel() int8 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *RealnameStrippedInfoReply) GetCountry() int16 {
	if m != nil {
		return m.Country
	}
	return 0
}

func (m *RealnameStrippedInfoReply) GetCardType() int8 {
	if m != nil {
		return m.CardType
	}
	return 0
}

func (m *RealnameStrippedInfoReply) GetAdultType() int8 {
	if m != nil {
		return m.AdultType
	}
	return 0
}

type MidByRealnameCardReply struct {
	CodeToMid            map[string]int64 `protobuf:"bytes,5,rep,name=code_to_mid,json=codeToMid" json:"code_to_mid" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MidByRealnameCardReply) Reset()         { *m = MidByRealnameCardReply{} }
func (m *MidByRealnameCardReply) String() string { return proto.CompactTextString(m) }
func (*MidByRealnameCardReply) ProtoMessage()    {}
func (*MidByRealnameCardReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{35}
}
func (m *MidByRealnameCardReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MidByRealnameCardReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MidByRealnameCardReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MidByRealnameCardReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MidByRealnameCardReply.Merge(dst, src)
}
func (m *MidByRealnameCardReply) XXX_Size() int {
	return m.Size()
}
func (m *MidByRealnameCardReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MidByRealnameCardReply.DiscardUnknown(m)
}

var xxx_messageInfo_MidByRealnameCardReply proto.InternalMessageInfo

func (m *MidByRealnameCardReply) GetCodeToMid() map[string]int64 {
	if m != nil {
		return m.CodeToMid
	}
	return nil
}

type BlockInfoReply struct {
	MID                  int64    `protobuf:"varint,1,opt,name=MID,proto3" json:"mid"`
	BlockStatus          int32    `protobuf:"varint,2,opt,name=BlockStatus,proto3" json:"status"`
	StartTime            int64    `protobuf:"varint,3,opt,name=StartTime,proto3" json:"start_time"`
	EndTime              int64    `protobuf:"varint,4,opt,name=EndTime,proto3" json:"end_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockInfoReply) Reset()         { *m = BlockInfoReply{} }
func (m *BlockInfoReply) String() string { return proto.CompactTextString(m) }
func (*BlockInfoReply) ProtoMessage()    {}
func (*BlockInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{36}
}
func (m *BlockInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockInfoReply.Merge(dst, src)
}
func (m *BlockInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *BlockInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_BlockInfoReply proto.InternalMessageInfo

func (m *BlockInfoReply) GetMID() int64 {
	if m != nil {
		return m.MID
	}
	return 0
}

func (m *BlockInfoReply) GetBlockStatus() int32 {
	if m != nil {
		return m.BlockStatus
	}
	return 0
}

func (m *BlockInfoReply) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *BlockInfoReply) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type BlockDetailReply struct {
	MID                  int64    `protobuf:"varint,1,opt,name=MID,proto3" json:"mid"`
	BlockCount           int64    `protobuf:"varint,2,opt,name=BlockCount,proto3" json:"block_count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockDetailReply) Reset()         { *m = BlockDetailReply{} }
func (m *BlockDetailReply) String() string { return proto.CompactTextString(m) }
func (*BlockDetailReply) ProtoMessage()    {}
func (*BlockDetailReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{37}
}
func (m *BlockDetailReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockDetailReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockDetailReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockDetailReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockDetailReply.Merge(dst, src)
}
func (m *BlockDetailReply) XXX_Size() int {
	return m.Size()
}
func (m *BlockDetailReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockDetailReply.DiscardUnknown(m)
}

var xxx_messageInfo_BlockDetailReply proto.InternalMessageInfo

func (m *BlockDetailReply) GetMID() int64 {
	if m != nil {
		return m.MID
	}
	return 0
}

func (m *BlockDetailReply) GetBlockCount() int64 {
	if m != nil {
		return m.BlockCount
	}
	return 0
}

type BlockBatchDetailReply struct {
	BlockDetails         map[int64]*BlockDetailReply `protobuf:"bytes,1,rep,name=BlockDetails" json:"block_details" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *BlockBatchDetailReply) Reset()         { *m = BlockBatchDetailReply{} }
func (m *BlockBatchDetailReply) String() string { return proto.CompactTextString(m) }
func (*BlockBatchDetailReply) ProtoMessage()    {}
func (*BlockBatchDetailReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{38}
}
func (m *BlockBatchDetailReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockBatchDetailReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockBatchDetailReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockBatchDetailReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockBatchDetailReply.Merge(dst, src)
}
func (m *BlockBatchDetailReply) XXX_Size() int {
	return m.Size()
}
func (m *BlockBatchDetailReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockBatchDetailReply.DiscardUnknown(m)
}

var xxx_messageInfo_BlockBatchDetailReply proto.InternalMessageInfo

func (m *BlockBatchDetailReply) GetBlockDetails() map[int64]*BlockDetailReply {
	if m != nil {
		return m.BlockDetails
	}
	return nil
}

type BlockBatchInfoReply struct {
	BlockInfos           []*BlockInfoReply `protobuf:"bytes,1,rep,name=BlockInfos" json:"block_infos"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BlockBatchInfoReply) Reset()         { *m = BlockBatchInfoReply{} }
func (m *BlockBatchInfoReply) String() string { return proto.CompactTextString(m) }
func (*BlockBatchInfoReply) ProtoMessage()    {}
func (*BlockBatchInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_572d358ff91238b1, []int{39}
}
func (m *BlockBatchInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockBatchInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockBatchInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockBatchInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockBatchInfoReply.Merge(dst, src)
}
func (m *BlockBatchInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *BlockBatchInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockBatchInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_BlockBatchInfoReply proto.InternalMessageInfo

func (m *BlockBatchInfoReply) GetBlockInfos() []*BlockInfoReply {
	if m != nil {
		return m.BlockInfos
	}
	return nil
}

func init() {
	proto.RegisterType((*MidReq)(nil), "account.service.member.v1.MidReq")
	proto.RegisterType((*MemberMidReq)(nil), "account.service.member.v1.MemberMidReq")
	proto.RegisterType((*MemberMidsReq)(nil), "account.service.member.v1.MemberMidsReq")
	proto.RegisterType((*MidByRealnameCardsReq)(nil), "account.service.member.v1.MidByRealnameCardsReq")
	proto.RegisterType((*EmptyStruct)(nil), "account.service.member.v1.EmptyStruct")
	proto.RegisterType((*LevelInfoReply)(nil), "account.service.member.v1.LevelInfoReply")
	proto.RegisterType((*UserLogReply)(nil), "account.service.member.v1.UserLogReply")
	proto.RegisterMapType((map[string]string)(nil), "account.service.member.v1.UserLogReply.ContentEntry")
	proto.RegisterType((*UserLogsReply)(nil), "account.service.member.v1.UserLogsReply")
	proto.RegisterType((*AddExpReq)(nil), "account.service.member.v1.AddExpReq")
	proto.RegisterType((*ExpStatReply)(nil), "account.service.member.v1.ExpStatReply")
	proto.RegisterType((*BaseInfoReply)(nil), "account.service.member.v1.BaseInfoReply")
	proto.RegisterType((*OfficialInfoReply)(nil), "account.service.member.v1.OfficialInfoReply")
	proto.RegisterType((*BaseInfosReply)(nil), "account.service.member.v1.BaseInfosReply")
	proto.RegisterMapType((map[int64]*BaseInfoReply)(nil), "account.service.member.v1.BaseInfosReply.BaseInfosEntry")
	proto.RegisterType((*MemberInfoReply)(nil), "account.service.member.v1.MemberInfoReply")
	proto.RegisterType((*MemberInfosReply)(nil), "account.service.member.v1.MemberInfosReply")
	proto.RegisterMapType((map[int64]*MemberInfoReply)(nil), "account.service.member.v1.MemberInfosReply.MemberInfosEntry")
	proto.RegisterType((*NickUpdatedReply)(nil), "account.service.member.v1.NickUpdatedReply")
	proto.RegisterType((*OfficialDocReq)(nil), "account.service.member.v1.OfficialDocReq")
	proto.RegisterType((*UpdateSexReq)(nil), "account.service.member.v1.UpdateSexReq")
	proto.RegisterType((*UpdateUnameReq)(nil), "account.service.member.v1.UpdateUnameReq")
	proto.RegisterType((*UpdateFaceReq)(nil), "account.service.member.v1.UpdateFaceReq")
	proto.RegisterType((*UpdateRankReq)(nil), "account.service.member.v1.UpdateRankReq")
	proto.RegisterType((*UpdateBirthdayReq)(nil), "account.service.member.v1.UpdateBirthdayReq")
	proto.RegisterType((*UpdateSignReq)(nil), "account.service.member.v1.UpdateSignReq")
	proto.RegisterType((*OfficialDocInfoReply)(nil), "account.service.member.v1.OfficialDocInfoReply")
	proto.RegisterType((*MoralReply)(nil), "account.service.member.v1.MoralReply")
	proto.RegisterType((*UpdateMoralReq)(nil), "account.service.member.v1.UpdateMoralReq")
	proto.RegisterType((*UpdateMoralsReq)(nil), "account.service.member.v1.UpdateMoralsReq")
	proto.RegisterType((*UpdateMoralsReply)(nil), "account.service.member.v1.UpdateMoralsReply")
	proto.RegisterMapType((map[int64]int64)(nil), "account.service.member.v1.UpdateMoralsReply.AfterMoralsEntry")
	proto.RegisterType((*AddUserMonitorReq)(nil), "account.service.member.v1.AddUserMonitorReq")
	proto.RegisterType((*IsInMonitorReply)(nil), "account.service.member.v1.IsInMonitorReply")
	proto.RegisterType((*RealnameStatusReply)(nil), "account.service.member.v1.RealnameStatusReply")
	proto.RegisterType((*RealnameApplyInfoReply)(nil), "account.service.member.v1.RealnameApplyInfoReply")
	proto.RegisterType((*ArgRealnameApplyReq)(nil), "account.service.member.v1.ArgRealnameApplyReq")
	proto.RegisterType((*RealnameDetailReply)(nil), "account.service.member.v1.RealnameDetailReply")
	proto.RegisterType((*RealnameStrippedInfoReply)(nil), "account.service.member.v1.RealnameStrippedInfoReply")
	proto.RegisterType((*MidByRealnameCardReply)(nil), "account.service.member.v1.MidByRealnameCardReply")
	proto.RegisterMapType((map[string]int64)(nil), "account.service.member.v1.MidByRealnameCardReply.CodeToMidEntry")
	proto.RegisterType((*BlockInfoReply)(nil), "account.service.member.v1.BlockInfoReply")
	proto.RegisterType((*BlockDetailReply)(nil), "account.service.member.v1.BlockDetailReply")
	proto.RegisterType((*BlockBatchDetailReply)(nil), "account.service.member.v1.BlockBatchDetailReply")
	proto.RegisterMapType((map[int64]*BlockDetailReply)(nil), "account.service.member.v1.BlockBatchDetailReply.BlockDetailsEntry")
	proto.RegisterType((*BlockBatchInfoReply)(nil), "account.service.member.v1.BlockBatchInfoReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MemberClient is the client API for Member service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MemberClient interface {
	// 得到member的基本信息
	Base(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*BaseInfoReply, error)
	// 批量得到一批member的基本信息
	Bases(ctx context.Context, in *MemberMidsReq, opts ...grpc.CallOption) (*BaseInfosReply, error)
	// 得到member的全量信息
	Member(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*MemberInfoReply, error)
	// 批量得到一批member的全量信息
	Members(ctx context.Context, in *MemberMidsReq, opts ...grpc.CallOption) (*MemberInfosReply, error)
	// 查看member是否更新过昵称
	NickUpdated(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*NickUpdatedReply, error)
	// 标记member已经更新过昵称
	SetNickUpdated(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	// 设置官方文档资料
	SetOfficialDoc(ctx context.Context, in *OfficialDocReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	// 设置member的性别
	SetSex(ctx context.Context, in *UpdateSexReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	// 设置member的名字
	SetName(ctx context.Context, in *UpdateUnameReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	// 设置member的头像
	SetFace(ctx context.Context, in *UpdateFaceReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	// 设置member的头像
	SetRank(ctx context.Context, in *UpdateRankReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	// 设置member的生日
	SetBirthday(ctx context.Context, in *UpdateBirthdayReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	// 设置member的签名
	SetSign(ctx context.Context, in *UpdateSignReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	// 得到member的官方信息
	OfficialDoc(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*OfficialDocInfoReply, error)
	// 得到member的节操值
	Moral(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*MoralReply, error)
	// 得到member的节操日志
	MoralLog(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*UserLogsReply, error)
	// 给member添加节操值
	AddMoral(ctx context.Context, in *UpdateMoralReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	// 给一批member批量添加节操值
	BatchAddMoral(ctx context.Context, in *UpdateMoralsReq, opts ...grpc.CallOption) (*UpdateMoralsReply, error)
	// 得到member的经验值
	Exp(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*LevelInfoReply, error)
	// 得到member的等级
	Level(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*LevelInfoReply, error)
	// 更新member的经验值
	UpdateExp(ctx context.Context, in *AddExpReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	// 得到membe的经验日志
	ExpLog(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*UserLogsReply, error)
	// 得到member的经验统计
	ExpStat(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*ExpStatReply, error)
	// 得到member的实名认证状态
	RealnameStatus(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*RealnameStatusReply, error)
	// 得到member 实名认证流程的状态
	RealnameApplyStatus(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*RealnameApplyInfoReply, error)
	// 手机号实名认证发送验证码
	RealnameTelCapture(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	// 进行实名认证
	RealnameApply(ctx context.Context, in *ArgRealnameApplyReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	// 实名详情
	RealnameDetail(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*RealnameDetailReply, error)
	// 所有非敏感实名认证信息
	RealnameStrippedInfo(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*RealnameStrippedInfoReply, error)
	// 通过身份证号查询 mid
	MidByRealnameCard(ctx context.Context, in *MidByRealnameCardsReq, opts ...grpc.CallOption) (*MidByRealnameCardReply, error)
	// 添加用户为受监控
	AddUserMonitor(ctx context.Context, in *AddUserMonitorReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	// 查看member是否在监控状态
	IsInMonitor(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*IsInMonitorReply, error)
	// block
	// 获取用户封禁信息数据
	BlockInfo(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*BlockInfoReply, error)
	// 批量获取用户封禁信息数据
	BlockBatchInfo(ctx context.Context, in *MemberMidsReq, opts ...grpc.CallOption) (*BlockBatchInfoReply, error)
	// 批量获取用户封禁详细数据
	BlockBatchDetail(ctx context.Context, in *MemberMidsReq, opts ...grpc.CallOption) (*BlockBatchDetailReply, error)
}

type memberClient struct {
	cc *grpc.ClientConn
}

func NewMemberClient(cc *grpc.ClientConn) MemberClient {
	return &memberClient{cc}
}

func (c *memberClient) Base(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*BaseInfoReply, error) {
	out := new(BaseInfoReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/Base", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) Bases(ctx context.Context, in *MemberMidsReq, opts ...grpc.CallOption) (*BaseInfosReply, error) {
	out := new(BaseInfosReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/Bases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) Member(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*MemberInfoReply, error) {
	out := new(MemberInfoReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/Member", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) Members(ctx context.Context, in *MemberMidsReq, opts ...grpc.CallOption) (*MemberInfosReply, error) {
	out := new(MemberInfosReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/Members", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) NickUpdated(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*NickUpdatedReply, error) {
	out := new(NickUpdatedReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/NickUpdated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) SetNickUpdated(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/SetNickUpdated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) SetOfficialDoc(ctx context.Context, in *OfficialDocReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/SetOfficialDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) SetSex(ctx context.Context, in *UpdateSexReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/SetSex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) SetName(ctx context.Context, in *UpdateUnameReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/SetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) SetFace(ctx context.Context, in *UpdateFaceReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/SetFace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) SetRank(ctx context.Context, in *UpdateRankReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/SetRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) SetBirthday(ctx context.Context, in *UpdateBirthdayReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/SetBirthday", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) SetSign(ctx context.Context, in *UpdateSignReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/SetSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) OfficialDoc(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*OfficialDocInfoReply, error) {
	out := new(OfficialDocInfoReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/OfficialDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) Moral(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*MoralReply, error) {
	out := new(MoralReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/Moral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) MoralLog(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*UserLogsReply, error) {
	out := new(UserLogsReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/MoralLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) AddMoral(ctx context.Context, in *UpdateMoralReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/AddMoral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) BatchAddMoral(ctx context.Context, in *UpdateMoralsReq, opts ...grpc.CallOption) (*UpdateMoralsReply, error) {
	out := new(UpdateMoralsReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/BatchAddMoral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) Exp(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*LevelInfoReply, error) {
	out := new(LevelInfoReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/Exp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) Level(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*LevelInfoReply, error) {
	out := new(LevelInfoReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/Level", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) UpdateExp(ctx context.Context, in *AddExpReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/UpdateExp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) ExpLog(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*UserLogsReply, error) {
	out := new(UserLogsReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/ExpLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) ExpStat(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*ExpStatReply, error) {
	out := new(ExpStatReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/ExpStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) RealnameStatus(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*RealnameStatusReply, error) {
	out := new(RealnameStatusReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/RealnameStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) RealnameApplyStatus(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*RealnameApplyInfoReply, error) {
	out := new(RealnameApplyInfoReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/RealnameApplyStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) RealnameTelCapture(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/RealnameTelCapture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) RealnameApply(ctx context.Context, in *ArgRealnameApplyReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/RealnameApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) RealnameDetail(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*RealnameDetailReply, error) {
	out := new(RealnameDetailReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/RealnameDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) RealnameStrippedInfo(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*RealnameStrippedInfoReply, error) {
	out := new(RealnameStrippedInfoReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/RealnameStrippedInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) MidByRealnameCard(ctx context.Context, in *MidByRealnameCardsReq, opts ...grpc.CallOption) (*MidByRealnameCardReply, error) {
	out := new(MidByRealnameCardReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/MidByRealnameCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) AddUserMonitor(ctx context.Context, in *AddUserMonitorReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/AddUserMonitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) IsInMonitor(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*IsInMonitorReply, error) {
	out := new(IsInMonitorReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/IsInMonitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) BlockInfo(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*BlockInfoReply, error) {
	out := new(BlockInfoReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/BlockInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) BlockBatchInfo(ctx context.Context, in *MemberMidsReq, opts ...grpc.CallOption) (*BlockBatchInfoReply, error) {
	out := new(BlockBatchInfoReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/BlockBatchInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) BlockBatchDetail(ctx context.Context, in *MemberMidsReq, opts ...grpc.CallOption) (*BlockBatchDetailReply, error) {
	out := new(BlockBatchDetailReply)
	err := c.cc.Invoke(ctx, "/account.service.member.v1.Member/BlockBatchDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServer is the server API for Member service.
type MemberServer interface {
	// 得到member的基本信息
	Base(context.Context, *MemberMidReq) (*BaseInfoReply, error)
	// 批量得到一批member的基本信息
	Bases(context.Context, *MemberMidsReq) (*BaseInfosReply, error)
	// 得到member的全量信息
	Member(context.Context, *MemberMidReq) (*MemberInfoReply, error)
	// 批量得到一批member的全量信息
	Members(context.Context, *MemberMidsReq) (*MemberInfosReply, error)
	// 查看member是否更新过昵称
	NickUpdated(context.Context, *MemberMidReq) (*NickUpdatedReply, error)
	// 标记member已经更新过昵称
	SetNickUpdated(context.Context, *MemberMidReq) (*EmptyStruct, error)
	// 设置官方文档资料
	SetOfficialDoc(context.Context, *OfficialDocReq) (*EmptyStruct, error)
	// 设置member的性别
	SetSex(context.Context, *UpdateSexReq) (*EmptyStruct, error)
	// 设置member的名字
	SetName(context.Context, *UpdateUnameReq) (*EmptyStruct, error)
	// 设置member的头像
	SetFace(context.Context, *UpdateFaceReq) (*EmptyStruct, error)
	// 设置member的头像
	SetRank(context.Context, *UpdateRankReq) (*EmptyStruct, error)
	// 设置member的生日
	SetBirthday(context.Context, *UpdateBirthdayReq) (*EmptyStruct, error)
	// 设置member的签名
	SetSign(context.Context, *UpdateSignReq) (*EmptyStruct, error)
	// 得到member的官方信息
	OfficialDoc(context.Context, *MidReq) (*OfficialDocInfoReply, error)
	// 得到member的节操值
	Moral(context.Context, *MemberMidReq) (*MoralReply, error)
	// 得到member的节操日志
	MoralLog(context.Context, *MemberMidReq) (*UserLogsReply, error)
	// 给member添加节操值
	AddMoral(context.Context, *UpdateMoralReq) (*EmptyStruct, error)
	// 给一批member批量添加节操值
	BatchAddMoral(context.Context, *UpdateMoralsReq) (*UpdateMoralsReply, error)
	// 得到member的经验值
	Exp(context.Context, *MidReq) (*LevelInfoReply, error)
	// 得到member的等级
	Level(context.Context, *MidReq) (*LevelInfoReply, error)
	// 更新member的经验值
	UpdateExp(context.Context, *AddExpReq) (*EmptyStruct, error)
	// 得到membe的经验日志
	ExpLog(context.Context, *MidReq) (*UserLogsReply, error)
	// 得到member的经验统计
	ExpStat(context.Context, *MidReq) (*ExpStatReply, error)
	// 得到member的实名认证状态
	RealnameStatus(context.Context, *MemberMidReq) (*RealnameStatusReply, error)
	// 得到member 实名认证流程的状态
	RealnameApplyStatus(context.Context, *MemberMidReq) (*RealnameApplyInfoReply, error)
	// 手机号实名认证发送验证码
	RealnameTelCapture(context.Context, *MemberMidReq) (*EmptyStruct, error)
	// 进行实名认证
	RealnameApply(context.Context, *ArgRealnameApplyReq) (*EmptyStruct, error)
	// 实名详情
	RealnameDetail(context.Context, *MemberMidReq) (*RealnameDetailReply, error)
	// 所有非敏感实名认证信息
	RealnameStrippedInfo(context.Context, *MemberMidReq) (*RealnameStrippedInfoReply, error)
	// 通过身份证号查询 mid
	MidByRealnameCard(context.Context, *MidByRealnameCardsReq) (*MidByRealnameCardReply, error)
	// 添加用户为受监控
	AddUserMonitor(context.Context, *AddUserMonitorReq) (*EmptyStruct, error)
	// 查看member是否在监控状态
	IsInMonitor(context.Context, *MidReq) (*IsInMonitorReply, error)
	// block
	// 获取用户封禁信息数据
	BlockInfo(context.Context, *MemberMidReq) (*BlockInfoReply, error)
	// 批量获取用户封禁信息数据
	BlockBatchInfo(context.Context, *MemberMidsReq) (*BlockBatchInfoReply, error)
	// 批量获取用户封禁详细数据
	BlockBatchDetail(context.Context, *MemberMidsReq) (*BlockBatchDetailReply, error)
}

func RegisterMemberServer(s *grpc.Server, srv MemberServer) {
	s.RegisterService(&_Member_serviceDesc, srv)
}

func _Member_Base_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).Base(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/Base",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).Base(ctx, req.(*MemberMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_Bases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).Bases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/Bases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).Bases(ctx, req.(*MemberMidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_Member_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).Member(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/Member",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).Member(ctx, req.(*MemberMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_Members_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).Members(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/Members",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).Members(ctx, req.(*MemberMidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_NickUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).NickUpdated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/NickUpdated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).NickUpdated(ctx, req.(*MemberMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_SetNickUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).SetNickUpdated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/SetNickUpdated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).SetNickUpdated(ctx, req.(*MemberMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_SetOfficialDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficialDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).SetOfficialDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/SetOfficialDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).SetOfficialDoc(ctx, req.(*OfficialDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_SetSex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).SetSex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/SetSex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).SetSex(ctx, req.(*UpdateSexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_SetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUnameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).SetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/SetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).SetName(ctx, req.(*UpdateUnameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_SetFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).SetFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/SetFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).SetFace(ctx, req.(*UpdateFaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_SetRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).SetRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/SetRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).SetRank(ctx, req.(*UpdateRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_SetBirthday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBirthdayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).SetBirthday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/SetBirthday",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).SetBirthday(ctx, req.(*UpdateBirthdayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_SetSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSignReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).SetSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/SetSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).SetSign(ctx, req.(*UpdateSignReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_OfficialDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).OfficialDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/OfficialDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).OfficialDoc(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_Moral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).Moral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/Moral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).Moral(ctx, req.(*MemberMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_MoralLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).MoralLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/MoralLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).MoralLog(ctx, req.(*MemberMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_AddMoral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMoralReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).AddMoral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/AddMoral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).AddMoral(ctx, req.(*UpdateMoralReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_BatchAddMoral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMoralsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).BatchAddMoral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/BatchAddMoral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).BatchAddMoral(ctx, req.(*UpdateMoralsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_Exp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).Exp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/Exp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).Exp(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_Level_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).Level(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/Level",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).Level(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_UpdateExp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).UpdateExp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/UpdateExp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).UpdateExp(ctx, req.(*AddExpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_ExpLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).ExpLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/ExpLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).ExpLog(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_ExpStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).ExpStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/ExpStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).ExpStat(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_RealnameStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).RealnameStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/RealnameStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).RealnameStatus(ctx, req.(*MemberMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_RealnameApplyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).RealnameApplyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/RealnameApplyStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).RealnameApplyStatus(ctx, req.(*MemberMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_RealnameTelCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).RealnameTelCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/RealnameTelCapture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).RealnameTelCapture(ctx, req.(*MemberMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_RealnameApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArgRealnameApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).RealnameApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/RealnameApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).RealnameApply(ctx, req.(*ArgRealnameApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_RealnameDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).RealnameDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/RealnameDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).RealnameDetail(ctx, req.(*MemberMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_RealnameStrippedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).RealnameStrippedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/RealnameStrippedInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).RealnameStrippedInfo(ctx, req.(*MemberMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_MidByRealnameCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidByRealnameCardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).MidByRealnameCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/MidByRealnameCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).MidByRealnameCard(ctx, req.(*MidByRealnameCardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_AddUserMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserMonitorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).AddUserMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/AddUserMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).AddUserMonitor(ctx, req.(*AddUserMonitorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_IsInMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).IsInMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/IsInMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).IsInMonitor(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_BlockInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).BlockInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/BlockInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).BlockInfo(ctx, req.(*MemberMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_BlockBatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).BlockBatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/BlockBatchInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).BlockBatchInfo(ctx, req.(*MemberMidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_BlockBatchDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).BlockBatchDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.service.member.v1.Member/BlockBatchDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).BlockBatchDetail(ctx, req.(*MemberMidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Member_serviceDesc = grpc.ServiceDesc{
	ServiceName: "account.service.member.v1.Member",
	HandlerType: (*MemberServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Base",
			Handler:    _Member_Base_Handler,
		},
		{
			MethodName: "Bases",
			Handler:    _Member_Bases_Handler,
		},
		{
			MethodName: "Member",
			Handler:    _Member_Member_Handler,
		},
		{
			MethodName: "Members",
			Handler:    _Member_Members_Handler,
		},
		{
			MethodName: "NickUpdated",
			Handler:    _Member_NickUpdated_Handler,
		},
		{
			MethodName: "SetNickUpdated",
			Handler:    _Member_SetNickUpdated_Handler,
		},
		{
			MethodName: "SetOfficialDoc",
			Handler:    _Member_SetOfficialDoc_Handler,
		},
		{
			MethodName: "SetSex",
			Handler:    _Member_SetSex_Handler,
		},
		{
			MethodName: "SetName",
			Handler:    _Member_SetName_Handler,
		},
		{
			MethodName: "SetFace",
			Handler:    _Member_SetFace_Handler,
		},
		{
			MethodName: "SetRank",
			Handler:    _Member_SetRank_Handler,
		},
		{
			MethodName: "SetBirthday",
			Handler:    _Member_SetBirthday_Handler,
		},
		{
			MethodName: "SetSign",
			Handler:    _Member_SetSign_Handler,
		},
		{
			MethodName: "OfficialDoc",
			Handler:    _Member_OfficialDoc_Handler,
		},
		{
			MethodName: "Moral",
			Handler:    _Member_Moral_Handler,
		},
		{
			MethodName: "MoralLog",
			Handler:    _Member_MoralLog_Handler,
		},
		{
			MethodName: "AddMoral",
			Handler:    _Member_AddMoral_Handler,
		},
		{
			MethodName: "BatchAddMoral",
			Handler:    _Member_BatchAddMoral_Handler,
		},
		{
			MethodName: "Exp",
			Handler:    _Member_Exp_Handler,
		},
		{
			MethodName: "Level",
			Handler:    _Member_Level_Handler,
		},
		{
			MethodName: "UpdateExp",
			Handler:    _Member_UpdateExp_Handler,
		},
		{
			MethodName: "ExpLog",
			Handler:    _Member_ExpLog_Handler,
		},
		{
			MethodName: "ExpStat",
			Handler:    _Member_ExpStat_Handler,
		},
		{
			MethodName: "RealnameStatus",
			Handler:    _Member_RealnameStatus_Handler,
		},
		{
			MethodName: "RealnameApplyStatus",
			Handler:    _Member_RealnameApplyStatus_Handler,
		},
		{
			MethodName: "RealnameTelCapture",
			Handler:    _Member_RealnameTelCapture_Handler,
		},
		{
			MethodName: "RealnameApply",
			Handler:    _Member_RealnameApply_Handler,
		},
		{
			MethodName: "RealnameDetail",
			Handler:    _Member_RealnameDetail_Handler,
		},
		{
			MethodName: "RealnameStrippedInfo",
			Handler:    _Member_RealnameStrippedInfo_Handler,
		},
		{
			MethodName: "MidByRealnameCard",
			Handler:    _Member_MidByRealnameCard_Handler,
		},
		{
			MethodName: "AddUserMonitor",
			Handler:    _Member_AddUserMonitor_Handler,
		},
		{
			MethodName: "IsInMonitor",
			Handler:    _Member_IsInMonitor_Handler,
		},
		{
			MethodName: "BlockInfo",
			Handler:    _Member_BlockInfo_Handler,
		},
		{
			MethodName: "BlockBatchInfo",
			Handler:    _Member_BlockBatchInfo_Handler,
		},
		{
			MethodName: "BlockBatchDetail",
			Handler:    _Member_BlockBatchDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/main/member/api/api.proto",
}

func (m *MidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MidReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.RealIP) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RealIP)))
		i += copy(dAtA[i:], m.RealIP)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MemberMidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberMidReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.RemoteIP) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RemoteIP)))
		i += copy(dAtA[i:], m.RemoteIP)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MemberMidsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberMidsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		dAtA2 := make([]byte, len(m.Mids)*10)
		var j1 int
		for _, num1 := range m.Mids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.RemoteIP) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RemoteIP)))
		i += copy(dAtA[i:], m.RemoteIP)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MidByRealnameCardsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MidByRealnameCardsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CardCode) > 0 {
		for _, s := range m.CardCode {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Country != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Country))
	}
	if m.CardType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CardType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EmptyStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyStruct) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LevelInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cur != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Cur))
	}
	if m.Min != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Min))
	}
	if m.NowExp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.NowExp))
	}
	if m.NextExp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.NextExp))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserLogReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLogReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Ts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ts))
	}
	if len(m.LogId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.LogId)))
		i += copy(dAtA[i:], m.LogId)
	}
	if len(m.Content) > 0 {
		for k, _ := range m.Content {
			dAtA[i] = 0x2a
			i++
			v := m.Content[k]
			mapSize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserLogsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLogsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserLogs) > 0 {
		for _, msg := range m.UserLogs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddExpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddExpReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Count != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Count))))
		i += 8
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if len(m.Operate) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Operate)))
		i += copy(dAtA[i:], m.Operate)
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExpStatReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpStatReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Login {
		dAtA[i] = 0x8
		i++
		if m.Login {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Watch {
		dAtA[i] = 0x10
		i++
		if m.Watch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Coin != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Coin))
	}
	if m.Share {
		dAtA[i] = 0x20
		i++
		if m.Share {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BaseInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Sex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Sex))
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.Rank != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
	}
	if m.Birthday != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Birthday))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OfficialInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfficialInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Role != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Role))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BaseInfosReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseInfosReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaseInfos) > 0 {
		for k, _ := range m.BaseInfos {
			dAtA[i] = 0xa
			i++
			v := m.BaseInfos[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + sovApi(uint64(k)) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MemberInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BaseInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BaseInfo.Size()))
		n4, err := m.BaseInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.LevelInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LevelInfo.Size()))
		n5, err := m.LevelInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.OfficialInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OfficialInfo.Size()))
		n6, err := m.OfficialInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MemberInfosReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberInfosReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MemberInfos) > 0 {
		for k, _ := range m.MemberInfos {
			dAtA[i] = 0xa
			i++
			v := m.MemberInfos[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + sovApi(uint64(k)) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n7, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n7
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NickUpdatedReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NickUpdatedReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NickUpdated {
		dAtA[i] = 0x8
		i++
		if m.NickUpdated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OfficialDocReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfficialDocReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.State))
	}
	if m.Role != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Role))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.RejectReason) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RejectReason)))
		i += copy(dAtA[i:], m.RejectReason)
	}
	if m.Realname != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Realname))
	}
	if len(m.Operator) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Operator)))
		i += copy(dAtA[i:], m.Operator)
	}
	if len(m.Telephone) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Telephone)))
		i += copy(dAtA[i:], m.Telephone)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Company) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Company)))
		i += copy(dAtA[i:], m.Company)
	}
	if len(m.CreditCode) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CreditCode)))
		i += copy(dAtA[i:], m.CreditCode)
	}
	if len(m.Organization) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Organization)))
		i += copy(dAtA[i:], m.Organization)
	}
	if len(m.OrganizationType) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrganizationType)))
		i += copy(dAtA[i:], m.OrganizationType)
	}
	if len(m.BusinessLicense) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BusinessLicense)))
		i += copy(dAtA[i:], m.BusinessLicense)
	}
	if len(m.BusinessScale) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BusinessScale)))
		i += copy(dAtA[i:], m.BusinessScale)
	}
	if len(m.BusinessLevel) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BusinessLevel)))
		i += copy(dAtA[i:], m.BusinessLevel)
	}
	if len(m.BusinessAuth) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BusinessAuth)))
		i += copy(dAtA[i:], m.BusinessAuth)
	}
	if len(m.Supplement) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Supplement)))
		i += copy(dAtA[i:], m.Supplement)
	}
	if len(m.Professional) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Professional)))
		i += copy(dAtA[i:], m.Professional)
	}
	if len(m.Identification) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Identification)))
		i += copy(dAtA[i:], m.Identification)
	}
	if len(m.SubmitSource) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubmitSource)))
		i += copy(dAtA[i:], m.SubmitSource)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateSexReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSexReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Sex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Sex))
	}
	if len(m.Remote_IP) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remote_IP)))
		i += copy(dAtA[i:], m.Remote_IP)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateUnameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUnameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Remote_IP) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remote_IP)))
		i += copy(dAtA[i:], m.Remote_IP)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateFaceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFaceReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if len(m.Remote_IP) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remote_IP)))
		i += copy(dAtA[i:], m.Remote_IP)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateRankReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRankReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Rank != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
	}
	if len(m.Remote_IP) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remote_IP)))
		i += copy(dAtA[i:], m.Remote_IP)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateBirthdayReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBirthdayReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Birthday != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Birthday))
	}
	if len(m.Remote_IP) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remote_IP)))
		i += copy(dAtA[i:], m.Remote_IP)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateSignReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSignReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if len(m.Remote_IP) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remote_IP)))
		i += copy(dAtA[i:], m.Remote_IP)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OfficialDocInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfficialDocInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.State))
	}
	if m.Role != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Role))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.RejectReason) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RejectReason)))
		i += copy(dAtA[i:], m.RejectReason)
	}
	if m.Realname != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Realname))
	}
	if len(m.Operator) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Operator)))
		i += copy(dAtA[i:], m.Operator)
	}
	if len(m.Telephone) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Telephone)))
		i += copy(dAtA[i:], m.Telephone)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Company) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Company)))
		i += copy(dAtA[i:], m.Company)
	}
	if len(m.CreditCode) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CreditCode)))
		i += copy(dAtA[i:], m.CreditCode)
	}
	if len(m.Organization) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Organization)))
		i += copy(dAtA[i:], m.Organization)
	}
	if len(m.OrganizationType) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrganizationType)))
		i += copy(dAtA[i:], m.OrganizationType)
	}
	if len(m.BusinessLicense) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BusinessLicense)))
		i += copy(dAtA[i:], m.BusinessLicense)
	}
	if len(m.BusinessScale) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BusinessScale)))
		i += copy(dAtA[i:], m.BusinessScale)
	}
	if len(m.BusinessLevel) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BusinessLevel)))
		i += copy(dAtA[i:], m.BusinessLevel)
	}
	if len(m.BusinessAuth) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BusinessAuth)))
		i += copy(dAtA[i:], m.BusinessAuth)
	}
	if len(m.Supplement) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Supplement)))
		i += copy(dAtA[i:], m.Supplement)
	}
	if len(m.Professional) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Professional)))
		i += copy(dAtA[i:], m.Professional)
	}
	if len(m.Identification) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Identification)))
		i += copy(dAtA[i:], m.Identification)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MoralReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoralReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Moral != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Moral))
	}
	if m.Added != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Added))
	}
	if m.Deducted != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Deducted))
	}
	if m.LastRecoverDate != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LastRecoverDate))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateMoralReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMoralReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Delta != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Delta))
	}
	if m.Origin != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Origin))
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if m.ReasonType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ReasonType))
	}
	if len(m.Operator) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Operator)))
		i += copy(dAtA[i:], m.Operator)
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if m.IsNotify {
		dAtA[i] = 0x48
		i++
		if m.IsNotify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateMoralsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMoralsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		dAtA9 := make([]byte, len(m.Mids)*10)
		var j8 int
		for _, num1 := range m.Mids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	if m.Delta != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Delta))
	}
	if m.Origin != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Origin))
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if m.ReasonType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ReasonType))
	}
	if len(m.Operator) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Operator)))
		i += copy(dAtA[i:], m.Operator)
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if m.IsNotify {
		dAtA[i] = 0x48
		i++
		if m.IsNotify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateMoralsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMoralsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AfterMorals) > 0 {
		for k, _ := range m.AfterMorals {
			dAtA[i] = 0xa
			i++
			v := m.AfterMorals[k]
			mapSize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintApi(dAtA, i, uint64(v))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddUserMonitorReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddUserMonitorReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Operator) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Operator)))
		i += copy(dAtA[i:], m.Operator)
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IsInMonitorReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsInMonitorReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsInMonitor {
		dAtA[i] = 0x8
		i++
		if m.IsInMonitor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RealnameStatusReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RealnameStatusReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RealnameStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RealnameStatus))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RealnameApplyInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RealnameApplyInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ArgRealnameApplyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgRealnameApplyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.CaptureCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CaptureCode))
	}
	if len(m.Realname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Realname)))
		i += copy(dAtA[i:], m.Realname)
	}
	if m.CardType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CardType))
	}
	if len(m.CardCode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CardCode)))
		i += copy(dAtA[i:], m.CardCode)
	}
	if m.Country != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Country))
	}
	if len(m.HandIMGToken) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.HandIMGToken)))
		i += copy(dAtA[i:], m.HandIMGToken)
	}
	if len(m.FrontIMGToken) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.FrontIMGToken)))
		i += copy(dAtA[i:], m.FrontIMGToken)
	}
	if len(m.BackIMGToken) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BackIMGToken)))
		i += copy(dAtA[i:], m.BackIMGToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RealnameDetailReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RealnameDetailReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Realname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Realname)))
		i += copy(dAtA[i:], m.Realname)
	}
	if len(m.Card) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Card)))
		i += copy(dAtA[i:], m.Card)
	}
	if m.CardType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CardType))
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if len(m.Gender) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gender)))
		i += copy(dAtA[i:], m.Gender)
	}
	if len(m.HandImg) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.HandImg)))
		i += copy(dAtA[i:], m.HandImg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RealnameStrippedInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RealnameStrippedInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if m.Channel != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Channel))
	}
	if m.Country != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Country))
	}
	if m.CardType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CardType))
	}
	if m.AdultType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AdultType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MidByRealnameCardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MidByRealnameCardReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CodeToMid) > 0 {
		for k, _ := range m.CodeToMid {
			dAtA[i] = 0x2a
			i++
			v := m.CodeToMid[k]
			mapSize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + sovApi(uint64(v))
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintApi(dAtA, i, uint64(v))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MID))
	}
	if m.BlockStatus != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BlockStatus))
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockDetailReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockDetailReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MID))
	}
	if m.BlockCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BlockCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockBatchDetailReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockBatchDetailReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BlockDetails) > 0 {
		for k, _ := range m.BlockDetails {
			dAtA[i] = 0xa
			i++
			v := m.BlockDetails[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + sovApi(uint64(k)) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n10, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n10
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockBatchInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockBatchInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BlockInfos) > 0 {
		for _, msg := range m.BlockInfos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MidReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.RealIP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemberMidReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.RemoteIP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemberMidsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mids) > 0 {
		l = 0
		for _, e := range m.Mids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	l = len(m.RemoteIP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MidByRealnameCardsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CardCode) > 0 {
		for _, s := range m.CardCode {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Country != 0 {
		n += 1 + sovApi(uint64(m.Country))
	}
	if m.CardType != 0 {
		n += 1 + sovApi(uint64(m.CardType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EmptyStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LevelInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cur != 0 {
		n += 1 + sovApi(uint64(m.Cur))
	}
	if m.Min != 0 {
		n += 1 + sovApi(uint64(m.Min))
	}
	if m.NowExp != 0 {
		n += 1 + sovApi(uint64(m.NowExp))
	}
	if m.NextExp != 0 {
		n += 1 + sovApi(uint64(m.NextExp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserLogReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovApi(uint64(m.Ts))
	}
	l = len(m.LogId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Content) > 0 {
		for k, v := range m.Content {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserLogsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserLogs) > 0 {
		for _, e := range m.UserLogs {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddExpReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Count != 0 {
		n += 9
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Operate)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExpStatReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Login {
		n += 2
	}
	if m.Watch {
		n += 2
	}
	if m.Coin != 0 {
		n += 1 + sovApi(uint64(m.Coin))
	}
	if m.Share {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovApi(uint64(m.Sex))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.Birthday != 0 {
		n += 1 + sovApi(uint64(m.Birthday))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OfficialInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != 0 {
		n += 1 + sovApi(uint64(m.Role))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseInfosReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BaseInfos) > 0 {
		for k, v := range m.BaseInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemberInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseInfo != nil {
		l = m.BaseInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LevelInfo != nil {
		l = m.LevelInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.OfficialInfo != nil {
		l = m.OfficialInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemberInfosReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MemberInfos) > 0 {
		for k, v := range m.MemberInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NickUpdatedReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NickUpdated {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OfficialDocReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Role != 0 {
		n += 1 + sovApi(uint64(m.Role))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RejectReason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Realname != 0 {
		n += 1 + sovApi(uint64(m.Realname))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Telephone)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Company)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CreditCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OrganizationType)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.BusinessLicense)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.BusinessScale)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.BusinessLevel)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.BusinessAuth)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Supplement)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Professional)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Identification)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.SubmitSource)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSexReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Sex != 0 {
		n += 1 + sovApi(uint64(m.Sex))
	}
	l = len(m.Remote_IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateUnameReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Remote_IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateFaceReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Remote_IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRankReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	l = len(m.Remote_IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBirthdayReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Birthday != 0 {
		n += 1 + sovApi(uint64(m.Birthday))
	}
	l = len(m.Remote_IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSignReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Remote_IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OfficialDocInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Role != 0 {
		n += 1 + sovApi(uint64(m.Role))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RejectReason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Realname != 0 {
		n += 1 + sovApi(uint64(m.Realname))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Telephone)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Company)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CreditCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OrganizationType)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.BusinessLicense)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.BusinessScale)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.BusinessLevel)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.BusinessAuth)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Supplement)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Professional)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Identification)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MoralReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Moral != 0 {
		n += 1 + sovApi(uint64(m.Moral))
	}
	if m.Added != 0 {
		n += 1 + sovApi(uint64(m.Added))
	}
	if m.Deducted != 0 {
		n += 1 + sovApi(uint64(m.Deducted))
	}
	if m.LastRecoverDate != 0 {
		n += 1 + sovApi(uint64(m.LastRecoverDate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMoralReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Delta != 0 {
		n += 1 + sovApi(uint64(m.Delta))
	}
	if m.Origin != 0 {
		n += 1 + sovApi(uint64(m.Origin))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ReasonType != 0 {
		n += 1 + sovApi(uint64(m.ReasonType))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.IsNotify {
		n += 2
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMoralsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mids) > 0 {
		l = 0
		for _, e := range m.Mids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Delta != 0 {
		n += 1 + sovApi(uint64(m.Delta))
	}
	if m.Origin != 0 {
		n += 1 + sovApi(uint64(m.Origin))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ReasonType != 0 {
		n += 1 + sovApi(uint64(m.ReasonType))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.IsNotify {
		n += 2
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMoralsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AfterMorals) > 0 {
		for k, v := range m.AfterMorals {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddUserMonitorReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsInMonitorReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsInMonitor {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RealnameStatusReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RealnameStatus != 0 {
		n += 1 + sovApi(uint64(m.RealnameStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RealnameApplyInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArgRealnameApplyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.CaptureCode != 0 {
		n += 1 + sovApi(uint64(m.CaptureCode))
	}
	l = len(m.Realname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CardType != 0 {
		n += 1 + sovApi(uint64(m.CardType))
	}
	l = len(m.CardCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovApi(uint64(m.Country))
	}
	l = len(m.HandIMGToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FrontIMGToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BackIMGToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RealnameDetailReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Realname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Card)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CardType != 0 {
		n += 1 + sovApi(uint64(m.CardType))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.HandImg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RealnameStrippedInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.Channel != 0 {
		n += 1 + sovApi(uint64(m.Channel))
	}
	if m.Country != 0 {
		n += 1 + sovApi(uint64(m.Country))
	}
	if m.CardType != 0 {
		n += 1 + sovApi(uint64(m.CardType))
	}
	if m.AdultType != 0 {
		n += 1 + sovApi(uint64(m.AdultType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MidByRealnameCardReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CodeToMid) > 0 {
		for k, v := range m.CodeToMid {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MID != 0 {
		n += 1 + sovApi(uint64(m.MID))
	}
	if m.BlockStatus != 0 {
		n += 1 + sovApi(uint64(m.BlockStatus))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockDetailReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MID != 0 {
		n += 1 + sovApi(uint64(m.MID))
	}
	if m.BlockCount != 0 {
		n += 1 + sovApi(uint64(m.BlockCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockBatchDetailReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockDetails) > 0 {
		for k, v := range m.BlockDetails {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockBatchInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockInfos) > 0 {
		for _, e := range m.BlockInfos {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberMidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberMidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberMidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberMidsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberMidsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberMidsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mids = append(m.Mids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Mids) == 0 {
					m.Mids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mids = append(m.Mids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MidByRealnameCardsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MidByRealnameCardsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MidByRealnameCardsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardCode = append(m.CardCode, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= (int16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cur", wireType)
			}
			m.Cur = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cur |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			m.Min = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Min |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowExp", wireType)
			}
			m.NowExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextExp", wireType)
			}
			m.NextExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLogReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLogReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLogReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Content[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLogsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLogsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLogsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserLogs = append(m.UserLogs, &UserLogReply{})
			if err := m.UserLogs[len(m.UserLogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddExpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddExpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddExpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Count = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpStatReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpStatReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpStatReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Login", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Login = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Watch = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Share = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfficialInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfficialInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfficialInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseInfosReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseInfosReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseInfosReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInfos == nil {
				m.BaseInfos = make(map[int64]*BaseInfoReply)
			}
			var mapkey int64
			var mapvalue *BaseInfoReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BaseInfoReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BaseInfos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInfo == nil {
				m.BaseInfo = &BaseInfoReply{}
			}
			if err := m.BaseInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LevelInfo == nil {
				m.LevelInfo = &LevelInfoReply{}
			}
			if err := m.LevelInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfficialInfo == nil {
				m.OfficialInfo = &OfficialInfoReply{}
			}
			if err := m.OfficialInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberInfosReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberInfosReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberInfosReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemberInfos == nil {
				m.MemberInfos = make(map[int64]*MemberInfoReply)
			}
			var mapkey int64
			var mapvalue *MemberInfoReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MemberInfoReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MemberInfos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NickUpdatedReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NickUpdatedReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NickUpdatedReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickUpdated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NickUpdated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfficialDocReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfficialDocReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfficialDocReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Realname", wireType)
			}
			m.Realname = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Realname |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Telephone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Telephone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Company", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Company = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreditCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessLicense", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessLicense = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessScale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessScale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessAuth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessAuth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supplement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Supplement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Professional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Professional = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identification", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identification = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmitSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSexReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSexReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSexReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remote_IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remote_IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUnameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUnameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUnameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remote_IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remote_IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFaceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFaceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFaceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remote_IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remote_IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRankReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRankReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRankReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remote_IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remote_IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBirthdayReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBirthdayReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBirthdayReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remote_IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remote_IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSignReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSignReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSignReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remote_IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remote_IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfficialDocInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfficialDocInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfficialDocInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Realname", wireType)
			}
			m.Realname = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Realname |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Telephone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Telephone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Company", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Company = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreditCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessLicense", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessLicense = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessScale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessScale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessAuth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessAuth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supplement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Supplement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Professional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Professional = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identification", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identification = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoralReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoralReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoralReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moral", wireType)
			}
			m.Moral = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Moral |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Added", wireType)
			}
			m.Added = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Added |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deducted", wireType)
			}
			m.Deducted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deducted |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRecoverDate", wireType)
			}
			m.LastRecoverDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRecoverDate |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMoralReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMoralReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMoralReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
			m.Delta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delta |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			m.Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Origin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReasonType", wireType)
			}
			m.ReasonType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReasonType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNotify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNotify = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMoralsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMoralsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMoralsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mids = append(m.Mids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Mids) == 0 {
					m.Mids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mids = append(m.Mids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
			m.Delta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delta |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			m.Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Origin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReasonType", wireType)
			}
			m.ReasonType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReasonType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNotify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNotify = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMoralsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMoralsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMoralsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterMorals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AfterMorals == nil {
				m.AfterMorals = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AfterMorals[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddUserMonitorReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddUserMonitorReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddUserMonitorReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsInMonitorReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsInMonitorReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsInMonitorReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInMonitor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInMonitor = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RealnameStatusReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RealnameStatusReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RealnameStatusReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealnameStatus", wireType)
			}
			m.RealnameStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealnameStatus |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RealnameApplyInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RealnameApplyInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RealnameApplyInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArgRealnameApplyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgRealnameApplyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgRealnameApplyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptureCode", wireType)
			}
			m.CaptureCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptureCode |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Realname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Realname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= (int16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandIMGToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HandIMGToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrontIMGToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrontIMGToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackIMGToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackIMGToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RealnameDetailReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RealnameDetailReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RealnameDetailReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Realname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Realname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Card = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HandImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RealnameStrippedInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RealnameStrippedInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RealnameStrippedInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= (int16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdultType", wireType)
			}
			m.AdultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdultType |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MidByRealnameCardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MidByRealnameCardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MidByRealnameCardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeToMid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CodeToMid == nil {
				m.CodeToMid = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CodeToMid[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MID", wireType)
			}
			m.MID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockStatus", wireType)
			}
			m.BlockStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockDetailReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockDetailReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockDetailReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MID", wireType)
			}
			m.MID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCount", wireType)
			}
			m.BlockCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockBatchDetailReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockBatchDetailReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockBatchDetailReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockDetails == nil {
				m.BlockDetails = make(map[int64]*BlockDetailReply)
			}
			var mapkey int64
			var mapvalue *BlockDetailReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BlockDetailReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BlockDetails[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockBatchInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockBatchInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockBatchInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockInfos = append(m.BlockInfos, &BlockInfoReply{})
			if err := m.BlockInfos[len(m.BlockInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/main/member/api/api.proto", fileDescriptor_api_572d358ff91238b1)
}

var fileDescriptor_api_572d358ff91238b1 = []byte{
	// 3172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0xcf, 0x8f, 0xdb, 0xc6,
	0xf5, 0x87, 0xa4, 0x95, 0x56, 0x7a, 0xfa, 0xe1, 0x5d, 0xfa, 0xc7, 0x57, 0x59, 0x07, 0x91, 0xc3,
	0xc4, 0xf1, 0xfa, 0x47, 0xb4, 0x8e, 0xe3, 0x04, 0xf9, 0x1a, 0x69, 0x9a, 0x95, 0xbd, 0x71, 0x17,
	0xf0, 0xa6, 0xe9, 0xc8, 0x46, 0x90, 0x1f, 0xae, 0xc2, 0x25, 0x67, 0xb5, 0x93, 0xa5, 0x48, 0x9a,
	0xa4, 0x1c, 0x6d, 0xd1, 0x43, 0x4f, 0x3d, 0x14, 0x3d, 0xf4, 0xd2, 0x43, 0xaf, 0x3d, 0xb6, 0x05,
	0xfa, 0x3f, 0xf4, 0xd2, 0xf6, 0xd6, 0xfe, 0x03, 0x6a, 0x91, 0x53, 0xa1, 0x63, 0x80, 0x5e, 0x82,
	0x00, 0x2d, 0xe6, 0xcd, 0x90, 0x1c, 0xae, 0x64, 0x89, 0x4a, 0x7c, 0x2a, 0x7c, 0x58, 0x92, 0xf3,
	0x99, 0x37, 0xef, 0xcd, 0xcc, 0x7b, 0xf3, 0xe6, 0xcd, 0x1b, 0x2d, 0x5c, 0x34, 0x3c, 0x6f, 0x2b,
	0xa0, 0xfe, 0x63, 0x66, 0xd2, 0xad, 0x81, 0xc1, 0x9c, 0xad, 0x01, 0x1d, 0xec, 0x53, 0x7f, 0xcb,
	0xf0, 0x18, 0xff, 0x6b, 0x7b, 0xbe, 0x1b, 0xba, 0xda, 0x73, 0x86, 0x69, 0xba, 0x43, 0x27, 0x6c,
	0x4b, 0xd2, 0xb6, 0xa0, 0x6a, 0x3f, 0x7e, 0x6d, 0xe3, 0xd5, 0x3e, 0x0b, 0x0f, 0x87, 0xfb, 0x6d,
	0xd3, 0x1d, 0x6c, 0xf5, 0xdd, 0xbe, 0xbb, 0x85, 0x2d, 0xf6, 0x87, 0x07, 0x58, 0xc2, 0x02, 0x7e,
	0x09, 0x4e, 0xfa, 0x5d, 0x28, 0xed, 0x31, 0x8b, 0xd0, 0x47, 0xda, 0x73, 0x50, 0x18, 0x30, 0xab,
	0x99, 0xbb, 0x90, 0xdb, 0x2c, 0x74, 0x56, 0x27, 0xe3, 0x16, 0x2f, 0x12, 0xfe, 0xd0, 0x74, 0x28,
	0xf9, 0xd4, 0xb0, 0x77, 0x3f, 0x68, 0x16, 0x2e, 0xe4, 0x36, 0x2b, 0x1d, 0x98, 0x8c, 0x5b, 0x12,
	0x21, 0xf2, 0xad, 0x77, 0xa1, 0xb6, 0x87, 0x9d, 0x58, 0xcc, 0x6e, 0x13, 0xca, 0x3e, 0x1d, 0xb8,
	0x21, 0xdd, 0xfd, 0xa0, 0x99, 0x47, 0x86, 0xb5, 0xc9, 0xb8, 0x15, 0x63, 0x24, 0xfe, 0xd2, 0x3f,
	0x84, 0x7a, 0xcc, 0x34, 0xe0, 0x5c, 0x9f, 0x87, 0x95, 0x01, 0xb3, 0x82, 0x66, 0xee, 0x42, 0x61,
	0xb3, 0xd0, 0x29, 0x4f, 0xc6, 0x2d, 0x2c, 0x13, 0x7c, 0x2e, 0xc1, 0xf8, 0x5f, 0x39, 0x38, 0xbb,
	0xc7, 0xac, 0xce, 0x31, 0xa1, 0x86, 0xed, 0x18, 0x03, 0x7a, 0xdb, 0xf0, 0x85, 0x84, 0x1d, 0xa8,
	0x98, 0x86, 0x6f, 0xf5, 0x4c, 0xd7, 0xa2, 0x28, 0xa6, 0xd2, 0xd9, 0xfc, 0x6a, 0xdc, 0x7a, 0xf9,
	0xc0, 0xf5, 0x07, 0xb7, 0xf4, 0xb8, 0x4a, 0xbf, 0xf0, 0xd8, 0xb0, 0x99, 0x65, 0x84, 0xf4, 0x96,
	0xee, 0xd3, 0x47, 0x43, 0xe6, 0x53, 0x4b, 0x27, 0x65, 0x5e, 0x7f, 0xdb, 0xb5, 0xa8, 0xf6, 0x2e,
	0xac, 0xa2, 0x86, 0xfc, 0x63, 0xec, 0x49, 0xb1, 0xf3, 0xca, 0x64, 0xdc, 0x8a, 0xa0, 0xaf, 0xc6,
	0xad, 0x86, 0xe4, 0x27, 0x00, 0xfd, 0xeb, 0x71, 0xab, 0xc8, 0x9c, 0xf0, 0xb5, 0x37, 0x49, 0x44,
	0xa3, 0xbd, 0x27, 0x3b, 0x12, 0x1e, 0x7b, 0x14, 0xe7, 0xbd, 0xd8, 0xb9, 0x3c, 0x19, 0xb7, 0x12,
	0xf0, 0xab, 0x71, 0x6b, 0x4d, 0xe9, 0x15, 0x87, 0x38, 0x9f, 0x15, 0xe6, 0x84, 0x6f, 0x89, 0x9e,
	0xdc, 0xe7, 0x50, 0x1d, 0xaa, 0x3b, 0x03, 0x2f, 0x3c, 0xee, 0x86, 0xfe, 0xd0, 0x0c, 0xf5, 0xdf,
	0xe7, 0xa0, 0x71, 0x8f, 0x3e, 0xa6, 0xf6, 0xae, 0x73, 0xe0, 0x12, 0xea, 0xd9, 0xc7, 0xda, 0x4b,
	0x50, 0x30, 0x87, 0x3e, 0xaa, 0xaa, 0xd8, 0x59, 0x9f, 0x8c, 0x5b, 0x75, 0x73, 0xe8, 0xfb, 0xd4,
	0x09, 0x7b, 0x36, 0x27, 0x24, 0xbc, 0x56, 0x7b, 0x91, 0xeb, 0xd3, 0x91, 0x83, 0x39, 0x35, 0x19,
	0xb7, 0xaa, 0x11, 0xd1, 0x80, 0x39, 0x5c, 0xaf, 0x8e, 0xb6, 0x09, 0xab, 0x8e, 0xfb, 0x45, 0x8f,
	0x8e, 0x3c, 0xd9, 0xdf, 0x14, 0x19, 0x1d, 0x79, 0xa4, 0xe4, 0xb8, 0x5f, 0xec, 0x8c, 0x3c, 0xed,
	0x12, 0x94, 0x1d, 0x3a, 0x42, 0xac, 0xb9, 0x82, 0xa4, 0xa8, 0xa8, 0x08, 0x23, 0xab, 0xfc, 0x6b,
	0x67, 0xe4, 0xe9, 0xbf, 0xce, 0x43, 0xed, 0x41, 0x40, 0xfd, 0x7b, 0x6e, 0x5f, 0xf4, 0x75, 0x8e,
	0x59, 0x9d, 0x83, 0x3c, 0xf3, 0xa4, 0xde, 0x4b, 0x93, 0x71, 0x2b, 0xcf, 0x3c, 0x92, 0x67, 0x1e,
	0xc7, 0xc3, 0x00, 0x7b, 0x54, 0x10, 0x78, 0x18, 0x90, 0x7c, 0x18, 0x68, 0x2f, 0x42, 0xc9, 0x76,
	0xfb, 0x3d, 0x66, 0x61, 0x17, 0xa4, 0x55, 0x0b, 0x84, 0x14, 0x6d, 0xb7, 0xbf, 0x6b, 0x69, 0x9f,
	0x70, 0x2d, 0x3a, 0x21, 0x75, 0xc2, 0x66, 0xf1, 0x42, 0x61, 0xb3, 0x7a, 0xe3, 0x66, 0xfb, 0x89,
	0x2b, 0xaf, 0xad, 0xf6, 0xb3, 0x7d, 0x5b, 0x34, 0xdb, 0xe1, 0xaa, 0xec, 0x54, 0x85, 0xee, 0x11,
	0x21, 0xd1, 0xc7, 0xc6, 0x2d, 0xa8, 0xa9, 0x54, 0xda, 0x1a, 0x14, 0x8e, 0xe8, 0x31, 0x0e, 0xad,
	0x42, 0xf8, 0xa7, 0x76, 0x06, 0x8a, 0x8f, 0x0d, 0x7b, 0x48, 0xc5, 0xa0, 0x88, 0x28, 0xdc, 0xca,
	0xbf, 0x95, 0xd3, 0x2d, 0xa8, 0x4b, 0x71, 0x81, 0x98, 0x97, 0x2e, 0x54, 0x86, 0x01, 0xf5, 0x7b,
	0xb6, 0xdb, 0x17, 0xab, 0xa3, 0x7a, 0xe3, 0x52, 0xc6, 0xbe, 0x76, 0xea, 0xdc, 0xac, 0xe2, 0xd6,
	0xa4, 0x3c, 0x94, 0x9c, 0xf5, 0xdf, 0xe5, 0xa0, 0xb2, 0x6d, 0x59, 0x3b, 0x23, 0x6f, 0xc1, 0x8a,
	0x6e, 0x41, 0x11, 0x25, 0x61, 0x47, 0x73, 0x9d, 0xca, 0x64, 0xdc, 0x12, 0x00, 0x11, 0x2f, 0xe9,
	0x41, 0x02, 0xd7, 0x39, 0xe1, 0x41, 0x02, 0xd7, 0x21, 0xf2, 0xad, 0x5d, 0x84, 0x55, 0xd7, 0xa3,
	0xbe, 0x11, 0x52, 0xa9, 0x10, 0x9c, 0x36, 0x09, 0x91, 0xe8, 0x43, 0xaa, 0xb9, 0x78, 0x52, 0xcd,
	0xfa, 0x6f, 0x72, 0x50, 0xdb, 0x19, 0x79, 0xdd, 0xd0, 0x08, 0xc5, 0x94, 0xb4, 0x80, 0x6b, 0x91,
	0x39, 0xd8, 0xe3, 0xb2, 0xe8, 0x14, 0x02, 0x44, 0xbc, 0x34, 0x1d, 0x8a, 0x5f, 0x18, 0xa1, 0x79,
	0x88, 0xbd, 0x2e, 0x0b, 0x13, 0x44, 0xa0, 0x67, 0x3c, 0x26, 0xa2, 0x4a, 0xbb, 0x00, 0x2b, 0xa6,
	0xcb, 0x1c, 0x69, 0x3e, 0x48, 0xc2, 0xcb, 0x01, 0x27, 0xc1, 0x1a, 0xce, 0x25, 0x38, 0x34, 0x7c,
	0xd1, 0x69, 0xc9, 0x05, 0x01, 0xe4, 0x82, 0x5f, 0xfa, 0xcf, 0xf3, 0x50, 0xef, 0x18, 0x01, 0x4d,
	0xd6, 0xdc, 0x9c, 0xc9, 0x7c, 0x1e, 0x56, 0xb8, 0x47, 0x92, 0x96, 0x8c, 0x3e, 0x8e, 0x97, 0x09,
	0x3e, 0x79, 0xc3, 0x80, 0x8e, 0x64, 0x7f, 0xb0, 0x61, 0x40, 0x47, 0x84, 0x3f, 0x78, 0xc3, 0x03,
	0xc3, 0x8c, 0x66, 0x0f, 0x1b, 0xf2, 0x32, 0xc1, 0x27, 0xaf, 0x0d, 0x58, 0xdf, 0x91, 0x33, 0x87,
	0xb5, 0xbc, 0x4c, 0xf0, 0xc9, 0x6b, 0x7d, 0xc3, 0x39, 0x6a, 0x96, 0x90, 0x2f, 0xd6, 0xf2, 0x32,
	0xc1, 0xa7, 0x76, 0x17, 0xca, 0xfb, 0xcc, 0x0f, 0x0f, 0x2d, 0xe3, 0xb8, 0xb9, 0x8a, 0x14, 0x57,
	0xf9, 0x30, 0x23, 0xec, 0xeb, 0x71, 0xeb, 0x7c, 0xdf, 0x7d, 0xd5, 0x74, 0x07, 0x03, 0xd7, 0xd9,
	0xb2, 0xd9, 0xbe, 0x6f, 0xf8, 0xc7, 0x5b, 0x21, 0x1b, 0xd0, 0xf6, 0x7d, 0x36, 0xa0, 0x24, 0x26,
	0xd4, 0x47, 0xb0, 0xfe, 0xc3, 0x83, 0x03, 0x66, 0x32, 0x43, 0xf1, 0x3f, 0x2f, 0xc3, 0x8a, 0xef,
	0xda, 0x54, 0x3a, 0xa0, 0x35, 0x94, 0xed, 0xda, 0x34, 0xf6, 0x65, 0x58, 0xe2, 0xea, 0x0c, 0x59,
	0x68, 0x47, 0xf3, 0x82, 0xea, 0x44, 0x80, 0x88, 0x17, 0x1f, 0x82, 0x45, 0x03, 0x53, 0x5a, 0x18,
	0x0e, 0x81, 0x97, 0x09, 0x3e, 0xf5, 0xbf, 0xe7, 0xa0, 0x11, 0xa9, 0x40, 0xae, 0x99, 0x0f, 0x01,
	0xf6, 0x8d, 0x80, 0xf6, 0x18, 0x87, 0xe4, 0xa2, 0x79, 0x6b, 0xce, 0xa2, 0x49, 0x37, 0x4f, 0x8a,
	0xb8, 0x7c, 0x49, 0x65, 0x3f, 0x2a, 0x6f, 0x1c, 0x28, 0xa2, 0xa6, 0xd6, 0x76, 0x41, 0xac, 0xed,
	0x77, 0xd4, 0xb5, 0x5d, 0xbd, 0xb1, 0x99, 0x41, 0x2e, 0x8a, 0x55, 0xbd, 0xc0, 0xbf, 0x73, 0x70,
	0x4a, 0xec, 0x8f, 0xc9, 0x64, 0xee, 0x40, 0x25, 0x1e, 0x14, 0xca, 0x5b, 0x86, 0x77, 0x39, 0x1a,
	0x83, 0xf6, 0x03, 0x00, 0x74, 0xfe, 0x82, 0x8f, 0xe8, 0xe3, 0xe5, 0x39, 0x7c, 0xd2, 0x5b, 0x0a,
	0xa9, 0xd8, 0x51, 0x59, 0xfb, 0x11, 0xd4, 0x5d, 0xa9, 0x72, 0xc1, 0xac, 0x80, 0xcc, 0xae, 0xcd,
	0x61, 0x36, 0x65, 0x22, 0xa4, 0xe6, 0x2a, 0x90, 0xfe, 0x8f, 0x1c, 0xac, 0x25, 0xe3, 0x96, 0xda,
	0xec, 0x41, 0x4d, 0x70, 0x48, 0xe9, 0xf3, 0xed, 0x39, 0x62, 0x4e, 0xb2, 0x50, 0x01, 0xa1, 0xd3,
	0xea, 0x20, 0x41, 0x36, 0x3e, 0x4f, 0x09, 0x7d, 0x92, 0x5e, 0xdf, 0x4d, 0xeb, 0xf5, 0x4a, 0x26,
	0xf9, 0x53, 0x9a, 0xbd, 0x0b, 0x6b, 0xef, 0x33, 0xf3, 0xe8, 0x81, 0xc7, 0x23, 0x0c, 0x4b, 0x0c,
	0xf0, 0x75, 0xa8, 0x39, 0xcc, 0x3c, 0xea, 0x0d, 0x05, 0x28, 0xdd, 0x1a, 0x5f, 0x2e, 0x29, 0x9c,
	0x54, 0x9d, 0xa4, 0xa5, 0xfe, 0x4d, 0x19, 0x1a, 0xd1, 0x74, 0xde, 0x71, 0xcd, 0x05, 0x7e, 0x7c,
	0xbe, 0xeb, 0xb9, 0x04, 0xc5, 0x20, 0xe4, 0xee, 0xb9, 0x10, 0x47, 0x0a, 0x02, 0x88, 0x57, 0xaa,
	0x28, 0xc6, 0x0b, 0x7a, 0x25, 0xdb, 0x82, 0x2e, 0x2e, 0x58, 0xd0, 0xa5, 0x59, 0x0b, 0x5a, 0x7b,
	0x13, 0xea, 0x3e, 0xfd, 0x9c, 0x9a, 0x61, 0x4f, 0xee, 0x2c, 0xab, 0x48, 0x86, 0xf1, 0x4b, 0xaa,
	0x82, 0xd4, 0x44, 0x91, 0x88, 0x6d, 0xe6, 0x3a, 0x0f, 0x12, 0x45, 0xd0, 0xd7, 0x2c, 0x63, 0x07,
	0xcf, 0x88, 0x20, 0x51, 0x60, 0x49, 0x04, 0x15, 0x21, 0x3c, 0xac, 0x14, 0x9b, 0x8f, 0xeb, 0x37,
	0x2b, 0x49, 0x58, 0x19, 0x61, 0x24, 0xfe, 0xd2, 0xae, 0x42, 0x25, 0xa4, 0x36, 0xf5, 0x0e, 0x5d,
	0x87, 0x36, 0x01, 0x49, 0x71, 0x73, 0x8d, 0x41, 0x92, 0x7c, 0xf2, 0xf1, 0xd3, 0x81, 0xc1, 0xec,
	0x66, 0x35, 0x19, 0x3f, 0x02, 0x44, 0xbc, 0xf8, 0x86, 0x68, 0x58, 0x96, 0x4f, 0x83, 0xa0, 0x59,
	0x4b, 0x36, 0x44, 0x09, 0x91, 0xe8, 0x83, 0x93, 0x99, 0xee, 0xc0, 0x33, 0x9c, 0xe3, 0x66, 0x3d,
	0x21, 0x93, 0x10, 0x89, 0x3e, 0xb4, 0xeb, 0x50, 0x35, 0x7d, 0x6a, 0xb1, 0x50, 0x84, 0xb6, 0x0d,
	0x24, 0x15, 0x11, 0x5a, 0x02, 0x13, 0x10, 0x05, 0x8c, 0x61, 0x6f, 0x42, 0xcd, 0xf5, 0xfb, 0x86,
	0xc3, 0x7e, 0x62, 0x84, 0xcc, 0x75, 0x9a, 0xa7, 0xb0, 0x09, 0x1a, 0x9c, 0x8a, 0x93, 0x54, 0x49,
	0xeb, 0xc0, 0xba, 0x5a, 0x16, 0xf1, 0xeb, 0x1a, 0x36, 0x3d, 0x3b, 0x19, 0xb7, 0xa6, 0x2b, 0xc9,
	0x9a, 0x0a, 0xf1, 0x98, 0x55, 0xfb, 0x3e, 0xac, 0xed, 0x0f, 0x03, 0xe6, 0xd0, 0x20, 0xe8, 0xd9,
	0xcc, 0xa4, 0x4e, 0x40, 0x9b, 0xeb, 0xc8, 0x82, 0xeb, 0x6a, 0xaa, 0x8e, 0x9c, 0x8a, 0x90, 0x7b,
	0x02, 0xd0, 0xfe, 0x1f, 0x1a, 0x31, 0x51, 0x60, 0x1a, 0x36, 0x6d, 0x6a, 0xd8, 0x5c, 0x9b, 0x8c,
	0x5b, 0x27, 0x6a, 0x48, 0x3d, 0x2a, 0x77, 0x79, 0x31, 0xd5, 0x14, 0xbd, 0x58, 0xf3, 0xf4, 0x8c,
	0xa6, 0x22, 0x32, 0x8e, 0x9b, 0xa2, 0xfb, 0xe3, 0x26, 0x19, 0x13, 0x18, 0xc3, 0xf0, 0xb0, 0x79,
	0x26, 0x31, 0xc9, 0x54, 0x05, 0xa9, 0x45, 0xc5, 0xed, 0x61, 0x78, 0xa8, 0xb5, 0x01, 0x82, 0xa1,
	0xe7, 0xd9, 0x74, 0xc0, 0x23, 0xcd, 0xb3, 0xd8, 0xa8, 0x31, 0x19, 0xb7, 0x14, 0x94, 0x28, 0xdf,
	0x5c, 0x31, 0x9e, 0xef, 0x1e, 0xd0, 0x20, 0x60, 0xae, 0x63, 0xd8, 0xcd, 0x73, 0x89, 0x62, 0x54,
	0x9c, 0xa4, 0x4a, 0xda, 0x2d, 0x68, 0x30, 0x8b, 0x3a, 0x21, 0x3b, 0x60, 0xa6, 0x50, 0xe8, 0xff,
	0x25, 0x03, 0x4b, 0xd7, 0x90, 0x13, 0x65, 0x3e, 0xb2, 0x60, 0xb8, 0x3f, 0x60, 0x61, 0x2f, 0x70,
	0x87, 0xbe, 0x49, 0x9b, 0xcd, 0x64, 0x64, 0xa9, 0x0a, 0x52, 0x13, 0xc5, 0x2e, 0x96, 0x74, 0x17,
	0x6a, 0xc2, 0x13, 0x75, 0xe9, 0x68, 0x81, 0xef, 0x91, 0x81, 0x4d, 0x7e, 0x46, 0x60, 0x73, 0x19,
	0x2a, 0xe2, 0xe4, 0xd6, 0x8b, 0x8f, 0xa0, 0x4f, 0x3a, 0xd8, 0x85, 0xd0, 0x10, 0x02, 0x1f, 0xa0,
	0xe3, 0xfa, 0x2e, 0xee, 0x6e, 0x09, 0xa9, 0x01, 0xd4, 0x85, 0xd4, 0xf7, 0x78, 0xbc, 0xb5, 0x50,
	0x28, 0x46, 0x69, 0xf9, 0x99, 0x51, 0xda, 0xb7, 0x11, 0x4a, 0x78, 0xa0, 0xb6, 0x50, 0x28, 0x86,
	0x77, 0xf9, 0x99, 0xe1, 0xdd, 0x12, 0x42, 0x7f, 0x9b, 0x83, 0x75, 0x21, 0xb5, 0x23, 0x63, 0xba,
	0x05, 0x92, 0xd5, 0xd0, 0x31, 0xff, 0x1d, 0x42, 0xc7, 0x6f, 0x35, 0x33, 0x5d, 0x1e, 0xe0, 0x2e,
	0x9c, 0x19, 0x0c, 0x8b, 0xf3, 0x33, 0xc3, 0xe2, 0x25, 0x84, 0xfe, 0xa9, 0x0c, 0x67, 0x94, 0x9d,
	0xf6, 0x29, 0x84, 0xfa, 0xad, 0xf4, 0x7e, 0x5b, 0x89, 0xf7, 0xdb, 0x67, 0xfb, 0xec, 0xb3, 0x7d,
	0xf6, 0xd9, 0x3e, 0xfb, 0x3f, 0xb8, 0xcf, 0xf2, 0x13, 0x1d, 0xec, 0xb9, 0xbe, 0x61, 0x2f, 0x74,
	0x1d, 0x2d, 0x28, 0x0e, 0x38, 0xa1, 0x74, 0xaa, 0x68, 0xd5, 0x08, 0x10, 0xf1, 0xe2, 0x04, 0x86,
	0x65, 0x51, 0x4b, 0xa6, 0x0a, 0x90, 0x00, 0x01, 0x22, 0x5e, 0x7c, 0xb9, 0x59, 0xd4, 0x1a, 0x9a,
	0xfc, 0x2c, 0xb1, 0x92, 0xa4, 0x37, 0x22, 0x8c, 0xc4, 0x5f, 0xda, 0x67, 0xb0, 0x6e, 0x1b, 0x01,
	0x5f, 0xe7, 0xa6, 0xfb, 0x98, 0xfa, 0x3d, 0xee, 0x5a, 0xd1, 0x9b, 0x14, 0x3a, 0x37, 0xb9, 0xa9,
	0x4d, 0x55, 0x2e, 0xf2, 0xea, 0xa7, 0x78, 0x0b, 0x22, 0x1a, 0xdc, 0x31, 0x42, 0xaa, 0x7f, 0x93,
	0x8f, 0xf6, 0x6d, 0x39, 0xfa, 0x45, 0xe9, 0x26, 0x8b, 0xda, 0xa1, 0xa1, 0x8e, 0x1d, 0x01, 0x22,
	0x5e, 0x9a, 0x0e, 0x25, 0xd7, 0x67, 0xfd, 0x38, 0x6f, 0x83, 0xe9, 0x26, 0x81, 0x10, 0xf9, 0x56,
	0x52, 0x52, 0x2b, 0x4f, 0x4c, 0x49, 0x5d, 0x87, 0xaa, 0xf8, 0x12, 0xab, 0x4b, 0x0c, 0x19, 0xd7,
	0xb2, 0x02, 0x13, 0x10, 0x05, 0x5c, 0x51, 0xaa, 0x0f, 0x2b, 0xcd, 0xf5, 0x61, 0x28, 0x7f, 0x60,
	0xf8, 0x47, 0xd2, 0xa1, 0x4a, 0xf9, 0x1c, 0x21, 0xf2, 0xcd, 0x69, 0xb8, 0xa7, 0x1f, 0x06, 0xe8,
	0x41, 0xe5, 0x38, 0x04, 0x42, 0xe4, 0x5b, 0xbb, 0x02, 0x15, 0x16, 0xf4, 0x1c, 0x37, 0x64, 0x07,
	0xc7, 0xe8, 0x36, 0xcb, 0xc2, 0x17, 0xc6, 0x20, 0x29, 0xb3, 0xe0, 0x7d, 0xfc, 0x92, 0xb9, 0x33,
	0x98, 0xca, 0x9d, 0xfd, 0x27, 0x0f, 0xa7, 0x94, 0xe9, 0xc7, 0x44, 0xf8, 0xf9, 0x54, 0xaa, 0x3d,
	0x56, 0x80, 0xc8, 0xb4, 0x3f, 0xd3, 0xc0, 0x53, 0xd6, 0xc0, 0x9f, 0xe3, 0xb8, 0x2a, 0xd2, 0x00,
	0x5f, 0xff, 0x3e, 0xd4, 0x8c, 0x83, 0x90, 0xfa, 0x3d, 0x5c, 0xd2, 0x51, 0x4e, 0xe3, 0x7b, 0xf3,
	0x12, 0xbb, 0x27, 0x79, 0xb4, 0xb7, 0x39, 0x03, 0x01, 0x88, 0x6c, 0x34, 0xfa, 0x2f, 0x95, 0x2d,
	0xa9, 0x1a, 0x09, 0xcd, 0xc6, 0x3b, 0xb0, 0x76, 0xb2, 0xc9, 0x8c, 0x34, 0x47, 0x2a, 0x35, 0x5d,
	0x50, 0x53, 0x17, 0x3f, 0x85, 0xf5, 0x6d, 0xcb, 0x7a, 0x10, 0x70, 0x0e, 0x0e, 0xe3, 0x33, 0xbe,
	0xf0, 0x36, 0x28, 0xd6, 0x57, 0x3e, 0xa3, 0xbe, 0x0a, 0x4f, 0xd2, 0x97, 0xbe, 0x0b, 0x6b, 0xbb,
	0xc1, 0xae, 0x13, 0x8b, 0xe6, 0xb3, 0xf8, 0x06, 0xd4, 0x59, 0xd0, 0x63, 0x4e, 0x6f, 0x20, 0x50,
	0x99, 0x39, 0xc1, 0xed, 0x22, 0x55, 0x41, 0xaa, 0x2c, 0x69, 0xab, 0x7f, 0x02, 0xa7, 0xa3, 0xdb,
	0xa1, 0xae, 0x50, 0x38, 0x72, 0xbb, 0x03, 0xa7, 0xa2, 0x88, 0xa5, 0x27, 0x4d, 0x43, 0x24, 0x2e,
	0xcf, 0x4f, 0xc6, 0xad, 0x93, 0x55, 0x71, 0x94, 0xd3, 0xf0, 0x53, 0xac, 0xf4, 0x43, 0x38, 0x17,
	0x31, 0xdf, 0xf6, 0x3c, 0xfb, 0x38, 0x09, 0x17, 0xaf, 0xc4, 0x16, 0x27, 0xd8, 0x6a, 0x89, 0xc5,
	0xc5, 0xdc, 0x22, 0xcb, 0x4b, 0x66, 0x24, 0xff, 0xc4, 0x19, 0xf9, 0x55, 0x01, 0x4e, 0x6f, 0xfb,
	0xfd, 0x94, 0xb4, 0x05, 0x2a, 0x79, 0x1d, 0x6a, 0xa6, 0xe1, 0x85, 0x43, 0x9f, 0x8a, 0x18, 0x46,
	0x2c, 0x72, 0xb4, 0x1b, 0x15, 0x27, 0x55, 0x59, 0xc2, 0x28, 0x66, 0x53, 0x89, 0xf7, 0x52, 0x91,
	0xb2, 0xc0, 0x94, 0x38, 0xef, 0x86, 0x7a, 0xb3, 0x25, 0x62, 0xd7, 0xb3, 0xa9, 0x9b, 0xad, 0xe9,
	0x5b, 0x2c, 0xbe, 0xc6, 0x92, 0x6b, 0xb9, 0x62, 0x12, 0xf1, 0xc5, 0xa0, 0x72, 0xf7, 0xd6, 0x4e,
	0xee, 0xde, 0x4a, 0x71, 0xe0, 0x19, 0x41, 0x33, 0x6e, 0xda, 0x5e, 0x82, 0xfa, 0xa1, 0xe1, 0x58,
	0xbb, 0x7b, 0x77, 0x7b, 0xa1, 0x7b, 0x44, 0x65, 0x84, 0x4b, 0x6a, 0x12, 0xbc, 0xcf, 0x31, 0xed,
	0x22, 0x34, 0x0e, 0x7c, 0xd7, 0x09, 0x13, 0xaa, 0x32, 0x52, 0xd5, 0x23, 0x54, 0x90, 0xbd, 0x04,
	0xf5, 0x7d, 0xc3, 0x3c, 0x4a, 0xa8, 0x2a, 0x82, 0x97, 0x04, 0x91, 0x48, 0xff, 0x45, 0x3e, 0x31,
	0xad, 0x3b, 0x34, 0xe4, 0xa1, 0x28, 0xaa, 0x5e, 0x9d, 0xc2, 0xdc, 0xdc, 0x29, 0x7c, 0x1e, 0x56,
	0xf8, 0x70, 0xd5, 0x83, 0x03, 0x2f, 0x13, 0x7c, 0xa6, 0x27, 0xb8, 0x90, 0x75, 0x82, 0x23, 0xb3,
	0x5b, 0xc9, 0x62, 0x76, 0x7d, 0xea, 0x58, 0xd4, 0x97, 0x9a, 0x40, 0xb3, 0x13, 0x08, 0x91, 0x6f,
	0xed, 0x12, 0x94, 0xf9, 0xfc, 0xf5, 0xd8, 0xa0, 0xaf, 0xba, 0xe1, 0x08, 0x23, 0xab, 0x38, 0xbb,
	0x83, 0xbe, 0xfe, 0x87, 0x3c, 0x3c, 0x97, 0xac, 0x33, 0x9f, 0x79, 0x1e, 0xb5, 0x32, 0x1d, 0x9e,
	0x92, 0x1e, 0xe7, 0x17, 0xf6, 0xf8, 0x55, 0x58, 0x35, 0x0f, 0x0d, 0xc7, 0xa1, 0xb6, 0x9c, 0x8f,
	0xd3, 0x68, 0x12, 0x02, 0x8a, 0xa9, 0x23, 0x40, 0xb5, 0xa0, 0x95, 0x2c, 0x16, 0x94, 0x9a, 0xf0,
	0x62, 0xb6, 0x09, 0x7f, 0x03, 0xc0, 0xb0, 0x86, 0x76, 0x28, 0x1a, 0x09, 0x43, 0x3d, 0xc7, 0x83,
	0xd1, 0x04, 0x8d, 0x5b, 0x55, 0x10, 0xc3, 0xeb, 0xdc, 0xbf, 0xe6, 0xe0, 0xdc, 0xd4, 0xcd, 0xb5,
	0x98, 0xab, 0x47, 0x50, 0xe5, 0x2b, 0xa1, 0x17, 0xba, 0x3d, 0x3e, 0x67, 0xe2, 0xc6, 0xf2, 0xdd,
	0x79, 0x09, 0xe8, 0x99, 0x7c, 0xda, 0x7c, 0x11, 0xdd, 0x77, 0xf7, 0x98, 0x25, 0xf6, 0x0b, 0x71,
	0x76, 0x49, 0x18, 0x93, 0x8a, 0x19, 0x11, 0x6c, 0xbc, 0x0d, 0x8d, 0x34, 0xf5, 0xa2, 0x5b, 0xcc,
	0xd4, 0x56, 0xf1, 0xc7, 0x1c, 0x34, 0x3a, 0xb6, 0x6b, 0x1e, 0xa5, 0xf4, 0xbd, 0xb7, 0x7b, 0x67,
	0x4a, 0xdf, 0x7b, 0xbb, 0x77, 0xb4, 0x6b, 0x50, 0x45, 0xe2, 0xae, 0xaa, 0x74, 0x75, 0x3f, 0x56,
	0xab, 0xb5, 0x6b, 0x50, 0xe9, 0x86, 0x86, 0x1f, 0xf2, 0x78, 0x53, 0xc6, 0x20, 0x22, 0xd4, 0xe7,
	0x60, 0x8f, 0x87, 0xa2, 0x24, 0x21, 0xd0, 0x5e, 0x81, 0xd5, 0x1d, 0xc7, 0x42, 0x5a, 0x25, 0x14,
	0xa6, 0x8e, 0x25, 0x28, 0xa3, 0x4a, 0xfd, 0xc7, 0xb0, 0x86, 0x42, 0xd4, 0x55, 0x3b, 0xa7, 0xcb,
	0x5b, 0x00, 0x48, 0x7e, 0x3b, 0xbe, 0x1c, 0x95, 0xc1, 0xcb, 0x3e, 0x47, 0x7b, 0xe2, 0x8a, 0x54,
	0x21, 0xd1, 0x7f, 0x96, 0x87, 0xb3, 0x58, 0xec, 0x18, 0xa1, 0x79, 0xa8, 0x4a, 0x39, 0x86, 0x9a,
	0x22, 0x39, 0x0a, 0x05, 0x3a, 0xf3, 0xae, 0x76, 0x66, 0xf1, 0x69, 0xab, 0x4c, 0x84, 0x7e, 0xc5,
	0xb1, 0x09, 0x3b, 0x64, 0x09, 0x9c, 0xa4, 0x44, 0x6d, 0xd8, 0xb0, 0x3e, 0xd5, 0x6a, 0x46, 0x48,
	0xb0, 0x9d, 0xbe, 0xf9, 0xb8, 0xba, 0xa8, 0x6b, 0x4a, 0xaf, 0x54, 0xa3, 0x78, 0x04, 0xa7, 0x93,
	0x9e, 0x27, 0x86, 0xf1, 0xb1, 0x9c, 0xca, 0x5d, 0xe5, 0x72, 0xe7, 0xf2, 0x22, 0x11, 0x71, 0x73,
	0x75, 0xd6, 0xf1, 0x7a, 0x88, 0x28, 0xdc, 0x6e, 0xfc, 0xf2, 0x3c, 0x94, 0xc4, 0x65, 0x8c, 0xf6,
	0x11, 0xac, 0x74, 0x8c, 0x80, 0x6a, 0x97, 0x16, 0xde, 0xdb, 0x88, 0xdf, 0xb9, 0x6c, 0x64, 0xbe,
	0x5c, 0xd3, 0x3e, 0x85, 0x22, 0x07, 0x02, 0x6d, 0x33, 0x0b, 0x6f, 0x1e, 0x83, 0x6f, 0x5c, 0xce,
	0x7c, 0x1b, 0xa9, 0x3d, 0x8c, 0x87, 0x90, 0xb9, 0xeb, 0x4b, 0xdc, 0x4d, 0x69, 0x9f, 0xc1, 0xaa,
	0x80, 0x96, 0xe9, 0xfe, 0xd5, 0x25, 0x2e, 0xdf, 0x34, 0x13, 0xaa, 0xca, 0x95, 0x57, 0xf6, 0x51,
	0xcc, 0x13, 0x32, 0x75, 0x87, 0x66, 0x40, 0xa3, 0x4b, 0xc3, 0x6f, 0x25, 0xe7, 0x95, 0x39, 0x84,
	0xca, 0x0f, 0x6c, 0x34, 0x13, 0x45, 0x28, 0x99, 0x40, 0xed, 0x72, 0x86, 0xab, 0x4e, 0x71, 0x37,
	0x97, 0x59, 0xc8, 0x47, 0x50, 0xea, 0xd2, 0xb0, 0x4b, 0x47, 0x73, 0xfb, 0xaf, 0xa6, 0xde, 0x33,
	0xb3, 0xfe, 0x14, 0x56, 0xf9, 0x14, 0x61, 0x06, 0x7c, 0x21, 0xef, 0x28, 0xcb, 0x9e, 0x99, 0xfb,
	0x27, 0xc8, 0xfd, 0x3d, 0xc3, 0xa4, 0x73, 0xed, 0x28, 0x95, 0x4d, 0x5f, 0x92, 0x39, 0x31, 0x9c,
	0xa3, 0x0c, 0xcc, 0x65, 0xd6, 0x7c, 0x09, 0xbd, 0x56, 0xbb, 0x34, 0x8c, 0xb2, 0xde, 0xda, 0xb5,
	0x85, 0x02, 0x94, 0x04, 0xf9, 0x92, 0x23, 0xe8, 0xb2, 0xbe, 0x93, 0x61, 0x04, 0x32, 0xbb, 0x9d,
	0x99, 0xb9, 0x01, 0x55, 0xd5, 0x2c, 0x5f, 0x9c, 0x1f, 0x19, 0x70, 0xce, 0x5b, 0xd9, 0x2c, 0x37,
	0x71, 0x13, 0x1f, 0x42, 0x11, 0xcf, 0x8d, 0xd9, 0x97, 0xd5, 0xc5, 0x79, 0x84, 0x49, 0x26, 0xec,
	0x21, 0x94, 0xb1, 0x74, 0xcf, 0xed, 0x3f, 0x1d, 0xdf, 0x9c, 0xfe, 0xf9, 0xd4, 0x43, 0x28, 0x6f,
	0x5b, 0x96, 0xe8, 0xfa, 0xe5, 0x6c, 0xc7, 0xeb, 0x65, 0x66, 0x9e, 0x41, 0x1d, 0xb7, 0xb3, 0x58,
	0xc6, 0x95, 0xcc, 0x47, 0xf8, 0x47, 0x1b, 0xd7, 0x96, 0x39, 0xee, 0x6b, 0x5d, 0x28, 0xec, 0x8c,
	0xbc, 0x2c, 0xca, 0xcd, 0xfe, 0x73, 0x0e, 0xed, 0x01, 0x14, 0x45, 0xe6, 0xf5, 0xe9, 0xb2, 0xfd,
	0x08, 0x2a, 0x62, 0x00, 0xbc, 0xc7, 0x2f, 0xcf, 0x69, 0x17, 0xff, 0x08, 0x2d, 0xf3, 0x8c, 0x3f,
	0x80, 0xd2, 0xce, 0xc8, 0xe3, 0xd6, 0x92, 0xa1, 0xcb, 0xd9, 0xed, 0xe4, 0x01, 0xac, 0xca, 0xdf,
	0x98, 0x65, 0xe1, 0x3b, 0xcf, 0x50, 0x53, 0x3f, 0x55, 0x63, 0xd0, 0x48, 0xa7, 0x1a, 0xb2, 0xdb,
	0x78, 0x7b, 0x0e, 0xe1, 0xac, 0xf4, 0xc5, 0xa3, 0xe4, 0xe8, 0x89, 0xa9, 0x80, 0x65, 0xe5, 0xbd,
	0x96, 0x41, 0xde, 0x89, 0x8c, 0x06, 0x05, 0x2d, 0xaa, 0xb9, 0x4f, 0xed, 0xdb, 0x22, 0x67, 0xf0,
	0xf4, 0x37, 0xde, 0x3e, 0xd4, 0x53, 0x1d, 0xd0, 0xe6, 0x4d, 0xcd, 0x8c, 0x8c, 0xc8, 0x12, 0xab,
	0xb9, 0x91, 0x3e, 0xbd, 0x3f, 0x5d, 0x6d, 0xa9, 0x51, 0xff, 0x10, 0xce, 0xcc, 0x3a, 0x1b, 0x67,
	0x17, 0x78, 0x33, 0x93, 0x79, 0x9c, 0x3c, 0x75, 0x8f, 0x60, 0x7d, 0xea, 0x6c, 0xa8, 0x5d, 0x5f,
	0xe6, 0x24, 0x19, 0x2c, 0xb2, 0x95, 0x27, 0x9c, 0x61, 0x0f, 0xa0, 0x91, 0xce, 0x1e, 0xce, 0xdd,
	0x68, 0xa7, 0x12, 0x8d, 0x99, 0x75, 0xf8, 0x10, 0xaa, 0x4a, 0x9e, 0x30, 0xcb, 0x62, 0x9e, 0x17,
	0x67, 0x4e, 0xa5, 0x1c, 0x7b, 0x50, 0x89, 0xcf, 0x17, 0xd9, 0x95, 0x95, 0xfd, 0x3c, 0xa3, 0x7d,
	0x2e, 0x4f, 0xce, 0xf1, 0x29, 0x69, 0x89, 0xb0, 0xbc, 0x9d, 0xe9, 0xd0, 0x98, 0xc8, 0x72, 0xe4,
	0xa1, 0x57, 0x39, 0x4b, 0x2e, 0x21, 0xed, 0xfa, 0xb2, 0x47, 0xd4, 0xce, 0xfa, 0x5f, 0xbe, 0x7c,
	0x21, 0xf7, 0xb7, 0x2f, 0x5f, 0xc8, 0xfd, 0xf3, 0xcb, 0x17, 0x72, 0x1f, 0x17, 0x0c, 0x8f, 0xed,
	0x97, 0xf0, 0xbf, 0x15, 0x5e, 0xff, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x08, 0x3d, 0xe2, 0x5b,
	0x20, 0x31, 0x00, 0x00,
}
