// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/vip/api/api.proto

/*
	Package v1 is a generated protocol buffer package.

	use {app_id}.{version} as package name

	It is generated from these files:
		app/service/main/vip/api/api.proto

	It has these top-level messages:
		RegisterOpenIDReq
		RegisterOpenIDReply
		OpenBindByOutOpenIDReq
		OpenBindByOutOpenIDReply
		UserInfoByOpenIDReq
		UserInfoByOpenIDReply
		BindInfoByMidReq
		BindInfoByMidReply
		Account
		BindOuter
		BilibiliPrizeGrantReq
		BilibiliPrizeGrantReply
		BilibiliVipGrantReq
		BilibiliVipGrantReply
		CreateAssociateOrderReq
		CreateAssociateOrderReply
		AssociatePanelReq
		AssociatePanelReply
		AssociatePanelInfo
		OpenAuthCallBackReq
		OpenAuthCallBackReply
		EleRedPackagesReq
		EleRedPackagesReply
		ModelEleRedPackage
		EleSpecailFoodsReq
		EleSpecailFoodsReply
		ModelEleSpecailFoods
		EleVipGrantReq
		EleVipGrantReply
		VipUserPanelReq
		VipUserPanelReply
		CouponBySuitIDReply
		ModelCouponAllowancePanelInfo
		ModelVipPanelInfo
		ModelPrivilegeResp
		ModelPrivilege
		CouponBySuitIDReq
		WelfareReq
		WelfareReply
		WelfareListDetail
		WelfareTypeReq
		WelfareTypeReply
		WelfareTypeListDetail
		WelfareInfoReq
		WelfareInfoReply
		WelfareReceiveReq
		WelfareReceiveReply
		MyWelfareReq
		MyWelfareReply
		MyWelfareDetail
*/
package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RegisterOpenIDReq struct {
	Mid   int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	AppId int64 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *RegisterOpenIDReq) Reset()                    { *m = RegisterOpenIDReq{} }
func (m *RegisterOpenIDReq) String() string            { return proto.CompactTextString(m) }
func (*RegisterOpenIDReq) ProtoMessage()               {}
func (*RegisterOpenIDReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

func (m *RegisterOpenIDReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *RegisterOpenIDReq) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

type RegisterOpenIDReply struct {
	OpenId string `protobuf:"bytes,1,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
}

func (m *RegisterOpenIDReply) Reset()                    { *m = RegisterOpenIDReply{} }
func (m *RegisterOpenIDReply) String() string            { return proto.CompactTextString(m) }
func (*RegisterOpenIDReply) ProtoMessage()               {}
func (*RegisterOpenIDReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *RegisterOpenIDReply) GetOpenId() string {
	if m != nil {
		return m.OpenId
	}
	return ""
}

type OpenBindByOutOpenIDReq struct {
	OpenId    string `protobuf:"bytes,1,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	OutOpenId string `protobuf:"bytes,2,opt,name=out_open_id,json=outOpenId,proto3" json:"out_open_id,omitempty"`
	AppId     int64  `protobuf:"varint,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *OpenBindByOutOpenIDReq) Reset()                    { *m = OpenBindByOutOpenIDReq{} }
func (m *OpenBindByOutOpenIDReq) String() string            { return proto.CompactTextString(m) }
func (*OpenBindByOutOpenIDReq) ProtoMessage()               {}
func (*OpenBindByOutOpenIDReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

func (m *OpenBindByOutOpenIDReq) GetOpenId() string {
	if m != nil {
		return m.OpenId
	}
	return ""
}

func (m *OpenBindByOutOpenIDReq) GetOutOpenId() string {
	if m != nil {
		return m.OutOpenId
	}
	return ""
}

func (m *OpenBindByOutOpenIDReq) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

type OpenBindByOutOpenIDReply struct {
}

func (m *OpenBindByOutOpenIDReply) Reset()                    { *m = OpenBindByOutOpenIDReply{} }
func (m *OpenBindByOutOpenIDReply) String() string            { return proto.CompactTextString(m) }
func (*OpenBindByOutOpenIDReply) ProtoMessage()               {}
func (*OpenBindByOutOpenIDReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

type UserInfoByOpenIDReq struct {
	Ip     string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	OpenId string `protobuf:"bytes,2,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	AppId  int64  `protobuf:"varint,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *UserInfoByOpenIDReq) Reset()                    { *m = UserInfoByOpenIDReq{} }
func (m *UserInfoByOpenIDReq) String() string            { return proto.CompactTextString(m) }
func (*UserInfoByOpenIDReq) ProtoMessage()               {}
func (*UserInfoByOpenIDReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

func (m *UserInfoByOpenIDReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *UserInfoByOpenIDReq) GetOpenId() string {
	if m != nil {
		return m.OpenId
	}
	return ""
}

func (m *UserInfoByOpenIDReq) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

type UserInfoByOpenIDReply struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BindState int32  `protobuf:"varint,2,opt,name=bind_state,json=bindState,proto3" json:"bind_state"`
	OutOpenId string `protobuf:"bytes,3,opt,name=out_open_id,json=outOpenId,proto3" json:"out_open_id,omitempty"`
}

func (m *UserInfoByOpenIDReply) Reset()                    { *m = UserInfoByOpenIDReply{} }
func (m *UserInfoByOpenIDReply) String() string            { return proto.CompactTextString(m) }
func (*UserInfoByOpenIDReply) ProtoMessage()               {}
func (*UserInfoByOpenIDReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

func (m *UserInfoByOpenIDReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserInfoByOpenIDReply) GetBindState() int32 {
	if m != nil {
		return m.BindState
	}
	return 0
}

func (m *UserInfoByOpenIDReply) GetOutOpenId() string {
	if m != nil {
		return m.OutOpenId
	}
	return ""
}

type BindInfoByMidReq struct {
	Mid   int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	AppId int64 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *BindInfoByMidReq) Reset()                    { *m = BindInfoByMidReq{} }
func (m *BindInfoByMidReq) String() string            { return proto.CompactTextString(m) }
func (*BindInfoByMidReq) ProtoMessage()               {}
func (*BindInfoByMidReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

func (m *BindInfoByMidReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *BindInfoByMidReq) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

type BindInfoByMidReply struct {
	Account *Account   `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Outer   *BindOuter `protobuf:"bytes,2,opt,name=outer" json:"outer,omitempty"`
}

func (m *BindInfoByMidReply) Reset()                    { *m = BindInfoByMidReply{} }
func (m *BindInfoByMidReply) String() string            { return proto.CompactTextString(m) }
func (*BindInfoByMidReply) ProtoMessage()               {}
func (*BindInfoByMidReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{7} }

func (m *BindInfoByMidReply) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *BindInfoByMidReply) GetOuter() *BindOuter {
	if m != nil {
		return m.Outer
	}
	return nil
}

type Account struct {
	Mid  int64  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Face string `protobuf:"bytes,3,opt,name=face,proto3" json:"face,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{8} }

func (m *Account) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Account) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Account) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

type BindOuter struct {
	Tel       string `protobuf:"bytes,1,opt,name=tel,proto3" json:"tel,omitempty"`
	BindState int32  `protobuf:"varint,2,opt,name=bind_state,json=bindState,proto3" json:"bind_state"`
}

func (m *BindOuter) Reset()                    { *m = BindOuter{} }
func (m *BindOuter) String() string            { return proto.CompactTextString(m) }
func (*BindOuter) ProtoMessage()               {}
func (*BindOuter) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{9} }

func (m *BindOuter) GetTel() string {
	if m != nil {
		return m.Tel
	}
	return ""
}

func (m *BindOuter) GetBindState() int32 {
	if m != nil {
		return m.BindState
	}
	return 0
}

type BilibiliPrizeGrantReq struct {
	PrizeKey string `protobuf:"bytes,1,opt,name=prize_key,json=prizeKey,proto3" json:"prize_key,omitempty"`
	UniqueNo string `protobuf:"bytes,2,opt,name=unique_no,json=uniqueNo,proto3" json:"unique_no,omitempty"`
	OpenId   string `protobuf:"bytes,3,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	AppId    int64  `protobuf:"varint,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *BilibiliPrizeGrantReq) Reset()                    { *m = BilibiliPrizeGrantReq{} }
func (m *BilibiliPrizeGrantReq) String() string            { return proto.CompactTextString(m) }
func (*BilibiliPrizeGrantReq) ProtoMessage()               {}
func (*BilibiliPrizeGrantReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{10} }

func (m *BilibiliPrizeGrantReq) GetPrizeKey() string {
	if m != nil {
		return m.PrizeKey
	}
	return ""
}

func (m *BilibiliPrizeGrantReq) GetUniqueNo() string {
	if m != nil {
		return m.UniqueNo
	}
	return ""
}

func (m *BilibiliPrizeGrantReq) GetOpenId() string {
	if m != nil {
		return m.OpenId
	}
	return ""
}

func (m *BilibiliPrizeGrantReq) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

type BilibiliPrizeGrantReply struct {
	Amount      float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	FullAmount  float64 `protobuf:"fixed64,2,opt,name=full_amount,json=fullAmount,proto3" json:"full_amount,omitempty"`
	Description string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *BilibiliPrizeGrantReply) Reset()                    { *m = BilibiliPrizeGrantReply{} }
func (m *BilibiliPrizeGrantReply) String() string            { return proto.CompactTextString(m) }
func (*BilibiliPrizeGrantReply) ProtoMessage()               {}
func (*BilibiliPrizeGrantReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{11} }

func (m *BilibiliPrizeGrantReply) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *BilibiliPrizeGrantReply) GetFullAmount() float64 {
	if m != nil {
		return m.FullAmount
	}
	return 0
}

func (m *BilibiliPrizeGrantReply) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type BilibiliVipGrantReq struct {
	OpenId     string `protobuf:"bytes,1,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	OutOpenId  string `protobuf:"bytes,2,opt,name=out_open_id,json=outOpenId,proto3" json:"out_open_id,omitempty"`
	OutOrderNo string `protobuf:"bytes,3,opt,name=out_order_no,json=outOrderNo,proto3" json:"out_order_no,omitempty"`
	Duration   int32  `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	AppId      int64  `protobuf:"varint,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *BilibiliVipGrantReq) Reset()                    { *m = BilibiliVipGrantReq{} }
func (m *BilibiliVipGrantReq) String() string            { return proto.CompactTextString(m) }
func (*BilibiliVipGrantReq) ProtoMessage()               {}
func (*BilibiliVipGrantReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{12} }

func (m *BilibiliVipGrantReq) GetOpenId() string {
	if m != nil {
		return m.OpenId
	}
	return ""
}

func (m *BilibiliVipGrantReq) GetOutOpenId() string {
	if m != nil {
		return m.OutOpenId
	}
	return ""
}

func (m *BilibiliVipGrantReq) GetOutOrderNo() string {
	if m != nil {
		return m.OutOrderNo
	}
	return ""
}

func (m *BilibiliVipGrantReq) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *BilibiliVipGrantReq) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

type BilibiliVipGrantReply struct {
}

func (m *BilibiliVipGrantReply) Reset()                    { *m = BilibiliVipGrantReply{} }
func (m *BilibiliVipGrantReply) String() string            { return proto.CompactTextString(m) }
func (*BilibiliVipGrantReply) ProtoMessage()               {}
func (*BilibiliVipGrantReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{13} }

type CreateAssociateOrderReq struct {
	Mid         int64  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Month       int32  `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Platform    string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	MobiApp     string `protobuf:"bytes,4,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	Device      string `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
	AppId       int64  `protobuf:"varint,6,opt,name=appId,proto3" json:"appId,omitempty"`
	AppSubId    string `protobuf:"bytes,7,opt,name=appSubId,proto3" json:"appSubId,omitempty"`
	OrderType   int32  `protobuf:"varint,8,opt,name=orderType,proto3" json:"orderType,omitempty"`
	Dtype       int32  `protobuf:"varint,9,opt,name=dtype,proto3" json:"dtype,omitempty"`
	ReturnUrl   string `protobuf:"bytes,10,opt,name=returnUrl,proto3" json:"returnUrl,omitempty"`
	CouponToken string `protobuf:"bytes,11,opt,name=coupon_token,json=couponToken,proto3" json:"coupon_token,omitempty"`
	Bmid        int64  `protobuf:"varint,12,opt,name=bmid,proto3" json:"bmid,omitempty"`
	PanelType   string `protobuf:"bytes,13,opt,name=panel_type,json=panelType,proto3" json:"panel_type,omitempty"`
	Build       int64  `protobuf:"varint,14,opt,name=build,proto3" json:"build,omitempty"`
	IP          string `protobuf:"bytes,15,opt,name=IP,proto3" json:"IP,omitempty"`
}

func (m *CreateAssociateOrderReq) Reset()                    { *m = CreateAssociateOrderReq{} }
func (m *CreateAssociateOrderReq) String() string            { return proto.CompactTextString(m) }
func (*CreateAssociateOrderReq) ProtoMessage()               {}
func (*CreateAssociateOrderReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{14} }

func (m *CreateAssociateOrderReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *CreateAssociateOrderReq) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *CreateAssociateOrderReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *CreateAssociateOrderReq) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *CreateAssociateOrderReq) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *CreateAssociateOrderReq) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *CreateAssociateOrderReq) GetAppSubId() string {
	if m != nil {
		return m.AppSubId
	}
	return ""
}

func (m *CreateAssociateOrderReq) GetOrderType() int32 {
	if m != nil {
		return m.OrderType
	}
	return 0
}

func (m *CreateAssociateOrderReq) GetDtype() int32 {
	if m != nil {
		return m.Dtype
	}
	return 0
}

func (m *CreateAssociateOrderReq) GetReturnUrl() string {
	if m != nil {
		return m.ReturnUrl
	}
	return ""
}

func (m *CreateAssociateOrderReq) GetCouponToken() string {
	if m != nil {
		return m.CouponToken
	}
	return ""
}

func (m *CreateAssociateOrderReq) GetBmid() int64 {
	if m != nil {
		return m.Bmid
	}
	return 0
}

func (m *CreateAssociateOrderReq) GetPanelType() string {
	if m != nil {
		return m.PanelType
	}
	return ""
}

func (m *CreateAssociateOrderReq) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *CreateAssociateOrderReq) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type CreateAssociateOrderReply struct {
	PayParam    string  `protobuf:"bytes,1,opt,name=pay_param,json=payParam,proto3" json:"pay_param,omitempty"`
	Dprice      float64 `protobuf:"fixed64,2,opt,name=dprice,proto3" json:"dprice,omitempty"`
	Oprice      float64 `protobuf:"fixed64,3,opt,name=oprice,proto3" json:"oprice,omitempty"`
	CouponMoney float64 `protobuf:"fixed64,4,opt,name=coupon_money,json=couponMoney,proto3" json:"coupon_money,omitempty"`
}

func (m *CreateAssociateOrderReply) Reset()                    { *m = CreateAssociateOrderReply{} }
func (m *CreateAssociateOrderReply) String() string            { return proto.CompactTextString(m) }
func (*CreateAssociateOrderReply) ProtoMessage()               {}
func (*CreateAssociateOrderReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{15} }

func (m *CreateAssociateOrderReply) GetPayParam() string {
	if m != nil {
		return m.PayParam
	}
	return ""
}

func (m *CreateAssociateOrderReply) GetDprice() float64 {
	if m != nil {
		return m.Dprice
	}
	return 0
}

func (m *CreateAssociateOrderReply) GetOprice() float64 {
	if m != nil {
		return m.Oprice
	}
	return 0
}

func (m *CreateAssociateOrderReply) GetCouponMoney() float64 {
	if m != nil {
		return m.CouponMoney
	}
	return 0
}

type AssociatePanelReq struct {
	Mid       int64  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	SortTp    int32  `protobuf:"varint,2,opt,name=SortTp,proto3" json:"SortTp,omitempty"`
	IP        string `protobuf:"bytes,3,opt,name=IP,proto3" json:"IP,omitempty"`
	MobiApp   string `protobuf:"bytes,4,opt,name=MobiApp,proto3" json:"MobiApp,omitempty"`
	Device    string `protobuf:"bytes,5,opt,name=Device,proto3" json:"Device,omitempty"`
	Platform  string `protobuf:"bytes,6,opt,name=Platform,proto3" json:"Platform,omitempty"`
	Plat      int32  `protobuf:"varint,7,opt,name=Plat,proto3" json:"Plat,omitempty"`
	PanelType string `protobuf:"bytes,8,opt,name=PanelType,proto3" json:"PanelType,omitempty"`
	SubType   int32  `protobuf:"varint,9,opt,name=SubType,proto3" json:"SubType,omitempty"`
	Month     int32  `protobuf:"varint,10,opt,name=Month,proto3" json:"Month,omitempty"`
	Build     int64  `protobuf:"varint,11,opt,name=Build,proto3" json:"Build,omitempty"`
}

func (m *AssociatePanelReq) Reset()                    { *m = AssociatePanelReq{} }
func (m *AssociatePanelReq) String() string            { return proto.CompactTextString(m) }
func (*AssociatePanelReq) ProtoMessage()               {}
func (*AssociatePanelReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{16} }

func (m *AssociatePanelReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *AssociatePanelReq) GetSortTp() int32 {
	if m != nil {
		return m.SortTp
	}
	return 0
}

func (m *AssociatePanelReq) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *AssociatePanelReq) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *AssociatePanelReq) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *AssociatePanelReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *AssociatePanelReq) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *AssociatePanelReq) GetPanelType() string {
	if m != nil {
		return m.PanelType
	}
	return ""
}

func (m *AssociatePanelReq) GetSubType() int32 {
	if m != nil {
		return m.SubType
	}
	return 0
}

func (m *AssociatePanelReq) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *AssociatePanelReq) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

type AssociatePanelReply struct {
	List []*AssociatePanelInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *AssociatePanelReply) Reset()                    { *m = AssociatePanelReply{} }
func (m *AssociatePanelReply) String() string            { return proto.CompactTextString(m) }
func (*AssociatePanelReply) ProtoMessage()               {}
func (*AssociatePanelReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{17} }

func (m *AssociatePanelReply) GetList() []*AssociatePanelInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type AssociatePanelInfo struct {
	Id            int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Month         int32   `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	ProductName   string  `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	ProductId     string  `protobuf:"bytes,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	SubType       int32   `protobuf:"varint,5,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	SuitType      int32   `protobuf:"varint,6,opt,name=suit_type,json=suitType,proto3" json:"suit_type,omitempty"`
	OriginalPrice float64 `protobuf:"fixed64,7,opt,name=original_price,json=originalPrice,proto3" json:"original_price,omitempty"`
	DiscountPrice float64 `protobuf:"fixed64,8,opt,name=discount_price,json=discountPrice,proto3" json:"discount_price,omitempty"`
	DiscountRate  string  `protobuf:"bytes,9,opt,name=discount_rate,json=discountRate,proto3" json:"discount_rate,omitempty"`
	Remark        string  `protobuf:"bytes,10,opt,name=remark,proto3" json:"remark,omitempty"`
	Selected      int32   `protobuf:"varint,11,opt,name=selected,proto3" json:"selected,omitempty"`
	PayState      int32   `protobuf:"varint,12,opt,name=pay_state,json=payState,proto3" json:"pay_state"`
	PayMessage    string  `protobuf:"bytes,13,opt,name=pay_message,json=payMessage,proto3" json:"pay_message,omitempty"`
}

func (m *AssociatePanelInfo) Reset()                    { *m = AssociatePanelInfo{} }
func (m *AssociatePanelInfo) String() string            { return proto.CompactTextString(m) }
func (*AssociatePanelInfo) ProtoMessage()               {}
func (*AssociatePanelInfo) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{18} }

func (m *AssociatePanelInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AssociatePanelInfo) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *AssociatePanelInfo) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *AssociatePanelInfo) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *AssociatePanelInfo) GetSubType() int32 {
	if m != nil {
		return m.SubType
	}
	return 0
}

func (m *AssociatePanelInfo) GetSuitType() int32 {
	if m != nil {
		return m.SuitType
	}
	return 0
}

func (m *AssociatePanelInfo) GetOriginalPrice() float64 {
	if m != nil {
		return m.OriginalPrice
	}
	return 0
}

func (m *AssociatePanelInfo) GetDiscountPrice() float64 {
	if m != nil {
		return m.DiscountPrice
	}
	return 0
}

func (m *AssociatePanelInfo) GetDiscountRate() string {
	if m != nil {
		return m.DiscountRate
	}
	return ""
}

func (m *AssociatePanelInfo) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *AssociatePanelInfo) GetSelected() int32 {
	if m != nil {
		return m.Selected
	}
	return 0
}

func (m *AssociatePanelInfo) GetPayState() int32 {
	if m != nil {
		return m.PayState
	}
	return 0
}

func (m *AssociatePanelInfo) GetPayMessage() string {
	if m != nil {
		return m.PayMessage
	}
	return ""
}

type OpenAuthCallBackReq struct {
	Mid       int64  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	ThirdCode string `protobuf:"bytes,2,opt,name=third_code,json=thirdCode,proto3" json:"third_code,omitempty"`
	AppId     int64  `protobuf:"varint,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *OpenAuthCallBackReq) Reset()                    { *m = OpenAuthCallBackReq{} }
func (m *OpenAuthCallBackReq) String() string            { return proto.CompactTextString(m) }
func (*OpenAuthCallBackReq) ProtoMessage()               {}
func (*OpenAuthCallBackReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{19} }

func (m *OpenAuthCallBackReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *OpenAuthCallBackReq) GetThirdCode() string {
	if m != nil {
		return m.ThirdCode
	}
	return ""
}

func (m *OpenAuthCallBackReq) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

type OpenAuthCallBackReply struct {
}

func (m *OpenAuthCallBackReply) Reset()                    { *m = OpenAuthCallBackReply{} }
func (m *OpenAuthCallBackReply) String() string            { return proto.CompactTextString(m) }
func (*OpenAuthCallBackReply) ProtoMessage()               {}
func (*OpenAuthCallBackReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{20} }

type EleRedPackagesReq struct {
}

func (m *EleRedPackagesReq) Reset()                    { *m = EleRedPackagesReq{} }
func (m *EleRedPackagesReq) String() string            { return proto.CompactTextString(m) }
func (*EleRedPackagesReq) ProtoMessage()               {}
func (*EleRedPackagesReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{21} }

type EleRedPackagesReply struct {
	List []*ModelEleRedPackage `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *EleRedPackagesReply) Reset()                    { *m = EleRedPackagesReply{} }
func (m *EleRedPackagesReply) String() string            { return proto.CompactTextString(m) }
func (*EleRedPackagesReply) ProtoMessage()               {}
func (*EleRedPackagesReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{22} }

func (m *EleRedPackagesReply) GetList() []*ModelEleRedPackage {
	if m != nil {
		return m.List
	}
	return nil
}

type ModelEleRedPackage struct {
	Name         string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Amount       float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	SumCondition float64 `protobuf:"fixed64,3,opt,name=sum_condition,json=sumCondition,proto3" json:"sum_condition,omitempty"`
}

func (m *ModelEleRedPackage) Reset()                    { *m = ModelEleRedPackage{} }
func (m *ModelEleRedPackage) String() string            { return proto.CompactTextString(m) }
func (*ModelEleRedPackage) ProtoMessage()               {}
func (*ModelEleRedPackage) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{23} }

func (m *ModelEleRedPackage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModelEleRedPackage) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ModelEleRedPackage) GetSumCondition() float64 {
	if m != nil {
		return m.SumCondition
	}
	return 0
}

type EleSpecailFoodsReq struct {
}

func (m *EleSpecailFoodsReq) Reset()                    { *m = EleSpecailFoodsReq{} }
func (m *EleSpecailFoodsReq) String() string            { return proto.CompactTextString(m) }
func (*EleSpecailFoodsReq) ProtoMessage()               {}
func (*EleSpecailFoodsReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{24} }

type EleSpecailFoodsReply struct {
	List []*ModelEleSpecailFoods `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *EleSpecailFoodsReply) Reset()                    { *m = EleSpecailFoodsReply{} }
func (m *EleSpecailFoodsReply) String() string            { return proto.CompactTextString(m) }
func (*EleSpecailFoodsReply) ProtoMessage()               {}
func (*EleSpecailFoodsReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{25} }

func (m *EleSpecailFoodsReply) GetList() []*ModelEleSpecailFoods {
	if m != nil {
		return m.List
	}
	return nil
}

type ModelEleSpecailFoods struct {
	RestaurantName string  `protobuf:"bytes,1,opt,name=restaurant_name,json=restaurantName,proto3" json:"restaurant_name,omitempty"`
	FoodName       string  `protobuf:"bytes,2,opt,name=food_name,json=foodName,proto3" json:"food_name,omitempty"`
	FoodUrl        string  `protobuf:"bytes,3,opt,name=food_url,json=foodUrl,proto3" json:"food_url,omitempty"`
	Discount       float64 `protobuf:"fixed64,4,opt,name=discount,proto3" json:"discount,omitempty"`
	Amount         float64 `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	OriginalAmount float64 `protobuf:"fixed64,6,opt,name=original_amount,json=originalAmount,proto3" json:"original_amount,omitempty"`
	RatingPoint    float64 `protobuf:"fixed64,7,opt,name=rating_point,json=ratingPoint,proto3" json:"rating_point,omitempty"`
}

func (m *ModelEleSpecailFoods) Reset()                    { *m = ModelEleSpecailFoods{} }
func (m *ModelEleSpecailFoods) String() string            { return proto.CompactTextString(m) }
func (*ModelEleSpecailFoods) ProtoMessage()               {}
func (*ModelEleSpecailFoods) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{26} }

func (m *ModelEleSpecailFoods) GetRestaurantName() string {
	if m != nil {
		return m.RestaurantName
	}
	return ""
}

func (m *ModelEleSpecailFoods) GetFoodName() string {
	if m != nil {
		return m.FoodName
	}
	return ""
}

func (m *ModelEleSpecailFoods) GetFoodUrl() string {
	if m != nil {
		return m.FoodUrl
	}
	return ""
}

func (m *ModelEleSpecailFoods) GetDiscount() float64 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func (m *ModelEleSpecailFoods) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ModelEleSpecailFoods) GetOriginalAmount() float64 {
	if m != nil {
		return m.OriginalAmount
	}
	return 0
}

func (m *ModelEleSpecailFoods) GetRatingPoint() float64 {
	if m != nil {
		return m.RatingPoint
	}
	return 0
}

type EleVipGrantReq struct {
	OrderNo string `protobuf:"bytes,1,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
}

func (m *EleVipGrantReq) Reset()                    { *m = EleVipGrantReq{} }
func (m *EleVipGrantReq) String() string            { return proto.CompactTextString(m) }
func (*EleVipGrantReq) ProtoMessage()               {}
func (*EleVipGrantReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{27} }

func (m *EleVipGrantReq) GetOrderNo() string {
	if m != nil {
		return m.OrderNo
	}
	return ""
}

type EleVipGrantReply struct {
}

func (m *EleVipGrantReply) Reset()                    { *m = EleVipGrantReply{} }
func (m *EleVipGrantReply) String() string            { return proto.CompactTextString(m) }
func (*EleVipGrantReply) ProtoMessage()               {}
func (*EleVipGrantReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{28} }

type VipUserPanelReq struct {
	Mid       int64  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	SortTp    int32  `protobuf:"varint,2,opt,name=sortTp,proto3" json:"sortTp,omitempty"`
	Ip        string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	MobiApp   string `protobuf:"bytes,4,opt,name=mobiApp,proto3" json:"mobiApp,omitempty"`
	Device    string `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
	Platform  string `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	Plat      int32  `protobuf:"varint,7,opt,name=plat,proto3" json:"plat,omitempty"`
	PanelType string `protobuf:"bytes,8,opt,name=panelType,proto3" json:"panelType,omitempty"`
	SubType   int32  `protobuf:"varint,9,opt,name=subType,proto3" json:"subType,omitempty"`
	Month     int32  `protobuf:"varint,10,opt,name=month,proto3" json:"month,omitempty"`
	Build     int64  `protobuf:"varint,11,opt,name=build,proto3" json:"build,omitempty"`
	Lang      string `protobuf:"bytes,12,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (m *VipUserPanelReq) Reset()                    { *m = VipUserPanelReq{} }
func (m *VipUserPanelReq) String() string            { return proto.CompactTextString(m) }
func (*VipUserPanelReq) ProtoMessage()               {}
func (*VipUserPanelReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{29} }

func (m *VipUserPanelReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *VipUserPanelReq) GetSortTp() int32 {
	if m != nil {
		return m.SortTp
	}
	return 0
}

func (m *VipUserPanelReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *VipUserPanelReq) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *VipUserPanelReq) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *VipUserPanelReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *VipUserPanelReq) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *VipUserPanelReq) GetPanelType() string {
	if m != nil {
		return m.PanelType
	}
	return ""
}

func (m *VipUserPanelReq) GetSubType() int32 {
	if m != nil {
		return m.SubType
	}
	return 0
}

func (m *VipUserPanelReq) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *VipUserPanelReq) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *VipUserPanelReq) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

type VipUserPanelReply struct {
	PriceList    []*ModelVipPanelInfo          `protobuf:"bytes,1,rep,name=price_list,json=priceList" json:"price_list,omitempty"`
	Coupon       *CouponBySuitIDReply          `protobuf:"bytes,2,opt,name=coupon" json:"coupon,omitempty"`
	CouponSwitch int32                         `protobuf:"varint,3,opt,name=coupon_switch,json=couponSwitch,proto3" json:"coupon_switch,omitempty"`
	CodeSwitch   int32                         `protobuf:"varint,4,opt,name=code_switch,json=codeSwitch,proto3" json:"code_switch,omitempty"`
	GiveSwitch   int32                         `protobuf:"varint,5,opt,name=give_switch,json=giveSwitch,proto3" json:"give_switch,omitempty"`
	Privileges   map[int32]*ModelPrivilegeResp `protobuf:"bytes,6,rep,name=privileges" json:"privileges,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *VipUserPanelReply) Reset()                    { *m = VipUserPanelReply{} }
func (m *VipUserPanelReply) String() string            { return proto.CompactTextString(m) }
func (*VipUserPanelReply) ProtoMessage()               {}
func (*VipUserPanelReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{30} }

func (m *VipUserPanelReply) GetPriceList() []*ModelVipPanelInfo {
	if m != nil {
		return m.PriceList
	}
	return nil
}

func (m *VipUserPanelReply) GetCoupon() *CouponBySuitIDReply {
	if m != nil {
		return m.Coupon
	}
	return nil
}

func (m *VipUserPanelReply) GetCouponSwitch() int32 {
	if m != nil {
		return m.CouponSwitch
	}
	return 0
}

func (m *VipUserPanelReply) GetCodeSwitch() int32 {
	if m != nil {
		return m.CodeSwitch
	}
	return 0
}

func (m *VipUserPanelReply) GetGiveSwitch() int32 {
	if m != nil {
		return m.GiveSwitch
	}
	return 0
}

func (m *VipUserPanelReply) GetPrivileges() map[int32]*ModelPrivilegeResp {
	if m != nil {
		return m.Privileges
	}
	return nil
}

type CouponBySuitIDReply struct {
	CouponTip  string                         `protobuf:"bytes,1,opt,name=coupon_tip,json=couponTip,proto3" json:"coupon_tip,omitempty"`
	CouponInfo *ModelCouponAllowancePanelInfo `protobuf:"bytes,2,opt,name=coupon_info,json=couponInfo" json:"coupon_info,omitempty"`
}

func (m *CouponBySuitIDReply) Reset()                    { *m = CouponBySuitIDReply{} }
func (m *CouponBySuitIDReply) String() string            { return proto.CompactTextString(m) }
func (*CouponBySuitIDReply) ProtoMessage()               {}
func (*CouponBySuitIDReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{31} }

func (m *CouponBySuitIDReply) GetCouponTip() string {
	if m != nil {
		return m.CouponTip
	}
	return ""
}

func (m *CouponBySuitIDReply) GetCouponInfo() *ModelCouponAllowancePanelInfo {
	if m != nil {
		return m.CouponInfo
	}
	return nil
}

type ModelCouponAllowancePanelInfo struct {
	CouponToken         string  `protobuf:"bytes,1,opt,name=coupon_token,json=couponToken,proto3" json:"coupon_token,omitempty"`
	CouponAmount        float64 `protobuf:"fixed64,2,opt,name=coupon_amount,json=couponAmount,proto3" json:"coupon_amount"`
	State               int32   `protobuf:"varint,3,opt,name=state,proto3" json:"state"`
	FullLimitExplain    string  `protobuf:"bytes,4,opt,name=full_limit_explain,json=fullLimitExplain,proto3" json:"full_limit_explain,omitempty"`
	ScopeExplain        string  `protobuf:"bytes,5,opt,name=scope_explain,json=scopeExplain,proto3" json:"scope_explain,omitempty"`
	FullAmount          float64 `protobuf:"fixed64,6,opt,name=full_amount,json=fullAmount,proto3" json:"full_amount"`
	CouponDiscountPrice float64 `protobuf:"fixed64,7,opt,name=coupon_discount_price,json=couponDiscountPrice,proto3" json:"coupon_discount_price"`
	StartTime           int64   `protobuf:"varint,8,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	ExpireTime          int64   `protobuf:"varint,9,opt,name=expire_time,json=expireTime,proto3" json:"expire_time"`
	Selected            int32   `protobuf:"varint,10,opt,name=selected,proto3" json:"selected"`
	DisablesExplains    string  `protobuf:"bytes,11,opt,name=disables_explains,json=disablesExplains,proto3" json:"disables_explains,omitempty"`
	OrderNo             string  `protobuf:"bytes,12,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	Name                string  `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	Usable              int32   `protobuf:"varint,14,opt,name=usable,proto3" json:"usable"`
}

func (m *ModelCouponAllowancePanelInfo) Reset()         { *m = ModelCouponAllowancePanelInfo{} }
func (m *ModelCouponAllowancePanelInfo) String() string { return proto.CompactTextString(m) }
func (*ModelCouponAllowancePanelInfo) ProtoMessage()    {}
func (*ModelCouponAllowancePanelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorApi, []int{32}
}

func (m *ModelCouponAllowancePanelInfo) GetCouponToken() string {
	if m != nil {
		return m.CouponToken
	}
	return ""
}

func (m *ModelCouponAllowancePanelInfo) GetCouponAmount() float64 {
	if m != nil {
		return m.CouponAmount
	}
	return 0
}

func (m *ModelCouponAllowancePanelInfo) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ModelCouponAllowancePanelInfo) GetFullLimitExplain() string {
	if m != nil {
		return m.FullLimitExplain
	}
	return ""
}

func (m *ModelCouponAllowancePanelInfo) GetScopeExplain() string {
	if m != nil {
		return m.ScopeExplain
	}
	return ""
}

func (m *ModelCouponAllowancePanelInfo) GetFullAmount() float64 {
	if m != nil {
		return m.FullAmount
	}
	return 0
}

func (m *ModelCouponAllowancePanelInfo) GetCouponDiscountPrice() float64 {
	if m != nil {
		return m.CouponDiscountPrice
	}
	return 0
}

func (m *ModelCouponAllowancePanelInfo) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ModelCouponAllowancePanelInfo) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *ModelCouponAllowancePanelInfo) GetSelected() int32 {
	if m != nil {
		return m.Selected
	}
	return 0
}

func (m *ModelCouponAllowancePanelInfo) GetDisablesExplains() string {
	if m != nil {
		return m.DisablesExplains
	}
	return ""
}

func (m *ModelCouponAllowancePanelInfo) GetOrderNo() string {
	if m != nil {
		return m.OrderNo
	}
	return ""
}

func (m *ModelCouponAllowancePanelInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModelCouponAllowancePanelInfo) GetUsable() int32 {
	if m != nil {
		return m.Usable
	}
	return 0
}

type ModelVipPanelInfo struct {
	Month         int32   `protobuf:"varint,1,opt,name=month,proto3" json:"month"`
	ProductName   string  `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	ProductId     string  `protobuf:"bytes,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	SubType       int32   `protobuf:"varint,4,opt,name=sub_type,json=subType,proto3" json:"sub_type"`
	SuitType      int32   `protobuf:"varint,5,opt,name=suit_type,json=suitType,proto3" json:"suit_type"`
	OriginalPrice float64 `protobuf:"fixed64,6,opt,name=original_price,json=originalPrice,proto3" json:"original_price"`
	DiscountPrice float64 `protobuf:"fixed64,7,opt,name=discount_price,json=discountPrice,proto3" json:"discount_price"`
	DiscountRate  string  `protobuf:"bytes,8,opt,name=discount_rate,json=discountRate,proto3" json:"discount_rate,omitempty"`
	Remark        string  `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
	Selected      int32   `protobuf:"varint,10,opt,name=selected,proto3" json:"selected"`
	Id            int64   `protobuf:"varint,11,opt,name=id,proto3" json:"id"`
	Type          int32   `protobuf:"varint,12,opt,name=type,proto3" json:"type"`
}

func (m *ModelVipPanelInfo) Reset()                    { *m = ModelVipPanelInfo{} }
func (m *ModelVipPanelInfo) String() string            { return proto.CompactTextString(m) }
func (*ModelVipPanelInfo) ProtoMessage()               {}
func (*ModelVipPanelInfo) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{33} }

func (m *ModelVipPanelInfo) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *ModelVipPanelInfo) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *ModelVipPanelInfo) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *ModelVipPanelInfo) GetSubType() int32 {
	if m != nil {
		return m.SubType
	}
	return 0
}

func (m *ModelVipPanelInfo) GetSuitType() int32 {
	if m != nil {
		return m.SuitType
	}
	return 0
}

func (m *ModelVipPanelInfo) GetOriginalPrice() float64 {
	if m != nil {
		return m.OriginalPrice
	}
	return 0
}

func (m *ModelVipPanelInfo) GetDiscountPrice() float64 {
	if m != nil {
		return m.DiscountPrice
	}
	return 0
}

func (m *ModelVipPanelInfo) GetDiscountRate() string {
	if m != nil {
		return m.DiscountRate
	}
	return ""
}

func (m *ModelVipPanelInfo) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *ModelVipPanelInfo) GetSelected() int32 {
	if m != nil {
		return m.Selected
	}
	return 0
}

func (m *ModelVipPanelInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ModelVipPanelInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type ModelPrivilegeResp struct {
	Title string            `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	List  []*ModelPrivilege `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *ModelPrivilegeResp) Reset()                    { *m = ModelPrivilegeResp{} }
func (m *ModelPrivilegeResp) String() string            { return proto.CompactTextString(m) }
func (*ModelPrivilegeResp) ProtoMessage()               {}
func (*ModelPrivilegeResp) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{34} }

func (m *ModelPrivilegeResp) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ModelPrivilegeResp) GetList() []*ModelPrivilege {
	if m != nil {
		return m.List
	}
	return nil
}

type ModelPrivilege struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IconUrl string `protobuf:"bytes,2,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	Type    int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type"`
}

func (m *ModelPrivilege) Reset()                    { *m = ModelPrivilege{} }
func (m *ModelPrivilege) String() string            { return proto.CompactTextString(m) }
func (*ModelPrivilege) ProtoMessage()               {}
func (*ModelPrivilege) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{35} }

func (m *ModelPrivilege) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModelPrivilege) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

func (m *ModelPrivilege) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type CouponBySuitIDReq struct {
	Mid       int64  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Sid       int64  `protobuf:"varint,2,opt,name=sid,proto3" json:"sid,omitempty"`
	MobiApp   string `protobuf:"bytes,3,opt,name=mobiApp,proto3" json:"mobiApp,omitempty"`
	Device    string `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	Platform  string `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	PanelType string `protobuf:"bytes,6,opt,name=panelType,proto3" json:"panelType,omitempty"`
	Build     int64  `protobuf:"varint,7,opt,name=build,proto3" json:"build,omitempty"`
}

func (m *CouponBySuitIDReq) Reset()                    { *m = CouponBySuitIDReq{} }
func (m *CouponBySuitIDReq) String() string            { return proto.CompactTextString(m) }
func (*CouponBySuitIDReq) ProtoMessage()               {}
func (*CouponBySuitIDReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{36} }

func (m *CouponBySuitIDReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *CouponBySuitIDReq) GetSid() int64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *CouponBySuitIDReq) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *CouponBySuitIDReq) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *CouponBySuitIDReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *CouponBySuitIDReq) GetPanelType() string {
	if m != nil {
		return m.PanelType
	}
	return ""
}

func (m *CouponBySuitIDReq) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

type WelfareReq struct {
	Tid       int64 `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`
	Recommend int64 `protobuf:"varint,2,opt,name=recommend,proto3" json:"recommend,omitempty"`
	Ps        int64 `protobuf:"varint,3,opt,name=ps,proto3" json:"ps,omitempty"`
	Pn        int64 `protobuf:"varint,4,opt,name=pn,proto3" json:"pn,omitempty"`
}

func (m *WelfareReq) Reset()                    { *m = WelfareReq{} }
func (m *WelfareReq) String() string            { return proto.CompactTextString(m) }
func (*WelfareReq) ProtoMessage()               {}
func (*WelfareReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{37} }

func (m *WelfareReq) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *WelfareReq) GetRecommend() int64 {
	if m != nil {
		return m.Recommend
	}
	return 0
}

func (m *WelfareReq) GetPs() int64 {
	if m != nil {
		return m.Ps
	}
	return 0
}

func (m *WelfareReq) GetPn() int64 {
	if m != nil {
		return m.Pn
	}
	return 0
}

type WelfareReply struct {
	Count int64                `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	List  []*WelfareListDetail `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *WelfareReply) Reset()                    { *m = WelfareReply{} }
func (m *WelfareReply) String() string            { return proto.CompactTextString(m) }
func (*WelfareReply) ProtoMessage()               {}
func (*WelfareReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{38} }

func (m *WelfareReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *WelfareReply) GetList() []*WelfareListDetail {
	if m != nil {
		return m.List
	}
	return nil
}

type WelfareListDetail struct {
	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	HomepageUri string `protobuf:"bytes,3,opt,name=homepage_uri,json=homepageUri,proto3" json:"homepage_uri"`
	BackdropUri string `protobuf:"bytes,4,opt,name=backdrop_uri,json=backdropUri,proto3" json:"backdrop_uri"`
	Tid         int32  `protobuf:"varint,5,opt,name=tid,proto3" json:"tid"`
	Rank        int32  `protobuf:"varint,6,opt,name=rank,proto3" json:"rank"`
}

func (m *WelfareListDetail) Reset()                    { *m = WelfareListDetail{} }
func (m *WelfareListDetail) String() string            { return proto.CompactTextString(m) }
func (*WelfareListDetail) ProtoMessage()               {}
func (*WelfareListDetail) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{39} }

func (m *WelfareListDetail) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WelfareListDetail) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WelfareListDetail) GetHomepageUri() string {
	if m != nil {
		return m.HomepageUri
	}
	return ""
}

func (m *WelfareListDetail) GetBackdropUri() string {
	if m != nil {
		return m.BackdropUri
	}
	return ""
}

func (m *WelfareListDetail) GetTid() int32 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *WelfareListDetail) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

type WelfareTypeReq struct {
}

func (m *WelfareTypeReq) Reset()                    { *m = WelfareTypeReq{} }
func (m *WelfareTypeReq) String() string            { return proto.CompactTextString(m) }
func (*WelfareTypeReq) ProtoMessage()               {}
func (*WelfareTypeReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{40} }

type WelfareTypeReply struct {
	List []*WelfareTypeListDetail `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *WelfareTypeReply) Reset()                    { *m = WelfareTypeReply{} }
func (m *WelfareTypeReply) String() string            { return proto.CompactTextString(m) }
func (*WelfareTypeReply) ProtoMessage()               {}
func (*WelfareTypeReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{41} }

func (m *WelfareTypeReply) GetList() []*WelfareTypeListDetail {
	if m != nil {
		return m.List
	}
	return nil
}

type WelfareTypeListDetail struct {
	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
}

func (m *WelfareTypeListDetail) Reset()                    { *m = WelfareTypeListDetail{} }
func (m *WelfareTypeListDetail) String() string            { return proto.CompactTextString(m) }
func (*WelfareTypeListDetail) ProtoMessage()               {}
func (*WelfareTypeListDetail) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{42} }

func (m *WelfareTypeListDetail) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WelfareTypeListDetail) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type WelfareInfoReq struct {
	Id  int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
}

func (m *WelfareInfoReq) Reset()                    { *m = WelfareInfoReq{} }
func (m *WelfareInfoReq) String() string            { return proto.CompactTextString(m) }
func (*WelfareInfoReq) ProtoMessage()               {}
func (*WelfareInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{43} }

func (m *WelfareInfoReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WelfareInfoReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type WelfareInfoReply struct {
	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Desc        string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc"`
	HomepageUri string `protobuf:"bytes,4,opt,name=homepage_uri,json=homepageUri,proto3" json:"homepage_uri"`
	BackdropUri string `protobuf:"bytes,5,opt,name=backdrop_uri,json=backdropUri,proto3" json:"backdrop_uri"`
	Finished    bool   `protobuf:"varint,6,opt,name=finished,proto3" json:"finished"`
	Received    bool   `protobuf:"varint,7,opt,name=received,proto3" json:"received"`
	VipType     int64  `protobuf:"varint,8,opt,name=vip_type,json=vipType,proto3" json:"vip_type"`
	Stime       int64  `protobuf:"varint,9,opt,name=stime,proto3" json:"stime"`
	Etime       int64  `protobuf:"varint,10,opt,name=etime,proto3" json:"etime"`
}

func (m *WelfareInfoReply) Reset()                    { *m = WelfareInfoReply{} }
func (m *WelfareInfoReply) String() string            { return proto.CompactTextString(m) }
func (*WelfareInfoReply) ProtoMessage()               {}
func (*WelfareInfoReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{44} }

func (m *WelfareInfoReply) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WelfareInfoReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WelfareInfoReply) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *WelfareInfoReply) GetHomepageUri() string {
	if m != nil {
		return m.HomepageUri
	}
	return ""
}

func (m *WelfareInfoReply) GetBackdropUri() string {
	if m != nil {
		return m.BackdropUri
	}
	return ""
}

func (m *WelfareInfoReply) GetFinished() bool {
	if m != nil {
		return m.Finished
	}
	return false
}

func (m *WelfareInfoReply) GetReceived() bool {
	if m != nil {
		return m.Received
	}
	return false
}

func (m *WelfareInfoReply) GetVipType() int64 {
	if m != nil {
		return m.VipType
	}
	return 0
}

func (m *WelfareInfoReply) GetStime() int64 {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *WelfareInfoReply) GetEtime() int64 {
	if m != nil {
		return m.Etime
	}
	return 0
}

type WelfareReceiveReq struct {
	Wid int64 `protobuf:"varint,1,opt,name=wid,proto3" json:"wid,omitempty"`
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
}

func (m *WelfareReceiveReq) Reset()                    { *m = WelfareReceiveReq{} }
func (m *WelfareReceiveReq) String() string            { return proto.CompactTextString(m) }
func (*WelfareReceiveReq) ProtoMessage()               {}
func (*WelfareReceiveReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{45} }

func (m *WelfareReceiveReq) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *WelfareReceiveReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type WelfareReceiveReply struct {
}

func (m *WelfareReceiveReply) Reset()                    { *m = WelfareReceiveReply{} }
func (m *WelfareReceiveReply) String() string            { return proto.CompactTextString(m) }
func (*WelfareReceiveReply) ProtoMessage()               {}
func (*WelfareReceiveReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{46} }

type MyWelfareReq struct {
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
}

func (m *MyWelfareReq) Reset()                    { *m = MyWelfareReq{} }
func (m *MyWelfareReq) String() string            { return proto.CompactTextString(m) }
func (*MyWelfareReq) ProtoMessage()               {}
func (*MyWelfareReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{47} }

func (m *MyWelfareReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type MyWelfareReply struct {
	List []*MyWelfareDetail `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *MyWelfareReply) Reset()                    { *m = MyWelfareReply{} }
func (m *MyWelfareReply) String() string            { return proto.CompactTextString(m) }
func (*MyWelfareReply) ProtoMessage()               {}
func (*MyWelfareReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{48} }

func (m *MyWelfareReply) GetList() []*MyWelfareDetail {
	if m != nil {
		return m.List
	}
	return nil
}

type MyWelfareDetail struct {
	Wid        int32  `protobuf:"varint,1,opt,name=wid,proto3" json:"wid"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Desc       string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc"`
	UsageForm  int32  `protobuf:"varint,4,opt,name=usage_form,json=usageForm,proto3" json:"usage_form"`
	ReceiveUri string `protobuf:"bytes,5,opt,name=receive_uri,json=receiveUri,proto3" json:"receive_uri"`
	Code       string `protobuf:"bytes,6,opt,name=code,proto3" json:"code"`
	Stime      int64  `protobuf:"varint,7,opt,name=stime,proto3" json:"stime"`
	Etime      int64  `protobuf:"varint,8,opt,name=etime,proto3" json:"etime"`
	Expired    bool   `protobuf:"varint,9,opt,name=expired,proto3" json:"expired"`
}

func (m *MyWelfareDetail) Reset()                    { *m = MyWelfareDetail{} }
func (m *MyWelfareDetail) String() string            { return proto.CompactTextString(m) }
func (*MyWelfareDetail) ProtoMessage()               {}
func (*MyWelfareDetail) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{49} }

func (m *MyWelfareDetail) GetWid() int32 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *MyWelfareDetail) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MyWelfareDetail) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MyWelfareDetail) GetUsageForm() int32 {
	if m != nil {
		return m.UsageForm
	}
	return 0
}

func (m *MyWelfareDetail) GetReceiveUri() string {
	if m != nil {
		return m.ReceiveUri
	}
	return ""
}

func (m *MyWelfareDetail) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *MyWelfareDetail) GetStime() int64 {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *MyWelfareDetail) GetEtime() int64 {
	if m != nil {
		return m.Etime
	}
	return 0
}

func (m *MyWelfareDetail) GetExpired() bool {
	if m != nil {
		return m.Expired
	}
	return false
}

func init() {
	proto.RegisterType((*RegisterOpenIDReq)(nil), "account.vip.RegisterOpenIDReq")
	proto.RegisterType((*RegisterOpenIDReply)(nil), "account.vip.RegisterOpenIDReply")
	proto.RegisterType((*OpenBindByOutOpenIDReq)(nil), "account.vip.OpenBindByOutOpenIDReq")
	proto.RegisterType((*OpenBindByOutOpenIDReply)(nil), "account.vip.OpenBindByOutOpenIDReply")
	proto.RegisterType((*UserInfoByOpenIDReq)(nil), "account.vip.UserInfoByOpenIDReq")
	proto.RegisterType((*UserInfoByOpenIDReply)(nil), "account.vip.UserInfoByOpenIDReply")
	proto.RegisterType((*BindInfoByMidReq)(nil), "account.vip.BindInfoByMidReq")
	proto.RegisterType((*BindInfoByMidReply)(nil), "account.vip.BindInfoByMidReply")
	proto.RegisterType((*Account)(nil), "account.vip.Account")
	proto.RegisterType((*BindOuter)(nil), "account.vip.BindOuter")
	proto.RegisterType((*BilibiliPrizeGrantReq)(nil), "account.vip.BilibiliPrizeGrantReq")
	proto.RegisterType((*BilibiliPrizeGrantReply)(nil), "account.vip.BilibiliPrizeGrantReply")
	proto.RegisterType((*BilibiliVipGrantReq)(nil), "account.vip.BilibiliVipGrantReq")
	proto.RegisterType((*BilibiliVipGrantReply)(nil), "account.vip.BilibiliVipGrantReply")
	proto.RegisterType((*CreateAssociateOrderReq)(nil), "account.vip.CreateAssociateOrderReq")
	proto.RegisterType((*CreateAssociateOrderReply)(nil), "account.vip.CreateAssociateOrderReply")
	proto.RegisterType((*AssociatePanelReq)(nil), "account.vip.AssociatePanelReq")
	proto.RegisterType((*AssociatePanelReply)(nil), "account.vip.AssociatePanelReply")
	proto.RegisterType((*AssociatePanelInfo)(nil), "account.vip.AssociatePanelInfo")
	proto.RegisterType((*OpenAuthCallBackReq)(nil), "account.vip.OpenAuthCallBackReq")
	proto.RegisterType((*OpenAuthCallBackReply)(nil), "account.vip.OpenAuthCallBackReply")
	proto.RegisterType((*EleRedPackagesReq)(nil), "account.vip.EleRedPackagesReq")
	proto.RegisterType((*EleRedPackagesReply)(nil), "account.vip.EleRedPackagesReply")
	proto.RegisterType((*ModelEleRedPackage)(nil), "account.vip.ModelEleRedPackage")
	proto.RegisterType((*EleSpecailFoodsReq)(nil), "account.vip.EleSpecailFoodsReq")
	proto.RegisterType((*EleSpecailFoodsReply)(nil), "account.vip.EleSpecailFoodsReply")
	proto.RegisterType((*ModelEleSpecailFoods)(nil), "account.vip.ModelEleSpecailFoods")
	proto.RegisterType((*EleVipGrantReq)(nil), "account.vip.EleVipGrantReq")
	proto.RegisterType((*EleVipGrantReply)(nil), "account.vip.EleVipGrantReply")
	proto.RegisterType((*VipUserPanelReq)(nil), "account.vip.VipUserPanelReq")
	proto.RegisterType((*VipUserPanelReply)(nil), "account.vip.VipUserPanelReply")
	proto.RegisterType((*CouponBySuitIDReply)(nil), "account.vip.CouponBySuitIDReply")
	proto.RegisterType((*ModelCouponAllowancePanelInfo)(nil), "account.vip.ModelCouponAllowancePanelInfo")
	proto.RegisterType((*ModelVipPanelInfo)(nil), "account.vip.ModelVipPanelInfo")
	proto.RegisterType((*ModelPrivilegeResp)(nil), "account.vip.ModelPrivilegeResp")
	proto.RegisterType((*ModelPrivilege)(nil), "account.vip.ModelPrivilege")
	proto.RegisterType((*CouponBySuitIDReq)(nil), "account.vip.CouponBySuitIDReq")
	proto.RegisterType((*WelfareReq)(nil), "account.vip.WelfareReq")
	proto.RegisterType((*WelfareReply)(nil), "account.vip.WelfareReply")
	proto.RegisterType((*WelfareListDetail)(nil), "account.vip.WelfareListDetail")
	proto.RegisterType((*WelfareTypeReq)(nil), "account.vip.WelfareTypeReq")
	proto.RegisterType((*WelfareTypeReply)(nil), "account.vip.WelfareTypeReply")
	proto.RegisterType((*WelfareTypeListDetail)(nil), "account.vip.WelfareTypeListDetail")
	proto.RegisterType((*WelfareInfoReq)(nil), "account.vip.WelfareInfoReq")
	proto.RegisterType((*WelfareInfoReply)(nil), "account.vip.WelfareInfoReply")
	proto.RegisterType((*WelfareReceiveReq)(nil), "account.vip.WelfareReceiveReq")
	proto.RegisterType((*WelfareReceiveReply)(nil), "account.vip.WelfareReceiveReply")
	proto.RegisterType((*MyWelfareReq)(nil), "account.vip.MyWelfareReq")
	proto.RegisterType((*MyWelfareReply)(nil), "account.vip.MyWelfareReply")
	proto.RegisterType((*MyWelfareDetail)(nil), "account.vip.MyWelfareDetail")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Vip service

type VipClient interface {
	// RegisterOpenIDReq register by mid.
	RegisterOpenID(ctx context.Context, in *RegisterOpenIDReq, opts ...grpc.CallOption) (*RegisterOpenIDReply, error)
	// OpenBindByOutOpenID associate user bind by out_open_id [third -> bilibili].
	OpenBindByOutOpenID(ctx context.Context, in *OpenBindByOutOpenIDReq, opts ...grpc.CallOption) (*OpenBindByOutOpenIDReply, error)
	// UserInfoByOpenID get userinfo by open_id.
	UserInfoByOpenID(ctx context.Context, in *UserInfoByOpenIDReq, opts ...grpc.CallOption) (*UserInfoByOpenIDReply, error)
	// BindInfoByMid bind info by mid[bilibili->third].
	BindInfoByMid(ctx context.Context, in *BindInfoByMidReq, opts ...grpc.CallOption) (*BindInfoByMidReply, error)
	// BilibiliPrizeGrant bilibili associate vip grant.
	BilibiliPrizeGrant(ctx context.Context, in *BilibiliPrizeGrantReq, opts ...grpc.CallOption) (*BilibiliPrizeGrantReply, error)
	// BilibiliVipGrant bilibili associate vip grant.
	BilibiliVipGrant(ctx context.Context, in *BilibiliVipGrantReq, opts ...grpc.CallOption) (*BilibiliVipGrantReply, error)
	// CreateAssociateOrder create associate order.
	CreateAssociateOrder(ctx context.Context, in *CreateAssociateOrderReq, opts ...grpc.CallOption) (*CreateAssociateOrderReply, error)
	// AssociatePanel associate panel.
	AssociatePanel(ctx context.Context, in *AssociatePanelReq, opts ...grpc.CallOption) (*AssociatePanelReply, error)
	// OpenAuthCallBack third open call back.
	OpenAuthCallBack(ctx context.Context, in *OpenAuthCallBackReq, opts ...grpc.CallOption) (*OpenAuthCallBackReply, error)
	// EleRedPackages ele red packages.
	EleRedPackages(ctx context.Context, in *EleRedPackagesReq, opts ...grpc.CallOption) (*EleRedPackagesReply, error)
	// EleRedPackages ele specail foods.
	EleSpecailFoods(ctx context.Context, in *EleSpecailFoodsReq, opts ...grpc.CallOption) (*EleSpecailFoodsReply, error)
	// EleVipGrant ele vip grant [bilibili -> third].
	EleVipGrant(ctx context.Context, in *EleVipGrantReq, opts ...grpc.CallOption) (*EleVipGrantReply, error)
	// VipUserPanel vip user panel
	VipUserPanel(ctx context.Context, in *VipUserPanelReq, opts ...grpc.CallOption) (*VipUserPanelReply, error)
	// CouponBySuitID get coupon by mid and suit info.
	CouponBySuitID(ctx context.Context, in *CouponBySuitIDReq, opts ...grpc.CallOption) (*CouponBySuitIDReply, error)
	// WelfareList get Welfare list
	WelfareList(ctx context.Context, in *WelfareReq, opts ...grpc.CallOption) (*WelfareReply, error)
	// WelfareTypeList get Welfare type list
	WelfareTypeList(ctx context.Context, in *WelfareTypeReq, opts ...grpc.CallOption) (*WelfareTypeReply, error)
	// WelfareInfo get Welfare detail
	WelfareInfo(ctx context.Context, in *WelfareInfoReq, opts ...grpc.CallOption) (*WelfareInfoReply, error)
	// WelfareReceive receive welfare
	WelfareReceive(ctx context.Context, in *WelfareReceiveReq, opts ...grpc.CallOption) (*WelfareReceiveReply, error)
	// MyWelfare get my welfares
	MyWelfare(ctx context.Context, in *MyWelfareReq, opts ...grpc.CallOption) (*MyWelfareReply, error)
}

type vipClient struct {
	cc *grpc.ClientConn
}

func NewVipClient(cc *grpc.ClientConn) VipClient {
	return &vipClient{cc}
}

func (c *vipClient) RegisterOpenID(ctx context.Context, in *RegisterOpenIDReq, opts ...grpc.CallOption) (*RegisterOpenIDReply, error) {
	out := new(RegisterOpenIDReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/RegisterOpenID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) OpenBindByOutOpenID(ctx context.Context, in *OpenBindByOutOpenIDReq, opts ...grpc.CallOption) (*OpenBindByOutOpenIDReply, error) {
	out := new(OpenBindByOutOpenIDReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/OpenBindByOutOpenID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) UserInfoByOpenID(ctx context.Context, in *UserInfoByOpenIDReq, opts ...grpc.CallOption) (*UserInfoByOpenIDReply, error) {
	out := new(UserInfoByOpenIDReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/UserInfoByOpenID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) BindInfoByMid(ctx context.Context, in *BindInfoByMidReq, opts ...grpc.CallOption) (*BindInfoByMidReply, error) {
	out := new(BindInfoByMidReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/BindInfoByMid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) BilibiliPrizeGrant(ctx context.Context, in *BilibiliPrizeGrantReq, opts ...grpc.CallOption) (*BilibiliPrizeGrantReply, error) {
	out := new(BilibiliPrizeGrantReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/BilibiliPrizeGrant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) BilibiliVipGrant(ctx context.Context, in *BilibiliVipGrantReq, opts ...grpc.CallOption) (*BilibiliVipGrantReply, error) {
	out := new(BilibiliVipGrantReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/BilibiliVipGrant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) CreateAssociateOrder(ctx context.Context, in *CreateAssociateOrderReq, opts ...grpc.CallOption) (*CreateAssociateOrderReply, error) {
	out := new(CreateAssociateOrderReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/CreateAssociateOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) AssociatePanel(ctx context.Context, in *AssociatePanelReq, opts ...grpc.CallOption) (*AssociatePanelReply, error) {
	out := new(AssociatePanelReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/AssociatePanel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) OpenAuthCallBack(ctx context.Context, in *OpenAuthCallBackReq, opts ...grpc.CallOption) (*OpenAuthCallBackReply, error) {
	out := new(OpenAuthCallBackReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/OpenAuthCallBack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) EleRedPackages(ctx context.Context, in *EleRedPackagesReq, opts ...grpc.CallOption) (*EleRedPackagesReply, error) {
	out := new(EleRedPackagesReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/EleRedPackages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) EleSpecailFoods(ctx context.Context, in *EleSpecailFoodsReq, opts ...grpc.CallOption) (*EleSpecailFoodsReply, error) {
	out := new(EleSpecailFoodsReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/EleSpecailFoods", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) EleVipGrant(ctx context.Context, in *EleVipGrantReq, opts ...grpc.CallOption) (*EleVipGrantReply, error) {
	out := new(EleVipGrantReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/EleVipGrant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) VipUserPanel(ctx context.Context, in *VipUserPanelReq, opts ...grpc.CallOption) (*VipUserPanelReply, error) {
	out := new(VipUserPanelReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/VipUserPanel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) CouponBySuitID(ctx context.Context, in *CouponBySuitIDReq, opts ...grpc.CallOption) (*CouponBySuitIDReply, error) {
	out := new(CouponBySuitIDReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/CouponBySuitID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) WelfareList(ctx context.Context, in *WelfareReq, opts ...grpc.CallOption) (*WelfareReply, error) {
	out := new(WelfareReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/WelfareList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) WelfareTypeList(ctx context.Context, in *WelfareTypeReq, opts ...grpc.CallOption) (*WelfareTypeReply, error) {
	out := new(WelfareTypeReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/WelfareTypeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) WelfareInfo(ctx context.Context, in *WelfareInfoReq, opts ...grpc.CallOption) (*WelfareInfoReply, error) {
	out := new(WelfareInfoReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/WelfareInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) WelfareReceive(ctx context.Context, in *WelfareReceiveReq, opts ...grpc.CallOption) (*WelfareReceiveReply, error) {
	out := new(WelfareReceiveReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/WelfareReceive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) MyWelfare(ctx context.Context, in *MyWelfareReq, opts ...grpc.CallOption) (*MyWelfareReply, error) {
	out := new(MyWelfareReply)
	err := grpc.Invoke(ctx, "/account.vip.Vip/MyWelfare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Vip service

type VipServer interface {
	// RegisterOpenIDReq register by mid.
	RegisterOpenID(context.Context, *RegisterOpenIDReq) (*RegisterOpenIDReply, error)
	// OpenBindByOutOpenID associate user bind by out_open_id [third -> bilibili].
	OpenBindByOutOpenID(context.Context, *OpenBindByOutOpenIDReq) (*OpenBindByOutOpenIDReply, error)
	// UserInfoByOpenID get userinfo by open_id.
	UserInfoByOpenID(context.Context, *UserInfoByOpenIDReq) (*UserInfoByOpenIDReply, error)
	// BindInfoByMid bind info by mid[bilibili->third].
	BindInfoByMid(context.Context, *BindInfoByMidReq) (*BindInfoByMidReply, error)
	// BilibiliPrizeGrant bilibili associate vip grant.
	BilibiliPrizeGrant(context.Context, *BilibiliPrizeGrantReq) (*BilibiliPrizeGrantReply, error)
	// BilibiliVipGrant bilibili associate vip grant.
	BilibiliVipGrant(context.Context, *BilibiliVipGrantReq) (*BilibiliVipGrantReply, error)
	// CreateAssociateOrder create associate order.
	CreateAssociateOrder(context.Context, *CreateAssociateOrderReq) (*CreateAssociateOrderReply, error)
	// AssociatePanel associate panel.
	AssociatePanel(context.Context, *AssociatePanelReq) (*AssociatePanelReply, error)
	// OpenAuthCallBack third open call back.
	OpenAuthCallBack(context.Context, *OpenAuthCallBackReq) (*OpenAuthCallBackReply, error)
	// EleRedPackages ele red packages.
	EleRedPackages(context.Context, *EleRedPackagesReq) (*EleRedPackagesReply, error)
	// EleRedPackages ele specail foods.
	EleSpecailFoods(context.Context, *EleSpecailFoodsReq) (*EleSpecailFoodsReply, error)
	// EleVipGrant ele vip grant [bilibili -> third].
	EleVipGrant(context.Context, *EleVipGrantReq) (*EleVipGrantReply, error)
	// VipUserPanel vip user panel
	VipUserPanel(context.Context, *VipUserPanelReq) (*VipUserPanelReply, error)
	// CouponBySuitID get coupon by mid and suit info.
	CouponBySuitID(context.Context, *CouponBySuitIDReq) (*CouponBySuitIDReply, error)
	// WelfareList get Welfare list
	WelfareList(context.Context, *WelfareReq) (*WelfareReply, error)
	// WelfareTypeList get Welfare type list
	WelfareTypeList(context.Context, *WelfareTypeReq) (*WelfareTypeReply, error)
	// WelfareInfo get Welfare detail
	WelfareInfo(context.Context, *WelfareInfoReq) (*WelfareInfoReply, error)
	// WelfareReceive receive welfare
	WelfareReceive(context.Context, *WelfareReceiveReq) (*WelfareReceiveReply, error)
	// MyWelfare get my welfares
	MyWelfare(context.Context, *MyWelfareReq) (*MyWelfareReply, error)
}

func RegisterVipServer(s *grpc.Server, srv VipServer) {
	s.RegisterService(&_Vip_serviceDesc, srv)
}

func _Vip_RegisterOpenID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOpenIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).RegisterOpenID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/RegisterOpenID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).RegisterOpenID(ctx, req.(*RegisterOpenIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_OpenBindByOutOpenID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenBindByOutOpenIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).OpenBindByOutOpenID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/OpenBindByOutOpenID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).OpenBindByOutOpenID(ctx, req.(*OpenBindByOutOpenIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_UserInfoByOpenID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoByOpenIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).UserInfoByOpenID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/UserInfoByOpenID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).UserInfoByOpenID(ctx, req.(*UserInfoByOpenIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_BindInfoByMid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindInfoByMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).BindInfoByMid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/BindInfoByMid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).BindInfoByMid(ctx, req.(*BindInfoByMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_BilibiliPrizeGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BilibiliPrizeGrantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).BilibiliPrizeGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/BilibiliPrizeGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).BilibiliPrizeGrant(ctx, req.(*BilibiliPrizeGrantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_BilibiliVipGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BilibiliVipGrantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).BilibiliVipGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/BilibiliVipGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).BilibiliVipGrant(ctx, req.(*BilibiliVipGrantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_CreateAssociateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssociateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).CreateAssociateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/CreateAssociateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).CreateAssociateOrder(ctx, req.(*CreateAssociateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_AssociatePanel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociatePanelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).AssociatePanel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/AssociatePanel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).AssociatePanel(ctx, req.(*AssociatePanelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_OpenAuthCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenAuthCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).OpenAuthCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/OpenAuthCallBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).OpenAuthCallBack(ctx, req.(*OpenAuthCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_EleRedPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EleRedPackagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).EleRedPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/EleRedPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).EleRedPackages(ctx, req.(*EleRedPackagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_EleSpecailFoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EleSpecailFoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).EleSpecailFoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/EleSpecailFoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).EleSpecailFoods(ctx, req.(*EleSpecailFoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_EleVipGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EleVipGrantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).EleVipGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/EleVipGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).EleVipGrant(ctx, req.(*EleVipGrantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_VipUserPanel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipUserPanelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).VipUserPanel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/VipUserPanel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).VipUserPanel(ctx, req.(*VipUserPanelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_CouponBySuitID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouponBySuitIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).CouponBySuitID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/CouponBySuitID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).CouponBySuitID(ctx, req.(*CouponBySuitIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_WelfareList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WelfareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).WelfareList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/WelfareList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).WelfareList(ctx, req.(*WelfareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_WelfareTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WelfareTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).WelfareTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/WelfareTypeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).WelfareTypeList(ctx, req.(*WelfareTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_WelfareInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WelfareInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).WelfareInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/WelfareInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).WelfareInfo(ctx, req.(*WelfareInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_WelfareReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WelfareReceiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).WelfareReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/WelfareReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).WelfareReceive(ctx, req.(*WelfareReceiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_MyWelfare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyWelfareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).MyWelfare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.vip.Vip/MyWelfare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).MyWelfare(ctx, req.(*MyWelfareReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Vip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "account.vip.Vip",
	HandlerType: (*VipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOpenID",
			Handler:    _Vip_RegisterOpenID_Handler,
		},
		{
			MethodName: "OpenBindByOutOpenID",
			Handler:    _Vip_OpenBindByOutOpenID_Handler,
		},
		{
			MethodName: "UserInfoByOpenID",
			Handler:    _Vip_UserInfoByOpenID_Handler,
		},
		{
			MethodName: "BindInfoByMid",
			Handler:    _Vip_BindInfoByMid_Handler,
		},
		{
			MethodName: "BilibiliPrizeGrant",
			Handler:    _Vip_BilibiliPrizeGrant_Handler,
		},
		{
			MethodName: "BilibiliVipGrant",
			Handler:    _Vip_BilibiliVipGrant_Handler,
		},
		{
			MethodName: "CreateAssociateOrder",
			Handler:    _Vip_CreateAssociateOrder_Handler,
		},
		{
			MethodName: "AssociatePanel",
			Handler:    _Vip_AssociatePanel_Handler,
		},
		{
			MethodName: "OpenAuthCallBack",
			Handler:    _Vip_OpenAuthCallBack_Handler,
		},
		{
			MethodName: "EleRedPackages",
			Handler:    _Vip_EleRedPackages_Handler,
		},
		{
			MethodName: "EleSpecailFoods",
			Handler:    _Vip_EleSpecailFoods_Handler,
		},
		{
			MethodName: "EleVipGrant",
			Handler:    _Vip_EleVipGrant_Handler,
		},
		{
			MethodName: "VipUserPanel",
			Handler:    _Vip_VipUserPanel_Handler,
		},
		{
			MethodName: "CouponBySuitID",
			Handler:    _Vip_CouponBySuitID_Handler,
		},
		{
			MethodName: "WelfareList",
			Handler:    _Vip_WelfareList_Handler,
		},
		{
			MethodName: "WelfareTypeList",
			Handler:    _Vip_WelfareTypeList_Handler,
		},
		{
			MethodName: "WelfareInfo",
			Handler:    _Vip_WelfareInfo_Handler,
		},
		{
			MethodName: "WelfareReceive",
			Handler:    _Vip_WelfareReceive_Handler,
		},
		{
			MethodName: "MyWelfare",
			Handler:    _Vip_MyWelfare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/main/vip/api/api.proto",
}

func (m *RegisterOpenIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterOpenIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.AppId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AppId))
	}
	return i, nil
}

func (m *RegisterOpenIDReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterOpenIDReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OpenId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpenId)))
		i += copy(dAtA[i:], m.OpenId)
	}
	return i, nil
}

func (m *OpenBindByOutOpenIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenBindByOutOpenIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OpenId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpenId)))
		i += copy(dAtA[i:], m.OpenId)
	}
	if len(m.OutOpenId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OutOpenId)))
		i += copy(dAtA[i:], m.OutOpenId)
	}
	if m.AppId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AppId))
	}
	return i, nil
}

func (m *OpenBindByOutOpenIDReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenBindByOutOpenIDReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UserInfoByOpenIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfoByOpenIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.OpenId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpenId)))
		i += copy(dAtA[i:], m.OpenId)
	}
	if m.AppId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AppId))
	}
	return i, nil
}

func (m *UserInfoByOpenIDReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfoByOpenIDReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.BindState != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BindState))
	}
	if len(m.OutOpenId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OutOpenId)))
		i += copy(dAtA[i:], m.OutOpenId)
	}
	return i, nil
}

func (m *BindInfoByMidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindInfoByMidReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.AppId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AppId))
	}
	return i, nil
}

func (m *BindInfoByMidReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindInfoByMidReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Account.Size()))
		n1, err := m.Account.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Outer != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Outer.Size()))
		n2, err := m.Outer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	return i, nil
}

func (m *BindOuter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindOuter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tel) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tel)))
		i += copy(dAtA[i:], m.Tel)
	}
	if m.BindState != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BindState))
	}
	return i, nil
}

func (m *BilibiliPrizeGrantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BilibiliPrizeGrantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PrizeKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PrizeKey)))
		i += copy(dAtA[i:], m.PrizeKey)
	}
	if len(m.UniqueNo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UniqueNo)))
		i += copy(dAtA[i:], m.UniqueNo)
	}
	if len(m.OpenId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpenId)))
		i += copy(dAtA[i:], m.OpenId)
	}
	if m.AppId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AppId))
	}
	return i, nil
}

func (m *BilibiliPrizeGrantReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BilibiliPrizeGrantReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amount))))
		i += 8
	}
	if m.FullAmount != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FullAmount))))
		i += 8
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *BilibiliVipGrantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BilibiliVipGrantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OpenId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpenId)))
		i += copy(dAtA[i:], m.OpenId)
	}
	if len(m.OutOpenId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OutOpenId)))
		i += copy(dAtA[i:], m.OutOpenId)
	}
	if len(m.OutOrderNo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OutOrderNo)))
		i += copy(dAtA[i:], m.OutOrderNo)
	}
	if m.Duration != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Duration))
	}
	if m.AppId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AppId))
	}
	return i, nil
}

func (m *BilibiliVipGrantReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BilibiliVipGrantReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CreateAssociateOrderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAssociateOrderReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Month != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Month))
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.MobiApp) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i += copy(dAtA[i:], m.MobiApp)
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	if m.AppId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AppId))
	}
	if len(m.AppSubId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AppSubId)))
		i += copy(dAtA[i:], m.AppSubId)
	}
	if m.OrderType != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OrderType))
	}
	if m.Dtype != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Dtype))
	}
	if len(m.ReturnUrl) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReturnUrl)))
		i += copy(dAtA[i:], m.ReturnUrl)
	}
	if len(m.CouponToken) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CouponToken)))
		i += copy(dAtA[i:], m.CouponToken)
	}
	if m.Bmid != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Bmid))
	}
	if len(m.PanelType) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PanelType)))
		i += copy(dAtA[i:], m.PanelType)
	}
	if m.Build != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
	}
	if len(m.IP) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	return i, nil
}

func (m *CreateAssociateOrderReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAssociateOrderReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PayParam) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PayParam)))
		i += copy(dAtA[i:], m.PayParam)
	}
	if m.Dprice != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Dprice))))
		i += 8
	}
	if m.Oprice != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Oprice))))
		i += 8
	}
	if m.CouponMoney != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CouponMoney))))
		i += 8
	}
	return i, nil
}

func (m *AssociatePanelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssociatePanelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.SortTp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SortTp))
	}
	if len(m.IP) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if len(m.MobiApp) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i += copy(dAtA[i:], m.MobiApp)
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if m.Plat != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
	}
	if len(m.PanelType) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PanelType)))
		i += copy(dAtA[i:], m.PanelType)
	}
	if m.SubType != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SubType))
	}
	if m.Month != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Month))
	}
	if m.Build != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
	}
	return i, nil
}

func (m *AssociatePanelReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssociatePanelReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AssociatePanelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssociatePanelInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.Month != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Month))
	}
	if len(m.ProductName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProductName)))
		i += copy(dAtA[i:], m.ProductName)
	}
	if len(m.ProductId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProductId)))
		i += copy(dAtA[i:], m.ProductId)
	}
	if m.SubType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SubType))
	}
	if m.SuitType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SuitType))
	}
	if m.OriginalPrice != 0 {
		dAtA[i] = 0x39
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.OriginalPrice))))
		i += 8
	}
	if m.DiscountPrice != 0 {
		dAtA[i] = 0x41
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DiscountPrice))))
		i += 8
	}
	if len(m.DiscountRate) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.DiscountRate)))
		i += copy(dAtA[i:], m.DiscountRate)
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	if m.Selected != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Selected))
	}
	if m.PayState != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PayState))
	}
	if len(m.PayMessage) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PayMessage)))
		i += copy(dAtA[i:], m.PayMessage)
	}
	return i, nil
}

func (m *OpenAuthCallBackReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenAuthCallBackReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.ThirdCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ThirdCode)))
		i += copy(dAtA[i:], m.ThirdCode)
	}
	if m.AppId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AppId))
	}
	return i, nil
}

func (m *OpenAuthCallBackReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenAuthCallBackReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *EleRedPackagesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EleRedPackagesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *EleRedPackagesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EleRedPackagesReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ModelEleRedPackage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelEleRedPackage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amount))))
		i += 8
	}
	if m.SumCondition != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SumCondition))))
		i += 8
	}
	return i, nil
}

func (m *EleSpecailFoodsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EleSpecailFoodsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *EleSpecailFoodsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EleSpecailFoodsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ModelEleSpecailFoods) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelEleSpecailFoods) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RestaurantName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RestaurantName)))
		i += copy(dAtA[i:], m.RestaurantName)
	}
	if len(m.FoodName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.FoodName)))
		i += copy(dAtA[i:], m.FoodName)
	}
	if len(m.FoodUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.FoodUrl)))
		i += copy(dAtA[i:], m.FoodUrl)
	}
	if m.Discount != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Discount))))
		i += 8
	}
	if m.Amount != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amount))))
		i += 8
	}
	if m.OriginalAmount != 0 {
		dAtA[i] = 0x31
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.OriginalAmount))))
		i += 8
	}
	if m.RatingPoint != 0 {
		dAtA[i] = 0x39
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RatingPoint))))
		i += 8
	}
	return i, nil
}

func (m *EleVipGrantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EleVipGrantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderNo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrderNo)))
		i += copy(dAtA[i:], m.OrderNo)
	}
	return i, nil
}

func (m *EleVipGrantReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EleVipGrantReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *VipUserPanelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipUserPanelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.SortTp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SortTp))
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.MobiApp) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i += copy(dAtA[i:], m.MobiApp)
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if m.Plat != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
	}
	if len(m.PanelType) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PanelType)))
		i += copy(dAtA[i:], m.PanelType)
	}
	if m.SubType != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SubType))
	}
	if m.Month != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Month))
	}
	if m.Build != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
	}
	if len(m.Lang) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Lang)))
		i += copy(dAtA[i:], m.Lang)
	}
	return i, nil
}

func (m *VipUserPanelReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipUserPanelReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PriceList) > 0 {
		for _, msg := range m.PriceList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Coupon != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Coupon.Size()))
		n3, err := m.Coupon.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.CouponSwitch != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CouponSwitch))
	}
	if m.CodeSwitch != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CodeSwitch))
	}
	if m.GiveSwitch != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.GiveSwitch))
	}
	if len(m.Privileges) > 0 {
		for k, _ := range m.Privileges {
			dAtA[i] = 0x32
			i++
			v := m.Privileges[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + sovApi(uint64(k)) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	return i, nil
}

func (m *CouponBySuitIDReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CouponBySuitIDReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CouponTip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CouponTip)))
		i += copy(dAtA[i:], m.CouponTip)
	}
	if m.CouponInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CouponInfo.Size()))
		n5, err := m.CouponInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ModelCouponAllowancePanelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelCouponAllowancePanelInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CouponToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CouponToken)))
		i += copy(dAtA[i:], m.CouponToken)
	}
	if m.CouponAmount != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CouponAmount))))
		i += 8
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.State))
	}
	if len(m.FullLimitExplain) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.FullLimitExplain)))
		i += copy(dAtA[i:], m.FullLimitExplain)
	}
	if len(m.ScopeExplain) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ScopeExplain)))
		i += copy(dAtA[i:], m.ScopeExplain)
	}
	if m.FullAmount != 0 {
		dAtA[i] = 0x31
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FullAmount))))
		i += 8
	}
	if m.CouponDiscountPrice != 0 {
		dAtA[i] = 0x39
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CouponDiscountPrice))))
		i += 8
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
	}
	if m.ExpireTime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ExpireTime))
	}
	if m.Selected != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Selected))
	}
	if len(m.DisablesExplains) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.DisablesExplains)))
		i += copy(dAtA[i:], m.DisablesExplains)
	}
	if len(m.OrderNo) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrderNo)))
		i += copy(dAtA[i:], m.OrderNo)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Usable != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Usable))
	}
	return i, nil
}

func (m *ModelVipPanelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelVipPanelInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Month != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Month))
	}
	if len(m.ProductName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProductName)))
		i += copy(dAtA[i:], m.ProductName)
	}
	if len(m.ProductId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProductId)))
		i += copy(dAtA[i:], m.ProductId)
	}
	if m.SubType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SubType))
	}
	if m.SuitType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SuitType))
	}
	if m.OriginalPrice != 0 {
		dAtA[i] = 0x31
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.OriginalPrice))))
		i += 8
	}
	if m.DiscountPrice != 0 {
		dAtA[i] = 0x39
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DiscountPrice))))
		i += 8
	}
	if len(m.DiscountRate) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.DiscountRate)))
		i += copy(dAtA[i:], m.DiscountRate)
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	if m.Selected != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Selected))
	}
	if m.Id != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.Type != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *ModelPrivilegeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelPrivilegeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ModelPrivilege) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelPrivilege) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.IconUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.IconUrl)))
		i += copy(dAtA[i:], m.IconUrl)
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *CouponBySuitIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CouponBySuitIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Sid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
	}
	if len(m.MobiApp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i += copy(dAtA[i:], m.MobiApp)
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.PanelType) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PanelType)))
		i += copy(dAtA[i:], m.PanelType)
	}
	if m.Build != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
	}
	return i, nil
}

func (m *WelfareReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WelfareReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Tid))
	}
	if m.Recommend != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Recommend))
	}
	if m.Ps != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
	}
	if m.Pn != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
	}
	return i, nil
}

func (m *WelfareReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WelfareReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WelfareListDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WelfareListDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.HomepageUri) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.HomepageUri)))
		i += copy(dAtA[i:], m.HomepageUri)
	}
	if len(m.BackdropUri) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BackdropUri)))
		i += copy(dAtA[i:], m.BackdropUri)
	}
	if m.Tid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Tid))
	}
	if m.Rank != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
	}
	return i, nil
}

func (m *WelfareTypeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WelfareTypeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *WelfareTypeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WelfareTypeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WelfareTypeListDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WelfareTypeListDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *WelfareInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WelfareInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	return i, nil
}

func (m *WelfareInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WelfareInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.HomepageUri) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.HomepageUri)))
		i += copy(dAtA[i:], m.HomepageUri)
	}
	if len(m.BackdropUri) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BackdropUri)))
		i += copy(dAtA[i:], m.BackdropUri)
	}
	if m.Finished {
		dAtA[i] = 0x30
		i++
		if m.Finished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Received {
		dAtA[i] = 0x38
		i++
		if m.Received {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.VipType != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.VipType))
	}
	if m.Stime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
	}
	if m.Etime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
	}
	return i, nil
}

func (m *WelfareReceiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WelfareReceiveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Wid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Wid))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	return i, nil
}

func (m *WelfareReceiveReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WelfareReceiveReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MyWelfareReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyWelfareReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	return i, nil
}

func (m *MyWelfareReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyWelfareReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MyWelfareDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyWelfareDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Wid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Wid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.UsageForm != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UsageForm))
	}
	if len(m.ReceiveUri) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReceiveUri)))
		i += copy(dAtA[i:], m.ReceiveUri)
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Stime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
	}
	if m.Etime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
	}
	if m.Expired {
		dAtA[i] = 0x48
		i++
		if m.Expired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RegisterOpenIDReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.AppId != 0 {
		n += 1 + sovApi(uint64(m.AppId))
	}
	return n
}

func (m *RegisterOpenIDReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.OpenId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *OpenBindByOutOpenIDReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.OpenId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OutOpenId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovApi(uint64(m.AppId))
	}
	return n
}

func (m *OpenBindByOutOpenIDReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UserInfoByOpenIDReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OpenId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovApi(uint64(m.AppId))
	}
	return n
}

func (m *UserInfoByOpenIDReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BindState != 0 {
		n += 1 + sovApi(uint64(m.BindState))
	}
	l = len(m.OutOpenId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BindInfoByMidReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.AppId != 0 {
		n += 1 + sovApi(uint64(m.AppId))
	}
	return n
}

func (m *BindInfoByMidReply) Size() (n int) {
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Outer != nil {
		l = m.Outer.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *Account) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BindOuter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tel)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BindState != 0 {
		n += 1 + sovApi(uint64(m.BindState))
	}
	return n
}

func (m *BilibiliPrizeGrantReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.PrizeKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UniqueNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OpenId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovApi(uint64(m.AppId))
	}
	return n
}

func (m *BilibiliPrizeGrantReply) Size() (n int) {
	var l int
	_ = l
	if m.Amount != 0 {
		n += 9
	}
	if m.FullAmount != 0 {
		n += 9
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BilibiliVipGrantReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.OpenId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OutOpenId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OutOrderNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovApi(uint64(m.Duration))
	}
	if m.AppId != 0 {
		n += 1 + sovApi(uint64(m.AppId))
	}
	return n
}

func (m *BilibiliVipGrantReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CreateAssociateOrderReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Month != 0 {
		n += 1 + sovApi(uint64(m.Month))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovApi(uint64(m.AppId))
	}
	l = len(m.AppSubId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.OrderType != 0 {
		n += 1 + sovApi(uint64(m.OrderType))
	}
	if m.Dtype != 0 {
		n += 1 + sovApi(uint64(m.Dtype))
	}
	l = len(m.ReturnUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CouponToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Bmid != 0 {
		n += 1 + sovApi(uint64(m.Bmid))
	}
	l = len(m.PanelType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *CreateAssociateOrderReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.PayParam)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Dprice != 0 {
		n += 9
	}
	if m.Oprice != 0 {
		n += 9
	}
	if m.CouponMoney != 0 {
		n += 9
	}
	return n
}

func (m *AssociatePanelReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.SortTp != 0 {
		n += 1 + sovApi(uint64(m.SortTp))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	l = len(m.PanelType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SubType != 0 {
		n += 1 + sovApi(uint64(m.SubType))
	}
	if m.Month != 0 {
		n += 1 + sovApi(uint64(m.Month))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	return n
}

func (m *AssociatePanelReply) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *AssociatePanelInfo) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Month != 0 {
		n += 1 + sovApi(uint64(m.Month))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ProductId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SubType != 0 {
		n += 1 + sovApi(uint64(m.SubType))
	}
	if m.SuitType != 0 {
		n += 1 + sovApi(uint64(m.SuitType))
	}
	if m.OriginalPrice != 0 {
		n += 9
	}
	if m.DiscountPrice != 0 {
		n += 9
	}
	l = len(m.DiscountRate)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Selected != 0 {
		n += 1 + sovApi(uint64(m.Selected))
	}
	if m.PayState != 0 {
		n += 1 + sovApi(uint64(m.PayState))
	}
	l = len(m.PayMessage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *OpenAuthCallBackReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.ThirdCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovApi(uint64(m.AppId))
	}
	return n
}

func (m *OpenAuthCallBackReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *EleRedPackagesReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *EleRedPackagesReply) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *ModelEleRedPackage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Amount != 0 {
		n += 9
	}
	if m.SumCondition != 0 {
		n += 9
	}
	return n
}

func (m *EleSpecailFoodsReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *EleSpecailFoodsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *ModelEleSpecailFoods) Size() (n int) {
	var l int
	_ = l
	l = len(m.RestaurantName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FoodName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FoodUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Discount != 0 {
		n += 9
	}
	if m.Amount != 0 {
		n += 9
	}
	if m.OriginalAmount != 0 {
		n += 9
	}
	if m.RatingPoint != 0 {
		n += 9
	}
	return n
}

func (m *EleVipGrantReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrderNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EleVipGrantReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *VipUserPanelReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.SortTp != 0 {
		n += 1 + sovApi(uint64(m.SortTp))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	l = len(m.PanelType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SubType != 0 {
		n += 1 + sovApi(uint64(m.SubType))
	}
	if m.Month != 0 {
		n += 1 + sovApi(uint64(m.Month))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	l = len(m.Lang)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *VipUserPanelReply) Size() (n int) {
	var l int
	_ = l
	if len(m.PriceList) > 0 {
		for _, e := range m.PriceList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Coupon != nil {
		l = m.Coupon.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CouponSwitch != 0 {
		n += 1 + sovApi(uint64(m.CouponSwitch))
	}
	if m.CodeSwitch != 0 {
		n += 1 + sovApi(uint64(m.CodeSwitch))
	}
	if m.GiveSwitch != 0 {
		n += 1 + sovApi(uint64(m.GiveSwitch))
	}
	if len(m.Privileges) > 0 {
		for k, v := range m.Privileges {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CouponBySuitIDReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.CouponTip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CouponInfo != nil {
		l = m.CouponInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ModelCouponAllowancePanelInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.CouponToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CouponAmount != 0 {
		n += 9
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	l = len(m.FullLimitExplain)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ScopeExplain)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FullAmount != 0 {
		n += 9
	}
	if m.CouponDiscountPrice != 0 {
		n += 9
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovApi(uint64(m.ExpireTime))
	}
	if m.Selected != 0 {
		n += 1 + sovApi(uint64(m.Selected))
	}
	l = len(m.DisablesExplains)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OrderNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Usable != 0 {
		n += 1 + sovApi(uint64(m.Usable))
	}
	return n
}

func (m *ModelVipPanelInfo) Size() (n int) {
	var l int
	_ = l
	if m.Month != 0 {
		n += 1 + sovApi(uint64(m.Month))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ProductId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SubType != 0 {
		n += 1 + sovApi(uint64(m.SubType))
	}
	if m.SuitType != 0 {
		n += 1 + sovApi(uint64(m.SuitType))
	}
	if m.OriginalPrice != 0 {
		n += 9
	}
	if m.DiscountPrice != 0 {
		n += 9
	}
	l = len(m.DiscountRate)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Selected != 0 {
		n += 1 + sovApi(uint64(m.Selected))
	}
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	return n
}

func (m *ModelPrivilegeResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *ModelPrivilege) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IconUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	return n
}

func (m *CouponBySuitIDReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PanelType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	return n
}

func (m *WelfareReq) Size() (n int) {
	var l int
	_ = l
	if m.Tid != 0 {
		n += 1 + sovApi(uint64(m.Tid))
	}
	if m.Recommend != 0 {
		n += 1 + sovApi(uint64(m.Recommend))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	return n
}

func (m *WelfareReply) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *WelfareListDetail) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.HomepageUri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BackdropUri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Tid != 0 {
		n += 1 + sovApi(uint64(m.Tid))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	return n
}

func (m *WelfareTypeReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *WelfareTypeReply) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *WelfareTypeListDetail) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *WelfareInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	return n
}

func (m *WelfareInfoReply) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.HomepageUri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BackdropUri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Finished {
		n += 2
	}
	if m.Received {
		n += 2
	}
	if m.VipType != 0 {
		n += 1 + sovApi(uint64(m.VipType))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	return n
}

func (m *WelfareReceiveReq) Size() (n int) {
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovApi(uint64(m.Wid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	return n
}

func (m *WelfareReceiveReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MyWelfareReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	return n
}

func (m *MyWelfareReply) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *MyWelfareDetail) Size() (n int) {
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovApi(uint64(m.Wid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UsageForm != 0 {
		n += 1 + sovApi(uint64(m.UsageForm))
	}
	l = len(m.ReceiveUri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.Expired {
		n += 2
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterOpenIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterOpenIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterOpenIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterOpenIDReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterOpenIDReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterOpenIDReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenBindByOutOpenIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenBindByOutOpenIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenBindByOutOpenIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutOpenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenBindByOutOpenIDReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenBindByOutOpenIDReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenBindByOutOpenIDReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfoByOpenIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfoByOpenIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfoByOpenIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfoByOpenIDReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfoByOpenIDReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfoByOpenIDReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindState", wireType)
			}
			m.BindState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindState |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutOpenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindInfoByMidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindInfoByMidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindInfoByMidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindInfoByMidReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindInfoByMidReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindInfoByMidReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Outer == nil {
				m.Outer = &BindOuter{}
			}
			if err := m.Outer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindOuter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindOuter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindOuter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindState", wireType)
			}
			m.BindState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindState |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BilibiliPrizeGrantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BilibiliPrizeGrantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BilibiliPrizeGrantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrizeKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BilibiliPrizeGrantReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BilibiliPrizeGrantReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BilibiliPrizeGrantReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amount = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullAmount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FullAmount = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BilibiliVipGrantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BilibiliVipGrantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BilibiliVipGrantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutOpenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOrderNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutOrderNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BilibiliVipGrantReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BilibiliVipGrantReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BilibiliVipGrantReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAssociateOrderReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAssociateOrderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAssociateOrderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Month |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppSubId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppSubId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			m.OrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bmid", wireType)
			}
			m.Bmid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bmid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanelType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PanelType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAssociateOrderReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAssociateOrderReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAssociateOrderReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayParam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayParam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dprice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Dprice = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oprice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Oprice = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponMoney", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CouponMoney = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssociatePanelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssociatePanelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssociatePanelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortTp", wireType)
			}
			m.SortTp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortTp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanelType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PanelType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			m.SubType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Month |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssociatePanelReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssociatePanelReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssociatePanelReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AssociatePanelInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssociatePanelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssociatePanelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssociatePanelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Month |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			m.SubType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuitType", wireType)
			}
			m.SuitType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuitType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.OriginalPrice = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DiscountPrice = float64(math.Float64frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscountRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selected", wireType)
			}
			m.Selected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selected |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayState", wireType)
			}
			m.PayState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayState |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenAuthCallBackReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenAuthCallBackReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenAuthCallBackReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThirdCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThirdCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenAuthCallBackReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenAuthCallBackReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenAuthCallBackReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EleRedPackagesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EleRedPackagesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EleRedPackagesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EleRedPackagesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EleRedPackagesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EleRedPackagesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ModelEleRedPackage{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelEleRedPackage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelEleRedPackage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelEleRedPackage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amount = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCondition", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SumCondition = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EleSpecailFoodsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EleSpecailFoodsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EleSpecailFoodsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EleSpecailFoodsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EleSpecailFoodsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EleSpecailFoodsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ModelEleSpecailFoods{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelEleSpecailFoods) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelEleSpecailFoods: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelEleSpecailFoods: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestaurantName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestaurantName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FoodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoodUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FoodUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Discount = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amount = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalAmount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.OriginalAmount = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingPoint", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RatingPoint = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EleVipGrantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EleVipGrantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EleVipGrantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EleVipGrantReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EleVipGrantReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EleVipGrantReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VipUserPanelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipUserPanelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipUserPanelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortTp", wireType)
			}
			m.SortTp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortTp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanelType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PanelType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			m.SubType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Month |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VipUserPanelReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipUserPanelReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipUserPanelReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceList = append(m.PriceList, &ModelVipPanelInfo{})
			if err := m.PriceList[len(m.PriceList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coupon == nil {
				m.Coupon = &CouponBySuitIDReply{}
			}
			if err := m.Coupon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponSwitch", wireType)
			}
			m.CouponSwitch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CouponSwitch |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeSwitch", wireType)
			}
			m.CodeSwitch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeSwitch |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveSwitch", wireType)
			}
			m.GiveSwitch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiveSwitch |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Privileges == nil {
				m.Privileges = make(map[int32]*ModelPrivilegeResp)
			}
			var mapkey int32
			var mapvalue *ModelPrivilegeResp
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ModelPrivilegeResp{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Privileges[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CouponBySuitIDReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CouponBySuitIDReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CouponBySuitIDReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponTip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponTip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CouponInfo == nil {
				m.CouponInfo = &ModelCouponAllowancePanelInfo{}
			}
			if err := m.CouponInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelCouponAllowancePanelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelCouponAllowancePanelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelCouponAllowancePanelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponAmount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CouponAmount = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullLimitExplain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullLimitExplain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeExplain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeExplain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullAmount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FullAmount = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponDiscountPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CouponDiscountPrice = float64(math.Float64frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selected", wireType)
			}
			m.Selected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selected |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablesExplains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisablesExplains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usable", wireType)
			}
			m.Usable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Usable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelVipPanelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelVipPanelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelVipPanelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Month |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			m.SubType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuitType", wireType)
			}
			m.SuitType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuitType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.OriginalPrice = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DiscountPrice = float64(math.Float64frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscountRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selected", wireType)
			}
			m.Selected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selected |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelPrivilegeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelPrivilegeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelPrivilegeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ModelPrivilege{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelPrivilege) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelPrivilege: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelPrivilege: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CouponBySuitIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CouponBySuitIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CouponBySuitIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanelType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PanelType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WelfareReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WelfareReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WelfareReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recommend", wireType)
			}
			m.Recommend = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Recommend |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WelfareReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WelfareReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WelfareReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WelfareListDetail{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WelfareListDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WelfareListDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WelfareListDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomepageUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomepageUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackdropUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackdropUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WelfareTypeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WelfareTypeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WelfareTypeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WelfareTypeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WelfareTypeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WelfareTypeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WelfareTypeListDetail{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WelfareTypeListDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WelfareTypeListDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WelfareTypeListDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WelfareInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WelfareInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WelfareInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WelfareInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WelfareInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WelfareInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomepageUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomepageUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackdropUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackdropUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Finished = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Received", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Received = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipType", wireType)
			}
			m.VipType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WelfareReceiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WelfareReceiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WelfareReceiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WelfareReceiveReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WelfareReceiveReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WelfareReceiveReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyWelfareReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyWelfareReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyWelfareReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyWelfareReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyWelfareReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyWelfareReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &MyWelfareDetail{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyWelfareDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyWelfareDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyWelfareDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageForm", wireType)
			}
			m.UsageForm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsageForm |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiveUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expired = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/service/main/vip/api/api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 2955 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x5a, 0x4b, 0x6f, 0x1c, 0xc7,
	0x11, 0xc6, 0xbe, 0x77, 0x6b, 0x57, 0x7c, 0x0c, 0x49, 0x89, 0x5c, 0x49, 0x5c, 0x69, 0x1c, 0xc5,
	0x82, 0x6d, 0x91, 0x0e, 0x0d, 0x3b, 0x76, 0x1e, 0x07, 0x2e, 0x25, 0x07, 0x8c, 0x45, 0x89, 0x18,
	0x4a, 0x8a, 0x91, 0xc4, 0x5e, 0xcc, 0xee, 0x34, 0xc9, 0x06, 0x67, 0x67, 0x5a, 0xf3, 0x20, 0xbd,
	0xbe, 0xe5, 0x9c, 0x43, 0x02, 0xe4, 0x27, 0x18, 0x01, 0xf2, 0x17, 0x72, 0xce, 0x25, 0x47, 0xff,
	0x82, 0x45, 0xe0, 0xe3, 0x22, 0xf7, 0x00, 0x39, 0x05, 0x55, 0xdd, 0xf3, 0xdc, 0x21, 0x69, 0x2b,
	0x07, 0x71, 0xbb, 0xaa, 0xab, 0xbb, 0xab, 0xab, 0xaa, 0xab, 0xbe, 0xee, 0x11, 0xe8, 0xa6, 0x10,
	0xdb, 0x3e, 0xf3, 0xce, 0xf9, 0x88, 0x6d, 0x8f, 0x4d, 0xee, 0x6c, 0x9f, 0x73, 0xb1, 0x6d, 0x0a,
	0x8e, 0xff, 0xb6, 0x84, 0xe7, 0x06, 0xae, 0xd6, 0x36, 0x47, 0x23, 0x37, 0x74, 0x82, 0xad, 0x73,
	0x2e, 0xba, 0x8f, 0x4e, 0x78, 0x70, 0x1a, 0x0e, 0xb7, 0x46, 0xee, 0x78, 0xfb, 0xc4, 0x3d, 0x71,
	0xb7, 0x49, 0x66, 0x18, 0x1e, 0x13, 0x45, 0x04, 0xb5, 0xe4, 0x58, 0xfd, 0x17, 0xb0, 0x6c, 0xb0,
	0x13, 0xee, 0x07, 0xcc, 0x7b, 0x2e, 0x98, 0xb3, 0xff, 0xd8, 0x60, 0xaf, 0xb5, 0x25, 0xa8, 0x8c,
	0xb9, 0xb5, 0x5e, 0xba, 0x57, 0x7a, 0x58, 0x31, 0xb0, 0xa9, 0xad, 0x41, 0xdd, 0x14, 0x62, 0xc0,
	0xad, 0xf5, 0x32, 0x31, 0x6b, 0xa6, 0x10, 0xfb, 0x96, 0xbe, 0x05, 0x2b, 0xf9, 0xd1, 0xc2, 0x9e,
	0x68, 0xb7, 0xa0, 0xe1, 0x0a, 0xe6, 0x0c, 0xd4, 0x1c, 0x2d, 0xa3, 0x8e, 0xe4, 0xbe, 0xa5, 0x9f,
	0xc2, 0x4d, 0x94, 0xeb, 0x73, 0xc7, 0xea, 0x4f, 0x9e, 0x87, 0x41, 0xb2, 0xe4, 0x65, 0x43, 0xb4,
	0x4d, 0x68, 0xbb, 0x61, 0x30, 0x88, 0x3a, 0xcb, 0xd4, 0xd9, 0x72, 0xd5, 0xd8, 0xb4, 0x66, 0x95,
	0xb4, 0x66, 0x5d, 0x58, 0x2f, 0x5c, 0x49, 0xd8, 0x13, 0xfd, 0x25, 0xac, 0xbc, 0xf4, 0x99, 0xb7,
	0xef, 0x1c, 0xbb, 0xfd, 0x49, 0xa2, 0xc2, 0x02, 0x94, 0xb9, 0x50, 0xab, 0x97, 0xb9, 0x48, 0xab,
	0x54, 0xce, 0xa8, 0x74, 0xc9, 0x92, 0x5f, 0xc3, 0xda, 0xfc, 0xb4, 0x68, 0x0e, 0x0d, 0xaa, 0x8e,
	0x39, 0x66, 0x6a, 0x6a, 0x6a, 0x6b, 0x8f, 0x00, 0x86, 0xdc, 0xb1, 0x06, 0x7e, 0x60, 0x06, 0x8c,
	0xe6, 0xaf, 0xf5, 0x17, 0x66, 0xd3, 0x5e, 0x8a, 0x6b, 0xb4, 0xb0, 0x7d, 0x84, 0xcd, 0xbc, 0x15,
	0x2a, 0x39, 0x2b, 0xe8, 0x3f, 0x87, 0x25, 0xdc, 0xaa, 0x5c, 0xfb, 0x80, 0x5b, 0x3f, 0xc8, 0x8b,
	0x1e, 0x68, 0xb9, 0xc1, 0xa8, 0xf5, 0x16, 0x34, 0x54, 0x5c, 0xd1, 0x14, 0xed, 0x9d, 0xd5, 0xad,
	0x54, 0x9c, 0x6d, 0xed, 0xca, 0xb6, 0x11, 0x09, 0x69, 0xef, 0x41, 0xcd, 0x0d, 0x03, 0xe6, 0xd1,
	0xdc, 0xed, 0x9d, 0x9b, 0x19, 0x69, 0x9c, 0xff, 0x39, 0xf6, 0x1a, 0x52, 0x48, 0xdf, 0x83, 0x86,
	0x9a, 0xa1, 0x40, 0xcf, 0xc8, 0x60, 0xe5, 0x94, 0xc1, 0x34, 0xa8, 0x1e, 0x9b, 0x23, 0xa6, 0xb6,
	0x4e, 0x6d, 0xfd, 0x29, 0xb4, 0xe2, 0x89, 0x71, 0x9a, 0x80, 0xd9, 0xca, 0xc8, 0xd8, 0xfc, 0x81,
	0x36, 0xd6, 0xff, 0x50, 0x82, 0xb5, 0x3e, 0xb7, 0xf9, 0x90, 0xdb, 0xfc, 0xd0, 0xe3, 0x5f, 0xb3,
	0x5f, 0x79, 0xa6, 0x13, 0xa0, 0x25, 0x6f, 0x43, 0x4b, 0x20, 0x63, 0x70, 0xc6, 0x26, 0x6a, 0x81,
	0x26, 0x31, 0x3e, 0x63, 0x13, 0xec, 0x0c, 0x1d, 0xfe, 0x3a, 0x64, 0x03, 0xc7, 0x55, 0x1a, 0x37,
	0x25, 0xe3, 0x99, 0x9b, 0x8e, 0xa1, 0xca, 0x25, 0x31, 0x54, 0x4d, 0xbb, 0x22, 0x80, 0x5b, 0x45,
	0x2a, 0xa0, 0x3f, 0x6e, 0x42, 0xdd, 0x1c, 0xc7, 0xee, 0x28, 0x19, 0x8a, 0xd2, 0x7a, 0xd0, 0x3e,
	0x0e, 0x6d, 0x7b, 0xa0, 0x3a, 0xcb, 0xd4, 0x09, 0xc8, 0xda, 0x95, 0x02, 0xf7, 0xa0, 0x6d, 0x31,
	0x7f, 0xe4, 0x71, 0x11, 0x70, 0xd7, 0x51, 0x7a, 0xa4, 0x59, 0xfa, 0x37, 0x25, 0x58, 0x89, 0x96,
	0x7d, 0xc5, 0x45, 0xbc, 0xef, 0x37, 0x3e, 0x94, 0xf7, 0xa0, 0x43, 0xfd, 0x9e, 0xc5, 0x3c, 0x34,
	0x8b, 0x5c, 0x13, 0x50, 0x00, 0x59, 0xcf, 0x5c, 0xad, 0x0b, 0x4d, 0x2b, 0xf4, 0x4c, 0xd2, 0x08,
	0x2d, 0x50, 0x33, 0x62, 0x3a, 0x65, 0x9b, 0x5a, 0xda, 0x36, 0xb7, 0x12, 0xf7, 0x24, 0x4a, 0xe2,
	0x79, 0xfe, 0x73, 0x05, 0x6e, 0xed, 0x79, 0xcc, 0x0c, 0xd8, 0xae, 0xef, 0xbb, 0x23, 0x6e, 0x06,
	0x8c, 0x96, 0x29, 0x3e, 0x04, 0xab, 0x50, 0x1b, 0xbb, 0x4e, 0x70, 0x2a, 0x03, 0xc2, 0x90, 0x04,
	0xea, 0x23, 0x6c, 0x33, 0x38, 0x76, 0xbd, 0xb1, 0xd2, 0x36, 0xa6, 0xb5, 0x0d, 0x68, 0x8e, 0xdd,
	0x21, 0x1f, 0x98, 0x42, 0x90, 0xae, 0x2d, 0xa3, 0x81, 0xf4, 0xae, 0x10, 0xe8, 0x14, 0x8b, 0x61,
	0x6e, 0x26, 0x55, 0x5b, 0x86, 0xa2, 0x70, 0x11, 0x52, 0x7a, 0xbd, 0x9e, 0xda, 0x01, 0x2e, 0x62,
	0x0a, 0x71, 0x14, 0x0e, 0xf7, 0xad, 0xf5, 0x86, 0x5c, 0x24, 0xa2, 0xb5, 0x3b, 0xd0, 0x22, 0x73,
	0xbd, 0x98, 0x08, 0xb6, 0xde, 0x24, 0xd5, 0x12, 0x06, 0xce, 0x67, 0x05, 0xd8, 0xd3, 0x92, 0x4a,
	0x13, 0x81, 0x63, 0x3c, 0x16, 0x84, 0x9e, 0xf3, 0xd2, 0xb3, 0xd7, 0x41, 0x3a, 0x21, 0x66, 0x68,
	0xf7, 0xa1, 0x33, 0x72, 0x43, 0xe1, 0x3a, 0x83, 0xc0, 0x3d, 0x63, 0xce, 0x7a, 0x5b, 0x3a, 0x5e,
	0xf2, 0x5e, 0x20, 0x0b, 0x0f, 0xd5, 0x10, 0xcd, 0xd3, 0x21, 0x2d, 0xa9, 0xad, 0xdd, 0x05, 0x10,
	0xa6, 0xc3, 0xec, 0x01, 0xad, 0x77, 0x43, 0xce, 0x4a, 0x9c, 0x48, 0x93, 0x61, 0xc8, 0x6d, 0x6b,
	0x7d, 0x41, 0xee, 0x8c, 0x08, 0xcc, 0x9d, 0xfb, 0x87, 0xeb, 0x8b, 0x32, 0x77, 0xee, 0x1f, 0xea,
	0x7f, 0x2c, 0xc1, 0x46, 0xb1, 0x4b, 0x30, 0x94, 0xf1, 0x3c, 0x99, 0x93, 0x81, 0x30, 0x3d, 0x73,
	0x1c, 0x9f, 0x27, 0x73, 0x72, 0x88, 0x34, 0x99, 0x54, 0x78, 0x68, 0x52, 0x19, 0xca, 0x8a, 0x42,
	0xbe, 0x2b, 0xf9, 0x15, 0xc9, 0x97, 0x54, 0x6a, 0x9b, 0x63, 0xd7, 0x61, 0x13, 0xf2, 0x50, 0x29,
	0xda, 0xe6, 0x01, 0xb2, 0xf4, 0xbf, 0x94, 0x61, 0x39, 0xd6, 0xe3, 0x10, 0xb7, 0x52, 0x1c, 0x1a,
	0x37, 0xa1, 0x7e, 0xe4, 0x7a, 0xc1, 0x0b, 0xa1, 0x62, 0x43, 0x51, 0x6a, 0x77, 0x95, 0x68, 0x77,
	0xda, 0x3a, 0x34, 0x0e, 0x64, 0x00, 0x44, 0xf1, 0x70, 0x90, 0xc4, 0xc3, 0xe3, 0x4c, 0x3c, 0x48,
	0x0a, 0x3d, 0x7f, 0x18, 0x85, 0x57, 0x5d, 0x6e, 0x38, 0xa2, 0xd1, 0x09, 0xd8, 0xa6, 0x88, 0xa8,
	0x19, 0xd4, 0x46, 0xcf, 0x1e, 0x46, 0x26, 0xa7, 0x68, 0x68, 0x19, 0x09, 0x03, 0xd7, 0x3f, 0x0a,
	0x87, 0x2f, 0x92, 0x78, 0x88, 0x48, 0xf4, 0xce, 0x01, 0x05, 0x37, 0xc8, 0x38, 0x21, 0x02, 0xb9,
	0x7d, 0xf2, 0x59, 0x5b, 0xfa, 0x8c, 0x08, 0xfd, 0xd7, 0xb0, 0x92, 0x37, 0x0a, 0x3a, 0xe7, 0x03,
	0xa8, 0xda, 0xdc, 0xc7, 0x2c, 0x53, 0x79, 0xd8, 0xde, 0xe9, 0x65, 0x93, 0x7e, 0x46, 0x1e, 0x0b,
	0x86, 0x41, 0xc2, 0xfa, 0xdf, 0x2a, 0xa0, 0xcd, 0x77, 0x52, 0x49, 0x8d, 0x2c, 0x5c, 0xbe, 0xf4,
	0xec, 0xdd, 0x87, 0x8e, 0xf0, 0x5c, 0x2b, 0x1c, 0x05, 0x03, 0x4a, 0xfb, 0x2a, 0x43, 0x29, 0xde,
	0x33, 0xcc, 0xfe, 0x18, 0x94, 0x4a, 0x44, 0xa5, 0x4c, 0x0c, 0x4a, 0xc9, 0xd9, 0xb7, 0xf0, 0x84,
	0xfa, 0xe1, 0x50, 0x46, 0x6c, 0x4d, 0x5a, 0xc4, 0x57, 0x16, 0xb9, 0x0d, 0x2d, 0x3f, 0xe4, 0x81,
	0xec, 0xab, 0xcb, 0x4c, 0x83, 0x0c, 0xea, 0x7c, 0x00, 0x0b, 0xae, 0xc7, 0x4f, 0xb8, 0x63, 0xda,
	0x03, 0x19, 0x5b, 0x0d, 0x8a, 0x9e, 0x1b, 0x11, 0xf7, 0x90, 0x42, 0xec, 0x01, 0x2c, 0x58, 0xdc,
	0x27, 0x33, 0x28, 0xb1, 0xa6, 0x14, 0x8b, 0xb8, 0x52, 0xec, 0x2d, 0x88, 0x19, 0x03, 0x0f, 0x4b,
	0x4e, 0x8b, 0xf4, 0xec, 0x44, 0x4c, 0x03, 0x2b, 0xf9, 0x4d, 0xa8, 0x7b, 0x6c, 0x6c, 0x7a, 0x67,
	0xea, 0xc0, 0x2a, 0x0a, 0x23, 0xc4, 0x67, 0x36, 0x1b, 0x05, 0x4c, 0xba, 0x09, 0xd5, 0x54, 0xb4,
	0xf6, 0x8e, 0x3c, 0x2f, 0xb2, 0x8e, 0x75, 0xa8, 0x8e, 0xdd, 0x98, 0x4d, 0x7b, 0x09, 0x93, 0x8e,
	0x8f, 0x44, 0x0a, 0x3d, 0x68, 0x23, 0x7b, 0xcc, 0x7c, 0xdf, 0x3c, 0x89, 0xce, 0x2f, 0x08, 0x73,
	0x72, 0x20, 0x39, 0xfa, 0x17, 0xb0, 0x82, 0x59, 0x7a, 0x37, 0x0c, 0x4e, 0xf7, 0x4c, 0xdb, 0xee,
	0x9b, 0xa3, 0xb3, 0xe2, 0xd3, 0x70, 0x17, 0x20, 0x38, 0xe5, 0x9e, 0x35, 0x18, 0xb9, 0x56, 0x54,
	0x8b, 0x5b, 0xc4, 0xd9, 0x73, 0x2d, 0x76, 0x19, 0x0a, 0xba, 0x05, 0x6b, 0xf3, 0xd3, 0x63, 0x96,
	0x5e, 0x81, 0xe5, 0x27, 0x36, 0x33, 0x98, 0x75, 0x68, 0x8e, 0xce, 0xcc, 0x13, 0xe6, 0x1b, 0xec,
	0x35, 0xc6, 0x60, 0x9e, 0x79, 0x5d, 0x0c, 0x1e, 0xb8, 0x16, 0xb3, 0x33, 0x83, 0x54, 0x0c, 0x32,
	0xd0, 0xe6, 0xfb, 0x0a, 0xc1, 0x57, 0x52, 0x4a, 0xcb, 0x99, 0x52, 0xfa, 0x16, 0xdc, 0xf0, 0xc3,
	0xf1, 0x60, 0xe4, 0x3a, 0x16, 0x8f, 0x6b, 0x65, 0xc9, 0xe8, 0xf8, 0xe1, 0x78, 0x2f, 0xe2, 0xe9,
	0xab, 0xa0, 0x3d, 0xb1, 0xd9, 0x91, 0x60, 0x23, 0x93, 0xdb, 0x9f, 0xba, 0xae, 0x45, 0x1b, 0x39,
	0x80, 0xd5, 0x39, 0x2e, 0xee, 0xe4, 0xc3, 0xcc, 0x4e, 0xee, 0x17, 0xee, 0x24, 0x33, 0x4a, 0xee,
	0xe5, 0x3f, 0x25, 0x58, 0x2d, 0xea, 0xd6, 0xde, 0x86, 0x45, 0x8f, 0xf9, 0x81, 0x19, 0x62, 0xf9,
	0x1b, 0xa4, 0x76, 0xb6, 0x90, 0xb0, 0xe9, 0xc4, 0xdc, 0x86, 0xd6, 0xb1, 0xeb, 0x5a, 0x83, 0x14,
	0x90, 0x6a, 0x22, 0x83, 0x3a, 0x37, 0x80, 0xda, 0x83, 0xd0, 0xb3, 0xd5, 0x69, 0x6b, 0x20, 0x8d,
	0x55, 0x03, 0x0b, 0xb3, 0x8a, 0x57, 0x95, 0x4a, 0x63, 0x3a, 0x65, 0xb7, 0x5a, 0xc6, 0x6e, 0x6f,
	0xc3, 0x62, 0x7c, 0x8c, 0x94, 0x40, 0x9d, 0x04, 0xe2, 0xd3, 0xa5, 0xa0, 0xc8, 0x7d, 0xe8, 0x60,
	0x8d, 0x77, 0x4e, 0x06, 0xc2, 0xe5, 0x4e, 0xa0, 0x4e, 0x5b, 0x5b, 0xf2, 0x0e, 0x91, 0xa5, 0xbf,
	0x0b, 0x0b, 0x4f, 0x6c, 0x96, 0x46, 0x21, 0x1b, 0xd0, 0x8c, 0x81, 0x84, 0xdc, 0x6b, 0xc3, 0x95,
	0x28, 0x42, 0xd7, 0x60, 0x29, 0x23, 0x8c, 0x71, 0xf6, 0xd7, 0x32, 0x2c, 0xbe, 0xe2, 0x02, 0xa1,
	0xf8, 0xd5, 0xa9, 0xde, 0xcf, 0xa4, 0x7a, 0x3f, 0x4e, 0xf5, 0x5c, 0x44, 0xa9, 0x9e, 0x0b, 0x4c,
	0xb5, 0xe3, 0x6c, 0xaa, 0xbf, 0xae, 0xf4, 0xa7, 0x91, 0x44, 0x3d, 0x87, 0x24, 0x34, 0xa8, 0x8a,
	0x54, 0xaa, 0x17, 0x2a, 0xd5, 0x8b, 0x7c, 0xaa, 0x17, 0xe9, 0x54, 0xef, 0x67, 0x53, 0xbd, 0x9f,
	0xa4, 0xfa, 0x71, 0x3a, 0xd5, 0x8f, 0xa3, 0x54, 0x3f, 0x4c, 0xa7, 0x7a, 0x59, 0x9e, 0x35, 0xa8,
	0xda, 0xa6, 0x73, 0x42, 0xb9, 0xa3, 0x65, 0x50, 0x5b, 0xff, 0xa6, 0x02, 0xcb, 0x59, 0x3b, 0x61,
	0xbc, 0xfe, 0x12, 0x13, 0x2d, 0x1f, 0xb1, 0x41, 0x2a, 0x6a, 0x37, 0xe7, 0xa3, 0xf6, 0x15, 0x17,
	0x49, 0x09, 0x68, 0xd1, 0x88, 0xa7, 0xdc, 0x0f, 0xb4, 0x8f, 0xa1, 0x2e, 0x0b, 0xaf, 0xba, 0x05,
	0xdc, 0xcb, 0x0c, 0xdd, 0xa3, 0xae, 0xfe, 0xe4, 0x28, 0xe4, 0x81, 0xba, 0x1c, 0x19, 0x4a, 0x1e,
	0xcf, 0x9e, 0x2a, 0xe3, 0xfe, 0x05, 0x0f, 0x46, 0xa7, 0xe4, 0x83, 0x9a, 0xa1, 0x6a, 0xfb, 0x11,
	0xf1, 0x30, 0xb9, 0x61, 0x32, 0x8a, 0x44, 0x24, 0x70, 0x04, 0x64, 0x25, 0x02, 0x27, 0xfc, 0x3c,
	0x16, 0x90, 0xb5, 0x00, 0x90, 0xa5, 0x04, 0x9e, 0xd1, 0xfe, 0xce, 0xb9, 0xcd, 0x4e, 0x98, 0xbf,
	0x5e, 0xa7, 0xfd, 0x6d, 0x65, 0x94, 0x9c, 0xb3, 0xc9, 0xd6, 0x61, 0x3c, 0xe0, 0x89, 0x13, 0x78,
	0x13, 0x23, 0x35, 0x43, 0xf7, 0x4b, 0x58, 0xcc, 0x75, 0x63, 0xb0, 0x45, 0xf7, 0x84, 0x9a, 0x81,
	0x4d, 0xed, 0x43, 0xa8, 0x9d, 0x9b, 0x76, 0xc8, 0x94, 0x51, 0x0a, 0xf2, 0x59, 0x3c, 0x87, 0xc1,
	0x7c, 0x61, 0x48, 0xe9, 0x9f, 0x95, 0x3f, 0x2e, 0xe1, 0xa5, 0x64, 0xa5, 0xc0, 0x6c, 0x98, 0x9c,
	0x23, 0x70, 0x17, 0x5f, 0x5a, 0x5b, 0x0a, 0xda, 0x71, 0xa1, 0x7d, 0x06, 0x0a, 0x00, 0x0d, 0xb8,
	0x73, 0xec, 0xaa, 0x75, 0xdf, 0x99, 0x5f, 0x57, 0x4e, 0xbd, 0x6b, 0xdb, 0xee, 0x85, 0xe9, 0x8c,
	0x52, 0x65, 0x5d, 0xcd, 0x8e, 0x6d, 0xfd, 0xbf, 0x55, 0xb8, 0x7b, 0xa5, 0xf4, 0x1c, 0xd4, 0x2c,
	0xcd, 0x43, 0xcd, 0x8f, 0x62, 0xff, 0xa6, 0x53, 0x6f, 0x7f, 0x79, 0x36, 0xed, 0x65, 0x3b, 0x22,
	0x97, 0xef, 0x46, 0xd7, 0x9b, 0x9a, 0xac, 0x7b, 0x14, 0x0f, 0xfd, 0xd6, 0x6c, 0xda, 0x93, 0x0c,
	0x43, 0xfe, 0x68, 0xef, 0x81, 0x46, 0xf7, 0x1f, 0x9b, 0x8f, 0x79, 0x30, 0x60, 0x5f, 0x09, 0xdb,
	0xe4, 0x8e, 0x3a, 0xac, 0x4b, 0xd8, 0xf3, 0x14, 0x3b, 0x9e, 0x48, 0x3e, 0xa5, 0xf8, 0x91, 0x2b,
	0x58, 0x2c, 0x28, 0x0f, 0x6f, 0x87, 0x98, 0x91, 0xd0, 0xfb, 0xd9, 0x2b, 0x15, 0xe5, 0xb2, 0xfe,
	0xe2, 0x6c, 0xda, 0x4b, 0xb3, 0x33, 0x77, 0xac, 0x03, 0x58, 0x53, 0x9b, 0xc8, 0x01, 0x05, 0xca,
	0x70, 0xfd, 0x8d, 0xd9, 0xb4, 0x57, 0x2c, 0x60, 0xac, 0x48, 0xf6, 0xe3, 0x0c, 0x92, 0x78, 0x04,
	0xe0, 0x07, 0xa6, 0x17, 0x0c, 0x02, 0x3e, 0x96, 0x49, 0xa1, 0x22, 0x6f, 0xae, 0x09, 0xd7, 0x68,
	0x51, 0xfb, 0x05, 0x1f, 0x33, 0xd4, 0x97, 0x7d, 0x25, 0xb8, 0xc7, 0xa4, 0x7c, 0x8b, 0xe4, 0x49,
	0xdf, 0x14, 0xdb, 0x00, 0x49, 0xd0, 0x88, 0x87, 0x29, 0xb4, 0x41, 0xf9, 0xa3, 0xdf, 0x99, 0x4d,
	0x7b, 0x31, 0x2f, 0x85, 0x3d, 0xde, 0x85, 0x65, 0x8b, 0xfb, 0xe6, 0xd0, 0x66, 0x7e, 0x64, 0x33,
	0x5f, 0x5d, 0x25, 0x96, 0xa2, 0x0e, 0x65, 0x37, 0x3f, 0x93, 0xaa, 0x3b, 0x99, 0x54, 0x1d, 0xd7,
	0xe1, 0x1b, 0xa9, 0x3a, 0xac, 0x43, 0x3d, 0xa4, 0x19, 0xe8, 0x32, 0x51, 0xeb, 0xc3, 0x6c, 0xda,
	0x53, 0x1c, 0x43, 0xfd, 0xea, 0xd3, 0x0a, 0x2c, 0xcf, 0xa5, 0x1c, 0x8c, 0x0a, 0x99, 0xfc, 0x4a,
	0x49, 0x54, 0x10, 0xe3, 0x32, 0x4c, 0x59, 0xbe, 0x0e, 0x53, 0x56, 0xf2, 0x98, 0xf2, 0xed, 0x14,
	0xa6, 0xac, 0xa6, 0x4c, 0xa4, 0x78, 0x49, 0x22, 0x7e, 0x27, 0x8d, 0x30, 0x6b, 0x09, 0x3a, 0x8b,
	0x99, 0x29, 0xc0, 0xf9, 0xc9, 0x1c, 0xe0, 0x94, 0xc1, 0xa5, 0xcd, 0xa6, 0xbd, 0x5c, 0x4f, 0x1e,
	0x84, 0x7e, 0x32, 0x07, 0x42, 0x1b, 0xc9, 0xd0, 0x5c, 0x50, 0x5d, 0x07, 0x4c, 0x9b, 0x57, 0x02,
	0xd3, 0x56, 0x06, 0x98, 0x7e, 0xff, 0x50, 0xb9, 0x49, 0x68, 0x9f, 0x0a, 0x4f, 0xbf, 0x3e, 0x9b,
	0xf6, 0xca, 0xdc, 0x22, 0xd4, 0x7f, 0x07, 0xaa, 0x64, 0x1b, 0x89, 0x5c, 0x9b, 0xb3, 0x69, 0x8f,
	0x68, 0x83, 0xfe, 0xea, 0xbf, 0x53, 0xb0, 0x2d, 0x93, 0x02, 0xb1, 0x8e, 0x05, 0x3c, 0xb0, 0x23,
	0x74, 0x23, 0x09, 0x6d, 0x5b, 0xa1, 0xa9, 0x32, 0xe5, 0xed, 0xdb, 0x57, 0xe5, 0x51, 0x89, 0xa3,
	0xbe, 0x80, 0x85, 0x2c, 0xbf, 0x10, 0x0f, 0x6e, 0x40, 0x93, 0x8f, 0x5c, 0x87, 0xe0, 0x90, 0x0c,
	0x94, 0x06, 0xd2, 0x08, 0x87, 0x22, 0xdd, 0x2b, 0x85, 0xba, 0xff, 0xbd, 0x04, 0xcb, 0xf9, 0xec,
	0x5c, 0x84, 0x36, 0x96, 0xa0, 0xe2, 0xc7, 0xaf, 0x6e, 0xd8, 0x4c, 0xe3, 0x8a, 0xca, 0x65, 0xb8,
	0xa2, 0x7a, 0x29, 0xae, 0xa8, 0xe5, 0x70, 0x45, 0x06, 0x43, 0xd4, 0x2f, 0xbd, 0xb2, 0x37, 0x52,
	0x98, 0x40, 0xff, 0x3d, 0xc0, 0x6f, 0x98, 0x7d, 0x6c, 0x7a, 0x4c, 0xe9, 0x1c, 0x24, 0x3a, 0x07,
	0xe4, 0xb5, 0x96, 0xc7, 0x46, 0xee, 0x78, 0xcc, 0x9c, 0x48, 0xf3, 0x84, 0x81, 0x38, 0x49, 0xf8,
	0x0a, 0xf9, 0x97, 0x85, 0x4f, 0xb4, 0xa3, 0xde, 0xb2, 0xca, 0xc2, 0xd1, 0x3f, 0x87, 0x4e, 0x3c,
	0x3b, 0xd6, 0xab, 0x55, 0xa8, 0x25, 0x6f, 0x89, 0x15, 0x43, 0x12, 0xda, 0x4e, 0xc6, 0x9f, 0x59,
	0x9c, 0xa1, 0x86, 0x23, 0xac, 0x78, 0xcc, 0x02, 0x93, 0xdb, 0xca, 0xa5, 0xff, 0x2e, 0xc1, 0xf2,
	0x5c, 0x9f, 0x8a, 0x3d, 0x99, 0x0d, 0x72, 0xb1, 0x97, 0x9c, 0x7f, 0xe9, 0x3f, 0xa4, 0x95, 0xe3,
	0x3f, 0x80, 0xce, 0xa9, 0x3b, 0x66, 0xc2, 0x3c, 0x61, 0x83, 0xd0, 0xe3, 0xd2, 0x15, 0xfd, 0xa5,
	0xd9, 0xb4, 0x97, 0xe1, 0x1b, 0xed, 0x88, 0x7a, 0xe9, 0x71, 0x1c, 0x34, 0x34, 0x47, 0x67, 0x96,
	0xe7, 0x0a, 0x1a, 0x54, 0x4d, 0x06, 0xa5, 0xf9, 0x46, 0x3b, 0xa2, 0x70, 0xd0, 0x86, 0xb4, 0xaf,
	0x4c, 0x0f, 0x8d, 0xd9, 0xb4, 0x87, 0x64, 0x64, 0xe8, 0xaa, 0x67, 0x3a, 0x67, 0xf2, 0x72, 0x2a,
	0x55, 0x44, 0xda, 0xa0, 0xbf, 0xfa, 0x12, 0x2c, 0xa8, 0xdd, 0xa2, 0x2f, 0xe5, 0x9d, 0x69, 0x29,
	0xc3, 0x41, 0xf3, 0x7e, 0x94, 0xb9, 0x66, 0xe8, 0x45, 0x86, 0x44, 0xe1, 0x39, 0x63, 0x1e, 0xc0,
	0x5a, 0x61, 0xf7, 0x9b, 0xd9, 0x53, 0xdf, 0x89, 0x95, 0x25, 0x10, 0xa1, 0x1e, 0xd5, 0xd3, 0x2f,
	0x00, 0xea, 0x6c, 0x94, 0xe3, 0xb3, 0xa1, 0xff, 0xa9, 0x12, 0xef, 0x47, 0x0e, 0x92, 0x8f, 0x9d,
	0x6f, 0xe2, 0xce, 0x3b, 0x50, 0xb5, 0x98, 0x3f, 0x52, 0x6e, 0xa4, 0x5e, 0xa4, 0x0d, 0xfa, 0x3b,
	0xe7, 0xec, 0xea, 0x9b, 0x38, 0xbb, 0xf6, 0x7d, 0x9c, 0xfd, 0x10, 0x9a, 0xc7, 0xdc, 0xe1, 0xfe,
	0x29, 0x93, 0x0f, 0x80, 0x4d, 0x99, 0x32, 0x23, 0x9e, 0x11, 0xb7, 0x50, 0xd2, 0x63, 0x23, 0xc6,
	0xcf, 0x99, 0x3c, 0x9d, 0x4a, 0x32, 0xe2, 0x19, 0x71, 0x0b, 0xcb, 0xd1, 0x39, 0x17, 0xb2, 0xc8,
	0x48, 0x40, 0x40, 0x92, 0x11, 0xcf, 0x68, 0x9c, 0x73, 0x41, 0xa7, 0x9d, 0x00, 0x53, 0x02, 0x03,
	0x14, 0x60, 0x42, 0x00, 0x20, 0x7f, 0x50, 0x80, 0x91, 0x00, 0x24, 0x02, 0x4c, 0x0a, 0xd0, 0x8f,
	0xfe, 0xd3, 0xf8, 0x80, 0x19, 0x72, 0x75, 0x95, 0x20, 0x2e, 0x92, 0x04, 0x71, 0x51, 0xe8, 0xca,
	0x35, 0x58, 0xc9, 0x0f, 0xc4, 0x1b, 0xd9, 0x3d, 0xe8, 0x1c, 0x4c, 0xb2, 0xb9, 0x26, 0x9b, 0x1f,
	0xf5, 0x3e, 0x2c, 0xa4, 0x24, 0x30, 0x00, 0xde, 0xcf, 0x04, 0xf4, 0x9d, 0x6c, 0xa6, 0x8f, 0x44,
	0x33, 0xa1, 0xfc, 0x6d, 0x19, 0x16, 0x73, 0x3d, 0x78, 0xea, 0x2e, 0xe2, 0x38, 0xa2, 0x53, 0x77,
	0x81, 0xa7, 0xee, 0xe2, 0xff, 0x8c, 0xa4, 0x47, 0x00, 0xa1, 0x8f, 0xe1, 0x42, 0xc9, 0xb8, 0x9a,
	0x7c, 0x58, 0x48, 0xb8, 0x46, 0x8b, 0xda, 0x9f, 0x62, 0x76, 0x7e, 0x1f, 0xda, 0xca, 0x8d, 0xa9,
	0x10, 0x22, 0x78, 0x96, 0x62, 0x1b, 0xa0, 0x08, 0x0c, 0xa0, 0x3b, 0x50, 0xa5, 0x47, 0x97, 0x7a,
	0xb2, 0x3c, 0xd2, 0x06, 0xfd, 0x4d, 0x3c, 0xdc, 0xb8, 0xce, 0xc3, 0xcd, 0x62, 0x0f, 0x6b, 0x0f,
	0xa0, 0x21, 0xc1, 0xa0, 0x45, 0x51, 0xd2, 0xec, 0xb7, 0x67, 0xd3, 0x5e, 0xc4, 0x32, 0xa2, 0xc6,
	0xce, 0x3f, 0x3a, 0x50, 0x79, 0xc5, 0x85, 0x66, 0xc0, 0x42, 0xf6, 0x33, 0x9f, 0x96, 0x4d, 0xd5,
	0x73, 0x5f, 0x10, 0xbb, 0xf7, 0xae, 0xec, 0x47, 0x07, 0x9b, 0xf2, 0x19, 0x2a, 0xf7, 0x81, 0x4e,
	0x7b, 0x2b, 0x33, 0xb0, 0xf8, 0x63, 0x61, 0xf7, 0xc1, 0xf5, 0x42, 0xb8, 0xc4, 0xe7, 0xb0, 0x94,
	0xff, 0x20, 0xa7, 0x65, 0x15, 0x2b, 0xf8, 0x0c, 0xd8, 0xd5, 0xaf, 0x91, 0xc0, 0x99, 0x9f, 0xc3,
	0x8d, 0xcc, 0x17, 0x33, 0xed, 0xee, 0xdc, 0xd7, 0xae, 0xf4, 0xa7, 0xb8, 0x6e, 0xef, 0xaa, 0x6e,
	0x9c, 0xf0, 0x4b, 0xd0, 0xe6, 0xbf, 0xfb, 0x68, 0x7a, 0x6e, 0x58, 0xc1, 0xb7, 0xa9, 0xee, 0x8f,
	0xae, 0x95, 0x51, 0xa6, 0xc8, 0x7f, 0x3b, 0xc9, 0x99, 0xa2, 0xe0, 0xfb, 0x4f, 0x57, 0xbf, 0x46,
	0x02, 0x67, 0xb6, 0x60, 0xb5, 0xe8, 0xa1, 0x5f, 0xcb, 0xea, 0x75, 0xc9, 0xe7, 0x99, 0xee, 0x8f,
	0xbf, 0x87, 0x14, 0xae, 0x62, 0xc0, 0x42, 0xf6, 0x79, 0x39, 0x17, 0x81, 0x73, 0xaf, 0xfb, 0xb9,
	0x08, 0x2c, 0x7a, 0xe8, 0xfe, 0x1c, 0x96, 0xf2, 0x2f, 0x95, 0x39, 0x9b, 0x14, 0xbc, 0x93, 0xe6,
	0x6c, 0x52, 0xf8, 0xd4, 0x89, 0xda, 0x66, 0x5f, 0x35, 0x73, 0xda, 0xce, 0xbd, 0x83, 0xe6, 0xb4,
	0x2d, 0x7a, 0x12, 0x7d, 0x09, 0x8b, 0xf9, 0xb7, 0xc0, 0x5e, 0x7e, 0x50, 0xee, 0x51, 0xb2, 0x7b,
	0xff, 0x6a, 0x01, 0x9c, 0x76, 0x1f, 0xda, 0xa9, 0x17, 0x34, 0xed, 0x76, 0x7e, 0x44, 0x3a, 0x1c,
	0xee, 0x5e, 0xde, 0x89, 0x53, 0x3d, 0x85, 0x4e, 0xfa, 0xed, 0x44, 0xbb, 0x73, 0xc5, 0xb3, 0xca,
	0xeb, 0xee, 0xe6, 0xd5, 0x8f, 0x2e, 0x68, 0xc3, 0x2c, 0xb2, 0xce, 0xd9, 0x70, 0x0e, 0x76, 0x77,
	0xaf, 0x7d, 0x6b, 0xd2, 0x76, 0xa1, 0x9d, 0x42, 0x8e, 0xda, 0xad, 0x22, 0x98, 0x84, 0x33, 0x6d,
	0x14, 0x77, 0xe0, 0x14, 0x07, 0xb0, 0x98, 0x03, 0x4c, 0x39, 0x9b, 0x65, 0xc1, 0x5a, 0xce, 0x66,
	0x73, 0xb8, 0x6d, 0x3f, 0xd6, 0x88, 0xae, 0xb5, 0x85, 0x53, 0x29, 0x28, 0x55, 0x3c, 0x55, 0x02,
	0x99, 0x8c, 0x18, 0x7b, 0xa9, 0xe2, 0xab, 0x6d, 0x16, 0x6f, 0x23, 0x2a, 0xe9, 0x39, 0x83, 0x15,
	0x54, 0x6e, 0x6d, 0x0f, 0x5a, 0x71, 0x49, 0xd5, 0x36, 0x8a, 0x8b, 0x30, 0xce, 0x74, 0xfb, 0xb2,
	0x2e, 0x61, 0x4f, 0xfa, 0x4b, 0xff, 0xfc, 0x6e, 0xb3, 0xf4, 0xed, 0x77, 0x9b, 0xa5, 0x7f, 0x7d,
	0xb7, 0x59, 0xfa, 0x6d, 0xf9, 0xfc, 0x27, 0xc3, 0x3a, 0xfd, 0xdf, 0x93, 0x0f, 0xfe, 0x17, 0x00,
	0x00, 0xff, 0xff, 0x48, 0xca, 0xc4, 0x37, 0xdd, 0x22, 0x00, 0x00,
}
