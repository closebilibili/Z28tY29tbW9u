// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/vip/model/vip.proto

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		app/service/main/vip/model/vip.proto

	It has these top-level messages:
		VipInfo
		VipInfoDB
		VipPanelInfo
		OpenBindInfo
		OpenInfo
*/
package model

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type VipInfo struct {
	*VipInfoDB  `protobuf:"bytes,1,opt,name=VipInfoDB,embedded=VipInfoDB" json:""`
	AutoRenewed int32 `protobuf:"varint,2,opt,name=AutoRenewed,proto3" json:"auto_renewed"`
}

func (m *VipInfo) Reset()                    { *m = VipInfo{} }
func (m *VipInfo) String() string            { return proto.CompactTextString(m) }
func (*VipInfo) ProtoMessage()               {}
func (*VipInfo) Descriptor() ([]byte, []int) { return fileDescriptorVip, []int{0} }

type VipInfoDB struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Mid                  int64                       `protobuf:"varint,2,opt,name=Mid,proto3" json:"mid"`
	VipType              int32                       `protobuf:"varint,3,opt,name=VipType,proto3" json:"vip_type"`
	VipPayType           int32                       `protobuf:"varint,4,opt,name=VipPayType,proto3" json:"vip_pay_type"`
	PayChannelID         int32                       `protobuf:"varint,5,opt,name=PayChannelID,proto3" json:"pay_channel_id"`
	VipStatus            int32                       `protobuf:"varint,6,opt,name=VipStatus,proto3" json:"vip_status"`
	VipStartTime         go_common_library_time.Time `protobuf:"varint,7,opt,name=VipStartTime,proto3,casttype=go-common/library/time.Time" json:"vip_start_time"`
	VipRecentTime        go_common_library_time.Time `protobuf:"varint,8,opt,name=VipRecentTime,proto3,casttype=go-common/library/time.Time" json:"vip_recent_time"`
	VipOverdueTime       go_common_library_time.Time `protobuf:"varint,9,opt,name=VipOverdueTime,proto3,casttype=go-common/library/time.Time" json:"vip_overdue_time"`
	AnnualVipOverdueTime go_common_library_time.Time `protobuf:"varint,10,opt,name=AnnualVipOverdueTime,proto3,casttype=go-common/library/time.Time" json:"annual_vip_overdue_time"`
	Ctime                go_common_library_time.Time `protobuf:"varint,11,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,12,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	IosOverdueTime       go_common_library_time.Time `protobuf:"varint,13,opt,name=IosOverdueTime,proto3,casttype=go-common/library/time.Time" json:"ios_overdue_time"`
	Ver                  int64                       `protobuf:"varint,14,opt,name=Ver,proto3" json:"ver"`
}

func (m *VipInfoDB) Reset()                    { *m = VipInfoDB{} }
func (m *VipInfoDB) String() string            { return proto.CompactTextString(m) }
func (*VipInfoDB) ProtoMessage()               {}
func (*VipInfoDB) Descriptor() ([]byte, []int) { return fileDescriptorVip, []int{1} }

type VipPanelInfo struct {
	Month    int32   `protobuf:"varint,1,opt,name=Month,proto3" json:"month"`
	PdName   string  `protobuf:"bytes,2,opt,name=PdName,proto3" json:"product_name"`
	PdID     string  `protobuf:"bytes,3,opt,name=PdID,proto3" json:"product_id"`
	SubType  int32   `protobuf:"varint,4,opt,name=SubType,proto3" json:"sub_type"`
	SuitType int32   `protobuf:"varint,5,opt,name=SuitType,proto3" json:"suit_type"`
	OPrice   float64 `protobuf:"fixed64,6,opt,name=OPrice,proto3" json:"original_price"`
	DPrice   float64 `protobuf:"fixed64,7,opt,name=DPrice,proto3" json:"discount_price"`
	DRate    string  `protobuf:"bytes,8,opt,name=DRate,proto3" json:"discount_rate"`
	Remark   string  `protobuf:"bytes,9,opt,name=Remark,proto3" json:"remark"`
	Selected int32   `protobuf:"varint,10,opt,name=Selected,proto3" json:"selected"`
	Id       int64   `protobuf:"varint,11,opt,name=Id,proto3" json:"id"`
	Type     int32   `protobuf:"varint,12,opt,name=Type,proto3" json:"type"`
}

func (m *VipPanelInfo) Reset()                    { *m = VipPanelInfo{} }
func (m *VipPanelInfo) String() string            { return proto.CompactTextString(m) }
func (*VipPanelInfo) ProtoMessage()               {}
func (*VipPanelInfo) Descriptor() ([]byte, []int) { return fileDescriptorVip, []int{2} }

type OpenBindInfo struct {
	Mid       int64  `protobuf:"varint,1,opt,name=Mid,proto3" json:"mid"`
	AppID     int64  `protobuf:"varint,2,opt,name=AppID,proto3" json:"app_id"`
	OutOpenID string `protobuf:"bytes,3,opt,name=OutOpenID,proto3" json:"out_open_id"`
	State     int32  `protobuf:"varint,4,opt,name=State,proto3" json:"state"`
	Ver       int64  `protobuf:"varint,5,opt,name=Ver,proto3" json:"ver"`
	ID        int64  `protobuf:"varint,6,opt,name=ID,proto3" json:"-"`
}

func (m *OpenBindInfo) Reset()                    { *m = OpenBindInfo{} }
func (m *OpenBindInfo) String() string            { return proto.CompactTextString(m) }
func (*OpenBindInfo) ProtoMessage()               {}
func (*OpenBindInfo) Descriptor() ([]byte, []int) { return fileDescriptorVip, []int{3} }

type OpenInfo struct {
	Mid    int64  `protobuf:"varint,1,opt,name=Mid,proto3" json:"mid"`
	AppID  int64  `protobuf:"varint,2,opt,name=AppID,proto3" json:"app_id"`
	OpenID string `protobuf:"bytes,3,opt,name=OpenID,proto3" json:"open_id"`
}

func (m *OpenInfo) Reset()                    { *m = OpenInfo{} }
func (m *OpenInfo) String() string            { return proto.CompactTextString(m) }
func (*OpenInfo) ProtoMessage()               {}
func (*OpenInfo) Descriptor() ([]byte, []int) { return fileDescriptorVip, []int{4} }

func init() {
	proto.RegisterType((*VipInfo)(nil), "account.service.vip.VipInfo")
	proto.RegisterType((*VipInfoDB)(nil), "account.service.vip.VipInfoDB")
	proto.RegisterType((*VipPanelInfo)(nil), "account.service.vip.VipPanelInfo")
	proto.RegisterType((*OpenBindInfo)(nil), "account.service.vip.OpenBindInfo")
	proto.RegisterType((*OpenInfo)(nil), "account.service.vip.OpenInfo")
}
func (m *VipInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VipInfoDB != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipInfoDB.Size()))
		n1, err := m.VipInfoDB.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.AutoRenewed != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.AutoRenewed))
	}
	return i, nil
}

func (m *VipInfoDB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipInfoDB) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.ID))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Mid))
	}
	if m.VipType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipType))
	}
	if m.VipPayType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipPayType))
	}
	if m.PayChannelID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.PayChannelID))
	}
	if m.VipStatus != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipStatus))
	}
	if m.VipStartTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipStartTime))
	}
	if m.VipRecentTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipRecentTime))
	}
	if m.VipOverdueTime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipOverdueTime))
	}
	if m.AnnualVipOverdueTime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.AnnualVipOverdueTime))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Mtime))
	}
	if m.IosOverdueTime != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.IosOverdueTime))
	}
	if m.Ver != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Ver))
	}
	return i, nil
}

func (m *VipPanelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipPanelInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Month != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Month))
	}
	if len(m.PdName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVip(dAtA, i, uint64(len(m.PdName)))
		i += copy(dAtA[i:], m.PdName)
	}
	if len(m.PdID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVip(dAtA, i, uint64(len(m.PdID)))
		i += copy(dAtA[i:], m.PdID)
	}
	if m.SubType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.SubType))
	}
	if m.SuitType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.SuitType))
	}
	if m.OPrice != 0 {
		dAtA[i] = 0x31
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.OPrice))))
		i += 8
	}
	if m.DPrice != 0 {
		dAtA[i] = 0x39
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DPrice))))
		i += 8
	}
	if len(m.DRate) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintVip(dAtA, i, uint64(len(m.DRate)))
		i += copy(dAtA[i:], m.DRate)
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintVip(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	if m.Selected != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Selected))
	}
	if m.Id != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Id))
	}
	if m.Type != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *OpenBindInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenBindInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Mid))
	}
	if m.AppID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.AppID))
	}
	if len(m.OutOpenID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVip(dAtA, i, uint64(len(m.OutOpenID)))
		i += copy(dAtA[i:], m.OutOpenID)
	}
	if m.State != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.State))
	}
	if m.Ver != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Ver))
	}
	if m.ID != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.ID))
	}
	return i, nil
}

func (m *OpenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Mid))
	}
	if m.AppID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.AppID))
	}
	if len(m.OpenID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVip(dAtA, i, uint64(len(m.OpenID)))
		i += copy(dAtA[i:], m.OpenID)
	}
	return i, nil
}

func encodeVarintVip(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VipInfo) Size() (n int) {
	var l int
	_ = l
	if m.VipInfoDB != nil {
		l = m.VipInfoDB.Size()
		n += 1 + l + sovVip(uint64(l))
	}
	if m.AutoRenewed != 0 {
		n += 1 + sovVip(uint64(m.AutoRenewed))
	}
	return n
}

func (m *VipInfoDB) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovVip(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovVip(uint64(m.Mid))
	}
	if m.VipType != 0 {
		n += 1 + sovVip(uint64(m.VipType))
	}
	if m.VipPayType != 0 {
		n += 1 + sovVip(uint64(m.VipPayType))
	}
	if m.PayChannelID != 0 {
		n += 1 + sovVip(uint64(m.PayChannelID))
	}
	if m.VipStatus != 0 {
		n += 1 + sovVip(uint64(m.VipStatus))
	}
	if m.VipStartTime != 0 {
		n += 1 + sovVip(uint64(m.VipStartTime))
	}
	if m.VipRecentTime != 0 {
		n += 1 + sovVip(uint64(m.VipRecentTime))
	}
	if m.VipOverdueTime != 0 {
		n += 1 + sovVip(uint64(m.VipOverdueTime))
	}
	if m.AnnualVipOverdueTime != 0 {
		n += 1 + sovVip(uint64(m.AnnualVipOverdueTime))
	}
	if m.Ctime != 0 {
		n += 1 + sovVip(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovVip(uint64(m.Mtime))
	}
	if m.IosOverdueTime != 0 {
		n += 1 + sovVip(uint64(m.IosOverdueTime))
	}
	if m.Ver != 0 {
		n += 1 + sovVip(uint64(m.Ver))
	}
	return n
}

func (m *VipPanelInfo) Size() (n int) {
	var l int
	_ = l
	if m.Month != 0 {
		n += 1 + sovVip(uint64(m.Month))
	}
	l = len(m.PdName)
	if l > 0 {
		n += 1 + l + sovVip(uint64(l))
	}
	l = len(m.PdID)
	if l > 0 {
		n += 1 + l + sovVip(uint64(l))
	}
	if m.SubType != 0 {
		n += 1 + sovVip(uint64(m.SubType))
	}
	if m.SuitType != 0 {
		n += 1 + sovVip(uint64(m.SuitType))
	}
	if m.OPrice != 0 {
		n += 9
	}
	if m.DPrice != 0 {
		n += 9
	}
	l = len(m.DRate)
	if l > 0 {
		n += 1 + l + sovVip(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovVip(uint64(l))
	}
	if m.Selected != 0 {
		n += 1 + sovVip(uint64(m.Selected))
	}
	if m.Id != 0 {
		n += 1 + sovVip(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovVip(uint64(m.Type))
	}
	return n
}

func (m *OpenBindInfo) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovVip(uint64(m.Mid))
	}
	if m.AppID != 0 {
		n += 1 + sovVip(uint64(m.AppID))
	}
	l = len(m.OutOpenID)
	if l > 0 {
		n += 1 + l + sovVip(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovVip(uint64(m.State))
	}
	if m.Ver != 0 {
		n += 1 + sovVip(uint64(m.Ver))
	}
	if m.ID != 0 {
		n += 1 + sovVip(uint64(m.ID))
	}
	return n
}

func (m *OpenInfo) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovVip(uint64(m.Mid))
	}
	if m.AppID != 0 {
		n += 1 + sovVip(uint64(m.AppID))
	}
	l = len(m.OpenID)
	if l > 0 {
		n += 1 + l + sovVip(uint64(l))
	}
	return n
}

func sovVip(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVip(x uint64) (n int) {
	return sovVip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VipInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipInfoDB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VipInfoDB == nil {
				m.VipInfoDB = &VipInfoDB{}
			}
			if err := m.VipInfoDB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoRenewed", wireType)
			}
			m.AutoRenewed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoRenewed |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VipInfoDB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipInfoDB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipInfoDB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipType", wireType)
			}
			m.VipType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipPayType", wireType)
			}
			m.VipPayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipPayType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayChannelID", wireType)
			}
			m.PayChannelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayChannelID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipStatus", wireType)
			}
			m.VipStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipStartTime", wireType)
			}
			m.VipStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipStartTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipRecentTime", wireType)
			}
			m.VipRecentTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipRecentTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipOverdueTime", wireType)
			}
			m.VipOverdueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipOverdueTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnualVipOverdueTime", wireType)
			}
			m.AnnualVipOverdueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnnualVipOverdueTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IosOverdueTime", wireType)
			}
			m.IosOverdueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IosOverdueTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VipPanelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipPanelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipPanelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Month |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PdName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			m.SubType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuitType", wireType)
			}
			m.SuitType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuitType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.OPrice = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DPrice = float64(math.Float64frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selected", wireType)
			}
			m.Selected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selected |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenBindInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenBindInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenBindInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			m.AppID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutOpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			m.AppID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVip
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVip
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVip(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVip = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVip   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/service/main/vip/model/vip.proto", fileDescriptorVip) }

var fileDescriptorVip = []byte{
	// 910 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xae, 0x9b, 0xda, 0x49, 0x26, 0x69, 0x77, 0x19, 0x7e, 0x05, 0x16, 0x65, 0xaa, 0x80, 0x20,
	0x20, 0x9a, 0x40, 0x57, 0xe2, 0xc0, 0x01, 0xa9, 0xde, 0x08, 0x29, 0x87, 0xd2, 0x68, 0xba, 0x44,
	0x08, 0x0e, 0xd1, 0xc4, 0x9e, 0x4d, 0x47, 0xc4, 0x9e, 0x91, 0x33, 0x0e, 0xca, 0x1f, 0xc0, 0xff,
	0xb6, 0x17, 0xa4, 0x5e, 0xb8, 0x8e, 0xd8, 0x1e, 0x7d, 0xe6, 0xc4, 0x09, 0xcd, 0x1b, 0xe7, 0xd7,
	0xd2, 0x43, 0x57, 0xdc, 0xec, 0xf7, 0x7d, 0xef, 0x7b, 0x7e, 0x33, 0xef, 0x7b, 0x46, 0x9f, 0x30,
	0xa5, 0xfa, 0x0b, 0x9e, 0x2d, 0x45, 0xc4, 0xfb, 0x09, 0x13, 0x69, 0x7f, 0x29, 0x54, 0x3f, 0x91,
	0x31, 0x9f, 0xdb, 0xa7, 0x9e, 0xca, 0xa4, 0x96, 0xf8, 0x6d, 0x16, 0x45, 0x32, 0x4f, 0x75, 0xaf,
	0x64, 0xf6, 0x96, 0x42, 0x7d, 0x78, 0x36, 0x13, 0xfa, 0x26, 0x9f, 0xf6, 0x22, 0x99, 0xf4, 0x67,
	0x72, 0x26, 0xfb, 0xc0, 0x9d, 0xe6, 0x2f, 0xe0, 0x0d, 0x5e, 0xe0, 0xc9, 0x69, 0x74, 0x7e, 0xf7,
	0x50, 0x75, 0x2c, 0xd4, 0x30, 0x7d, 0x21, 0xf1, 0xf7, 0xa8, 0x5e, 0x3e, 0x0e, 0xc2, 0x96, 0x77,
	0xea, 0x75, 0x1b, 0xe7, 0xed, 0xde, 0x3d, 0x35, 0x7a, 0x1b, 0x56, 0x58, 0xbb, 0x35, 0xc4, 0x2b,
	0x0c, 0x39, 0xa0, 0xdb, 0x54, 0x7c, 0x8e, 0x1a, 0x17, 0xb9, 0x96, 0x94, 0xa7, 0xfc, 0x37, 0x1e,
	0xb7, 0x0e, 0x4f, 0xbd, 0xae, 0x1f, 0x3e, 0x2e, 0x0c, 0x69, 0xb2, 0x5c, 0xcb, 0x49, 0xe6, 0xe2,
	0x74, 0x97, 0xd4, 0xf9, 0x3b, 0xd8, 0x29, 0x8e, 0xdf, 0x43, 0x87, 0xc3, 0x01, 0x7c, 0x42, 0x25,
	0x0c, 0x0a, 0x43, 0x0e, 0x45, 0x4c, 0x0f, 0x87, 0x03, 0xfc, 0x01, 0xaa, 0x5c, 0x0a, 0xa7, 0x58,
	0x09, 0xab, 0x85, 0x21, 0x95, 0x44, 0xc4, 0xd4, 0xc6, 0xf0, 0xa7, 0xd0, 0xc7, 0xf3, 0x95, 0xe2,
	0xad, 0x0a, 0x14, 0x6c, 0x16, 0x86, 0xd4, 0x96, 0x42, 0x4d, 0xf4, 0x4a, 0x71, 0xba, 0x06, 0xf1,
	0x57, 0x08, 0x8d, 0x85, 0x1a, 0xb1, 0x15, 0x50, 0x8f, 0xb6, 0xdf, 0x66, 0xa9, 0x8a, 0xad, 0x1c,
	0x7d, 0x87, 0x83, 0xbf, 0x41, 0xcd, 0x11, 0x5b, 0x3d, 0xbb, 0x61, 0x69, 0xca, 0xe7, 0xc3, 0x41,
	0xcb, 0x87, 0x1c, 0x5c, 0x18, 0x72, 0x62, 0xf9, 0x91, 0x03, 0x26, 0x22, 0xa6, 0x7b, 0x3c, 0xfc,
	0x25, 0x74, 0x74, 0xad, 0x99, 0xce, 0x17, 0xad, 0x00, 0x92, 0x4e, 0x0a, 0x43, 0x90, 0x2d, 0xb4,
	0x80, 0x28, 0xdd, 0x12, 0xf0, 0x8f, 0xa8, 0xe9, 0x5e, 0x32, 0xfd, 0x5c, 0x24, 0xbc, 0x55, 0x85,
	0x1e, 0xbf, 0xb6, 0x55, 0xca, 0x84, 0x4c, 0x4f, 0xb4, 0x48, 0xf8, 0x3f, 0x86, 0x3c, 0x99, 0xc9,
	0xb3, 0x48, 0x26, 0x89, 0x4c, 0xfb, 0x73, 0x31, 0xcd, 0x58, 0xb6, 0xea, 0x5b, 0xa4, 0x67, 0x13,
	0xe9, 0x9e, 0x0c, 0xfe, 0x09, 0x1d, 0x8f, 0x85, 0xa2, 0x3c, 0xe2, 0xa9, 0xd3, 0xad, 0x81, 0xee,
	0x79, 0x61, 0xc8, 0x23, 0xab, 0x9b, 0x01, 0xf2, 0x20, 0xe1, 0x7d, 0x21, 0xfc, 0x0b, 0x3a, 0x19,
	0x0b, 0x75, 0xb5, 0xe4, 0x59, 0x9c, 0x73, 0x90, 0xae, 0x83, 0xf4, 0xd3, 0xc2, 0x90, 0xc7, 0x56,
	0x5a, 0x3a, 0xe8, 0x41, 0xda, 0xaf, 0x49, 0xe1, 0x14, 0xbd, 0x73, 0x91, 0xa6, 0x39, 0x9b, 0xbf,
	0x56, 0x02, 0x41, 0x89, 0x6f, 0x0b, 0x43, 0xde, 0x67, 0x80, 0x4f, 0xde, 0xb4, 0xd2, 0xbd, 0xba,
	0xf8, 0x3b, 0xe4, 0x3f, 0xb3, 0x9c, 0x56, 0x03, 0x0a, 0x74, 0x0b, 0x43, 0xfc, 0xe8, 0x21, 0x72,
	0x2e, 0xcd, 0xe6, 0x5f, 0x42, 0x7e, 0x73, 0x9b, 0x9f, 0x3c, 0x28, 0x1f, 0xd2, 0xec, 0x61, 0x0e,
	0xe5, 0x62, 0xb7, 0xd3, 0xe3, 0xed, 0x61, 0x0a, 0xb9, 0x78, 0xb3, 0xc3, 0xdc, 0x97, 0xb2, 0xae,
	0x19, 0xf3, 0xac, 0x75, 0xb2, 0x75, 0xcd, 0x92, 0x67, 0xd4, 0xc6, 0x3a, 0x7f, 0x56, 0x60, 0xec,
	0x46, 0xcc, 0x8e, 0xac, 0xdd, 0x01, 0x04, 0xf9, 0x97, 0x32, 0xd5, 0x37, 0x60, 0x3e, 0x3f, 0xac,
	0x43, 0x23, 0x36, 0x40, 0x5d, 0x1c, 0x77, 0x51, 0x30, 0x8a, 0x7f, 0x60, 0x09, 0x07, 0x17, 0xd6,
	0x9d, 0x77, 0x54, 0x26, 0xe3, 0x3c, 0xd2, 0x93, 0x94, 0x25, 0x9c, 0x96, 0x38, 0xee, 0xa0, 0xa3,
	0x51, 0x3c, 0x1c, 0x80, 0x1d, 0xeb, 0x6e, 0xf4, 0xd7, 0x3c, 0x11, 0x53, 0xc0, 0xac, 0x6b, 0xaf,
	0xf3, 0xe9, 0x8e, 0x15, 0xc1, 0xb5, 0x8b, 0x7c, 0x5a, 0xba, 0xb6, 0x04, 0xf1, 0xe7, 0xa8, 0x76,
	0x9d, 0x0b, 0x0d, 0x44, 0xe7, 0xbf, 0xe3, 0xc2, 0x90, 0xfa, 0x22, 0x17, 0xda, 0x31, 0x37, 0x30,
	0xfe, 0x02, 0x05, 0x57, 0xa3, 0x4c, 0x44, 0x1c, 0x3c, 0xe7, 0x39, 0xa3, 0xca, 0x4c, 0xcc, 0x44,
	0xca, 0xe6, 0x13, 0x65, 0x11, 0x5a, 0x32, 0x2c, 0x77, 0xe0, 0xb8, 0xd5, 0x2d, 0x37, 0x16, 0x0b,
	0x58, 0x79, 0x6b, 0xae, 0x63, 0xe0, 0xcf, 0x90, 0x3f, 0xa0, 0x4c, 0x3b, 0x07, 0xd5, 0xc3, 0xb7,
	0x0a, 0x43, 0x8e, 0x37, 0xd4, 0x8c, 0x69, 0x4e, 0x1d, 0x8e, 0x3b, 0x28, 0xa0, 0x3c, 0x61, 0xd9,
	0xaf, 0x60, 0x88, 0x7a, 0x88, 0x0a, 0x43, 0x82, 0x0c, 0x22, 0xb4, 0x44, 0x70, 0x17, 0xd5, 0xae,
	0xf9, 0x9c, 0x47, 0x9a, 0xc7, 0x30, 0xd3, 0xeb, 0xc6, 0xcb, 0x18, 0xdd, 0xa0, 0xb0, 0x0a, 0xe3,
	0x72, 0x2c, 0xb7, 0xab, 0x30, 0xc6, 0x1f, 0xa1, 0x23, 0x38, 0x8d, 0x26, 0x64, 0xd7, 0x0a, 0x43,
	0x8e, 0xe0, 0x20, 0x20, 0xda, 0xf9, 0xc3, 0x43, 0xcd, 0x2b, 0xc5, 0xd3, 0x50, 0xa4, 0x31, 0xdc,
	0x6b, 0xb9, 0x39, 0xbd, 0x7b, 0x36, 0xe7, 0x29, 0xf2, 0x2f, 0x94, 0x1a, 0x0e, 0xca, 0xb5, 0x0a,
	0x9f, 0xcb, 0x94, 0xb2, 0x97, 0xe4, 0x00, 0x7c, 0x86, 0xea, 0x57, 0xb9, 0xb6, 0x7a, 0x9b, 0xeb,
	0x7c, 0x54, 0x18, 0xd2, 0x90, 0xb9, 0x9e, 0x48, 0xc5, 0x53, 0x4b, 0xdd, 0x32, 0xec, 0x0c, 0xd9,
	0xa5, 0xb6, 0xbe, 0x52, 0x98, 0x21, 0xbb, 0xf0, 0x38, 0x75, 0xf1, 0xf5, 0x40, 0xfa, 0xff, 0x1d,
	0x48, 0xfc, 0x2e, 0x6c, 0xfe, 0x00, 0x10, 0xbf, 0x30, 0xc4, 0x3b, 0xb3, 0x8b, 0xbf, 0x33, 0x47,
	0x35, 0x10, 0xff, 0xdf, 0xad, 0x7c, 0x8c, 0x82, 0xbd, 0x3e, 0x1a, 0x85, 0x21, 0xd5, 0x75, 0x0f,
	0x25, 0x14, 0x3e, 0x79, 0xf9, 0xaa, 0x7d, 0x70, 0xfb, 0xaa, 0x7d, 0xf0, 0xf2, 0xae, 0xed, 0xdd,
	0xde, 0xb5, 0xbd, 0xbf, 0xee, 0xda, 0xde, 0xcf, 0x3e, 0xfc, 0x7f, 0xa7, 0x01, 0xfc, 0x38, 0x9f,
	0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x7a, 0xae, 0x5a, 0xa4, 0x07, 0x00, 0x00,
}
