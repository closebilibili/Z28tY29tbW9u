// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		message.proto

	It has these top-level messages:
		UpSpecial
		UpInfo
		UpGroup
		UpBaseStat
		PBSetUpSwitchRes
		PBUpSwitch
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UpSpecial struct {
	ID        int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	GroupID   int64                       `protobuf:"varint,2,opt,name=GroupID,proto3" json:"group_id"`
	GroupName string                      `protobuf:"bytes,3,opt,name=GroupName,proto3" json:"group_name"`
	GroupTag  string                      `protobuf:"bytes,4,opt,name=GroupTag,proto3" json:"group_tag"`
	Mid       int64                       `protobuf:"varint,5,opt,name=Mid,proto3" json:"mid"`
	Note      string                      `protobuf:"bytes,6,opt,name=Note,proto3" json:"note"`
	CTime     go_common_library_time.Time `protobuf:"varint,7,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	UID       int64                       `protobuf:"varint,8,opt,name=UID,proto3" json:"uid"`
	MTime     go_common_library_time.Time `protobuf:"varint,9,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	FontColor string                      `protobuf:"bytes,10,opt,name=FontColor,proto3" json:"font_color"`
	BgColor   string                      `protobuf:"bytes,11,opt,name=BgColor,proto3" json:"bg_color"`
}

func (m *UpSpecial) Reset()                    { *m = UpSpecial{} }
func (m *UpSpecial) String() string            { return proto.CompactTextString(m) }
func (*UpSpecial) ProtoMessage()               {}
func (*UpSpecial) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

func (m *UpSpecial) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UpSpecial) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *UpSpecial) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *UpSpecial) GetGroupTag() string {
	if m != nil {
		return m.GroupTag
	}
	return ""
}

func (m *UpSpecial) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpSpecial) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *UpSpecial) GetCTime() go_common_library_time.Time {
	if m != nil {
		return m.CTime
	}
	return 0
}

func (m *UpSpecial) GetUID() int64 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *UpSpecial) GetMTime() go_common_library_time.Time {
	if m != nil {
		return m.MTime
	}
	return 0
}

func (m *UpSpecial) GetFontColor() string {
	if m != nil {
		return m.FontColor
	}
	return ""
}

func (m *UpSpecial) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

type UpInfo struct {
	IsAuthor int32 `protobuf:"varint,1,opt,name=isAuthor,proto3" json:"isAuthor"`
}

func (m *UpInfo) Reset()                    { *m = UpInfo{} }
func (m *UpInfo) String() string            { return proto.CompactTextString(m) }
func (*UpInfo) ProtoMessage()               {}
func (*UpInfo) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{1} }

func (m *UpInfo) GetIsAuthor() int32 {
	if m != nil {
		return m.IsAuthor
	}
	return 0
}

type UpGroup struct {
	ID        int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Tag       string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag"`
	ShortTag  string `protobuf:"bytes,4,opt,name=short_tag,json=shortTag,proto3" json:"short_tag"`
	Remark    string `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark"`
	State     int32  `protobuf:"varint,6,opt,name=state,proto3" json:"state"`
	FontColor string `protobuf:"bytes,7,opt,name=FontColor,proto3" json:"font_color"`
	BgColor   string `protobuf:"bytes,8,opt,name=BgColor,proto3" json:"bg_color"`
}

func (m *UpGroup) Reset()                    { *m = UpGroup{} }
func (m *UpGroup) String() string            { return proto.CompactTextString(m) }
func (*UpGroup) ProtoMessage()               {}
func (*UpGroup) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{2} }

func (m *UpGroup) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UpGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpGroup) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *UpGroup) GetShortTag() string {
	if m != nil {
		return m.ShortTag
	}
	return ""
}

func (m *UpGroup) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *UpGroup) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UpGroup) GetFontColor() string {
	if m != nil {
		return m.FontColor
	}
	return ""
}

func (m *UpGroup) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

type UpBaseStat struct {
	View  int64 `protobuf:"varint,1,opt,name=View,proto3" json:"view"`
	Reply int64 `protobuf:"varint,2,opt,name=Reply,proto3" json:"reply"`
	Dm    int64 `protobuf:"varint,3,opt,name=Dm,proto3" json:"dm"`
	Fans  int64 `protobuf:"varint,4,opt,name=Fans,proto3" json:"fans"`
	Fav   int64 `protobuf:"varint,5,opt,name=Fav,proto3" json:"fav"`
	Like  int64 `protobuf:"varint,6,opt,name=Like,proto3" json:"like"`
}

func (m *UpBaseStat) Reset()                    { *m = UpBaseStat{} }
func (m *UpBaseStat) String() string            { return proto.CompactTextString(m) }
func (*UpBaseStat) ProtoMessage()               {}
func (*UpBaseStat) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{3} }

func (m *UpBaseStat) GetView() int64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *UpBaseStat) GetReply() int64 {
	if m != nil {
		return m.Reply
	}
	return 0
}

func (m *UpBaseStat) GetDm() int64 {
	if m != nil {
		return m.Dm
	}
	return 0
}

func (m *UpBaseStat) GetFans() int64 {
	if m != nil {
		return m.Fans
	}
	return 0
}

func (m *UpBaseStat) GetFav() int64 {
	if m != nil {
		return m.Fav
	}
	return 0
}

func (m *UpBaseStat) GetLike() int64 {
	if m != nil {
		return m.Like
	}
	return 0
}

type PBSetUpSwitchRes struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (m *PBSetUpSwitchRes) Reset()                    { *m = PBSetUpSwitchRes{} }
func (m *PBSetUpSwitchRes) String() string            { return proto.CompactTextString(m) }
func (*PBSetUpSwitchRes) ProtoMessage()               {}
func (*PBSetUpSwitchRes) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{4} }

func (m *PBSetUpSwitchRes) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PBUpSwitch struct {
	State int32 `protobuf:"varint,1,opt,name=state,proto3" json:"state"`
}

func (m *PBUpSwitch) Reset()                    { *m = PBUpSwitch{} }
func (m *PBUpSwitch) String() string            { return proto.CompactTextString(m) }
func (*PBUpSwitch) ProtoMessage()               {}
func (*PBUpSwitch) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{5} }

func (m *PBUpSwitch) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func init() {
	proto.RegisterType((*UpSpecial)(nil), "model.UpSpecial")
	proto.RegisterType((*UpInfo)(nil), "model.UpInfo")
	proto.RegisterType((*UpGroup)(nil), "model.UpGroup")
	proto.RegisterType((*UpBaseStat)(nil), "model.UpBaseStat")
	proto.RegisterType((*PBSetUpSwitchRes)(nil), "model.PBSetUpSwitchRes")
	proto.RegisterType((*PBUpSwitch)(nil), "model.PBUpSwitch")
}
func (m *UpSpecial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpSpecial) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.ID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.GroupID))
	}
	if len(m.GroupName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.GroupName)))
		i += copy(dAtA[i:], m.GroupName)
	}
	if len(m.GroupTag) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.GroupTag)))
		i += copy(dAtA[i:], m.GroupTag)
	}
	if m.Mid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Mid))
	}
	if len(m.Note) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Note)))
		i += copy(dAtA[i:], m.Note)
	}
	if m.CTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.CTime))
	}
	if m.UID != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.UID))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.MTime))
	}
	if len(m.FontColor) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.FontColor)))
		i += copy(dAtA[i:], m.FontColor)
	}
	if len(m.BgColor) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BgColor)))
		i += copy(dAtA[i:], m.BgColor)
	}
	return i, nil
}

func (m *UpInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsAuthor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.IsAuthor))
	}
	return i, nil
}

func (m *UpGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.ID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Tag) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Tag)))
		i += copy(dAtA[i:], m.Tag)
	}
	if len(m.ShortTag) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ShortTag)))
		i += copy(dAtA[i:], m.ShortTag)
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	if m.State != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.State))
	}
	if len(m.FontColor) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.FontColor)))
		i += copy(dAtA[i:], m.FontColor)
	}
	if len(m.BgColor) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BgColor)))
		i += copy(dAtA[i:], m.BgColor)
	}
	return i, nil
}

func (m *UpBaseStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpBaseStat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.View != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.View))
	}
	if m.Reply != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Reply))
	}
	if m.Dm != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Dm))
	}
	if m.Fans != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Fans))
	}
	if m.Fav != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Fav))
	}
	if m.Like != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Like))
	}
	return i, nil
}

func (m *PBSetUpSwitchRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBSetUpSwitchRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *PBUpSwitch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBUpSwitch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UpSpecial) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMessage(uint64(m.ID))
	}
	if m.GroupID != 0 {
		n += 1 + sovMessage(uint64(m.GroupID))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.GroupTag)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovMessage(uint64(m.Mid))
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CTime != 0 {
		n += 1 + sovMessage(uint64(m.CTime))
	}
	if m.UID != 0 {
		n += 1 + sovMessage(uint64(m.UID))
	}
	if m.MTime != 0 {
		n += 1 + sovMessage(uint64(m.MTime))
	}
	l = len(m.FontColor)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *UpInfo) Size() (n int) {
	var l int
	_ = l
	if m.IsAuthor != 0 {
		n += 1 + sovMessage(uint64(m.IsAuthor))
	}
	return n
}

func (m *UpGroup) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMessage(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ShortTag)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMessage(uint64(m.State))
	}
	l = len(m.FontColor)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *UpBaseStat) Size() (n int) {
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovMessage(uint64(m.View))
	}
	if m.Reply != 0 {
		n += 1 + sovMessage(uint64(m.Reply))
	}
	if m.Dm != 0 {
		n += 1 + sovMessage(uint64(m.Dm))
	}
	if m.Fans != 0 {
		n += 1 + sovMessage(uint64(m.Fans))
	}
	if m.Fav != 0 {
		n += 1 + sovMessage(uint64(m.Fav))
	}
	if m.Like != 0 {
		n += 1 + sovMessage(uint64(m.Like))
	}
	return n
}

func (m *PBSetUpSwitchRes) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMessage(uint64(m.Id))
	}
	return n
}

func (m *PBUpSwitch) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovMessage(uint64(m.State))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpSpecial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpSpecial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpSpecial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			m.UID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FontColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAuthor", wireType)
			}
			m.IsAuthor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAuthor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FontColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpBaseStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpBaseStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpBaseStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			m.Reply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reply |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dm", wireType)
			}
			m.Dm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dm |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fans", wireType)
			}
			m.Fans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fans |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fav", wireType)
			}
			m.Fav = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fav |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Like", wireType)
			}
			m.Like = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Like |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBSetUpSwitchRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBSetUpSwitchRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBSetUpSwitchRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBUpSwitch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBUpSwitch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBUpSwitch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("message.proto", fileDescriptorMessage) }

var fileDescriptorMessage = []byte{
	// 633 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xc1, 0x6e, 0xd3, 0x4c,
	0x14, 0x85, 0x7f, 0x27, 0x71, 0x62, 0xcf, 0x4f, 0x51, 0xe5, 0x05, 0x32, 0x50, 0xc5, 0x55, 0x16,
	0x28, 0x54, 0xb4, 0x91, 0x60, 0x8f, 0x84, 0x6b, 0x15, 0x45, 0xa2, 0x55, 0x35, 0xa9, 0xd9, 0x56,
	0x93, 0x78, 0xe2, 0x8c, 0xea, 0xf1, 0x58, 0xf6, 0xa4, 0x55, 0xdf, 0x84, 0x2d, 0xaf, 0xc1, 0x13,
	0xb0, 0x42, 0x3c, 0x81, 0x85, 0xca, 0xce, 0x8f, 0xc0, 0x0a, 0xdd, 0x6b, 0xa7, 0x2e, 0x08, 0x10,
	0x6c, 0xec, 0x99, 0x73, 0xcf, 0xbd, 0x33, 0xfa, 0x4e, 0x1c, 0xb2, 0x25, 0x79, 0x51, 0xb0, 0x98,
	0x1f, 0x64, 0xb9, 0xd2, 0xca, 0x31, 0xa5, 0x8a, 0x78, 0xf2, 0x68, 0x3f, 0x16, 0x7a, 0xb5, 0x9e,
	0x1f, 0x2c, 0x94, 0x9c, 0xc4, 0x2a, 0x56, 0x13, 0xac, 0xce, 0xd7, 0x4b, 0xdc, 0xe1, 0x06, 0x57,
	0x75, 0xd7, 0xe8, 0x53, 0x97, 0xd8, 0x61, 0x36, 0xcb, 0xf8, 0x42, 0xb0, 0xc4, 0x79, 0x40, 0x3a,
	0xd3, 0xc0, 0x35, 0x76, 0x8d, 0x71, 0xd7, 0xef, 0x57, 0xa5, 0xd7, 0x11, 0x11, 0xed, 0x4c, 0x03,
	0xe7, 0x09, 0x19, 0xbc, 0xce, 0xd5, 0x3a, 0x9b, 0x06, 0x6e, 0x07, 0x8b, 0xf7, 0xaa, 0xd2, 0xb3,
	0x62, 0x90, 0xce, 0x45, 0x44, 0x37, 0x45, 0xe7, 0x19, 0xb1, 0x71, 0x79, 0xc2, 0x24, 0x77, 0xbb,
	0xbb, 0xc6, 0xd8, 0xf6, 0xef, 0x57, 0xa5, 0x47, 0x6a, 0x67, 0xca, 0x24, 0xa7, 0xad, 0xc1, 0x79,
	0x4a, 0x2c, 0xdc, 0x9c, 0xb1, 0xd8, 0xed, 0xa1, 0x79, 0xab, 0x2a, 0x3d, 0xbb, 0x36, 0x6b, 0x16,
	0xd3, 0xdb, 0xb2, 0xf3, 0x90, 0x74, 0x8f, 0x45, 0xe4, 0x9a, 0x78, 0xf8, 0xa0, 0x2a, 0xbd, 0xae,
	0x14, 0x11, 0x05, 0xcd, 0xd9, 0x21, 0xbd, 0x13, 0xa5, 0xb9, 0xdb, 0xc7, 0x09, 0x56, 0x55, 0x7a,
	0xbd, 0x54, 0x69, 0x4e, 0x51, 0x75, 0x5e, 0x12, 0xf3, 0xf0, 0x4c, 0x48, 0xee, 0x0e, 0xb0, 0x75,
	0x5c, 0x95, 0x9e, 0xb9, 0xd0, 0x42, 0xf2, 0x6f, 0xa5, 0xf7, 0x38, 0x56, 0xfb, 0x0b, 0x25, 0xa5,
	0x4a, 0x27, 0x89, 0x98, 0xe7, 0x2c, 0xbf, 0x9e, 0x40, 0xe5, 0x00, 0xfc, 0xb4, 0x6e, 0x83, 0x83,
	0xc3, 0x69, 0xe0, 0x5a, 0xed, 0xc1, 0x6b, 0x38, 0x38, 0x9c, 0x06, 0x30, 0xfa, 0x18, 0x47, 0xdb,
	0xed, 0x68, 0xf9, 0x57, 0xa3, 0xb1, 0x0d, 0x60, 0x1d, 0xa9, 0x54, 0x1f, 0xaa, 0x44, 0xe5, 0x2e,
	0x69, 0x61, 0x2d, 0x55, 0xaa, 0xcf, 0x17, 0xa0, 0xd2, 0xd6, 0x00, 0x11, 0xf8, 0x71, 0xed, 0xfd,
	0x1f, 0xbd, 0x18, 0xc1, 0x3c, 0x6e, 0x9c, 0x9b, 0xe2, 0xe8, 0x39, 0xe9, 0x87, 0xd9, 0x34, 0x5d,
	0x2a, 0x67, 0x4c, 0x2c, 0x51, 0xbc, 0x5a, 0xeb, 0x95, 0xca, 0x31, 0x52, 0xb3, 0x6e, 0xd9, 0x68,
	0xf4, 0x76, 0x35, 0x7a, 0xdf, 0x21, 0x83, 0x30, 0x43, 0xd8, 0xbf, 0xfd, 0x09, 0xec, 0x90, 0x1e,
	0xe4, 0x87, 0xf9, 0x6f, 0x30, 0x43, 0x9e, 0xf8, 0x04, 0x4c, 0x9a, 0xc5, 0x4d, 0xe4, 0x88, 0x09,
	0xf2, 0x83, 0x87, 0xb3, 0x47, 0xec, 0x62, 0xa5, 0x72, 0x0d, 0x89, 0xde, 0x8d, 0xf9, 0x56, 0xa4,
	0x16, 0x2e, 0x21, 0xe6, 0x11, 0xe9, 0xe7, 0x5c, 0xb2, 0xfc, 0x02, 0x93, 0xb6, 0x7d, 0x52, 0x95,
	0x5e, 0xa3, 0xd0, 0xe6, 0xed, 0x78, 0xc4, 0x2c, 0x34, 0x6b, 0x02, 0x37, 0x7d, 0x1b, 0xb0, 0xa3,
	0x40, 0xeb, 0xd7, 0x8f, 0x5c, 0x07, 0xff, 0xc0, 0xd5, 0xfa, 0x13, 0xd7, 0x0f, 0x06, 0x21, 0x61,
	0xe6, 0xb3, 0x82, 0xcf, 0x34, 0xd3, 0x80, 0xe3, 0xad, 0xe0, 0x57, 0x0d, 0x28, 0xc4, 0x71, 0x29,
	0xf8, 0x15, 0x45, 0x15, 0xee, 0x48, 0x79, 0x96, 0x5c, 0x37, 0x5f, 0x0b, 0xde, 0x31, 0x07, 0x81,
	0xd6, 0x3a, 0x50, 0x0e, 0x24, 0xe2, 0x6a, 0x28, 0x47, 0x92, 0x76, 0x02, 0x09, 0x63, 0x8f, 0x58,
	0x5a, 0x20, 0xa7, 0x66, 0xec, 0x92, 0xa5, 0x05, 0x45, 0x15, 0x28, 0x1f, 0xb1, 0xcb, 0xbb, 0x5f,
	0xc1, 0x92, 0x5d, 0x52, 0xd0, 0xa0, 0xf1, 0x8d, 0xb8, 0xa8, 0xa1, 0x34, 0x8d, 0x89, 0xb8, 0xe0,
	0x14, 0xd5, 0xd1, 0x1e, 0xd9, 0x3e, 0xf5, 0x67, 0x5c, 0x87, 0xd9, 0xec, 0x4a, 0xe8, 0xc5, 0x8a,
	0xf2, 0x02, 0xae, 0x20, 0xa2, 0x9f, 0x83, 0x16, 0xd1, 0x68, 0x9f, 0x90, 0x53, 0x7f, 0x63, 0x6c,
	0x69, 0x1b, 0xbf, 0xa6, 0xed, 0x6f, 0x7f, 0xbc, 0x19, 0x1a, 0x9f, 0x6f, 0x86, 0xc6, 0x97, 0x9b,
	0xa1, 0xf1, 0xee, 0xeb, 0xf0, 0xbf, 0x79, 0x1f, 0xff, 0x59, 0x5e, 0x7c, 0x0f, 0x00, 0x00, 0xff,
	0xff, 0xa2, 0xc0, 0x88, 0x6f, 0xa0, 0x04, 0x00, 0x00,
}
