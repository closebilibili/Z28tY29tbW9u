// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/up/api/v1/up.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// UpActivity up主活跃度信息
type UpActivity struct {
	// mid up主id
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// activity 活跃度
	Activity int8 `protobuf:"varint,2,opt,name=activity,proto3,casttype=int8" json:"activity"`
}

func (m *UpActivity) Reset()                    { *m = UpActivity{} }
func (m *UpActivity) String() string            { return proto.CompactTextString(m) }
func (*UpActivity) ProtoMessage()               {}
func (*UpActivity) Descriptor() ([]byte, []int) { return fileDescriptorUp, []int{0} }

func (m *UpActivity) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpActivity) GetActivity() int8 {
	if m != nil {
		return m.Activity
	}
	return 0
}

// UpGroup up主的特殊用户组信息
type UpGroup struct {
	// id 分组ID
	ID int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// name 分组名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// tag 标签名称
	Tag string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag"`
	// tag 标签简称
	ShortTag string `protobuf:"bytes,4,opt,name=short_tag,json=shortTag,proto3" json:"short_tag"`
	// font_color 字体色
	FontColor string `protobuf:"bytes,5,opt,name=font_color,json=fontColor,proto3" json:"font_color"`
	// bg_color 背景色
	BgColor string `protobuf:"bytes,6,opt,name=bg_color,json=bgColor,proto3" json:"bg_color"`
	// note 备注
	Note string `protobuf:"bytes,7,opt,name=note,proto3" json:"note"`
}

func (m *UpGroup) Reset()                    { *m = UpGroup{} }
func (m *UpGroup) String() string            { return proto.CompactTextString(m) }
func (*UpGroup) ProtoMessage()               {}
func (*UpGroup) Descriptor() ([]byte, []int) { return fileDescriptorUp, []int{1} }

func (m *UpGroup) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UpGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpGroup) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *UpGroup) GetShortTag() string {
	if m != nil {
		return m.ShortTag
	}
	return ""
}

func (m *UpGroup) GetFontColor() string {
	if m != nil {
		return m.FontColor
	}
	return ""
}

func (m *UpGroup) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

func (m *UpGroup) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

// UpSpecial up主的特殊属性
type UpSpecial struct {
	// group_ids 特殊属性数组
	GroupIDs []int64 `protobuf:"varint,1,rep,packed,name=group_ids,json=groupIds" json:"group_ids"`
}

func (m *UpSpecial) Reset()                    { *m = UpSpecial{} }
func (m *UpSpecial) String() string            { return proto.CompactTextString(m) }
func (*UpSpecial) ProtoMessage()               {}
func (*UpSpecial) Descriptor() ([]byte, []int) { return fileDescriptorUp, []int{2} }

func (m *UpSpecial) GetGroupIDs() []int64 {
	if m != nil {
		return m.GroupIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*UpActivity)(nil), "archive.service.up.v1.UpActivity")
	proto.RegisterType((*UpGroup)(nil), "archive.service.up.v1.UpGroup")
	proto.RegisterType((*UpSpecial)(nil), "archive.service.up.v1.UpSpecial")
}
func (m *UpActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActivity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUp(dAtA, i, uint64(m.Mid))
	}
	if m.Activity != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUp(dAtA, i, uint64(m.Activity))
	}
	return i, nil
}

func (m *UpGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUp(dAtA, i, uint64(m.ID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUp(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Tag) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUp(dAtA, i, uint64(len(m.Tag)))
		i += copy(dAtA[i:], m.Tag)
	}
	if len(m.ShortTag) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUp(dAtA, i, uint64(len(m.ShortTag)))
		i += copy(dAtA[i:], m.ShortTag)
	}
	if len(m.FontColor) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUp(dAtA, i, uint64(len(m.FontColor)))
		i += copy(dAtA[i:], m.FontColor)
	}
	if len(m.BgColor) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUp(dAtA, i, uint64(len(m.BgColor)))
		i += copy(dAtA[i:], m.BgColor)
	}
	if len(m.Note) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUp(dAtA, i, uint64(len(m.Note)))
		i += copy(dAtA[i:], m.Note)
	}
	return i, nil
}

func (m *UpSpecial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpSpecial) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupIDs) > 0 {
		dAtA2 := make([]byte, len(m.GroupIDs)*10)
		var j1 int
		for _, num1 := range m.GroupIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintUp(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func encodeVarintUp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UpActivity) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovUp(uint64(m.Mid))
	}
	if m.Activity != 0 {
		n += 1 + sovUp(uint64(m.Activity))
	}
	return n
}

func (m *UpGroup) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovUp(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUp(uint64(l))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovUp(uint64(l))
	}
	l = len(m.ShortTag)
	if l > 0 {
		n += 1 + l + sovUp(uint64(l))
	}
	l = len(m.FontColor)
	if l > 0 {
		n += 1 + l + sovUp(uint64(l))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovUp(uint64(l))
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovUp(uint64(l))
	}
	return n
}

func (m *UpSpecial) Size() (n int) {
	var l int
	_ = l
	if len(m.GroupIDs) > 0 {
		l = 0
		for _, e := range m.GroupIDs {
			l += sovUp(uint64(e))
		}
		n += 1 + sovUp(uint64(l)) + l
	}
	return n
}

func sovUp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUp(x uint64) (n int) {
	return sovUp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			m.Activity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Activity |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FontColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpSpecial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpSpecial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpSpecial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupIDs = append(m.GroupIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUp
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupIDs = append(m.GroupIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUp   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/service/main/up/api/v1/up.proto", fileDescriptorUp) }

var fileDescriptorUp = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x4f, 0x8b, 0xd4, 0x30,
	0x18, 0xc6, 0x69, 0x3b, 0xbb, 0x6d, 0xc3, 0x2a, 0x12, 0x14, 0xba, 0xb2, 0x4c, 0x86, 0xf1, 0xe0,
	0x20, 0x6c, 0xe3, 0x20, 0x88, 0x57, 0xbb, 0x0b, 0x32, 0xd7, 0xe8, 0x1c, 0xf4, 0x32, 0xa4, 0x7f,
	0x36, 0x13, 0xd8, 0x36, 0xa1, 0x4d, 0x0b, 0x5e, 0xfd, 0x74, 0x1e, 0xfd, 0x04, 0x41, 0x7a, 0xec,
	0x47, 0xf0, 0x24, 0x79, 0x77, 0xac, 0x7b, 0x79, 0x79, 0x9e, 0xa7, 0x3f, 0x5e, 0x9e, 0xbe, 0x41,
	0xaf, 0xb8, 0xd6, 0xb4, 0xab, 0xda, 0x41, 0x16, 0x15, 0xad, 0xb9, 0x6c, 0x68, 0xaf, 0x29, 0xd7,
	0x92, 0x0e, 0x5b, 0xda, 0xeb, 0x54, 0xb7, 0xca, 0x28, 0xfc, 0x82, 0xb7, 0xc5, 0x51, 0x0e, 0x55,
	0x7a, 0x02, 0xd3, 0x5e, 0xa7, 0xc3, 0xf6, 0xe5, 0xb5, 0x90, 0xe6, 0xd8, 0xe7, 0x69, 0xa1, 0x6a,
	0x2a, 0x94, 0x50, 0x14, 0xe8, 0xbc, 0xbf, 0x03, 0x07, 0x06, 0xd4, 0xc3, 0x96, 0xf5, 0x57, 0x84,
	0xf6, 0xfa, 0x63, 0x61, 0xe4, 0x20, 0xcd, 0x77, 0x7c, 0x89, 0x82, 0x5a, 0x96, 0x89, 0xb7, 0xf2,
	0x36, 0x41, 0x16, 0x4e, 0x96, 0x38, 0xcb, 0xdc, 0xc0, 0x6f, 0x51, 0xc4, 0x4f, 0x58, 0xe2, 0xaf,
	0xbc, 0xcd, 0x59, 0xf6, 0x7c, 0xb2, 0x64, 0xce, 0xfe, 0x58, 0xb2, 0x90, 0x8d, 0xf9, 0xc0, 0xe6,
	0x64, 0xfd, 0xc3, 0x47, 0xe1, 0x5e, 0x7f, 0x6a, 0x55, 0xaf, 0xf1, 0x15, 0xf2, 0xe7, 0xbd, 0x17,
	0xa3, 0x25, 0xfe, 0xee, 0x76, 0xb2, 0xc4, 0x97, 0x25, 0xf3, 0x65, 0x89, 0xaf, 0xd0, 0xa2, 0xe1,
	0x75, 0x05, 0x7b, 0xe3, 0x2c, 0x9a, 0x2c, 0x01, 0xcf, 0x60, 0xba, 0x52, 0x86, 0x8b, 0x24, 0x80,
	0x8f, 0x50, 0xca, 0x70, 0xc1, 0xdc, 0xc0, 0x6f, 0x50, 0xdc, 0x1d, 0x55, 0x6b, 0x0e, 0x0e, 0x58,
	0x00, 0xf0, 0x64, 0xb2, 0xe4, 0x7f, 0xc8, 0x22, 0x90, 0x5f, 0xb8, 0xc0, 0xd7, 0x08, 0xdd, 0xa9,
	0xc6, 0x1c, 0x0a, 0x75, 0xaf, 0xda, 0xe4, 0x0c, 0xe0, 0xa7, 0x93, 0x25, 0x8f, 0x52, 0x16, 0x3b,
	0x7d, 0xe3, 0x24, 0x7e, 0x8d, 0xa2, 0x5c, 0x9c, 0xe0, 0x73, 0x80, 0x2f, 0xdc, 0xff, 0xfe, 0xcb,
	0x58, 0x98, 0x8b, 0x07, 0xd0, 0x95, 0x57, 0xa6, 0x4a, 0xc2, 0x47, 0xe5, 0x95, 0x71, 0xe5, 0x95,
	0xa9, 0xd6, 0x37, 0x28, 0xde, 0xeb, 0xcf, 0xba, 0x2a, 0x24, 0xbf, 0xc7, 0xef, 0x51, 0x2c, 0xdc,
	0x39, 0x0e, 0xb2, 0xec, 0x12, 0x6f, 0x15, 0x6c, 0x82, 0xec, 0x72, 0xb4, 0x24, 0x82, 0x1b, 0xed,
	0x6e, 0x3b, 0x57, 0x7d, 0x06, 0x58, 0x04, 0x72, 0x57, 0x76, 0xd9, 0xb3, 0x9f, 0xe3, 0xd2, 0xfb,
	0x35, 0x2e, 0xbd, 0xdf, 0xe3, 0xd2, 0xfb, 0xe6, 0x0f, 0xdb, 0xfc, 0x1c, 0x5e, 0xef, 0xdd, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x8e, 0x29, 0xd2, 0x2a, 0x02, 0x00, 0x00,
}
