// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/ugcpay-rank/internal/model/model.proto

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		app/service/main/ugcpay-rank/internal/model/model.proto

	It has these top-level messages:
		RankElecPrepUPProto
		RankElecPrepAVProto
		RankElecPrepElementProto
		RankElecUPProto
		RankElecAVProto
		RankElecElementProto
		ElecMessageProto
		VIPInfoProto
*/
package model

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RankElecPrepUPProto struct {
	CountUPTotalElec int64                       `protobuf:"varint,1,opt,name=CountUPTotalElec,proto3" json:"CountUPTotalElec,omitempty"`
	Count            int64                       `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	UPMID            int64                       `protobuf:"varint,3,opt,name=UPMID,proto3" json:"UPMID,omitempty"`
	Size_            int                         `protobuf:"varint,4,opt,name=Size,proto3,casttype=int" json:"Size,omitempty"`
	List             []*RankElecPrepElementProto `protobuf:"bytes,5,rep,name=List" json:"List,omitempty"`
}

func (m *RankElecPrepUPProto) Reset()                    { *m = RankElecPrepUPProto{} }
func (m *RankElecPrepUPProto) String() string            { return proto.CompactTextString(m) }
func (*RankElecPrepUPProto) ProtoMessage()               {}
func (*RankElecPrepUPProto) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{0} }

type RankElecPrepAVProto struct {
	RankElecPrepUPProto `protobuf:"bytes,1,opt,name=RankElecPrepUPProto,embedded=RankElecPrepUPProto" json:"RankElecPrepUPProto"`
	AVID                int64 `protobuf:"varint,2,opt,name=AVID,proto3" json:"AVID,omitempty"`
}

func (m *RankElecPrepAVProto) Reset()                    { *m = RankElecPrepAVProto{} }
func (m *RankElecPrepAVProto) String() string            { return proto.CompactTextString(m) }
func (*RankElecPrepAVProto) ProtoMessage()               {}
func (*RankElecPrepAVProto) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{1} }

type RankElecPrepElementProto struct {
	MID       int64             `protobuf:"varint,1,opt,name=MID,proto3" json:"MID,omitempty"`
	Rank      int               `protobuf:"varint,2,opt,name=Rank,proto3,casttype=int" json:"Rank,omitempty"`
	TrendType uint8             `protobuf:"varint,3,opt,name=TrendType,proto3,casttype=uint8" json:"TrendType,omitempty"`
	Amount    int64             `protobuf:"varint,4,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Message   *ElecMessageProto `protobuf:"bytes,5,opt,name=Message" json:"Message,omitempty"`
}

func (m *RankElecPrepElementProto) Reset()                    { *m = RankElecPrepElementProto{} }
func (m *RankElecPrepElementProto) String() string            { return proto.CompactTextString(m) }
func (*RankElecPrepElementProto) ProtoMessage()               {}
func (*RankElecPrepElementProto) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{2} }

type RankElecUPProto struct {
	CountUPTotalElec int64                   `protobuf:"varint,1,opt,name=CountUPTotalElec,proto3" json:"CountUPTotalElec,omitempty"`
	Count            int64                   `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	UPMID            int64                   `protobuf:"varint,3,opt,name=UPMID,proto3" json:"UPMID,omitempty"`
	Size_            int                     `protobuf:"varint,4,opt,name=Size,proto3,casttype=int" json:"Size,omitempty"`
	List             []*RankElecElementProto `protobuf:"bytes,5,rep,name=List" json:"List,omitempty"`
}

func (m *RankElecUPProto) Reset()                    { *m = RankElecUPProto{} }
func (m *RankElecUPProto) String() string            { return proto.CompactTextString(m) }
func (*RankElecUPProto) ProtoMessage()               {}
func (*RankElecUPProto) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{3} }

type RankElecAVProto struct {
	CountUPTotalElec int64                   `protobuf:"varint,1,opt,name=CountUPTotalElec,proto3" json:"CountUPTotalElec,omitempty"`
	Count            int64                   `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	AVID             int64                   `protobuf:"varint,3,opt,name=AVID,proto3" json:"AVID,omitempty"`
	UPMID            int64                   `protobuf:"varint,4,opt,name=UPMID,proto3" json:"UPMID,omitempty"`
	Size_            int                     `protobuf:"varint,5,opt,name=Size,proto3,casttype=int" json:"Size,omitempty"`
	List             []*RankElecElementProto `protobuf:"bytes,6,rep,name=List" json:"List,omitempty"`
}

func (m *RankElecAVProto) Reset()                    { *m = RankElecAVProto{} }
func (m *RankElecAVProto) String() string            { return proto.CompactTextString(m) }
func (*RankElecAVProto) ProtoMessage()               {}
func (*RankElecAVProto) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{4} }

type RankElecElementProto struct {
	RankElecPrepElementProto `protobuf:"bytes,1,opt,name=RankElecPrepElementProto,embedded=RankElecPrepElementProto" json:"RankElecPrepElementProto"`
	VIP                      *VIPInfoProto `protobuf:"bytes,2,opt,name=VIP" json:"VIP,omitempty"`
	Nickname                 string        `protobuf:"bytes,3,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Avatar                   string        `protobuf:"bytes,4,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
}

func (m *RankElecElementProto) Reset()                    { *m = RankElecElementProto{} }
func (m *RankElecElementProto) String() string            { return proto.CompactTextString(m) }
func (*RankElecElementProto) ProtoMessage()               {}
func (*RankElecElementProto) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{5} }

type ElecMessageProto struct {
	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Hidden  bool   `protobuf:"varint,2,opt,name=Hidden,proto3" json:"Hidden,omitempty"`
}

func (m *ElecMessageProto) Reset()                    { *m = ElecMessageProto{} }
func (m *ElecMessageProto) String() string            { return proto.CompactTextString(m) }
func (*ElecMessageProto) ProtoMessage()               {}
func (*ElecMessageProto) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{6} }

type VIPInfoProto struct {
	Type    int32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Status  int32 `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
	DueDate int64 `protobuf:"varint,3,opt,name=DueDate,proto3" json:"DueDate,omitempty"`
}

func (m *VIPInfoProto) Reset()                    { *m = VIPInfoProto{} }
func (m *VIPInfoProto) String() string            { return proto.CompactTextString(m) }
func (*VIPInfoProto) ProtoMessage()               {}
func (*VIPInfoProto) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{7} }

func init() {
	proto.RegisterType((*RankElecPrepUPProto)(nil), "main.account.ugcpay.service.model.RankElecPrepUPProto")
	proto.RegisterType((*RankElecPrepAVProto)(nil), "main.account.ugcpay.service.model.RankElecPrepAVProto")
	proto.RegisterType((*RankElecPrepElementProto)(nil), "main.account.ugcpay.service.model.RankElecPrepElementProto")
	proto.RegisterType((*RankElecUPProto)(nil), "main.account.ugcpay.service.model.RankElecUPProto")
	proto.RegisterType((*RankElecAVProto)(nil), "main.account.ugcpay.service.model.RankElecAVProto")
	proto.RegisterType((*RankElecElementProto)(nil), "main.account.ugcpay.service.model.RankElecElementProto")
	proto.RegisterType((*ElecMessageProto)(nil), "main.account.ugcpay.service.model.ElecMessageProto")
	proto.RegisterType((*VIPInfoProto)(nil), "main.account.ugcpay.service.model.VIPInfoProto")
}
func (m *RankElecPrepUPProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankElecPrepUPProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountUPTotalElec != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.CountUPTotalElec))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Count))
	}
	if m.UPMID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.UPMID))
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Size_))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RankElecPrepAVProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankElecPrepAVProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintModel(dAtA, i, uint64(m.RankElecPrepUPProto.Size()))
	n1, err := m.RankElecPrepUPProto.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.AVID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.AVID))
	}
	return i, nil
}

func (m *RankElecPrepElementProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankElecPrepElementProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.MID))
	}
	if m.Rank != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Rank))
	}
	if m.TrendType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.TrendType))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Amount))
	}
	if m.Message != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Message.Size()))
		n2, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RankElecUPProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankElecUPProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountUPTotalElec != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.CountUPTotalElec))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Count))
	}
	if m.UPMID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.UPMID))
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Size_))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RankElecAVProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankElecAVProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountUPTotalElec != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.CountUPTotalElec))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Count))
	}
	if m.AVID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.AVID))
	}
	if m.UPMID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.UPMID))
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Size_))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x32
			i++
			i = encodeVarintModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RankElecElementProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankElecElementProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintModel(dAtA, i, uint64(m.RankElecPrepElementProto.Size()))
	n3, err := m.RankElecPrepElementProto.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.VIP != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.VIP.Size()))
		n4, err := m.VIP.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	return i, nil
}

func (m *ElecMessageProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElecMessageProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Hidden {
		dAtA[i] = 0x10
		i++
		if m.Hidden {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *VIPInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VIPInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Type))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Status))
	}
	if m.DueDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.DueDate))
	}
	return i, nil
}

func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RankElecPrepUPProto) Size() (n int) {
	var l int
	_ = l
	if m.CountUPTotalElec != 0 {
		n += 1 + sovModel(uint64(m.CountUPTotalElec))
	}
	if m.Count != 0 {
		n += 1 + sovModel(uint64(m.Count))
	}
	if m.UPMID != 0 {
		n += 1 + sovModel(uint64(m.UPMID))
	}
	if m.Size_ != 0 {
		n += 1 + sovModel(uint64(m.Size_))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func (m *RankElecPrepAVProto) Size() (n int) {
	var l int
	_ = l
	l = m.RankElecPrepUPProto.Size()
	n += 1 + l + sovModel(uint64(l))
	if m.AVID != 0 {
		n += 1 + sovModel(uint64(m.AVID))
	}
	return n
}

func (m *RankElecPrepElementProto) Size() (n int) {
	var l int
	_ = l
	if m.MID != 0 {
		n += 1 + sovModel(uint64(m.MID))
	}
	if m.Rank != 0 {
		n += 1 + sovModel(uint64(m.Rank))
	}
	if m.TrendType != 0 {
		n += 1 + sovModel(uint64(m.TrendType))
	}
	if m.Amount != 0 {
		n += 1 + sovModel(uint64(m.Amount))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *RankElecUPProto) Size() (n int) {
	var l int
	_ = l
	if m.CountUPTotalElec != 0 {
		n += 1 + sovModel(uint64(m.CountUPTotalElec))
	}
	if m.Count != 0 {
		n += 1 + sovModel(uint64(m.Count))
	}
	if m.UPMID != 0 {
		n += 1 + sovModel(uint64(m.UPMID))
	}
	if m.Size_ != 0 {
		n += 1 + sovModel(uint64(m.Size_))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func (m *RankElecAVProto) Size() (n int) {
	var l int
	_ = l
	if m.CountUPTotalElec != 0 {
		n += 1 + sovModel(uint64(m.CountUPTotalElec))
	}
	if m.Count != 0 {
		n += 1 + sovModel(uint64(m.Count))
	}
	if m.AVID != 0 {
		n += 1 + sovModel(uint64(m.AVID))
	}
	if m.UPMID != 0 {
		n += 1 + sovModel(uint64(m.UPMID))
	}
	if m.Size_ != 0 {
		n += 1 + sovModel(uint64(m.Size_))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func (m *RankElecElementProto) Size() (n int) {
	var l int
	_ = l
	l = m.RankElecPrepElementProto.Size()
	n += 1 + l + sovModel(uint64(l))
	if m.VIP != nil {
		l = m.VIP.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *ElecMessageProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Hidden {
		n += 2
	}
	return n
}

func (m *VIPInfoProto) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovModel(uint64(m.Type))
	}
	if m.Status != 0 {
		n += 1 + sovModel(uint64(m.Status))
	}
	if m.DueDate != 0 {
		n += 1 + sovModel(uint64(m.DueDate))
	}
	return n
}

func sovModel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RankElecPrepUPProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankElecPrepUPProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankElecPrepUPProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountUPTotalElec", wireType)
			}
			m.CountUPTotalElec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountUPTotalElec |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UPMID", wireType)
			}
			m.UPMID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UPMID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RankElecPrepElementProto{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankElecPrepAVProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankElecPrepAVProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankElecPrepAVProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankElecPrepUPProto", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RankElecPrepUPProto.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVID", wireType)
			}
			m.AVID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AVID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankElecPrepElementProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankElecPrepElementProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankElecPrepElementProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MID", wireType)
			}
			m.MID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrendType", wireType)
			}
			m.TrendType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrendType |= (uint8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &ElecMessageProto{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankElecUPProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankElecUPProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankElecUPProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountUPTotalElec", wireType)
			}
			m.CountUPTotalElec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountUPTotalElec |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UPMID", wireType)
			}
			m.UPMID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UPMID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RankElecElementProto{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankElecAVProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankElecAVProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankElecAVProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountUPTotalElec", wireType)
			}
			m.CountUPTotalElec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountUPTotalElec |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVID", wireType)
			}
			m.AVID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AVID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UPMID", wireType)
			}
			m.UPMID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UPMID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RankElecElementProto{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankElecElementProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankElecElementProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankElecElementProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankElecPrepElementProto", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RankElecPrepElementProto.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VIP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VIP == nil {
				m.VIP = &VIPInfoProto{}
			}
			if err := m.VIP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElecMessageProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElecMessageProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElecMessageProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hidden", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hidden = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VIPInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VIPInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VIPInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueDate", wireType)
			}
			m.DueDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DueDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/main/ugcpay-rank/internal/model/model.proto", fileDescriptorModel)
}

var fileDescriptorModel = []byte{
	// 607 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0x4d, 0x6b, 0x13, 0x41,
	0x18, 0xee, 0x76, 0x77, 0xdb, 0x66, 0xa2, 0x18, 0xc6, 0xa2, 0x4b, 0x85, 0xa4, 0xee, 0xc5, 0x22,
	0x74, 0x17, 0x52, 0xb0, 0x82, 0xa7, 0xc4, 0x14, 0x0c, 0x1a, 0x5d, 0xa6, 0x49, 0x0e, 0xde, 0x26,
	0x9b, 0x69, 0x5c, 0x92, 0x9d, 0x5d, 0x36, 0xb3, 0x85, 0x7a, 0xf3, 0x27, 0xf8, 0x03, 0xfc, 0x3f,
	0x39, 0x16, 0x3c, 0x89, 0x10, 0x34, 0x17, 0xff, 0x43, 0x4f, 0x32, 0xef, 0xce, 0x9a, 0x58, 0xd3,
	0xda, 0x52, 0xc1, 0x4b, 0xd8, 0xe7, 0x9d, 0x79, 0x3f, 0x9e, 0x67, 0xde, 0x27, 0x68, 0x9f, 0xc6,
	0xb1, 0x3b, 0x66, 0xc9, 0x71, 0xe0, 0x33, 0x37, 0xa4, 0x01, 0x77, 0xd3, 0x81, 0x1f, 0xd3, 0x93,
	0xdd, 0x84, 0xf2, 0xa1, 0x1b, 0x70, 0xc1, 0x12, 0x4e, 0x47, 0x6e, 0x18, 0xf5, 0x99, 0xfa, 0x75,
	0xe2, 0x24, 0x12, 0x11, 0x7e, 0x28, 0x2f, 0x3b, 0xd4, 0xf7, 0xa3, 0x94, 0x0b, 0x27, 0x4b, 0x72,
	0x54, 0x21, 0x07, 0x2e, 0x6e, 0xed, 0x0e, 0x02, 0xf1, 0x2e, 0xed, 0x39, 0x7e, 0x14, 0xba, 0x83,
	0x68, 0x10, 0xb9, 0x90, 0xd9, 0x4b, 0x8f, 0x00, 0x01, 0x80, 0xaf, 0xac, 0xa2, 0xfd, 0x55, 0x43,
	0x77, 0x09, 0xe5, 0xc3, 0x83, 0x11, 0xf3, 0xbd, 0x84, 0xc5, 0x1d, 0xcf, 0x83, 0x4e, 0x8f, 0x51,
	0xe9, 0xb9, 0x6c, 0xd2, 0xf1, 0xda, 0x91, 0xa0, 0x23, 0x79, 0x6c, 0x69, 0xdb, 0xda, 0x8e, 0x4e,
	0xfe, 0x88, 0xe3, 0x4d, 0x64, 0x42, 0xcc, 0x5a, 0x85, 0x0b, 0x19, 0x90, 0xd1, 0x8e, 0xd7, 0x6a,
	0x36, 0x2c, 0x3d, 0x8b, 0x02, 0xc0, 0x0f, 0x90, 0x71, 0x18, 0xbc, 0x67, 0x96, 0x21, 0x83, 0xf5,
	0xf5, 0xb3, 0x69, 0x45, 0x0f, 0xb8, 0x20, 0x10, 0xc4, 0x6f, 0x90, 0xf1, 0x2a, 0x18, 0x0b, 0xcb,
	0xdc, 0xd6, 0x77, 0x8a, 0xd5, 0x67, 0xce, 0x5f, 0xd9, 0x3a, 0x8b, 0xa3, 0x1f, 0x8c, 0x58, 0xc8,
	0xb8, 0x80, 0xf9, 0x09, 0x14, 0xb2, 0x3f, 0x9d, 0x63, 0x57, 0xeb, 0x66, 0xec, 0x92, 0xa5, 0xa4,
	0x81, 0x60, 0xb1, 0xfa, 0xe4, 0x9a, 0x7d, 0x55, 0x76, 0x7d, 0x63, 0x32, 0xad, 0xac, 0x9c, 0x4e,
	0x2b, 0x1a, 0x59, 0xaa, 0x28, 0x46, 0x46, 0xad, 0xdb, 0x6c, 0x28, 0x91, 0xe0, 0xdb, 0xfe, 0xa2,
	0x21, 0xeb, 0x22, 0x0a, 0xb8, 0x84, 0x74, 0x29, 0x5f, 0xa6, 0xba, 0xae, 0xc4, 0x93, 0xb7, 0xb3,
	0x12, 0x0b, 0xe2, 0xc9, 0x20, 0x7e, 0x84, 0x0a, 0xed, 0x84, 0xf1, 0x7e, 0xfb, 0x24, 0x66, 0xa0,
	0xf9, 0xed, 0x7a, 0xe1, 0x6c, 0x5a, 0x31, 0xd3, 0x80, 0x8b, 0xa7, 0x64, 0x7e, 0x86, 0xef, 0xa1,
	0xb5, 0x5a, 0x08, 0xef, 0x05, 0x8f, 0x40, 0x14, 0xc2, 0x2d, 0xb4, 0xde, 0x62, 0xe3, 0x31, 0x1d,
	0x30, 0xcb, 0x04, 0x21, 0xf6, 0xae, 0x20, 0x84, 0x9c, 0x5c, 0x65, 0x65, 0xc2, 0xe7, 0x35, 0xec,
	0xcf, 0x1a, 0xba, 0x93, 0x73, 0xfb, 0xaf, 0x5b, 0xf5, 0xf2, 0xb7, 0xad, 0xda, 0xbf, 0xc6, 0xeb,
	0x2e, 0xd9, 0xa8, 0x1f, 0x0b, 0xac, 0xf2, 0x6d, 0xba, 0x39, 0xab, 0x7c, 0x37, 0xf4, 0xf9, 0x6e,
	0xcc, 0x99, 0x1a, 0xcb, 0x98, 0x9a, 0x97, 0x31, 0x5d, 0xfb, 0x17, 0x4c, 0x3f, 0xae, 0xa2, 0xcd,
	0x65, 0xc7, 0xf8, 0xc3, 0x25, 0x4b, 0xab, 0x2c, 0x74, 0x13, 0xeb, 0x2e, 0xf8, 0xe8, 0x62, 0x6f,
	0xd4, 0x90, 0xde, 0x6d, 0x7a, 0x20, 0x62, 0xb1, 0xea, 0x5e, 0xa1, 0x5b, 0xb7, 0xe9, 0x35, 0xf9,
	0x51, 0x94, 0x11, 0x94, 0xb9, 0x78, 0x0b, 0x6d, 0xbc, 0x0e, 0xfc, 0x21, 0xa7, 0x61, 0x66, 0x97,
	0x02, 0xf9, 0x85, 0xc1, 0x22, 0xc7, 0x54, 0xd0, 0x04, 0xc4, 0x2f, 0x10, 0x85, 0xec, 0x06, 0x2a,
	0x9d, 0x5f, 0x78, 0x6c, 0xcd, 0x6d, 0xa3, 0xc1, 0xe5, 0x1c, 0xca, 0x2a, 0x2f, 0x82, 0x7e, 0x9f,
	0x71, 0x98, 0x73, 0x83, 0x28, 0x64, 0xb7, 0xd1, 0xad, 0xc5, 0x71, 0xe4, 0xeb, 0x83, 0x69, 0x65,
	0xba, 0x49, 0x8c, 0xdc, 0xa4, 0x87, 0x82, 0x8a, 0x74, 0x0c, 0xb9, 0x26, 0x51, 0x48, 0x76, 0x6b,
	0xa4, 0xac, 0x41, 0x05, 0x53, 0xcb, 0x92, 0xc3, 0xfa, 0xfd, 0xc9, 0xf7, 0xf2, 0xca, 0x64, 0x56,
	0xd6, 0x4e, 0x67, 0x65, 0xed, 0xdb, 0xac, 0xac, 0xbd, 0x35, 0x81, 0x7a, 0x6f, 0x0d, 0xfe, 0xe9,
	0xf7, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0x12, 0x04, 0x68, 0x50, 0x76, 0x06, 0x00, 0x00,
}
