// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/ugcpay-rank/api/v1/api.proto

/*
	Package v1 is a generated protocol buffer package.

	It is generated from these files:
		app/service/main/ugcpay-rank/api/v1/api.proto

	It has these top-level messages:
		RankElecAVReq
		RankElecUPReq
		RankElecMonthReq
		RankElecMonthResp
		RankElecUPResp
		RankElecAVResp
		RankElecUpdateOrderReq
		RankElecUpdateMessageReq
*/
package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import main_account_ugcpay_service_model "go-common/app/service/main/ugcpay-rank/internal/model"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RankElecAVReq struct {
	UPMID    int64 `protobuf:"varint,1,opt,name=UPMID,proto3" json:"UPMID,omitempty"`
	AVID     int64 `protobuf:"varint,2,opt,name=AVID,proto3" json:"AVID,omitempty"`
	RankSize int   `protobuf:"varint,3,opt,name=RankSize,proto3,casttype=int" json:"RankSize,omitempty"`
}

func (m *RankElecAVReq) Reset()                    { *m = RankElecAVReq{} }
func (m *RankElecAVReq) String() string            { return proto.CompactTextString(m) }
func (*RankElecAVReq) ProtoMessage()               {}
func (*RankElecAVReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

type RankElecUPReq struct {
	UPMID    int64 `protobuf:"varint,1,opt,name=UPMID,proto3" json:"UPMID,omitempty"`
	RankSize int   `protobuf:"varint,2,opt,name=RankSize,proto3,casttype=int" json:"RankSize,omitempty"`
}

func (m *RankElecUPReq) Reset()                    { *m = RankElecUPReq{} }
func (m *RankElecUPReq) String() string            { return proto.CompactTextString(m) }
func (*RankElecUPReq) ProtoMessage()               {}
func (*RankElecUPReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

type RankElecMonthReq struct {
	UPMID    int64 `protobuf:"varint,1,opt,name=UPMID,proto3" json:"UPMID,omitempty"`
	AVID     int64 `protobuf:"varint,2,opt,name=AVID,proto3" json:"AVID,omitempty"`
	RankSize int   `protobuf:"varint,3,opt,name=RankSize,proto3,casttype=int" json:"RankSize,omitempty"`
}

func (m *RankElecMonthReq) Reset()                    { *m = RankElecMonthReq{} }
func (m *RankElecMonthReq) String() string            { return proto.CompactTextString(m) }
func (*RankElecMonthReq) ProtoMessage()               {}
func (*RankElecMonthReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

type RankElecMonthResp struct {
	UP *main_account_ugcpay_service_model.RankElecUPProto `protobuf:"bytes,1,opt,name=UP" json:"UP,omitempty"`
	AV *main_account_ugcpay_service_model.RankElecAVProto `protobuf:"bytes,2,opt,name=AV" json:"AV,omitempty"`
}

func (m *RankElecMonthResp) Reset()                    { *m = RankElecMonthResp{} }
func (m *RankElecMonthResp) String() string            { return proto.CompactTextString(m) }
func (*RankElecMonthResp) ProtoMessage()               {}
func (*RankElecMonthResp) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

type RankElecUPResp struct {
	UP *main_account_ugcpay_service_model.RankElecUPProto `protobuf:"bytes,1,opt,name=UP" json:"UP,omitempty"`
}

func (m *RankElecUPResp) Reset()                    { *m = RankElecUPResp{} }
func (m *RankElecUPResp) String() string            { return proto.CompactTextString(m) }
func (*RankElecUPResp) ProtoMessage()               {}
func (*RankElecUPResp) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

type RankElecAVResp struct {
	AV *main_account_ugcpay_service_model.RankElecAVProto `protobuf:"bytes,1,opt,name=AV" json:"AV,omitempty"`
}

func (m *RankElecAVResp) Reset()                    { *m = RankElecAVResp{} }
func (m *RankElecAVResp) String() string            { return proto.CompactTextString(m) }
func (*RankElecAVResp) ProtoMessage()               {}
func (*RankElecAVResp) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

type RankElecUpdateOrderReq struct {
	AVID   int64 `protobuf:"varint,1,opt,name=AVID,proto3" json:"AVID,omitempty"`
	UPMID  int64 `protobuf:"varint,2,opt,name=UPMID,proto3" json:"UPMID,omitempty"`
	PayMID int64 `protobuf:"varint,3,opt,name=PayMID,proto3" json:"PayMID,omitempty"`
	Ver    int64 `protobuf:"varint,4,opt,name=Ver,proto3" json:"Ver,omitempty"`
	Fee    int64 `protobuf:"varint,5,opt,name=Fee,proto3" json:"Fee,omitempty"`
}

func (m *RankElecUpdateOrderReq) Reset()                    { *m = RankElecUpdateOrderReq{} }
func (m *RankElecUpdateOrderReq) String() string            { return proto.CompactTextString(m) }
func (*RankElecUpdateOrderReq) ProtoMessage()               {}
func (*RankElecUpdateOrderReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

type RankElecUpdateMessageReq struct {
	AVID    int64  `protobuf:"varint,1,opt,name=AVID,proto3" json:"AVID,omitempty"`
	UPMID   int64  `protobuf:"varint,2,opt,name=UPMID,proto3" json:"UPMID,omitempty"`
	PayMID  int64  `protobuf:"varint,3,opt,name=PayMID,proto3" json:"PayMID,omitempty"`
	Ver     int64  `protobuf:"varint,4,opt,name=Ver,proto3" json:"Ver,omitempty"`
	Message string `protobuf:"bytes,5,opt,name=Message,proto3" json:"Message,omitempty"`
	Hidden  bool   `protobuf:"varint,6,opt,name=Hidden,proto3" json:"Hidden,omitempty"`
}

func (m *RankElecUpdateMessageReq) Reset()                    { *m = RankElecUpdateMessageReq{} }
func (m *RankElecUpdateMessageReq) String() string            { return proto.CompactTextString(m) }
func (*RankElecUpdateMessageReq) ProtoMessage()               {}
func (*RankElecUpdateMessageReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{7} }

func init() {
	proto.RegisterType((*RankElecAVReq)(nil), "ugcpay.service.rank.v1.RankElecAVReq")
	proto.RegisterType((*RankElecUPReq)(nil), "ugcpay.service.rank.v1.RankElecUPReq")
	proto.RegisterType((*RankElecMonthReq)(nil), "ugcpay.service.rank.v1.RankElecMonthReq")
	proto.RegisterType((*RankElecMonthResp)(nil), "ugcpay.service.rank.v1.RankElecMonthResp")
	proto.RegisterType((*RankElecUPResp)(nil), "ugcpay.service.rank.v1.RankElecUPResp")
	proto.RegisterType((*RankElecAVResp)(nil), "ugcpay.service.rank.v1.RankElecAVResp")
	proto.RegisterType((*RankElecUpdateOrderReq)(nil), "ugcpay.service.rank.v1.RankElecUpdateOrderReq")
	proto.RegisterType((*RankElecUpdateMessageReq)(nil), "ugcpay.service.rank.v1.RankElecUpdateMessageReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UGCPayRank service

type UGCPayRankClient interface {
	RankElecAllAV(ctx context.Context, in *RankElecAVReq, opts ...grpc.CallOption) (*RankElecAVResp, error)
	RankElecMonthAV(ctx context.Context, in *RankElecAVReq, opts ...grpc.CallOption) (*RankElecAVResp, error)
	RankElecMonthUP(ctx context.Context, in *RankElecUPReq, opts ...grpc.CallOption) (*RankElecUPResp, error)
	RankElecMonth(ctx context.Context, in *RankElecMonthReq, opts ...grpc.CallOption) (*RankElecMonthResp, error)
	RankElecUpdateOrder(ctx context.Context, in *RankElecUpdateOrderReq, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	RankElecUpdateMessage(ctx context.Context, in *RankElecUpdateMessageReq, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type uGCPayRankClient struct {
	cc *grpc.ClientConn
}

func NewUGCPayRankClient(cc *grpc.ClientConn) UGCPayRankClient {
	return &uGCPayRankClient{cc}
}

func (c *uGCPayRankClient) RankElecAllAV(ctx context.Context, in *RankElecAVReq, opts ...grpc.CallOption) (*RankElecAVResp, error) {
	out := new(RankElecAVResp)
	err := grpc.Invoke(ctx, "/ugcpay.service.rank.v1.UGCPayRank/RankElecAllAV", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uGCPayRankClient) RankElecMonthAV(ctx context.Context, in *RankElecAVReq, opts ...grpc.CallOption) (*RankElecAVResp, error) {
	out := new(RankElecAVResp)
	err := grpc.Invoke(ctx, "/ugcpay.service.rank.v1.UGCPayRank/RankElecMonthAV", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uGCPayRankClient) RankElecMonthUP(ctx context.Context, in *RankElecUPReq, opts ...grpc.CallOption) (*RankElecUPResp, error) {
	out := new(RankElecUPResp)
	err := grpc.Invoke(ctx, "/ugcpay.service.rank.v1.UGCPayRank/RankElecMonthUP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uGCPayRankClient) RankElecMonth(ctx context.Context, in *RankElecMonthReq, opts ...grpc.CallOption) (*RankElecMonthResp, error) {
	out := new(RankElecMonthResp)
	err := grpc.Invoke(ctx, "/ugcpay.service.rank.v1.UGCPayRank/RankElecMonth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uGCPayRankClient) RankElecUpdateOrder(ctx context.Context, in *RankElecUpdateOrderReq, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/ugcpay.service.rank.v1.UGCPayRank/RankElecUpdateOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uGCPayRankClient) RankElecUpdateMessage(ctx context.Context, in *RankElecUpdateMessageReq, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/ugcpay.service.rank.v1.UGCPayRank/RankElecUpdateMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UGCPayRank service

type UGCPayRankServer interface {
	RankElecAllAV(context.Context, *RankElecAVReq) (*RankElecAVResp, error)
	RankElecMonthAV(context.Context, *RankElecAVReq) (*RankElecAVResp, error)
	RankElecMonthUP(context.Context, *RankElecUPReq) (*RankElecUPResp, error)
	RankElecMonth(context.Context, *RankElecMonthReq) (*RankElecMonthResp, error)
	RankElecUpdateOrder(context.Context, *RankElecUpdateOrderReq) (*google_protobuf1.Empty, error)
	RankElecUpdateMessage(context.Context, *RankElecUpdateMessageReq) (*google_protobuf1.Empty, error)
}

func RegisterUGCPayRankServer(s *grpc.Server, srv UGCPayRankServer) {
	s.RegisterService(&_UGCPayRank_serviceDesc, srv)
}

func _UGCPayRank_RankElecAllAV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankElecAVReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UGCPayRankServer).RankElecAllAV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ugcpay.service.rank.v1.UGCPayRank/RankElecAllAV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UGCPayRankServer).RankElecAllAV(ctx, req.(*RankElecAVReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UGCPayRank_RankElecMonthAV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankElecAVReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UGCPayRankServer).RankElecMonthAV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ugcpay.service.rank.v1.UGCPayRank/RankElecMonthAV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UGCPayRankServer).RankElecMonthAV(ctx, req.(*RankElecAVReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UGCPayRank_RankElecMonthUP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankElecUPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UGCPayRankServer).RankElecMonthUP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ugcpay.service.rank.v1.UGCPayRank/RankElecMonthUP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UGCPayRankServer).RankElecMonthUP(ctx, req.(*RankElecUPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UGCPayRank_RankElecMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankElecMonthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UGCPayRankServer).RankElecMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ugcpay.service.rank.v1.UGCPayRank/RankElecMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UGCPayRankServer).RankElecMonth(ctx, req.(*RankElecMonthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UGCPayRank_RankElecUpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankElecUpdateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UGCPayRankServer).RankElecUpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ugcpay.service.rank.v1.UGCPayRank/RankElecUpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UGCPayRankServer).RankElecUpdateOrder(ctx, req.(*RankElecUpdateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UGCPayRank_RankElecUpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankElecUpdateMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UGCPayRankServer).RankElecUpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ugcpay.service.rank.v1.UGCPayRank/RankElecUpdateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UGCPayRankServer).RankElecUpdateMessage(ctx, req.(*RankElecUpdateMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UGCPayRank_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ugcpay.service.rank.v1.UGCPayRank",
	HandlerType: (*UGCPayRankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RankElecAllAV",
			Handler:    _UGCPayRank_RankElecAllAV_Handler,
		},
		{
			MethodName: "RankElecMonthAV",
			Handler:    _UGCPayRank_RankElecMonthAV_Handler,
		},
		{
			MethodName: "RankElecMonthUP",
			Handler:    _UGCPayRank_RankElecMonthUP_Handler,
		},
		{
			MethodName: "RankElecMonth",
			Handler:    _UGCPayRank_RankElecMonth_Handler,
		},
		{
			MethodName: "RankElecUpdateOrder",
			Handler:    _UGCPayRank_RankElecUpdateOrder_Handler,
		},
		{
			MethodName: "RankElecUpdateMessage",
			Handler:    _UGCPayRank_RankElecUpdateMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/main/ugcpay-rank/api/v1/api.proto",
}

func (m *RankElecAVReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankElecAVReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UPMID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UPMID))
	}
	if m.AVID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AVID))
	}
	if m.RankSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RankSize))
	}
	return i, nil
}

func (m *RankElecUPReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankElecUPReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UPMID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UPMID))
	}
	if m.RankSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RankSize))
	}
	return i, nil
}

func (m *RankElecMonthReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankElecMonthReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UPMID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UPMID))
	}
	if m.AVID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AVID))
	}
	if m.RankSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RankSize))
	}
	return i, nil
}

func (m *RankElecMonthResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankElecMonthResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UP != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UP.Size()))
		n1, err := m.UP.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.AV != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AV.Size()))
		n2, err := m.AV.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RankElecUPResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankElecUPResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UP != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UP.Size()))
		n3, err := m.UP.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *RankElecAVResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankElecAVResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AV != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AV.Size()))
		n4, err := m.AV.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *RankElecUpdateOrderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankElecUpdateOrderReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AVID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AVID))
	}
	if m.UPMID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UPMID))
	}
	if m.PayMID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PayMID))
	}
	if m.Ver != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ver))
	}
	if m.Fee != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fee))
	}
	return i, nil
}

func (m *RankElecUpdateMessageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankElecUpdateMessageReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AVID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AVID))
	}
	if m.UPMID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UPMID))
	}
	if m.PayMID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PayMID))
	}
	if m.Ver != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ver))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Hidden {
		dAtA[i] = 0x30
		i++
		if m.Hidden {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RankElecAVReq) Size() (n int) {
	var l int
	_ = l
	if m.UPMID != 0 {
		n += 1 + sovApi(uint64(m.UPMID))
	}
	if m.AVID != 0 {
		n += 1 + sovApi(uint64(m.AVID))
	}
	if m.RankSize != 0 {
		n += 1 + sovApi(uint64(m.RankSize))
	}
	return n
}

func (m *RankElecUPReq) Size() (n int) {
	var l int
	_ = l
	if m.UPMID != 0 {
		n += 1 + sovApi(uint64(m.UPMID))
	}
	if m.RankSize != 0 {
		n += 1 + sovApi(uint64(m.RankSize))
	}
	return n
}

func (m *RankElecMonthReq) Size() (n int) {
	var l int
	_ = l
	if m.UPMID != 0 {
		n += 1 + sovApi(uint64(m.UPMID))
	}
	if m.AVID != 0 {
		n += 1 + sovApi(uint64(m.AVID))
	}
	if m.RankSize != 0 {
		n += 1 + sovApi(uint64(m.RankSize))
	}
	return n
}

func (m *RankElecMonthResp) Size() (n int) {
	var l int
	_ = l
	if m.UP != nil {
		l = m.UP.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AV != nil {
		l = m.AV.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RankElecUPResp) Size() (n int) {
	var l int
	_ = l
	if m.UP != nil {
		l = m.UP.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RankElecAVResp) Size() (n int) {
	var l int
	_ = l
	if m.AV != nil {
		l = m.AV.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RankElecUpdateOrderReq) Size() (n int) {
	var l int
	_ = l
	if m.AVID != 0 {
		n += 1 + sovApi(uint64(m.AVID))
	}
	if m.UPMID != 0 {
		n += 1 + sovApi(uint64(m.UPMID))
	}
	if m.PayMID != 0 {
		n += 1 + sovApi(uint64(m.PayMID))
	}
	if m.Ver != 0 {
		n += 1 + sovApi(uint64(m.Ver))
	}
	if m.Fee != 0 {
		n += 1 + sovApi(uint64(m.Fee))
	}
	return n
}

func (m *RankElecUpdateMessageReq) Size() (n int) {
	var l int
	_ = l
	if m.AVID != 0 {
		n += 1 + sovApi(uint64(m.AVID))
	}
	if m.UPMID != 0 {
		n += 1 + sovApi(uint64(m.UPMID))
	}
	if m.PayMID != 0 {
		n += 1 + sovApi(uint64(m.PayMID))
	}
	if m.Ver != 0 {
		n += 1 + sovApi(uint64(m.Ver))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Hidden {
		n += 2
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RankElecAVReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankElecAVReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankElecAVReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UPMID", wireType)
			}
			m.UPMID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UPMID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVID", wireType)
			}
			m.AVID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AVID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankSize", wireType)
			}
			m.RankSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankSize |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankElecUPReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankElecUPReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankElecUPReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UPMID", wireType)
			}
			m.UPMID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UPMID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankSize", wireType)
			}
			m.RankSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankSize |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankElecMonthReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankElecMonthReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankElecMonthReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UPMID", wireType)
			}
			m.UPMID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UPMID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVID", wireType)
			}
			m.AVID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AVID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankSize", wireType)
			}
			m.RankSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankSize |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankElecMonthResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankElecMonthResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankElecMonthResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UP == nil {
				m.UP = &main_account_ugcpay_service_model.RankElecUPProto{}
			}
			if err := m.UP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AV", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AV == nil {
				m.AV = &main_account_ugcpay_service_model.RankElecAVProto{}
			}
			if err := m.AV.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankElecUPResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankElecUPResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankElecUPResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UP == nil {
				m.UP = &main_account_ugcpay_service_model.RankElecUPProto{}
			}
			if err := m.UP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankElecAVResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankElecAVResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankElecAVResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AV", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AV == nil {
				m.AV = &main_account_ugcpay_service_model.RankElecAVProto{}
			}
			if err := m.AV.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankElecUpdateOrderReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankElecUpdateOrderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankElecUpdateOrderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVID", wireType)
			}
			m.AVID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AVID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UPMID", wireType)
			}
			m.UPMID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UPMID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayMID", wireType)
			}
			m.PayMID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayMID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankElecUpdateMessageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankElecUpdateMessageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankElecUpdateMessageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVID", wireType)
			}
			m.AVID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AVID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UPMID", wireType)
			}
			m.UPMID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UPMID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayMID", wireType)
			}
			m.PayMID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayMID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hidden", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hidden = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/service/main/ugcpay-rank/api/v1/api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x41, 0x8f, 0xd2, 0x40,
	0x14, 0xb6, 0x85, 0x65, 0xd7, 0x31, 0xea, 0x3a, 0xae, 0xa4, 0xa9, 0x09, 0x6e, 0x30, 0x1a, 0x3c,
	0x30, 0x15, 0x3c, 0x78, 0x2e, 0xee, 0xae, 0xae, 0x09, 0xb1, 0xa9, 0xb6, 0x07, 0x13, 0x8d, 0x43,
	0x3b, 0x76, 0x9b, 0x2d, 0x9d, 0xb1, 0x2d, 0x24, 0x78, 0xf0, 0x8f, 0x78, 0xf1, 0xe7, 0xec, 0xd1,
	0xa3, 0x27, 0xa3, 0xfc, 0x0c, 0x4f, 0x66, 0xa6, 0x2d, 0x2d, 0x04, 0x04, 0x8d, 0x5c, 0x60, 0xde,
	0x9b, 0xf7, 0xbe, 0xef, 0xeb, 0x7b, 0x6f, 0x1e, 0x68, 0x63, 0xc6, 0xb4, 0x98, 0x44, 0x63, 0xdf,
	0x21, 0xda, 0x10, 0xfb, 0xa1, 0x36, 0xf2, 0x1c, 0x86, 0x27, 0xed, 0x08, 0x87, 0xe7, 0x1a, 0x66,
	0xbe, 0x36, 0xee, 0xf0, 0x3f, 0xc4, 0x22, 0x9a, 0x50, 0x58, 0x4f, 0x6f, 0x51, 0x96, 0x81, 0x78,
	0x14, 0x1a, 0x77, 0xd4, 0xb6, 0xe7, 0x27, 0x67, 0xa3, 0x01, 0x72, 0xe8, 0x50, 0xf3, 0xa8, 0x47,
	0x35, 0x11, 0x3e, 0x18, 0xbd, 0x17, 0x96, 0x30, 0xc4, 0x29, 0x85, 0x51, 0x1f, 0xff, 0x91, 0xd5,
	0x0f, 0x13, 0x12, 0x85, 0x38, 0xd0, 0x86, 0xd4, 0x25, 0xd9, 0x6f, 0x96, 0x78, 0xdb, 0xa3, 0xd4,
	0x0b, 0x48, 0x01, 0x4f, 0x86, 0x2c, 0x99, 0xa4, 0x97, 0xcd, 0xb7, 0xe0, 0xaa, 0x89, 0xc3, 0xf3,
	0xe3, 0x80, 0x38, 0xba, 0x6d, 0x92, 0x0f, 0xf0, 0x00, 0xec, 0x58, 0x46, 0xff, 0xf4, 0x48, 0x91,
	0x0e, 0xa5, 0x56, 0xc5, 0x4c, 0x0d, 0x08, 0x41, 0x55, 0xb7, 0x4f, 0x8f, 0x14, 0x59, 0x38, 0xc5,
	0x19, 0xde, 0x05, 0x7b, 0x3c, 0xf5, 0xa5, 0xff, 0x91, 0x28, 0x15, 0xee, 0xef, 0xed, 0xfe, 0xfa,
	0x7e, 0xa7, 0xe2, 0x87, 0x89, 0x39, 0xbb, 0x68, 0x3e, 0x2f, 0xf0, 0x2d, 0x63, 0x35, 0x7e, 0x19,
	0x4b, 0x5e, 0x85, 0x85, 0xc1, 0x7e, 0x8e, 0xd5, 0xa7, 0x61, 0x72, 0xb6, 0x05, 0xb9, 0x9f, 0x25,
	0x70, 0x63, 0x81, 0x23, 0x66, 0xb0, 0x07, 0x64, 0xcb, 0x10, 0x0c, 0x57, 0xba, 0x5d, 0xc4, 0x6b,
	0x8f, 0xb0, 0xe3, 0xd0, 0x51, 0x98, 0xa0, 0x85, 0xde, 0xa6, 0x75, 0x2f, 0xbe, 0xd8, 0xe0, 0x45,
	0x36, 0x65, 0xcb, 0xe0, 0x18, 0xba, 0x2d, 0x04, 0xfd, 0x1d, 0x86, 0x6e, 0x67, 0x18, 0xba, 0xdd,
	0x7c, 0x05, 0xae, 0x95, 0x8b, 0xf9, 0x7f, 0x94, 0x95, 0x51, 0xf9, 0x08, 0xa4, 0xa8, 0xba, 0xfd,
	0x0f, 0xa8, 0x65, 0xad, 0x9f, 0x40, 0x7d, 0x46, 0xc6, 0x5c, 0x9c, 0x90, 0x17, 0x91, 0x4b, 0x22,
	0xde, 0xb2, 0xbc, 0x39, 0x52, 0xa9, 0x39, 0xb3, 0x36, 0xca, 0xe5, 0x36, 0xd6, 0x41, 0xcd, 0xc0,
	0x13, 0xee, 0x16, 0x0d, 0x33, 0x33, 0x0b, 0xee, 0x83, 0x8a, 0x4d, 0x22, 0xa5, 0x2a, 0x9c, 0xfc,
	0xc8, 0x3d, 0x27, 0x84, 0x28, 0x3b, 0xa9, 0xe7, 0x84, 0x90, 0xe6, 0x17, 0x09, 0x28, 0xf3, 0x02,
	0xfa, 0x24, 0x8e, 0xb1, 0x47, 0xb6, 0x25, 0x41, 0x01, 0xbb, 0x19, 0x83, 0x90, 0x71, 0xd9, 0xcc,
	0x4d, 0x8e, 0xf1, 0xcc, 0x77, 0x5d, 0x12, 0x2a, 0xb5, 0x43, 0xa9, 0xb5, 0x67, 0x66, 0x56, 0xf7,
	0x5b, 0x15, 0x00, 0xeb, 0xe9, 0x13, 0x03, 0x4f, 0xb8, 0x50, 0x58, 0x7e, 0x8a, 0x41, 0xa0, 0xdb,
	0xf0, 0x1e, 0x5a, 0xbe, 0x39, 0xd0, 0xdc, 0x8b, 0x55, 0xef, 0x6f, 0x12, 0x16, 0x33, 0xf8, 0x0e,
	0x5c, 0x9f, 0x1b, 0xed, 0xed, 0x33, 0x58, 0xc6, 0x7a, 0x06, 0xb1, 0x15, 0xd6, 0x33, 0x64, 0xf3,
	0xee, 0x16, 0x35, 0x12, 0x0c, 0xb0, 0xb5, 0x2e, 0x31, 0xdf, 0x14, 0xea, 0x83, 0x0d, 0x23, 0x63,
	0x06, 0xdf, 0x80, 0x9b, 0x4b, 0x66, 0x17, 0xa2, 0xb5, 0x22, 0xe7, 0x06, 0x5d, 0xad, 0xa3, 0x74,
	0xf3, 0xa2, 0x7c, 0xf3, 0xa2, 0x63, 0xbe, 0x79, 0x21, 0x06, 0xb7, 0x96, 0x4e, 0x26, 0x7c, 0xb8,
	0x19, 0x41, 0x31, 0xc8, 0xab, 0x28, 0x7a, 0x07, 0x17, 0x3f, 0x1b, 0x97, 0x2e, 0xa6, 0x0d, 0xe9,
	0xeb, 0xb4, 0x21, 0xfd, 0x98, 0x36, 0xa4, 0xd7, 0xf2, 0xb8, 0x33, 0xa8, 0x89, 0xa8, 0x47, 0xbf,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x34, 0x88, 0x87, 0x8a, 0xc1, 0x06, 0x00, 0x00,
}
