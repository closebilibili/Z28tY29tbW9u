// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/live/xuserex/api/grpc/v1/roomNotice.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RoomNoticeBuyGuardReq struct {
	// UID
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	// 主播UID
	TargetId             int64    `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty" form:"target_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomNoticeBuyGuardReq) Reset()         { *m = RoomNoticeBuyGuardReq{} }
func (m *RoomNoticeBuyGuardReq) String() string { return proto.CompactTextString(m) }
func (*RoomNoticeBuyGuardReq) ProtoMessage()    {}
func (*RoomNoticeBuyGuardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_roomNotice_24b9e57bdfdfad1b, []int{0}
}
func (m *RoomNoticeBuyGuardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomNoticeBuyGuardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomNoticeBuyGuardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomNoticeBuyGuardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomNoticeBuyGuardReq.Merge(dst, src)
}
func (m *RoomNoticeBuyGuardReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomNoticeBuyGuardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomNoticeBuyGuardReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomNoticeBuyGuardReq proto.InternalMessageInfo

func (m *RoomNoticeBuyGuardReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomNoticeBuyGuardReq) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

type RoomNoticeIsTaskFinishReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomNoticeIsTaskFinishReq) Reset()         { *m = RoomNoticeIsTaskFinishReq{} }
func (m *RoomNoticeIsTaskFinishReq) String() string { return proto.CompactTextString(m) }
func (*RoomNoticeIsTaskFinishReq) ProtoMessage()    {}
func (*RoomNoticeIsTaskFinishReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_roomNotice_24b9e57bdfdfad1b, []int{1}
}
func (m *RoomNoticeIsTaskFinishReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomNoticeIsTaskFinishReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomNoticeIsTaskFinishReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomNoticeIsTaskFinishReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomNoticeIsTaskFinishReq.Merge(dst, src)
}
func (m *RoomNoticeIsTaskFinishReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomNoticeIsTaskFinishReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomNoticeIsTaskFinishReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomNoticeIsTaskFinishReq proto.InternalMessageInfo

type RoomNoticeSetTaskFinishReq struct {
	// 是否完成
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty" form:"result"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomNoticeSetTaskFinishReq) Reset()         { *m = RoomNoticeSetTaskFinishReq{} }
func (m *RoomNoticeSetTaskFinishReq) String() string { return proto.CompactTextString(m) }
func (*RoomNoticeSetTaskFinishReq) ProtoMessage()    {}
func (*RoomNoticeSetTaskFinishReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_roomNotice_24b9e57bdfdfad1b, []int{2}
}
func (m *RoomNoticeSetTaskFinishReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomNoticeSetTaskFinishReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomNoticeSetTaskFinishReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomNoticeSetTaskFinishReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomNoticeSetTaskFinishReq.Merge(dst, src)
}
func (m *RoomNoticeSetTaskFinishReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomNoticeSetTaskFinishReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomNoticeSetTaskFinishReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomNoticeSetTaskFinishReq proto.InternalMessageInfo

func (m *RoomNoticeSetTaskFinishReq) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type RoomNoticeBuyGuardResp struct {
	// 是否提示 1:弹出提示,0:不弹出
	ShouldNotice int64 `protobuf:"varint,1,opt,name=should_notice,json=shouldNotice,proto3" json:"should_notice,omitempty"`
	// 状态有效开始时间
	Begin int64 `protobuf:"varint,2,opt,name=begin,proto3" json:"begin,omitempty"`
	// 状态有效结束时间
	End int64 `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	// 当前的时间戳
	Now int64 `protobuf:"varint,7,opt,name=now,proto3" json:"now,omitempty"`
	// 标题
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// 内容
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	// 按钮
	Button               string   `protobuf:"bytes,6,opt,name=button,proto3" json:"button,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomNoticeBuyGuardResp) Reset()         { *m = RoomNoticeBuyGuardResp{} }
func (m *RoomNoticeBuyGuardResp) String() string { return proto.CompactTextString(m) }
func (*RoomNoticeBuyGuardResp) ProtoMessage()    {}
func (*RoomNoticeBuyGuardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_roomNotice_24b9e57bdfdfad1b, []int{3}
}
func (m *RoomNoticeBuyGuardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomNoticeBuyGuardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomNoticeBuyGuardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomNoticeBuyGuardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomNoticeBuyGuardResp.Merge(dst, src)
}
func (m *RoomNoticeBuyGuardResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomNoticeBuyGuardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomNoticeBuyGuardResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomNoticeBuyGuardResp proto.InternalMessageInfo

func (m *RoomNoticeBuyGuardResp) GetShouldNotice() int64 {
	if m != nil {
		return m.ShouldNotice
	}
	return 0
}

func (m *RoomNoticeBuyGuardResp) GetBegin() int64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *RoomNoticeBuyGuardResp) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *RoomNoticeBuyGuardResp) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func (m *RoomNoticeBuyGuardResp) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RoomNoticeBuyGuardResp) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *RoomNoticeBuyGuardResp) GetButton() string {
	if m != nil {
		return m.Button
	}
	return ""
}

type RoomNoticeIsTaskFinishResp struct {
	// 是否完成
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomNoticeIsTaskFinishResp) Reset()         { *m = RoomNoticeIsTaskFinishResp{} }
func (m *RoomNoticeIsTaskFinishResp) String() string { return proto.CompactTextString(m) }
func (*RoomNoticeIsTaskFinishResp) ProtoMessage()    {}
func (*RoomNoticeIsTaskFinishResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_roomNotice_24b9e57bdfdfad1b, []int{4}
}
func (m *RoomNoticeIsTaskFinishResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomNoticeIsTaskFinishResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomNoticeIsTaskFinishResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomNoticeIsTaskFinishResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomNoticeIsTaskFinishResp.Merge(dst, src)
}
func (m *RoomNoticeIsTaskFinishResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomNoticeIsTaskFinishResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomNoticeIsTaskFinishResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomNoticeIsTaskFinishResp proto.InternalMessageInfo

func (m *RoomNoticeIsTaskFinishResp) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type RoomNoticeSetTaskFinishResp struct {
	// 是否完成
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomNoticeSetTaskFinishResp) Reset()         { *m = RoomNoticeSetTaskFinishResp{} }
func (m *RoomNoticeSetTaskFinishResp) String() string { return proto.CompactTextString(m) }
func (*RoomNoticeSetTaskFinishResp) ProtoMessage()    {}
func (*RoomNoticeSetTaskFinishResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_roomNotice_24b9e57bdfdfad1b, []int{5}
}
func (m *RoomNoticeSetTaskFinishResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomNoticeSetTaskFinishResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomNoticeSetTaskFinishResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomNoticeSetTaskFinishResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomNoticeSetTaskFinishResp.Merge(dst, src)
}
func (m *RoomNoticeSetTaskFinishResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomNoticeSetTaskFinishResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomNoticeSetTaskFinishResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomNoticeSetTaskFinishResp proto.InternalMessageInfo

func (m *RoomNoticeSetTaskFinishResp) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*RoomNoticeBuyGuardReq)(nil), "live.xuserex.v1.RoomNoticeBuyGuardReq")
	proto.RegisterType((*RoomNoticeIsTaskFinishReq)(nil), "live.xuserex.v1.RoomNoticeIsTaskFinishReq")
	proto.RegisterType((*RoomNoticeSetTaskFinishReq)(nil), "live.xuserex.v1.RoomNoticeSetTaskFinishReq")
	proto.RegisterType((*RoomNoticeBuyGuardResp)(nil), "live.xuserex.v1.RoomNoticeBuyGuardResp")
	proto.RegisterType((*RoomNoticeIsTaskFinishResp)(nil), "live.xuserex.v1.RoomNoticeIsTaskFinishResp")
	proto.RegisterType((*RoomNoticeSetTaskFinishResp)(nil), "live.xuserex.v1.RoomNoticeSetTaskFinishResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RoomNoticeClient is the client API for RoomNotice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoomNoticeClient interface {
	// 是否弹出大航海购买提示
	BuyGuard(ctx context.Context, in *RoomNoticeBuyGuardReq, opts ...grpc.CallOption) (*RoomNoticeBuyGuardResp, error)
	// habse 任务是否结束
	IsTaskFinish(ctx context.Context, in *RoomNoticeIsTaskFinishReq, opts ...grpc.CallOption) (*RoomNoticeIsTaskFinishResp, error)
	// 手动设置base 任务结束
	SetTaskFinish(ctx context.Context, in *RoomNoticeSetTaskFinishReq, opts ...grpc.CallOption) (*RoomNoticeSetTaskFinishResp, error)
}

type roomNoticeClient struct {
	cc *grpc.ClientConn
}

func NewRoomNoticeClient(cc *grpc.ClientConn) RoomNoticeClient {
	return &roomNoticeClient{cc}
}

func (c *roomNoticeClient) BuyGuard(ctx context.Context, in *RoomNoticeBuyGuardReq, opts ...grpc.CallOption) (*RoomNoticeBuyGuardResp, error) {
	out := new(RoomNoticeBuyGuardResp)
	err := c.cc.Invoke(ctx, "/live.xuserex.v1.RoomNotice/buy_guard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomNoticeClient) IsTaskFinish(ctx context.Context, in *RoomNoticeIsTaskFinishReq, opts ...grpc.CallOption) (*RoomNoticeIsTaskFinishResp, error) {
	out := new(RoomNoticeIsTaskFinishResp)
	err := c.cc.Invoke(ctx, "/live.xuserex.v1.RoomNotice/is_task_finish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomNoticeClient) SetTaskFinish(ctx context.Context, in *RoomNoticeSetTaskFinishReq, opts ...grpc.CallOption) (*RoomNoticeSetTaskFinishResp, error) {
	out := new(RoomNoticeSetTaskFinishResp)
	err := c.cc.Invoke(ctx, "/live.xuserex.v1.RoomNotice/set_task_finish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomNoticeServer is the server API for RoomNotice service.
type RoomNoticeServer interface {
	// 是否弹出大航海购买提示
	BuyGuard(context.Context, *RoomNoticeBuyGuardReq) (*RoomNoticeBuyGuardResp, error)
	// habse 任务是否结束
	IsTaskFinish(context.Context, *RoomNoticeIsTaskFinishReq) (*RoomNoticeIsTaskFinishResp, error)
	// 手动设置base 任务结束
	SetTaskFinish(context.Context, *RoomNoticeSetTaskFinishReq) (*RoomNoticeSetTaskFinishResp, error)
}

func RegisterRoomNoticeServer(s *grpc.Server, srv RoomNoticeServer) {
	s.RegisterService(&_RoomNotice_serviceDesc, srv)
}

func _RoomNotice_BuyGuard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomNoticeBuyGuardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomNoticeServer).BuyGuard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xuserex.v1.RoomNotice/BuyGuard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomNoticeServer).BuyGuard(ctx, req.(*RoomNoticeBuyGuardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomNotice_IsTaskFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomNoticeIsTaskFinishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomNoticeServer).IsTaskFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xuserex.v1.RoomNotice/IsTaskFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomNoticeServer).IsTaskFinish(ctx, req.(*RoomNoticeIsTaskFinishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomNotice_SetTaskFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomNoticeSetTaskFinishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomNoticeServer).SetTaskFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xuserex.v1.RoomNotice/SetTaskFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomNoticeServer).SetTaskFinish(ctx, req.(*RoomNoticeSetTaskFinishReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoomNotice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "live.xuserex.v1.RoomNotice",
	HandlerType: (*RoomNoticeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "buy_guard",
			Handler:    _RoomNotice_BuyGuard_Handler,
		},
		{
			MethodName: "is_task_finish",
			Handler:    _RoomNotice_IsTaskFinish_Handler,
		},
		{
			MethodName: "set_task_finish",
			Handler:    _RoomNotice_SetTaskFinish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/live/xuserex/api/grpc/v1/roomNotice.proto",
}

func (m *RoomNoticeBuyGuardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomNoticeBuyGuardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(m.Uid))
	}
	if m.TargetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(m.TargetId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomNoticeIsTaskFinishReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomNoticeIsTaskFinishReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomNoticeSetTaskFinishReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomNoticeSetTaskFinishReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomNoticeBuyGuardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomNoticeBuyGuardResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShouldNotice != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(m.ShouldNotice))
	}
	if m.Begin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(m.Begin))
	}
	if m.End != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(m.End))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.Button) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(len(m.Button)))
		i += copy(dAtA[i:], m.Button)
	}
	if m.Now != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(m.Now))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomNoticeIsTaskFinishResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomNoticeIsTaskFinishResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomNoticeSetTaskFinishResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomNoticeSetTaskFinishResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomNotice(dAtA, i, uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRoomNotice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RoomNoticeBuyGuardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRoomNotice(uint64(m.Uid))
	}
	if m.TargetId != 0 {
		n += 1 + sovRoomNotice(uint64(m.TargetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomNoticeIsTaskFinishReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomNoticeSetTaskFinishReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovRoomNotice(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomNoticeBuyGuardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShouldNotice != 0 {
		n += 1 + sovRoomNotice(uint64(m.ShouldNotice))
	}
	if m.Begin != 0 {
		n += 1 + sovRoomNotice(uint64(m.Begin))
	}
	if m.End != 0 {
		n += 1 + sovRoomNotice(uint64(m.End))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRoomNotice(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovRoomNotice(uint64(l))
	}
	l = len(m.Button)
	if l > 0 {
		n += 1 + l + sovRoomNotice(uint64(l))
	}
	if m.Now != 0 {
		n += 1 + sovRoomNotice(uint64(m.Now))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomNoticeIsTaskFinishResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovRoomNotice(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomNoticeSetTaskFinishResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovRoomNotice(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRoomNotice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRoomNotice(x uint64) (n int) {
	return sovRoomNotice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoomNoticeBuyGuardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomNoticeBuyGuardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomNoticeBuyGuardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomNoticeIsTaskFinishReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomNoticeIsTaskFinishReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomNoticeIsTaskFinishReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRoomNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomNoticeSetTaskFinishReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomNoticeSetTaskFinishReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomNoticeSetTaskFinishReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomNoticeBuyGuardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomNoticeBuyGuardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomNoticeBuyGuardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShouldNotice", wireType)
			}
			m.ShouldNotice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShouldNotice |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Button", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Button = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			m.Now = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Now |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomNoticeIsTaskFinishResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomNoticeIsTaskFinishResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomNoticeIsTaskFinishResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomNoticeSetTaskFinishResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomNoticeSetTaskFinishResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomNoticeSetTaskFinishResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoomNotice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoomNotice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRoomNotice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRoomNotice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRoomNotice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRoomNotice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoomNotice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/live/xuserex/api/grpc/v1/roomNotice.proto", fileDescriptor_roomNotice_24b9e57bdfdfad1b)
}

var fileDescriptor_roomNotice_24b9e57bdfdfad1b = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0x13, 0x9a, 0x92, 0x15, 0xa5, 0x65, 0x05, 0x95, 0x49, 0xa5, 0x24, 0x5a, 0x10, 0x84,
	0x3f, 0x5b, 0x81, 0xf6, 0xd2, 0x63, 0x24, 0xa8, 0x7a, 0xe1, 0x60, 0x38, 0x21, 0xa4, 0xc8, 0x3f,
	0x13, 0x67, 0x55, 0xc7, 0xbb, 0xd9, 0x1f, 0xb7, 0x7d, 0x0f, 0xde, 0x87, 0x03, 0x17, 0x8e, 0x3c,
	0x41, 0x84, 0xf2, 0x08, 0x79, 0x02, 0xe4, 0xdd, 0x90, 0x34, 0x51, 0x5a, 0xe5, 0xe6, 0x6f, 0xbe,
	0x9f, 0x9d, 0x19, 0x8d, 0xd1, 0x49, 0xc8, 0xb9, 0x2f, 0x41, 0x14, 0x34, 0x06, 0x3f, 0xa3, 0x05,
	0xf8, 0x57, 0x5a, 0x82, 0x80, 0x2b, 0x3f, 0xe4, 0xd4, 0x4f, 0x05, 0x8f, 0xfd, 0xa2, 0xeb, 0x0b,
	0xc6, 0x46, 0x9f, 0x99, 0xa2, 0x31, 0x78, 0x5c, 0x30, 0xc5, 0xf0, 0x7e, 0x29, 0xf5, 0xe6, 0x52,
	0xaf, 0xe8, 0x36, 0xde, 0xa5, 0x54, 0x0d, 0x75, 0xe4, 0xc5, 0x6c, 0xe4, 0xa7, 0x2c, 0x65, 0xbe,
	0xd1, 0x45, 0x7a, 0x60, 0x90, 0x01, 0xe6, 0xcb, 0xfa, 0xc9, 0x0f, 0x07, 0x3d, 0x09, 0x16, 0xa1,
	0x3d, 0x7d, 0x7d, 0xa6, 0x43, 0x91, 0x04, 0x30, 0xc6, 0xc7, 0xa8, 0xaa, 0x69, 0xe2, 0x3a, 0x6d,
	0xa7, 0x53, 0xed, 0x91, 0xd9, 0xa4, 0xd5, 0x1c, 0x30, 0x31, 0x3a, 0x25, 0x9a, 0x26, 0xa4, 0x5d,
	0x84, 0x19, 0x4d, 0x42, 0x05, 0xa7, 0x44, 0xc0, 0x58, 0x53, 0x01, 0x09, 0x09, 0x4a, 0x39, 0xfe,
	0x88, 0xea, 0x2a, 0x14, 0x29, 0xa8, 0x3e, 0x4d, 0xdc, 0x8a, 0xf1, 0x76, 0x66, 0x93, 0xd6, 0x73,
	0xeb, 0x5d, 0x50, 0x9b, 0x13, 0xee, 0x5b, 0xfe, 0x3c, 0x21, 0x47, 0xe8, 0xe9, 0xb2, 0xab, 0x73,
	0xf9, 0x35, 0x94, 0x17, 0x9f, 0x68, 0x4e, 0xe5, 0x30, 0x80, 0x31, 0x39, 0x43, 0x8d, 0x25, 0xf9,
	0x05, 0xd4, 0x0a, 0x8b, 0x5f, 0xa1, 0x9a, 0x00, 0xa9, 0x33, 0x35, 0x6f, 0xfd, 0xd1, 0x6c, 0xd2,
	0xda, 0xb3, 0xcf, 0xdb, 0x3a, 0x09, 0xe6, 0x02, 0xf2, 0xd3, 0x41, 0x87, 0x9b, 0x86, 0x97, 0x1c,
	0x3f, 0x43, 0x7b, 0x72, 0xc8, 0x74, 0x96, 0xf4, 0x73, 0x43, 0xda, 0xb0, 0xe0, 0x81, 0x2d, 0x5a,
	0x03, 0x7e, 0x8c, 0x76, 0x22, 0x48, 0x69, 0x6e, 0x07, 0x0d, 0x2c, 0xc0, 0x07, 0xa8, 0x0a, 0x79,
	0xe2, 0x56, 0x4d, 0xad, 0xfc, 0x2c, 0x75, 0x8a, 0xaa, 0x0c, 0xdc, 0x7b, 0x6d, 0xa7, 0x53, 0x0f,
	0x2c, 0xc0, 0x2e, 0xda, 0x8d, 0x59, 0xae, 0x20, 0x57, 0xee, 0x8e, 0xa9, 0xff, 0x87, 0xf8, 0x10,
	0xd5, 0x22, 0xad, 0x14, 0xcb, 0xdd, 0x9a, 0x21, 0xe6, 0xa8, 0x4c, 0xce, 0xd9, 0xa5, 0xbb, 0x6b,
	0x93, 0x73, 0x76, 0x49, 0x8e, 0x6f, 0xae, 0x62, 0x75, 0x4f, 0x92, 0x97, 0x39, 0x37, 0x57, 0xb1,
	0x98, 0xfb, 0x04, 0x1d, 0xdd, 0xba, 0xc0, 0xdb, 0x6d, 0xef, 0x7f, 0x55, 0x10, 0x5a, 0xfa, 0xf0,
	0x77, 0x54, 0x8f, 0xf4, 0x75, 0x3f, 0x2d, 0x77, 0x86, 0x5f, 0x78, 0x6b, 0x87, 0xe8, 0x6d, 0xbc,
	0xaa, 0xc6, 0xcb, 0xad, 0x74, 0x92, 0x63, 0x8a, 0x1e, 0x52, 0xd9, 0x57, 0xa1, 0xbc, 0xe8, 0x0f,
	0x4c, 0x6b, 0xf8, 0xf5, 0x1d, 0xd6, 0xb5, 0x13, 0x69, 0xbc, 0xd9, 0x5a, 0x2b, 0x39, 0xce, 0xd0,
	0xbe, 0x04, 0xb5, 0xf2, 0xd6, 0x5d, 0xfe, 0xf5, 0x8b, 0x6b, 0xbc, 0xdd, 0x5e, 0x2c, 0x79, 0xef,
	0xe0, 0xf7, 0xb4, 0xe9, 0xfc, 0x99, 0x36, 0x9d, 0xbf, 0xd3, 0xa6, 0xf3, 0xad, 0x52, 0x74, 0xa3,
	0x9a, 0xf9, 0x15, 0x3f, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xba, 0x29, 0x52, 0xd7, 0x03, 0x04,
	0x00, 0x00,
}
