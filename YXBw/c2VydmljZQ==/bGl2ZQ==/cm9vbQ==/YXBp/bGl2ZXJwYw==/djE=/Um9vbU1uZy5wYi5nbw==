// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/RoomMng.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RoomMngCreateRoomReq struct {
	// 用户uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 是否开通轮播
	Virtual int64 `protobuf:"varint,2,opt,name=virtual,proto3" json:"virtual"`
}

func (m *RoomMngCreateRoomReq) Reset()         { *m = RoomMngCreateRoomReq{} }
func (m *RoomMngCreateRoomReq) String() string { return proto.CompactTextString(m) }
func (*RoomMngCreateRoomReq) ProtoMessage()    {}
func (*RoomMngCreateRoomReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomMng_8ec66fc38b3fd862, []int{0}
}
func (m *RoomMngCreateRoomReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMngCreateRoomReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMngCreateRoomReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMngCreateRoomReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMngCreateRoomReq.Merge(dst, src)
}
func (m *RoomMngCreateRoomReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomMngCreateRoomReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMngCreateRoomReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMngCreateRoomReq proto.InternalMessageInfo

func (m *RoomMngCreateRoomReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomMngCreateRoomReq) GetVirtual() int64 {
	if m != nil {
		return m.Virtual
	}
	return 0
}

type RoomMngCreateRoomResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *RoomMngCreateRoomResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *RoomMngCreateRoomResp) Reset()         { *m = RoomMngCreateRoomResp{} }
func (m *RoomMngCreateRoomResp) String() string { return proto.CompactTextString(m) }
func (*RoomMngCreateRoomResp) ProtoMessage()    {}
func (*RoomMngCreateRoomResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomMng_8ec66fc38b3fd862, []int{1}
}
func (m *RoomMngCreateRoomResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMngCreateRoomResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMngCreateRoomResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMngCreateRoomResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMngCreateRoomResp.Merge(dst, src)
}
func (m *RoomMngCreateRoomResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomMngCreateRoomResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMngCreateRoomResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMngCreateRoomResp proto.InternalMessageInfo

func (m *RoomMngCreateRoomResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RoomMngCreateRoomResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RoomMngCreateRoomResp) GetData() *RoomMngCreateRoomResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomMngCreateRoomResp_Data struct {
	//
	Roomid string `protobuf:"bytes,1,opt,name=roomid,proto3" json:"roomid"`
}

func (m *RoomMngCreateRoomResp_Data) Reset()         { *m = RoomMngCreateRoomResp_Data{} }
func (m *RoomMngCreateRoomResp_Data) String() string { return proto.CompactTextString(m) }
func (*RoomMngCreateRoomResp_Data) ProtoMessage()    {}
func (*RoomMngCreateRoomResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomMng_8ec66fc38b3fd862, []int{1, 0}
}
func (m *RoomMngCreateRoomResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMngCreateRoomResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMngCreateRoomResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMngCreateRoomResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMngCreateRoomResp_Data.Merge(dst, src)
}
func (m *RoomMngCreateRoomResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *RoomMngCreateRoomResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMngCreateRoomResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMngCreateRoomResp_Data proto.InternalMessageInfo

func (m *RoomMngCreateRoomResp_Data) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

type RoomMngGetSecondVerifyListReq struct {
	// 房间id
	RoomId int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	// 分区id多个
	Area string `protobuf:"bytes,2,opt,name=area,proto3" json:"area"`
	// 页数
	Page int64 `protobuf:"varint,3,opt,name=page,proto3" json:"page"`
	// 页码
	Pagesize int64 `protobuf:"varint,4,opt,name=pagesize,proto3" json:"pagesize"`
	// 业务，0直播监控1直播鉴黄2房间举报
	Biz string `protobuf:"bytes,5,opt,name=biz,proto3" json:"biz"`
}

func (m *RoomMngGetSecondVerifyListReq) Reset()         { *m = RoomMngGetSecondVerifyListReq{} }
func (m *RoomMngGetSecondVerifyListReq) String() string { return proto.CompactTextString(m) }
func (*RoomMngGetSecondVerifyListReq) ProtoMessage()    {}
func (*RoomMngGetSecondVerifyListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomMng_8ec66fc38b3fd862, []int{2}
}
func (m *RoomMngGetSecondVerifyListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMngGetSecondVerifyListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMngGetSecondVerifyListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMngGetSecondVerifyListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMngGetSecondVerifyListReq.Merge(dst, src)
}
func (m *RoomMngGetSecondVerifyListReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomMngGetSecondVerifyListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMngGetSecondVerifyListReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMngGetSecondVerifyListReq proto.InternalMessageInfo

func (m *RoomMngGetSecondVerifyListReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListReq) GetArea() string {
	if m != nil {
		return m.Area
	}
	return ""
}

func (m *RoomMngGetSecondVerifyListReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListReq) GetPagesize() int64 {
	if m != nil {
		return m.Pagesize
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListReq) GetBiz() string {
	if m != nil {
		return m.Biz
	}
	return ""
}

type RoomMngGetSecondVerifyListResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *RoomMngGetSecondVerifyListResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *RoomMngGetSecondVerifyListResp) Reset()         { *m = RoomMngGetSecondVerifyListResp{} }
func (m *RoomMngGetSecondVerifyListResp) String() string { return proto.CompactTextString(m) }
func (*RoomMngGetSecondVerifyListResp) ProtoMessage()    {}
func (*RoomMngGetSecondVerifyListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomMng_8ec66fc38b3fd862, []int{3}
}
func (m *RoomMngGetSecondVerifyListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMngGetSecondVerifyListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMngGetSecondVerifyListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMngGetSecondVerifyListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMngGetSecondVerifyListResp.Merge(dst, src)
}
func (m *RoomMngGetSecondVerifyListResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomMngGetSecondVerifyListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMngGetSecondVerifyListResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMngGetSecondVerifyListResp proto.InternalMessageInfo

func (m *RoomMngGetSecondVerifyListResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RoomMngGetSecondVerifyListResp) GetData() *RoomMngGetSecondVerifyListResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomMngGetSecondVerifyListResp_Result struct {
	// 日志id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 当天切断记录
	RecentCutTimes int64 `protobuf:"varint,2,opt,name=recent_cut_times,json=recentCutTimes,proto3" json:"recent_cut_times"`
	// 当天警告记录
	RecentWarnTimes int64 `protobuf:"varint,3,opt,name=recent_warn_times,json=recentWarnTimes,proto3" json:"recent_warn_times"`
	// 总计警告
	WarnTimes int64 `protobuf:"varint,4,opt,name=warn_times,json=warnTimes,proto3" json:"warn_times"`
	// 用户名
	Uname string `protobuf:"bytes,5,opt,name=uname,proto3" json:"uname"`
	// 房间号
	RoomId int64 `protobuf:"varint,6,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	// 主播id
	Uid int64 `protobuf:"varint,7,opt,name=uid,proto3" json:"uid"`
	// 房间标题
	Title string `protobuf:"bytes,8,opt,name=title,proto3" json:"title"`
	// 分区名
	AreaV2Name string `protobuf:"bytes,9,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name"`
	// 粉丝数
	Fc int64 `protobuf:"varint,10,opt,name=fc,proto3" json:"fc"`
	// 警告理由
	WarnReason string `protobuf:"bytes,11,opt,name=warn_reason,json=warnReason,proto3" json:"warn_reason"`
	// 警告时间
	BreakTime string `protobuf:"bytes,12,opt,name=break_time,json=breakTime,proto3" json:"break_time"`
	// 证据图片
	ProofImg string `protobuf:"bytes,13,opt,name=proof_img,json=proofImg,proto3" json:"proof_img"`
}

func (m *RoomMngGetSecondVerifyListResp_Result) Reset()         { *m = RoomMngGetSecondVerifyListResp_Result{} }
func (m *RoomMngGetSecondVerifyListResp_Result) String() string { return proto.CompactTextString(m) }
func (*RoomMngGetSecondVerifyListResp_Result) ProtoMessage()    {}
func (*RoomMngGetSecondVerifyListResp_Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomMng_8ec66fc38b3fd862, []int{3, 0}
}
func (m *RoomMngGetSecondVerifyListResp_Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMngGetSecondVerifyListResp_Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMngGetSecondVerifyListResp_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMngGetSecondVerifyListResp_Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMngGetSecondVerifyListResp_Result.Merge(dst, src)
}
func (m *RoomMngGetSecondVerifyListResp_Result) XXX_Size() int {
	return m.Size()
}
func (m *RoomMngGetSecondVerifyListResp_Result) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMngGetSecondVerifyListResp_Result.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMngGetSecondVerifyListResp_Result proto.InternalMessageInfo

func (m *RoomMngGetSecondVerifyListResp_Result) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetRecentCutTimes() int64 {
	if m != nil {
		return m.RecentCutTimes
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetRecentWarnTimes() int64 {
	if m != nil {
		return m.RecentWarnTimes
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetWarnTimes() int64 {
	if m != nil {
		return m.WarnTimes
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetFc() int64 {
	if m != nil {
		return m.Fc
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetWarnReason() string {
	if m != nil {
		return m.WarnReason
	}
	return ""
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetBreakTime() string {
	if m != nil {
		return m.BreakTime
	}
	return ""
}

func (m *RoomMngGetSecondVerifyListResp_Result) GetProofImg() string {
	if m != nil {
		return m.ProofImg
	}
	return ""
}

type RoomMngGetSecondVerifyListResp_Data struct {
	//
	Result []*RoomMngGetSecondVerifyListResp_Result `protobuf:"bytes,1,rep,name=result" json:"result"`
	// 总数
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	// 页码
	Page int64 `protobuf:"varint,3,opt,name=page,proto3" json:"page"`
	// 分页大小
	Pagesize int64 `protobuf:"varint,4,opt,name=pagesize,proto3" json:"pagesize"`
}

func (m *RoomMngGetSecondVerifyListResp_Data) Reset()         { *m = RoomMngGetSecondVerifyListResp_Data{} }
func (m *RoomMngGetSecondVerifyListResp_Data) String() string { return proto.CompactTextString(m) }
func (*RoomMngGetSecondVerifyListResp_Data) ProtoMessage()    {}
func (*RoomMngGetSecondVerifyListResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomMng_8ec66fc38b3fd862, []int{3, 1}
}
func (m *RoomMngGetSecondVerifyListResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMngGetSecondVerifyListResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMngGetSecondVerifyListResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMngGetSecondVerifyListResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMngGetSecondVerifyListResp_Data.Merge(dst, src)
}
func (m *RoomMngGetSecondVerifyListResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *RoomMngGetSecondVerifyListResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMngGetSecondVerifyListResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMngGetSecondVerifyListResp_Data proto.InternalMessageInfo

func (m *RoomMngGetSecondVerifyListResp_Data) GetResult() []*RoomMngGetSecondVerifyListResp_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RoomMngGetSecondVerifyListResp_Data) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListResp_Data) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RoomMngGetSecondVerifyListResp_Data) GetPagesize() int64 {
	if m != nil {
		return m.Pagesize
	}
	return 0
}

type RoomMngIsBlackReq struct {
	// 房间号
	Roomid int64 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid"`
}

func (m *RoomMngIsBlackReq) Reset()         { *m = RoomMngIsBlackReq{} }
func (m *RoomMngIsBlackReq) String() string { return proto.CompactTextString(m) }
func (*RoomMngIsBlackReq) ProtoMessage()    {}
func (*RoomMngIsBlackReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomMng_8ec66fc38b3fd862, []int{4}
}
func (m *RoomMngIsBlackReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMngIsBlackReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMngIsBlackReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMngIsBlackReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMngIsBlackReq.Merge(dst, src)
}
func (m *RoomMngIsBlackReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomMngIsBlackReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMngIsBlackReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMngIsBlackReq proto.InternalMessageInfo

func (m *RoomMngIsBlackReq) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

type RoomMngIsBlackResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data map[int64]int64 `protobuf:"bytes,3,rep,name=data" json:"data" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *RoomMngIsBlackResp) Reset()         { *m = RoomMngIsBlackResp{} }
func (m *RoomMngIsBlackResp) String() string { return proto.CompactTextString(m) }
func (*RoomMngIsBlackResp) ProtoMessage()    {}
func (*RoomMngIsBlackResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomMng_8ec66fc38b3fd862, []int{5}
}
func (m *RoomMngIsBlackResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMngIsBlackResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMngIsBlackResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMngIsBlackResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMngIsBlackResp.Merge(dst, src)
}
func (m *RoomMngIsBlackResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomMngIsBlackResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMngIsBlackResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMngIsBlackResp proto.InternalMessageInfo

func (m *RoomMngIsBlackResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RoomMngIsBlackResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RoomMngIsBlackResp) GetData() map[int64]int64 {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomMngSaveHistoryReq struct {
	//
	List []*RoomMngSaveHistoryReq_List `protobuf:"bytes,1,rep,name=list" json:"list"`
}

func (m *RoomMngSaveHistoryReq) Reset()         { *m = RoomMngSaveHistoryReq{} }
func (m *RoomMngSaveHistoryReq) String() string { return proto.CompactTextString(m) }
func (*RoomMngSaveHistoryReq) ProtoMessage()    {}
func (*RoomMngSaveHistoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomMng_8ec66fc38b3fd862, []int{6}
}
func (m *RoomMngSaveHistoryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMngSaveHistoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMngSaveHistoryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMngSaveHistoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMngSaveHistoryReq.Merge(dst, src)
}
func (m *RoomMngSaveHistoryReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomMngSaveHistoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMngSaveHistoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMngSaveHistoryReq proto.InternalMessageInfo

func (m *RoomMngSaveHistoryReq) GetList() []*RoomMngSaveHistoryReq_List {
	if m != nil {
		return m.List
	}
	return nil
}

type RoomMngSaveHistoryReq_List struct {
	// 用户名
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 房间号
	Roomid int64 `protobuf:"varint,2,opt,name=roomid,proto3" json:"roomid"`
	// 描述
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content"`
	// 类型
	Area int64 `protobuf:"varint,4,opt,name=area,proto3" json:"area"`
	// 审核标志
	Status int64 `protobuf:"varint,5,opt,name=status,proto3" json:"status"`
	// 操作人
	Oname string `protobuf:"bytes,6,opt,name=oname,proto3" json:"oname"`
}

func (m *RoomMngSaveHistoryReq_List) Reset()         { *m = RoomMngSaveHistoryReq_List{} }
func (m *RoomMngSaveHistoryReq_List) String() string { return proto.CompactTextString(m) }
func (*RoomMngSaveHistoryReq_List) ProtoMessage()    {}
func (*RoomMngSaveHistoryReq_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomMng_8ec66fc38b3fd862, []int{6, 0}
}
func (m *RoomMngSaveHistoryReq_List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMngSaveHistoryReq_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMngSaveHistoryReq_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMngSaveHistoryReq_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMngSaveHistoryReq_List.Merge(dst, src)
}
func (m *RoomMngSaveHistoryReq_List) XXX_Size() int {
	return m.Size()
}
func (m *RoomMngSaveHistoryReq_List) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMngSaveHistoryReq_List.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMngSaveHistoryReq_List proto.InternalMessageInfo

func (m *RoomMngSaveHistoryReq_List) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomMngSaveHistoryReq_List) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *RoomMngSaveHistoryReq_List) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *RoomMngSaveHistoryReq_List) GetArea() int64 {
	if m != nil {
		return m.Area
	}
	return 0
}

func (m *RoomMngSaveHistoryReq_List) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RoomMngSaveHistoryReq_List) GetOname() string {
	if m != nil {
		return m.Oname
	}
	return ""
}

type RoomMngSaveHistoryResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
}

func (m *RoomMngSaveHistoryResp) Reset()         { *m = RoomMngSaveHistoryResp{} }
func (m *RoomMngSaveHistoryResp) String() string { return proto.CompactTextString(m) }
func (*RoomMngSaveHistoryResp) ProtoMessage()    {}
func (*RoomMngSaveHistoryResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomMng_8ec66fc38b3fd862, []int{7}
}
func (m *RoomMngSaveHistoryResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMngSaveHistoryResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMngSaveHistoryResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMngSaveHistoryResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMngSaveHistoryResp.Merge(dst, src)
}
func (m *RoomMngSaveHistoryResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomMngSaveHistoryResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMngSaveHistoryResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMngSaveHistoryResp proto.InternalMessageInfo

func (m *RoomMngSaveHistoryResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RoomMngSaveHistoryResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type RoomMngIsAllNetBannedReq struct {
	// 用户uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
}

func (m *RoomMngIsAllNetBannedReq) Reset()         { *m = RoomMngIsAllNetBannedReq{} }
func (m *RoomMngIsAllNetBannedReq) String() string { return proto.CompactTextString(m) }
func (*RoomMngIsAllNetBannedReq) ProtoMessage()    {}
func (*RoomMngIsAllNetBannedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomMng_8ec66fc38b3fd862, []int{8}
}
func (m *RoomMngIsAllNetBannedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMngIsAllNetBannedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMngIsAllNetBannedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMngIsAllNetBannedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMngIsAllNetBannedReq.Merge(dst, src)
}
func (m *RoomMngIsAllNetBannedReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomMngIsAllNetBannedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMngIsAllNetBannedReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMngIsAllNetBannedReq proto.InternalMessageInfo

func (m *RoomMngIsAllNetBannedReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type RoomMngIsAllNetBannedResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *RoomMngIsAllNetBannedResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *RoomMngIsAllNetBannedResp) Reset()         { *m = RoomMngIsAllNetBannedResp{} }
func (m *RoomMngIsAllNetBannedResp) String() string { return proto.CompactTextString(m) }
func (*RoomMngIsAllNetBannedResp) ProtoMessage()    {}
func (*RoomMngIsAllNetBannedResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomMng_8ec66fc38b3fd862, []int{9}
}
func (m *RoomMngIsAllNetBannedResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMngIsAllNetBannedResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMngIsAllNetBannedResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMngIsAllNetBannedResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMngIsAllNetBannedResp.Merge(dst, src)
}
func (m *RoomMngIsAllNetBannedResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomMngIsAllNetBannedResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMngIsAllNetBannedResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMngIsAllNetBannedResp proto.InternalMessageInfo

func (m *RoomMngIsAllNetBannedResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RoomMngIsAllNetBannedResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RoomMngIsAllNetBannedResp) GetData() *RoomMngIsAllNetBannedResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomMngIsAllNetBannedResp_Data struct {
	//
	IsNetBanned bool `protobuf:"varint,1,opt,name=is_net_banned,json=isNetBanned,proto3" json:"is_net_banned"`
}

func (m *RoomMngIsAllNetBannedResp_Data) Reset()         { *m = RoomMngIsAllNetBannedResp_Data{} }
func (m *RoomMngIsAllNetBannedResp_Data) String() string { return proto.CompactTextString(m) }
func (*RoomMngIsAllNetBannedResp_Data) ProtoMessage()    {}
func (*RoomMngIsAllNetBannedResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomMng_8ec66fc38b3fd862, []int{9, 0}
}
func (m *RoomMngIsAllNetBannedResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMngIsAllNetBannedResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMngIsAllNetBannedResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMngIsAllNetBannedResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMngIsAllNetBannedResp_Data.Merge(dst, src)
}
func (m *RoomMngIsAllNetBannedResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *RoomMngIsAllNetBannedResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMngIsAllNetBannedResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMngIsAllNetBannedResp_Data proto.InternalMessageInfo

func (m *RoomMngIsAllNetBannedResp_Data) GetIsNetBanned() bool {
	if m != nil {
		return m.IsNetBanned
	}
	return false
}

func init() {
	proto.RegisterType((*RoomMngCreateRoomReq)(nil), "room.v1.RoomMngCreateRoomReq")
	proto.RegisterType((*RoomMngCreateRoomResp)(nil), "room.v1.RoomMngCreateRoomResp")
	proto.RegisterType((*RoomMngCreateRoomResp_Data)(nil), "room.v1.RoomMngCreateRoomResp.Data")
	proto.RegisterType((*RoomMngGetSecondVerifyListReq)(nil), "room.v1.RoomMngGetSecondVerifyListReq")
	proto.RegisterType((*RoomMngGetSecondVerifyListResp)(nil), "room.v1.RoomMngGetSecondVerifyListResp")
	proto.RegisterType((*RoomMngGetSecondVerifyListResp_Result)(nil), "room.v1.RoomMngGetSecondVerifyListResp.Result")
	proto.RegisterType((*RoomMngGetSecondVerifyListResp_Data)(nil), "room.v1.RoomMngGetSecondVerifyListResp.Data")
	proto.RegisterType((*RoomMngIsBlackReq)(nil), "room.v1.RoomMngIsBlackReq")
	proto.RegisterType((*RoomMngIsBlackResp)(nil), "room.v1.RoomMngIsBlackResp")
	proto.RegisterMapType((map[int64]int64)(nil), "room.v1.RoomMngIsBlackResp.DataEntry")
	proto.RegisterType((*RoomMngSaveHistoryReq)(nil), "room.v1.RoomMngSaveHistoryReq")
	proto.RegisterType((*RoomMngSaveHistoryReq_List)(nil), "room.v1.RoomMngSaveHistoryReq.List")
	proto.RegisterType((*RoomMngSaveHistoryResp)(nil), "room.v1.RoomMngSaveHistoryResp")
	proto.RegisterType((*RoomMngIsAllNetBannedReq)(nil), "room.v1.RoomMngIsAllNetBannedReq")
	proto.RegisterType((*RoomMngIsAllNetBannedResp)(nil), "room.v1.RoomMngIsAllNetBannedResp")
	proto.RegisterType((*RoomMngIsAllNetBannedResp_Data)(nil), "room.v1.RoomMngIsAllNetBannedResp.Data")
}
func (m *RoomMngCreateRoomReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMngCreateRoomReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Uid))
	}
	if m.Virtual != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Virtual))
	}
	return i, nil
}

func (m *RoomMngCreateRoomResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMngCreateRoomResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *RoomMngCreateRoomResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMngCreateRoomResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	return i, nil
}

func (m *RoomMngGetSecondVerifyListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMngGetSecondVerifyListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.RoomId))
	}
	if len(m.Area) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(len(m.Area)))
		i += copy(dAtA[i:], m.Area)
	}
	if m.Page != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Page))
	}
	if m.Pagesize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Pagesize))
	}
	if len(m.Biz) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(len(m.Biz)))
		i += copy(dAtA[i:], m.Biz)
	}
	return i, nil
}

func (m *RoomMngGetSecondVerifyListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMngGetSecondVerifyListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Data.Size()))
		n2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RoomMngGetSecondVerifyListResp_Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMngGetSecondVerifyListResp_Result) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Id))
	}
	if m.RecentCutTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.RecentCutTimes))
	}
	if m.RecentWarnTimes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.RecentWarnTimes))
	}
	if m.WarnTimes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.WarnTimes))
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if m.RoomId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.RoomId))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Uid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if m.Fc != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Fc))
	}
	if len(m.WarnReason) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(len(m.WarnReason)))
		i += copy(dAtA[i:], m.WarnReason)
	}
	if len(m.BreakTime) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(len(m.BreakTime)))
		i += copy(dAtA[i:], m.BreakTime)
	}
	if len(m.ProofImg) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(len(m.ProofImg)))
		i += copy(dAtA[i:], m.ProofImg)
	}
	return i, nil
}

func (m *RoomMngGetSecondVerifyListResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMngGetSecondVerifyListResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, msg := range m.Result {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRoomMng(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Count))
	}
	if m.Page != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Page))
	}
	if m.Pagesize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Pagesize))
	}
	return i, nil
}

func (m *RoomMngIsBlackReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMngIsBlackReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Roomid))
	}
	return i, nil
}

func (m *RoomMngIsBlackResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMngIsBlackResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x1a
			i++
			v := m.Data[k]
			mapSize := 1 + sovRoomMng(uint64(k)) + 1 + sovRoomMng(uint64(v))
			i = encodeVarintRoomMng(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintRoomMng(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintRoomMng(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *RoomMngSaveHistoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMngSaveHistoryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRoomMng(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RoomMngSaveHistoryReq_List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMngSaveHistoryReq_List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Uid))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Roomid))
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.Area != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Area))
	}
	if m.Status != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Status))
	}
	if len(m.Oname) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(len(m.Oname)))
		i += copy(dAtA[i:], m.Oname)
	}
	return i, nil
}

func (m *RoomMngSaveHistoryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMngSaveHistoryResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *RoomMngIsAllNetBannedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMngIsAllNetBannedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *RoomMngIsAllNetBannedResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMngIsAllNetBannedResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoomMng(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *RoomMngIsAllNetBannedResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMngIsAllNetBannedResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsNetBanned {
		dAtA[i] = 0x8
		i++
		if m.IsNetBanned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintRoomMng(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RoomMngCreateRoomReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRoomMng(uint64(m.Uid))
	}
	if m.Virtual != 0 {
		n += 1 + sovRoomMng(uint64(m.Virtual))
	}
	return n
}

func (m *RoomMngCreateRoomResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoomMng(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRoomMng(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRoomMng(uint64(l))
	}
	return n
}

func (m *RoomMngCreateRoomResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovRoomMng(uint64(l))
	}
	return n
}

func (m *RoomMngGetSecondVerifyListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovRoomMng(uint64(m.RoomId))
	}
	l = len(m.Area)
	if l > 0 {
		n += 1 + l + sovRoomMng(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovRoomMng(uint64(m.Page))
	}
	if m.Pagesize != 0 {
		n += 1 + sovRoomMng(uint64(m.Pagesize))
	}
	l = len(m.Biz)
	if l > 0 {
		n += 1 + l + sovRoomMng(uint64(l))
	}
	return n
}

func (m *RoomMngGetSecondVerifyListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoomMng(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRoomMng(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRoomMng(uint64(l))
	}
	return n
}

func (m *RoomMngGetSecondVerifyListResp_Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRoomMng(uint64(m.Id))
	}
	if m.RecentCutTimes != 0 {
		n += 1 + sovRoomMng(uint64(m.RecentCutTimes))
	}
	if m.RecentWarnTimes != 0 {
		n += 1 + sovRoomMng(uint64(m.RecentWarnTimes))
	}
	if m.WarnTimes != 0 {
		n += 1 + sovRoomMng(uint64(m.WarnTimes))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovRoomMng(uint64(l))
	}
	if m.RoomId != 0 {
		n += 1 + sovRoomMng(uint64(m.RoomId))
	}
	if m.Uid != 0 {
		n += 1 + sovRoomMng(uint64(m.Uid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRoomMng(uint64(l))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovRoomMng(uint64(l))
	}
	if m.Fc != 0 {
		n += 1 + sovRoomMng(uint64(m.Fc))
	}
	l = len(m.WarnReason)
	if l > 0 {
		n += 1 + l + sovRoomMng(uint64(l))
	}
	l = len(m.BreakTime)
	if l > 0 {
		n += 1 + l + sovRoomMng(uint64(l))
	}
	l = len(m.ProofImg)
	if l > 0 {
		n += 1 + l + sovRoomMng(uint64(l))
	}
	return n
}

func (m *RoomMngGetSecondVerifyListResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovRoomMng(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovRoomMng(uint64(m.Count))
	}
	if m.Page != 0 {
		n += 1 + sovRoomMng(uint64(m.Page))
	}
	if m.Pagesize != 0 {
		n += 1 + sovRoomMng(uint64(m.Pagesize))
	}
	return n
}

func (m *RoomMngIsBlackReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovRoomMng(uint64(m.Roomid))
	}
	return n
}

func (m *RoomMngIsBlackResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoomMng(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRoomMng(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + sovRoomMng(uint64(k)) + 1 + sovRoomMng(uint64(v))
			n += mapEntrySize + 1 + sovRoomMng(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RoomMngSaveHistoryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovRoomMng(uint64(l))
		}
	}
	return n
}

func (m *RoomMngSaveHistoryReq_List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRoomMng(uint64(m.Uid))
	}
	if m.Roomid != 0 {
		n += 1 + sovRoomMng(uint64(m.Roomid))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovRoomMng(uint64(l))
	}
	if m.Area != 0 {
		n += 1 + sovRoomMng(uint64(m.Area))
	}
	if m.Status != 0 {
		n += 1 + sovRoomMng(uint64(m.Status))
	}
	l = len(m.Oname)
	if l > 0 {
		n += 1 + l + sovRoomMng(uint64(l))
	}
	return n
}

func (m *RoomMngSaveHistoryResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoomMng(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRoomMng(uint64(l))
	}
	return n
}

func (m *RoomMngIsAllNetBannedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRoomMng(uint64(m.Uid))
	}
	return n
}

func (m *RoomMngIsAllNetBannedResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoomMng(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRoomMng(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRoomMng(uint64(l))
	}
	return n
}

func (m *RoomMngIsAllNetBannedResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsNetBanned {
		n += 2
	}
	return n
}

func sovRoomMng(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRoomMng(x uint64) (n int) {
	return sovRoomMng(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoomMngCreateRoomReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomMngCreateRoomReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomMngCreateRoomReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Virtual", wireType)
			}
			m.Virtual = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Virtual |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMngCreateRoomResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomMngCreateRoomResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomMngCreateRoomResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &RoomMngCreateRoomResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMngCreateRoomResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMngGetSecondVerifyListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomMngGetSecondVerifyListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomMngGetSecondVerifyListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Area = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagesize", wireType)
			}
			m.Pagesize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pagesize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Biz", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Biz = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMngGetSecondVerifyListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomMngGetSecondVerifyListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomMngGetSecondVerifyListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &RoomMngGetSecondVerifyListResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMngGetSecondVerifyListResp_Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentCutTimes", wireType)
			}
			m.RecentCutTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecentCutTimes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentWarnTimes", wireType)
			}
			m.RecentWarnTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecentWarnTimes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarnTimes", wireType)
			}
			m.WarnTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WarnTimes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fc", wireType)
			}
			m.Fc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fc |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarnReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WarnReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BreakTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BreakTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMngGetSecondVerifyListResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &RoomMngGetSecondVerifyListResp_Result{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagesize", wireType)
			}
			m.Pagesize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pagesize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMngIsBlackReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomMngIsBlackReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomMngIsBlackReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMngIsBlackResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomMngIsBlackResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomMngIsBlackResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoomMng
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoomMng
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoomMng
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRoomMng(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRoomMng
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMngSaveHistoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomMngSaveHistoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomMngSaveHistoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RoomMngSaveHistoryReq_List{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMngSaveHistoryReq_List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMngSaveHistoryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomMngSaveHistoryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomMngSaveHistoryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMngIsAllNetBannedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomMngIsAllNetBannedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomMngIsAllNetBannedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMngIsAllNetBannedResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomMngIsAllNetBannedResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomMngIsAllNetBannedResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomMng
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &RoomMngIsAllNetBannedResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMngIsAllNetBannedResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNetBanned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNetBanned = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRoomMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoomMng(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoomMng
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomMng
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRoomMng
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRoomMng
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRoomMng(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRoomMng = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoomMng   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/RoomMng.proto", fileDescriptor_RoomMng_8ec66fc38b3fd862) }

var fileDescriptor_RoomMng_8ec66fc38b3fd862 = []byte{
	// 1067 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x6e, 0x1b, 0xc5,
	0x17, 0xcf, 0xae, 0x1d, 0x3b, 0x3e, 0x4e, 0xd2, 0x64, 0xfe, 0x69, 0xb4, 0xdd, 0x7f, 0xeb, 0x0d,
	0x0b, 0xa5, 0x51, 0x45, 0x1d, 0x62, 0x54, 0x15, 0x21, 0x81, 0x14, 0x87, 0x0a, 0xc2, 0x47, 0x24,
	0xa6, 0xa8, 0x45, 0xdc, 0x58, 0xeb, 0xf5, 0x78, 0x59, 0xc5, 0xde, 0x4d, 0x76, 0x67, 0x5d, 0x25,
	0x4f, 0xc1, 0x03, 0xf0, 0x06, 0x20, 0x5e, 0x81, 0x0b, 0x24, 0x84, 0xc4, 0x05, 0xbd, 0x44, 0x5c,
	0xac, 0x50, 0x72, 0xb7, 0x4f, 0x81, 0xe6, 0xcc, 0x64, 0x6d, 0xc7, 0x1f, 0x8d, 0x14, 0x6e, 0x66,
	0xe6, 0x9c, 0x33, 0xe7, 0x9c, 0x99, 0xdf, 0xf9, 0x98, 0x81, 0xb5, 0xc1, 0xee, 0x0e, 0x0d, 0xc3,
	0xfe, 0x97, 0x81, 0x57, 0x3f, 0x8e, 0x42, 0x1e, 0x92, 0x72, 0x14, 0x86, 0xfd, 0xfa, 0x60, 0xd7,
	0x7c, 0xe4, 0xf9, 0xfc, 0xbb, 0xa4, 0x5d, 0x77, 0xc3, 0xfe, 0x8e, 0x17, 0x7a, 0xe1, 0x0e, 0xca,
	0xdb, 0x49, 0x17, 0x29, 0x24, 0x70, 0x25, 0xf5, 0xec, 0x6f, 0x60, 0x43, 0x19, 0xda, 0x8f, 0x98,
	0xc3, 0x99, 0x20, 0x28, 0x3b, 0x21, 0x77, 0xa0, 0x90, 0xf8, 0x1d, 0x43, 0xdb, 0xd2, 0xb6, 0x0b,
	0xcd, 0x72, 0x96, 0x5a, 0x82, 0xa4, 0x62, 0x20, 0xf7, 0xa1, 0x3c, 0xf0, 0x23, 0x9e, 0x38, 0x3d,
	0x43, 0x47, 0x71, 0x35, 0x4b, 0xad, 0x4b, 0x16, 0xbd, 0x5c, 0xd8, 0xbf, 0x68, 0x70, 0x7b, 0x8a,
	0xe9, 0xf8, 0x98, 0xdc, 0x85, 0xa2, 0x1b, 0x76, 0x98, 0x32, 0xbe, 0x94, 0xa5, 0x16, 0xd2, 0x14,
	0x47, 0xe1, 0xb9, 0x1f, 0x7b, 0x68, 0xba, 0x22, 0x3d, 0xf7, 0x63, 0x8f, 0x8a, 0x81, 0xec, 0x41,
	0xb1, 0xe3, 0x70, 0xc7, 0x28, 0x6c, 0x69, 0xdb, 0xd5, 0xc6, 0x9b, 0x75, 0x75, 0xe7, 0xfa, 0x54,
	0x37, 0xf5, 0x8f, 0x1d, 0xee, 0x48, 0xeb, 0x42, 0x89, 0xe2, 0x68, 0x3e, 0x84, 0xa2, 0xe0, 0x13,
	0x1b, 0x4a, 0x42, 0x5b, 0x5d, 0xb1, 0xd2, 0x84, 0x2c, 0xb5, 0x14, 0x87, 0xaa, 0xd9, 0xfe, 0x4d,
	0x83, 0x7b, 0xca, 0xf4, 0x27, 0x8c, 0x3f, 0x63, 0x6e, 0x18, 0x74, 0x9e, 0xb3, 0xc8, 0xef, 0x9e,
	0x7e, 0xe1, 0xc7, 0x5c, 0xa0, 0xf4, 0x16, 0x20, 0xee, 0xad, 0x1c, 0x29, 0x84, 0x42, 0xb1, 0xa4,
	0x9d, 0x83, 0x8e, 0xb8, 0xaf, 0x13, 0x31, 0x47, 0x5d, 0x09, 0x4f, 0x24, 0x68, 0x8a, 0xa3, 0x90,
	0x1e, 0x3b, 0x1e, 0xc3, 0x4b, 0x29, 0x34, 0x04, 0x4d, 0x71, 0x24, 0xdb, 0xb0, 0x24, 0xe6, 0xd8,
	0x3f, 0x63, 0x46, 0x11, 0x77, 0x2c, 0x67, 0xa9, 0x95, 0xf3, 0x68, 0xbe, 0x12, 0xb8, 0xb5, 0xfd,
	0x33, 0x63, 0x71, 0x88, 0x5b, 0xdb, 0x3f, 0xa3, 0x62, 0xb0, 0x7f, 0x28, 0x43, 0x6d, 0xde, 0x45,
	0x6e, 0x12, 0x93, 0xcf, 0xc6, 0x62, 0xf2, 0xce, 0xd5, 0x98, 0xcc, 0xf0, 0x37, 0x3d, 0x38, 0x3f,
	0x17, 0xa1, 0x44, 0x59, 0x9c, 0xf4, 0x38, 0xd9, 0x04, 0x3d, 0x07, 0xb5, 0x94, 0xa5, 0x96, 0xee,
	0x77, 0xa8, 0xee, 0x77, 0xc8, 0x47, 0xb0, 0x16, 0x31, 0x97, 0x05, 0xbc, 0xe5, 0x26, 0xbc, 0xc5,
	0xfd, 0x3e, 0x8b, 0x55, 0x16, 0x6e, 0x64, 0xa9, 0x35, 0x21, 0xa3, 0xab, 0x92, 0xb3, 0x9f, 0xf0,
	0xaf, 0x05, 0x4d, 0xf6, 0x60, 0x5d, 0xed, 0x79, 0xe9, 0x44, 0x81, 0x32, 0x20, 0xa1, 0xbf, 0x9d,
	0xa5, 0xd6, 0xa4, 0x90, 0xde, 0x92, 0xac, 0x17, 0x4e, 0x14, 0x48, 0x13, 0x8f, 0x00, 0x46, 0x74,
	0x65, 0x50, 0x56, 0xb3, 0xd4, 0x1a, 0xe1, 0xd2, 0xca, 0xcb, 0x7c, 0xbb, 0x05, 0x8b, 0x49, 0xe0,
	0xf4, 0x99, 0x8a, 0x4c, 0x25, 0x4b, 0x2d, 0xc9, 0xa0, 0x72, 0x1a, 0x4d, 0xa2, 0xd2, 0xec, 0x24,
	0x52, 0x05, 0x59, 0x9e, 0x52, 0x90, 0x16, 0x2c, 0x72, 0x9f, 0xf7, 0x98, 0xb1, 0x34, 0xf4, 0x80,
	0x0c, 0x2a, 0x27, 0xd2, 0x80, 0x65, 0x91, 0x6a, 0xad, 0x41, 0xa3, 0x85, 0x27, 0xa9, 0xe0, 0xbe,
	0xb5, 0x2c, 0xb5, 0xc6, 0xf8, 0x14, 0x04, 0xf5, 0xbc, 0x71, 0x28, 0x4e, 0xb5, 0x09, 0x7a, 0xd7,
	0x35, 0x60, 0x18, 0x80, 0xae, 0x4b, 0xf5, 0xae, 0x4b, 0xde, 0x85, 0x2a, 0xde, 0x33, 0x62, 0x4e,
	0x1c, 0x06, 0x46, 0x15, 0x4d, 0xdd, 0xca, 0x52, 0x6b, 0x94, 0x4d, 0x11, 0x0b, 0x8a, 0x6b, 0x81,
	0x57, 0x3b, 0x62, 0xce, 0x11, 0x42, 0x63, 0x2c, 0xa3, 0x02, 0xe2, 0x35, 0xe4, 0xd2, 0x0a, 0xae,
	0x05, 0x60, 0xe4, 0x21, 0x54, 0x8e, 0xa3, 0x30, 0xec, 0xb6, 0xfc, 0xbe, 0x67, 0xac, 0xe0, 0xee,
	0x95, 0x2c, 0xb5, 0x86, 0x4c, 0xba, 0x84, 0xcb, 0x83, 0xbe, 0x67, 0xfe, 0xaa, 0xa9, 0x72, 0xa6,
	0x50, 0x8a, 0x30, 0x71, 0x0c, 0x6d, 0xab, 0xb0, 0x5d, 0x6d, 0xd4, 0xaf, 0x9b, 0x87, 0x32, 0xdd,
	0x54, 0xf9, 0xe3, 0x9a, 0xaa, 0x59, 0xc0, 0xea, 0x86, 0x49, 0xc0, 0x55, 0x7e, 0x21, 0xac, 0xc8,
	0xa0, 0x72, 0xfa, 0xaf, 0x2a, 0xd7, 0x7e, 0x02, 0xeb, 0xea, 0x94, 0x07, 0x71, 0xb3, 0xe7, 0xb8,
	0x47, 0xa2, 0xb5, 0x8c, 0x37, 0xa8, 0xc2, 0xd4, 0x06, 0xf5, 0x87, 0x06, 0xe4, 0xaa, 0xe6, 0x4d,
	0x6a, 0x79, 0x3f, 0xaf, 0x65, 0x81, 0xe1, 0xfd, 0xab, 0x18, 0x8e, 0xf8, 0xc0, 0xfa, 0x7d, 0x1a,
	0xf0, 0xe8, 0x74, 0xa2, 0x88, 0x9f, 0x40, 0x25, 0x17, 0x92, 0x35, 0x28, 0x1c, 0xb1, 0x53, 0x79,
	0x12, 0x2a, 0x96, 0x64, 0x03, 0x16, 0x07, 0x4e, 0x2f, 0x61, 0x12, 0x55, 0x2a, 0x89, 0x0f, 0xf4,
	0xf7, 0x35, 0xfb, 0x27, 0x3d, 0x7f, 0x30, 0x9e, 0x39, 0x03, 0xf6, 0xa9, 0x1f, 0xf3, 0x30, 0x3a,
	0x15, 0x58, 0xec, 0x41, 0xb1, 0xe7, 0xc7, 0x97, 0xb1, 0x9d, 0xe8, 0xfb, 0xe3, 0xbb, 0xeb, 0x22,
	0xb6, 0xf2, 0x54, 0x42, 0x89, 0xe2, 0x68, 0xfe, 0xa9, 0x41, 0x51, 0x08, 0xe6, 0x3d, 0x6c, 0x43,
	0xc8, 0xf5, 0x59, 0x90, 0x8b, 0xc7, 0xcf, 0x0d, 0x03, 0xce, 0x02, 0x8e, 0x61, 0xaf, 0xc8, 0x62,
	0x55, 0x2c, 0x7a, 0xb9, 0xc8, 0x5b, 0x7e, 0x71, 0x18, 0x82, 0x91, 0x96, 0x6f, 0x43, 0x29, 0xe6,
	0x0e, 0x4f, 0x62, 0xec, 0x09, 0xca, 0x91, 0xe4, 0x50, 0x35, 0x8b, 0xec, 0x0b, 0xb1, 0x58, 0x4b,
	0xc3, 0xa2, 0x0e, 0x65, 0xdb, 0xc0, 0xc9, 0xfe, 0x0a, 0x36, 0xa7, 0xdd, 0xff, 0x06, 0xf1, 0xb7,
	0x1f, 0x83, 0x91, 0x87, 0x7a, 0xaf, 0xd7, 0x3b, 0x64, 0xbc, 0xe9, 0x04, 0x01, 0xeb, 0xcc, 0xff,
	0x10, 0xd8, 0x7f, 0x6b, 0x70, 0x67, 0x86, 0xde, 0x4d, 0xb2, 0xf1, 0xe9, 0xd8, 0xcb, 0xf2, 0x60,
	0x32, 0x1b, 0xaf, 0xba, 0x9a, 0xfe, 0xa8, 0x7c, 0xa8, 0x5a, 0xc4, 0x63, 0x58, 0xf1, 0xe3, 0x56,
	0xc0, 0x78, 0xab, 0x8d, 0x1a, 0x78, 0xa0, 0xa5, 0xe6, 0x7a, 0x96, 0x5a, 0xe3, 0x02, 0x5a, 0xf5,
	0xe3, 0xdc, 0x6e, 0xe3, 0xc7, 0x02, 0x94, 0x95, 0x47, 0xf2, 0x39, 0x80, 0x9b, 0xff, 0x31, 0xc8,
	0xbd, 0x79, 0xff, 0x8f, 0x13, 0xb3, 0x36, 0xff, 0x7b, 0x42, 0xba, 0xf0, 0x3f, 0x6f, 0xb2, 0x29,
	0x91, 0xb7, 0xaf, 0xd5, 0xb9, 0x4e, 0xcc, 0x07, 0xd7, 0xec, 0x70, 0xa4, 0x09, 0x65, 0x5f, 0x16,
	0x2e, 0x31, 0x67, 0x56, 0xf4, 0x89, 0xf9, 0xff, 0x39, 0xd5, 0x4e, 0x0e, 0xa1, 0x1a, 0x0f, 0x93,
	0x8c, 0xd4, 0xe6, 0x57, 0xa0, 0x69, 0xcd, 0x95, 0xc7, 0xc7, 0xe4, 0x05, 0xac, 0xfa, 0x63, 0xe1,
	0x23, 0x6f, 0xbc, 0x2e, 0xbc, 0x27, 0xa6, 0xfd, 0xfa, 0x0c, 0x68, 0xde, 0xfd, 0xfd, 0xbc, 0xa6,
	0xbd, 0x3a, 0xaf, 0x69, 0xff, 0x9c, 0xd7, 0xb4, 0xef, 0x2f, 0x6a, 0x0b, 0xaf, 0x2e, 0x6a, 0x0b,
	0x7f, 0x5d, 0xd4, 0x16, 0xbe, 0xd5, 0x07, 0xbb, 0xed, 0x12, 0xfe, 0x79, 0xdf, 0xfb, 0x37, 0x00,
	0x00, 0xff, 0xff, 0xfb, 0x72, 0x24, 0xba, 0x3f, 0x0b, 0x00, 0x00,
}
