// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/AppIndex.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AppIndexGetListByIdsReq struct {
	//
	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids" json:"ids"`
}

func (m *AppIndexGetListByIdsReq) Reset()         { *m = AppIndexGetListByIdsReq{} }
func (m *AppIndexGetListByIdsReq) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetListByIdsReq) ProtoMessage()    {}
func (*AppIndexGetListByIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_e6fcc9887f31b3ad, []int{0}
}
func (m *AppIndexGetListByIdsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetListByIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetListByIdsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetListByIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetListByIdsReq.Merge(dst, src)
}
func (m *AppIndexGetListByIdsReq) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetListByIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetListByIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetListByIdsReq proto.InternalMessageInfo

func (m *AppIndexGetListByIdsReq) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type AppIndexGetListByIdsResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data map[int64]*AppIndexGetListByIdsResp_RoomList `protobuf:"bytes,3,rep,name=data" json:"data" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AppIndexGetListByIdsResp) Reset()         { *m = AppIndexGetListByIdsResp{} }
func (m *AppIndexGetListByIdsResp) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetListByIdsResp) ProtoMessage()    {}
func (*AppIndexGetListByIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_e6fcc9887f31b3ad, []int{1}
}
func (m *AppIndexGetListByIdsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetListByIdsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetListByIdsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetListByIdsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetListByIdsResp.Merge(dst, src)
}
func (m *AppIndexGetListByIdsResp) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetListByIdsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetListByIdsResp.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetListByIdsResp proto.InternalMessageInfo

func (m *AppIndexGetListByIdsResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AppIndexGetListByIdsResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *AppIndexGetListByIdsResp) GetData() map[int64]*AppIndexGetListByIdsResp_RoomList {
	if m != nil {
		return m.Data
	}
	return nil
}

type AppIndexGetListByIdsResp_RoomInfo struct {
	// 房间id
	Roomid int64 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid"`
	// 房间标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 用户名
	Uname string `protobuf:"bytes,3,opt,name=uname,proto3" json:"uname"`
	// 在线人数
	Online int64 `protobuf:"varint,4,opt,name=online,proto3" json:"online"`
	// 封面，封面现在有3种：关键帧、封面图、秀场封面（正方形的），返回哪个由后端决定
	Cover string `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover"`
	// 链接
	Link string `protobuf:"bytes,6,opt,name=link,proto3" json:"link"`
	// 主播头像
	Face string `protobuf:"bytes,7,opt,name=face,proto3" json:"face"`
	// 父分区id
	AreaV2ParentId int64 `protobuf:"varint,8,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id"`
	// 父分区名称
	AreaV2ParentName string `protobuf:"bytes,9,opt,name=area_v2_parent_name,json=areaV2ParentName,proto3" json:"area_v2_parent_name"`
	// 二级分区id
	AreaV2Id int64 `protobuf:"varint,10,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id"`
	// 二级分区名
	AreaV2Name string `protobuf:"bytes,11,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name"`
	// 秒开播放串 h264
	PlayUrl string `protobuf:"bytes,12,opt,name=play_url,json=playUrl,proto3" json:"play_url"`
	// 秒开播放串 h265
	PlayUrlH265 string `protobuf:"bytes,13,opt,name=play_url_h265,json=playUrlH265,proto3" json:"play_url_h265"`
	// 当前清晰度,清晰度 0:默认码率, 2:800 3:1500 4:原画
	CurrentQuality int64 `protobuf:"varint,14,opt,name=current_quality,json=currentQuality,proto3" json:"current_quality"`
	// 当前拥有清晰度列表
	AcceptQuality []int64 `protobuf:"varint,15,rep,packed,name=accept_quality,json=acceptQuality" json:"accept_quality"`
	// 横竖屏  0:横屏 1:竖屏 -1:异常情况
	BroadcastType int64 `protobuf:"varint,16,opt,name=broadcast_type,json=broadcastType,proto3" json:"broadcast_type"`
	// 新版角标-右上 默认为空 只能是文字！！！@古月 【5.29显示更新】：服务端还是吐右上（兼容老版），5.29显示在左上
	PendentRu string `protobuf:"bytes,17,opt,name=pendent_ru,json=pendentRu,proto3" json:"pendent_ru"`
	// 【5.29显示更新】：服务端还是吐右上，5.29客户端显示在左上,对应的背景图片
	PendentRuPic string `protobuf:"bytes,18,opt,name=pendent_ru_pic,json=pendentRuPic,proto3" json:"pendent_ru_pic"`
	// 新版移动端角标色值-右上
	PendentRuColor string `protobuf:"bytes,19,opt,name=pendent_ru_color,json=pendentRuColor,proto3" json:"pendent_ru_color"`
	// 推荐类型 1：人气 2：营收 3：运营强推 4：天马推荐（暂定）用于客户端打点
	RecType int64 `protobuf:"varint,20,opt,name=rec_type,json=recType,proto3" json:"rec_type"`
	// 当前房间pk_id，默认0 用于客户端打点
	PkId int64 `protobuf:"varint,21,opt,name=pk_id,json=pkId,proto3" json:"pk_id"`
}

func (m *AppIndexGetListByIdsResp_RoomInfo) Reset()         { *m = AppIndexGetListByIdsResp_RoomInfo{} }
func (m *AppIndexGetListByIdsResp_RoomInfo) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetListByIdsResp_RoomInfo) ProtoMessage()    {}
func (*AppIndexGetListByIdsResp_RoomInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_e6fcc9887f31b3ad, []int{1, 1}
}
func (m *AppIndexGetListByIdsResp_RoomInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetListByIdsResp_RoomInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetListByIdsResp_RoomInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetListByIdsResp_RoomInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetListByIdsResp_RoomInfo.Merge(dst, src)
}
func (m *AppIndexGetListByIdsResp_RoomInfo) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetListByIdsResp_RoomInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetListByIdsResp_RoomInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetListByIdsResp_RoomInfo proto.InternalMessageInfo

func (m *AppIndexGetListByIdsResp_RoomInfo) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetAreaV2ParentName() string {
	if m != nil {
		return m.AreaV2ParentName
	}
	return ""
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetPlayUrl() string {
	if m != nil {
		return m.PlayUrl
	}
	return ""
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetPlayUrlH265() string {
	if m != nil {
		return m.PlayUrlH265
	}
	return ""
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetCurrentQuality() int64 {
	if m != nil {
		return m.CurrentQuality
	}
	return 0
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetAcceptQuality() []int64 {
	if m != nil {
		return m.AcceptQuality
	}
	return nil
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetBroadcastType() int64 {
	if m != nil {
		return m.BroadcastType
	}
	return 0
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetPendentRu() string {
	if m != nil {
		return m.PendentRu
	}
	return ""
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetPendentRuPic() string {
	if m != nil {
		return m.PendentRuPic
	}
	return ""
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetPendentRuColor() string {
	if m != nil {
		return m.PendentRuColor
	}
	return ""
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetRecType() int64 {
	if m != nil {
		return m.RecType
	}
	return 0
}

func (m *AppIndexGetListByIdsResp_RoomInfo) GetPkId() int64 {
	if m != nil {
		return m.PkId
	}
	return 0
}

type AppIndexGetListByIdsResp_RoomList struct {
	//
	List []*AppIndexGetListByIdsResp_RoomInfo `protobuf:"bytes,1,rep,name=list" json:"list"`
}

func (m *AppIndexGetListByIdsResp_RoomList) Reset()         { *m = AppIndexGetListByIdsResp_RoomList{} }
func (m *AppIndexGetListByIdsResp_RoomList) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetListByIdsResp_RoomList) ProtoMessage()    {}
func (*AppIndexGetListByIdsResp_RoomList) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_e6fcc9887f31b3ad, []int{1, 2}
}
func (m *AppIndexGetListByIdsResp_RoomList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetListByIdsResp_RoomList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetListByIdsResp_RoomList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetListByIdsResp_RoomList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetListByIdsResp_RoomList.Merge(dst, src)
}
func (m *AppIndexGetListByIdsResp_RoomList) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetListByIdsResp_RoomList) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetListByIdsResp_RoomList.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetListByIdsResp_RoomList proto.InternalMessageInfo

func (m *AppIndexGetListByIdsResp_RoomList) GetList() []*AppIndexGetListByIdsResp_RoomInfo {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*AppIndexGetListByIdsReq)(nil), "room.v1.AppIndexGetListByIdsReq")
	proto.RegisterType((*AppIndexGetListByIdsResp)(nil), "room.v1.AppIndexGetListByIdsResp")
	proto.RegisterMapType((map[int64]*AppIndexGetListByIdsResp_RoomList)(nil), "room.v1.AppIndexGetListByIdsResp.DataEntry")
	proto.RegisterType((*AppIndexGetListByIdsResp_RoomInfo)(nil), "room.v1.AppIndexGetListByIdsResp.RoomInfo")
	proto.RegisterType((*AppIndexGetListByIdsResp_RoomList)(nil), "room.v1.AppIndexGetListByIdsResp.RoomList")
}
func (m *AppIndexGetListByIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetListByIdsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA2 := make([]byte, len(m.Ids)*10)
		var j1 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *AppIndexGetListByIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetListByIdsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x1a
			i++
			v := m.Data[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovAppIndex(uint64(msgSize))
			}
			mapSize := 1 + sovAppIndex(uint64(k)) + msgSize
			i = encodeVarintAppIndex(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintAppIndex(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintAppIndex(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	return i, nil
}

func (m *AppIndexGetListByIdsResp_RoomInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetListByIdsResp_RoomInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Roomid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if m.Online != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Online))
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if len(m.AreaV2ParentName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.AreaV2ParentName)))
		i += copy(dAtA[i:], m.AreaV2ParentName)
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.AreaV2Id))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if len(m.PlayUrl) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PlayUrl)))
		i += copy(dAtA[i:], m.PlayUrl)
	}
	if len(m.PlayUrlH265) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PlayUrlH265)))
		i += copy(dAtA[i:], m.PlayUrlH265)
	}
	if m.CurrentQuality != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.CurrentQuality))
	}
	if len(m.AcceptQuality) > 0 {
		dAtA5 := make([]byte, len(m.AcceptQuality)*10)
		var j4 int
		for _, num1 := range m.AcceptQuality {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x7a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	if m.BroadcastType != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.BroadcastType))
	}
	if len(m.PendentRu) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PendentRu)))
		i += copy(dAtA[i:], m.PendentRu)
	}
	if len(m.PendentRuPic) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PendentRuPic)))
		i += copy(dAtA[i:], m.PendentRuPic)
	}
	if len(m.PendentRuColor) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PendentRuColor)))
		i += copy(dAtA[i:], m.PendentRuColor)
	}
	if m.RecType != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.RecType))
	}
	if m.PkId != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.PkId))
	}
	return i, nil
}

func (m *AppIndexGetListByIdsResp_RoomList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetListByIdsResp_RoomList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAppIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintAppIndex(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AppIndexGetListByIdsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovAppIndex(uint64(e))
		}
		n += 1 + sovAppIndex(uint64(l)) + l
	}
	return n
}

func (m *AppIndexGetListByIdsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAppIndex(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAppIndex(uint64(l))
			}
			mapEntrySize := 1 + sovAppIndex(uint64(k)) + l
			n += mapEntrySize + 1 + sovAppIndex(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AppIndexGetListByIdsResp_RoomInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovAppIndex(uint64(m.Roomid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Online != 0 {
		n += 1 + sovAppIndex(uint64(m.Online))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.AreaV2ParentId != 0 {
		n += 1 + sovAppIndex(uint64(m.AreaV2ParentId))
	}
	l = len(m.AreaV2ParentName)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.AreaV2Id != 0 {
		n += 1 + sovAppIndex(uint64(m.AreaV2Id))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PlayUrl)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PlayUrlH265)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.CurrentQuality != 0 {
		n += 1 + sovAppIndex(uint64(m.CurrentQuality))
	}
	if len(m.AcceptQuality) > 0 {
		l = 0
		for _, e := range m.AcceptQuality {
			l += sovAppIndex(uint64(e))
		}
		n += 1 + sovAppIndex(uint64(l)) + l
	}
	if m.BroadcastType != 0 {
		n += 2 + sovAppIndex(uint64(m.BroadcastType))
	}
	l = len(m.PendentRu)
	if l > 0 {
		n += 2 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PendentRuPic)
	if l > 0 {
		n += 2 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PendentRuColor)
	if l > 0 {
		n += 2 + l + sovAppIndex(uint64(l))
	}
	if m.RecType != 0 {
		n += 2 + sovAppIndex(uint64(m.RecType))
	}
	if m.PkId != 0 {
		n += 2 + sovAppIndex(uint64(m.PkId))
	}
	return n
}

func (m *AppIndexGetListByIdsResp_RoomList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovAppIndex(uint64(l))
		}
	}
	return n
}

func sovAppIndex(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAppIndex(x uint64) (n int) {
	return sovAppIndex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppIndexGetListByIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppIndexGetListByIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppIndexGetListByIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAppIndex
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetListByIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppIndexGetListByIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppIndexGetListByIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[int64]*AppIndexGetListByIdsResp_RoomList)
			}
			var mapkey int64
			var mapvalue *AppIndexGetListByIdsResp_RoomList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAppIndex
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthAppIndex
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AppIndexGetListByIdsResp_RoomList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAppIndex(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAppIndex
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetListByIdsResp_RoomInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2ParentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrlH265", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrlH265 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentQuality", wireType)
			}
			m.CurrentQuality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentQuality |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AcceptQuality = append(m.AcceptQuality, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAppIndex
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AcceptQuality) == 0 {
					m.AcceptQuality = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AcceptQuality = append(m.AcceptQuality, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptQuality", wireType)
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastType", wireType)
			}
			m.BroadcastType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecType", wireType)
			}
			m.RecType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkId", wireType)
			}
			m.PkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PkId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetListByIdsResp_RoomList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AppIndexGetListByIdsResp_RoomInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAppIndex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAppIndex
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAppIndex(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAppIndex = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAppIndex   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/AppIndex.proto", fileDescriptor_AppIndex_e6fcc9887f31b3ad) }

var fileDescriptor_AppIndex_e6fcc9887f31b3ad = []byte{
	// 786 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x5b, 0x6f, 0xe3, 0x44,
	0x14, 0xae, 0xeb, 0xa4, 0x49, 0x4e, 0x2e, 0x9b, 0x4c, 0x77, 0xb5, 0x43, 0xb4, 0x8a, 0x43, 0x5f,
	0x88, 0x80, 0x4d, 0x55, 0x43, 0x57, 0x0b, 0x42, 0x68, 0x09, 0xb7, 0x8d, 0x84, 0xd0, 0x32, 0x14,
	0x1e, 0x78, 0xb1, 0x1c, 0x7b, 0x9a, 0x5a, 0x71, 0x3c, 0xae, 0x2f, 0x11, 0xf9, 0x17, 0xfc, 0x23,
	0x5e, 0x79, 0xec, 0x23, 0x4f, 0x16, 0x6a, 0xde, 0xfc, 0x2b, 0xd0, 0x9c, 0x71, 0x6e, 0x6d, 0x51,
	0x79, 0x39, 0x33, 0xe7, 0xfb, 0xce, 0x77, 0xce, 0x1c, 0x8f, 0xcf, 0x40, 0x67, 0x71, 0x76, 0xfa,
	0x55, 0x18, 0x8e, 0x03, 0x97, 0xff, 0x3e, 0x0c, 0x23, 0x91, 0x08, 0x52, 0x89, 0x84, 0x98, 0x0f,
	0x17, 0x67, 0xdd, 0x97, 0x53, 0x2f, 0xb9, 0x4a, 0x27, 0x43, 0x47, 0xcc, 0x4f, 0xa7, 0x62, 0x2a,
	0x4e, 0x91, 0x9f, 0xa4, 0x97, 0xe8, 0xa1, 0x83, 0x3b, 0xa5, 0x3b, 0xf9, 0x14, 0x9e, 0xaf, 0x33,
	0x7d, 0xcf, 0x93, 0x1f, 0xbc, 0x38, 0x19, 0x2d, 0xc7, 0x6e, 0xcc, 0xf8, 0x35, 0x79, 0x0f, 0x74,
	0xcf, 0x8d, 0xa9, 0xd6, 0xd7, 0x07, 0xfa, 0xa8, 0x92, 0x67, 0x86, 0x74, 0x99, 0x34, 0x27, 0x7f,
	0x02, 0xd0, 0x87, 0x65, 0x71, 0x48, 0x5e, 0x40, 0xc9, 0x11, 0x2e, 0xa7, 0x5a, 0x5f, 0x1b, 0xe8,
	0xa3, 0x6a, 0x9e, 0x19, 0xe8, 0x33, 0xb4, 0x32, 0xeb, 0x3c, 0x9e, 0xd2, 0xc3, 0xbe, 0x36, 0xa8,
	0xa9, 0xac, 0xf3, 0x78, 0xca, 0xa4, 0x21, 0x63, 0x28, 0xb9, 0x76, 0x62, 0x53, 0xbd, 0xaf, 0x0f,
	0xea, 0xe6, 0x47, 0xc3, 0xa2, 0xa5, 0xe1, 0x7f, 0x55, 0x1a, 0x7e, 0x63, 0x27, 0xf6, 0xb7, 0x41,
	0x12, 0x2d, 0x55, 0x15, 0x29, 0x66, 0x68, 0xbb, 0x0e, 0xd4, 0x36, 0x24, 0x69, 0x83, 0x3e, 0xe3,
	0x4b, 0x75, 0x1e, 0x26, 0xb7, 0xe4, 0x0d, 0x94, 0x17, 0xb6, 0x9f, 0x72, 0x3c, 0x46, 0xdd, 0xfc,
	0xf0, 0xf1, 0x52, 0x4c, 0x88, 0xb9, 0x44, 0x98, 0x12, 0x7e, 0x7e, 0xf8, 0x5a, 0xeb, 0xae, 0x2a,
	0x50, 0x95, 0xf8, 0x38, 0xb8, 0x14, 0xe4, 0x04, 0x8e, 0x64, 0x12, 0xcf, 0x2d, 0xfa, 0x86, 0x3c,
	0x33, 0x0a, 0x84, 0x15, 0x2b, 0x31, 0xa0, 0x9c, 0x78, 0x89, 0xcf, 0x8b, 0xee, 0x6b, 0x79, 0x66,
	0x28, 0x80, 0xa9, 0x45, 0x06, 0xa4, 0x81, 0x3d, 0xe7, 0x54, 0xdf, 0x06, 0x20, 0xc0, 0xd4, 0x22,
	0xab, 0x88, 0xc0, 0xf7, 0x02, 0x4e, 0x4b, 0xdb, 0x2a, 0x0a, 0x61, 0xc5, 0x2a, 0x93, 0x38, 0x62,
	0xc1, 0x23, 0x5a, 0xde, 0x26, 0x41, 0x80, 0xa9, 0x45, 0x5e, 0x90, 0xef, 0x05, 0x33, 0x7a, 0x84,
	0x3c, 0x7e, 0x3a, 0xe9, 0x33, 0xb4, 0x92, 0xbd, 0xb4, 0x1d, 0x4e, 0x2b, 0x5b, 0x56, 0xfa, 0x0c,
	0x2d, 0x79, 0x03, 0x1d, 0x3b, 0xe2, 0xb6, 0xb5, 0x30, 0xad, 0xd0, 0x8e, 0x78, 0x90, 0x58, 0x9e,
	0x4b, 0xab, 0x78, 0x96, 0x67, 0x79, 0x66, 0xdc, 0x27, 0x59, 0x4b, 0x42, 0xbf, 0x9a, 0xef, 0x10,
	0x18, 0xbb, 0xe4, 0x3b, 0x38, 0xbe, 0x13, 0x84, 0x1d, 0xd7, 0xb0, 0xdc, 0xf3, 0x3c, 0x33, 0x1e,
	0xa2, 0x59, 0x7b, 0x37, 0xcb, 0x8f, 0xf2, 0x53, 0x7c, 0x0c, 0xb0, 0x0e, 0xf4, 0x5c, 0x0a, 0x78,
	0x84, 0x56, 0x9e, 0x19, 0x3b, 0x28, 0xab, 0x2a, 0xd5, 0xd8, 0x25, 0x26, 0x34, 0xd6, 0x38, 0x96,
	0xab, 0x63, 0xb9, 0x76, 0x9e, 0x19, 0x7b, 0x38, 0x03, 0xa5, 0xc0, 0x0a, 0x1f, 0x40, 0x35, 0xf4,
	0xed, 0xa5, 0x95, 0x46, 0x3e, 0x6d, 0x60, 0x7c, 0x23, 0xcf, 0x8c, 0x0d, 0xc6, 0x2a, 0x72, 0xf7,
	0x4b, 0xe4, 0x93, 0x73, 0x68, 0xae, 0x41, 0xeb, 0xca, 0x7c, 0x75, 0x4e, 0x9b, 0x18, 0xdd, 0xc9,
	0x33, 0x63, 0x9f, 0x60, 0xf5, 0x42, 0xf2, 0xd6, 0x7c, 0x75, 0x4e, 0xbe, 0x80, 0x27, 0x4e, 0x1a,
	0x61, 0x8f, 0xd7, 0xa9, 0xed, 0x7b, 0xc9, 0x92, 0xb6, 0xb0, 0x8d, 0xe3, 0x3c, 0x33, 0xee, 0x52,
	0xac, 0x55, 0x00, 0x3f, 0x29, 0x9f, 0x7c, 0x06, 0x2d, 0xdb, 0x71, 0x78, 0xb8, 0x15, 0x3f, 0xc1,
	0x49, 0x25, 0x79, 0x66, 0xdc, 0x61, 0x58, 0x53, 0xf9, 0x3b, 0xd2, 0x49, 0x24, 0x6c, 0xd7, 0xb1,
	0xe3, 0xc4, 0x4a, 0x96, 0x21, 0xa7, 0x6d, 0xac, 0x8b, 0xd2, 0x7d, 0x86, 0x35, 0x37, 0xfe, 0xc5,
	0x32, 0xe4, 0xe4, 0x25, 0x40, 0xc8, 0x03, 0x57, 0x1e, 0x2c, 0x4a, 0x69, 0x07, 0xfb, 0xc4, 0xaf,
	0xbe, 0x45, 0x59, 0xad, 0xd8, 0xb3, 0x94, 0xbc, 0x86, 0xd6, 0x96, 0xb0, 0x42, 0xcf, 0xa1, 0x04,
	0x25, 0x58, 0x69, 0x9f, 0x61, 0x8d, 0x8d, 0xec, 0x9d, 0xe7, 0x90, 0x2f, 0xa1, 0xbd, 0xc3, 0x3b,
	0xc2, 0x17, 0x11, 0x3d, 0x46, 0xed, 0xd3, 0x3c, 0x33, 0xee, 0x71, 0xac, 0xb5, 0x51, 0x7f, 0x2d,
	0x7d, 0x79, 0x79, 0x11, 0x77, 0x54, 0x77, 0x4f, 0xb1, 0x3b, 0xbc, 0xbc, 0x35, 0xc6, 0x2a, 0x11,
	0x77, 0xb0, 0xa3, 0x1e, 0x94, 0xc3, 0x99, 0xfc, 0x85, 0x9e, 0x61, 0x14, 0x8e, 0x0b, 0x02, 0xac,
	0x14, 0xce, 0xc6, 0x6e, 0xf7, 0x42, 0x0d, 0xb9, 0x1c, 0x7e, 0xf2, 0x56, 0x4e, 0x4e, 0x9c, 0xe0,
	0x9b, 0xf8, 0xbf, 0x9f, 0x0d, 0xf9, 0x3c, 0xac, 0xa7, 0x2c, 0x4e, 0x18, 0x5a, 0xd3, 0x82, 0xea,
	0x5a, 0x44, 0x7e, 0x86, 0xc6, 0x74, 0x47, 0x48, 0xfa, 0x8f, 0xe4, 0xbd, 0xee, 0xbe, 0xff, 0x68,
	0xe5, 0xd1, 0x8b, 0xbf, 0x6e, 0x7b, 0xda, 0xcd, 0x6d, 0x4f, 0xfb, 0xe7, 0xb6, 0xa7, 0xfd, 0xb1,
	0xea, 0x1d, 0xdc, 0xac, 0x7a, 0x07, 0x7f, 0xaf, 0x7a, 0x07, 0xbf, 0x1d, 0x2e, 0xce, 0x26, 0x47,
	0xf8, 0xfa, 0x7f, 0xf2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x43, 0x01, 0x27, 0xab, 0x4a, 0x06,
	0x00, 0x00,
}
