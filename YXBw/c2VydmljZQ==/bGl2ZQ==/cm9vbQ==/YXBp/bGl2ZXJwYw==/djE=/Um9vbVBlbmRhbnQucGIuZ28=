// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/RoomPendant.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RoomPendantGetPendantByIdsReq struct {
	//
	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids" json:"ids"`
	// 类型 "frame"房间页边框 , "badge"房间页角标 "index_badge"首页角标 "mobile_frame"移动端房间页边框 , "mobile_badge"移动端房间页角标 "mobile_index_badge"移动端首页角标
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`
	// 位置0无1左上2右上3右下4左下 【5.29显示更新】：服务端还是吐右上，5.29客户端显示在左上,对应的背景图片
	Position int64 `protobuf:"varint,3,opt,name=position,proto3" json:"position"`
}

func (m *RoomPendantGetPendantByIdsReq) Reset()         { *m = RoomPendantGetPendantByIdsReq{} }
func (m *RoomPendantGetPendantByIdsReq) String() string { return proto.CompactTextString(m) }
func (*RoomPendantGetPendantByIdsReq) ProtoMessage()    {}
func (*RoomPendantGetPendantByIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomPendant_d67ae1cee35536b2, []int{0}
}
func (m *RoomPendantGetPendantByIdsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomPendantGetPendantByIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomPendantGetPendantByIdsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomPendantGetPendantByIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomPendantGetPendantByIdsReq.Merge(dst, src)
}
func (m *RoomPendantGetPendantByIdsReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomPendantGetPendantByIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomPendantGetPendantByIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomPendantGetPendantByIdsReq proto.InternalMessageInfo

func (m *RoomPendantGetPendantByIdsReq) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *RoomPendantGetPendantByIdsReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RoomPendantGetPendantByIdsReq) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

type RoomPendantGetPendantByIdsResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *RoomPendantGetPendantByIdsResp_PendantInfo `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *RoomPendantGetPendantByIdsResp) Reset()         { *m = RoomPendantGetPendantByIdsResp{} }
func (m *RoomPendantGetPendantByIdsResp) String() string { return proto.CompactTextString(m) }
func (*RoomPendantGetPendantByIdsResp) ProtoMessage()    {}
func (*RoomPendantGetPendantByIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomPendant_d67ae1cee35536b2, []int{1}
}
func (m *RoomPendantGetPendantByIdsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomPendantGetPendantByIdsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomPendantGetPendantByIdsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomPendantGetPendantByIdsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomPendantGetPendantByIdsResp.Merge(dst, src)
}
func (m *RoomPendantGetPendantByIdsResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomPendantGetPendantByIdsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomPendantGetPendantByIdsResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomPendantGetPendantByIdsResp proto.InternalMessageInfo

func (m *RoomPendantGetPendantByIdsResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RoomPendantGetPendantByIdsResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RoomPendantGetPendantByIdsResp) GetData() *RoomPendantGetPendantByIdsResp_PendantInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomPendantGetPendantByIdsResp_Result struct {
	//
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	//
	ExpireTime int64 `protobuf:"varint,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time"`
	//
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	//
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value"`
	//
	BgColor string `protobuf:"bytes,5,opt,name=bg_color,json=bgColor,proto3" json:"bg_color"`
	//
	BgPic string `protobuf:"bytes,6,opt,name=bg_pic,json=bgPic,proto3" json:"bg_pic"`
}

func (m *RoomPendantGetPendantByIdsResp_Result) Reset()         { *m = RoomPendantGetPendantByIdsResp_Result{} }
func (m *RoomPendantGetPendantByIdsResp_Result) String() string { return proto.CompactTextString(m) }
func (*RoomPendantGetPendantByIdsResp_Result) ProtoMessage()    {}
func (*RoomPendantGetPendantByIdsResp_Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomPendant_d67ae1cee35536b2, []int{1, 0}
}
func (m *RoomPendantGetPendantByIdsResp_Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomPendantGetPendantByIdsResp_Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomPendantGetPendantByIdsResp_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomPendantGetPendantByIdsResp_Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomPendantGetPendantByIdsResp_Result.Merge(dst, src)
}
func (m *RoomPendantGetPendantByIdsResp_Result) XXX_Size() int {
	return m.Size()
}
func (m *RoomPendantGetPendantByIdsResp_Result) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomPendantGetPendantByIdsResp_Result.DiscardUnknown(m)
}

var xxx_messageInfo_RoomPendantGetPendantByIdsResp_Result proto.InternalMessageInfo

func (m *RoomPendantGetPendantByIdsResp_Result) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RoomPendantGetPendantByIdsResp_Result) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *RoomPendantGetPendantByIdsResp_Result) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoomPendantGetPendantByIdsResp_Result) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *RoomPendantGetPendantByIdsResp_Result) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

func (m *RoomPendantGetPendantByIdsResp_Result) GetBgPic() string {
	if m != nil {
		return m.BgPic
	}
	return ""
}

type RoomPendantGetPendantByIdsResp_PendantInfo struct {
	//
	Result map[int64]*RoomPendantGetPendantByIdsResp_Result `protobuf:"bytes,1,rep,name=result" json:"result" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RoomPendantGetPendantByIdsResp_PendantInfo) Reset() {
	*m = RoomPendantGetPendantByIdsResp_PendantInfo{}
}
func (m *RoomPendantGetPendantByIdsResp_PendantInfo) String() string {
	return proto.CompactTextString(m)
}
func (*RoomPendantGetPendantByIdsResp_PendantInfo) ProtoMessage() {}
func (*RoomPendantGetPendantByIdsResp_PendantInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomPendant_d67ae1cee35536b2, []int{1, 1}
}
func (m *RoomPendantGetPendantByIdsResp_PendantInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomPendantGetPendantByIdsResp_PendantInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomPendantGetPendantByIdsResp_PendantInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomPendantGetPendantByIdsResp_PendantInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomPendantGetPendantByIdsResp_PendantInfo.Merge(dst, src)
}
func (m *RoomPendantGetPendantByIdsResp_PendantInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoomPendantGetPendantByIdsResp_PendantInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomPendantGetPendantByIdsResp_PendantInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoomPendantGetPendantByIdsResp_PendantInfo proto.InternalMessageInfo

func (m *RoomPendantGetPendantByIdsResp_PendantInfo) GetResult() map[int64]*RoomPendantGetPendantByIdsResp_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*RoomPendantGetPendantByIdsReq)(nil), "room.v1.RoomPendantGetPendantByIdsReq")
	proto.RegisterType((*RoomPendantGetPendantByIdsResp)(nil), "room.v1.RoomPendantGetPendantByIdsResp")
	proto.RegisterType((*RoomPendantGetPendantByIdsResp_Result)(nil), "room.v1.RoomPendantGetPendantByIdsResp.Result")
	proto.RegisterType((*RoomPendantGetPendantByIdsResp_PendantInfo)(nil), "room.v1.RoomPendantGetPendantByIdsResp.PendantInfo")
	proto.RegisterMapType((map[int64]*RoomPendantGetPendantByIdsResp_Result)(nil), "room.v1.RoomPendantGetPendantByIdsResp.PendantInfo.ResultEntry")
}
func (m *RoomPendantGetPendantByIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomPendantGetPendantByIdsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA2 := make([]byte, len(m.Ids)*10)
		var j1 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoomPendant(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoomPendant(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Position != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoomPendant(dAtA, i, uint64(m.Position))
	}
	return i, nil
}

func (m *RoomPendantGetPendantByIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomPendantGetPendantByIdsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomPendant(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoomPendant(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoomPendant(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *RoomPendantGetPendantByIdsResp_Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomPendantGetPendantByIdsResp_Result) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoomPendant(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.ExpireTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoomPendant(dAtA, i, uint64(m.ExpireTime))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoomPendant(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRoomPendant(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if len(m.BgColor) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRoomPendant(dAtA, i, uint64(len(m.BgColor)))
		i += copy(dAtA[i:], m.BgColor)
	}
	if len(m.BgPic) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRoomPendant(dAtA, i, uint64(len(m.BgPic)))
		i += copy(dAtA[i:], m.BgPic)
	}
	return i, nil
}

func (m *RoomPendantGetPendantByIdsResp_PendantInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomPendantGetPendantByIdsResp_PendantInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for k, _ := range m.Result {
			dAtA[i] = 0xa
			i++
			v := m.Result[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovRoomPendant(uint64(msgSize))
			}
			mapSize := 1 + sovRoomPendant(uint64(k)) + msgSize
			i = encodeVarintRoomPendant(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintRoomPendant(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRoomPendant(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	return i, nil
}

func encodeVarintRoomPendant(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RoomPendantGetPendantByIdsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovRoomPendant(uint64(e))
		}
		n += 1 + sovRoomPendant(uint64(l)) + l
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRoomPendant(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovRoomPendant(uint64(m.Position))
	}
	return n
}

func (m *RoomPendantGetPendantByIdsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoomPendant(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRoomPendant(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRoomPendant(uint64(l))
	}
	return n
}

func (m *RoomPendantGetPendantByIdsResp_Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRoomPendant(uint64(l))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovRoomPendant(uint64(m.ExpireTime))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRoomPendant(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRoomPendant(uint64(l))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovRoomPendant(uint64(l))
	}
	l = len(m.BgPic)
	if l > 0 {
		n += 1 + l + sovRoomPendant(uint64(l))
	}
	return n
}

func (m *RoomPendantGetPendantByIdsResp_PendantInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Result) > 0 {
		for k, v := range m.Result {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRoomPendant(uint64(l))
			}
			mapEntrySize := 1 + sovRoomPendant(uint64(k)) + l
			n += mapEntrySize + 1 + sovRoomPendant(uint64(mapEntrySize))
		}
	}
	return n
}

func sovRoomPendant(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRoomPendant(x uint64) (n int) {
	return sovRoomPendant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoomPendantGetPendantByIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomPendant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomPendantGetPendantByIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomPendantGetPendantByIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoomPendant
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoomPendant
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRoomPendant
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoomPendant
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomPendant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomPendant
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomPendant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomPendant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomPendant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomPendantGetPendantByIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomPendant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomPendantGetPendantByIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomPendantGetPendantByIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomPendant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomPendant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomPendant
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomPendant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomPendant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &RoomPendantGetPendantByIdsResp_PendantInfo{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomPendant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomPendant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomPendantGetPendantByIdsResp_Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomPendant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomPendant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomPendant
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomPendant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomPendant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomPendant
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomPendant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomPendant
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomPendant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomPendant
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomPendant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomPendant
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomPendant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomPendant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomPendantGetPendantByIdsResp_PendantInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomPendant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendantInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendantInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomPendant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomPendant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = make(map[int64]*RoomPendantGetPendantByIdsResp_Result)
			}
			var mapkey int64
			var mapvalue *RoomPendantGetPendantByIdsResp_Result
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoomPendant
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoomPendant
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoomPendant
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRoomPendant
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthRoomPendant
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RoomPendantGetPendantByIdsResp_Result{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRoomPendant(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRoomPendant
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Result[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomPendant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomPendant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoomPendant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoomPendant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomPendant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomPendant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRoomPendant
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRoomPendant
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRoomPendant(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRoomPendant = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoomPendant   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/RoomPendant.proto", fileDescriptor_RoomPendant_d67ae1cee35536b2) }

var fileDescriptor_RoomPendant_d67ae1cee35536b2 = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xbd, 0x8e, 0xd3, 0x4c,
	0x14, 0xcd, 0xc4, 0xf9, 0xdb, 0xeb, 0x4f, 0xda, 0x4f, 0x23, 0x0a, 0x13, 0x2d, 0x76, 0xd8, 0x82,
	0x4d, 0x83, 0x43, 0xb2, 0x0d, 0xa2, 0x41, 0x32, 0x20, 0xb4, 0xdd, 0x32, 0xa2, 0xa2, 0x89, 0x62,
	0x67, 0xd6, 0x8c, 0x88, 0x3d, 0x8e, 0x3d, 0x89, 0x48, 0xcb, 0x13, 0xf0, 0x58, 0x94, 0x5b, 0xd2,
	0x60, 0xa1, 0xa4, 0x73, 0xc9, 0x13, 0xa0, 0xb9, 0xe3, 0x8d, 0x82, 0x84, 0x56, 0x11, 0xcd, 0x9d,
	0x7b, 0xce, 0xcc, 0x9c, 0x7b, 0x72, 0x26, 0x86, 0x07, 0xeb, 0xf1, 0x88, 0x49, 0x99, 0x5c, 0xf3,
	0x74, 0x3e, 0x4b, 0x95, 0x9f, 0xe5, 0x52, 0x49, 0xda, 0xcd, 0xa5, 0x4c, 0xfc, 0xf5, 0xb8, 0xff,
	0x34, 0x16, 0xea, 0xe3, 0x2a, 0xf4, 0x23, 0x99, 0x8c, 0x62, 0x19, 0xcb, 0x11, 0xee, 0x87, 0xab,
	0x1b, 0x44, 0x08, 0xb0, 0x33, 0xf7, 0xce, 0xbf, 0x10, 0x78, 0x74, 0xa0, 0xf6, 0x96, 0xab, 0xba,
	0x0b, 0x36, 0x57, 0xf3, 0x82, 0xf1, 0x25, 0x7d, 0x08, 0x96, 0x98, 0x17, 0x0e, 0x19, 0x58, 0x43,
	0x2b, 0xe8, 0x56, 0xa5, 0xa7, 0x21, 0xd3, 0x85, 0x9e, 0x41, 0x4b, 0x6d, 0x32, 0xee, 0x34, 0x07,
	0x64, 0x78, 0x12, 0xf4, 0xaa, 0xd2, 0x43, 0xcc, 0xb0, 0xd2, 0x21, 0xf4, 0x32, 0x59, 0x08, 0x25,
	0x64, 0xea, 0x58, 0x03, 0x32, 0xb4, 0x82, 0xff, 0xaa, 0xd2, 0xdb, 0x73, 0x6c, 0xdf, 0x9d, 0xff,
	0x6a, 0x81, 0x7b, 0x9f, 0x89, 0x22, 0xd3, 0xa3, 0x22, 0x39, 0xe7, 0x0e, 0x41, 0x21, 0x1c, 0xa5,
	0x31, 0xc3, 0xaa, 0x3d, 0x26, 0x45, 0x5c, 0xfb, 0x40, 0x8f, 0x49, 0x11, 0x33, 0x5d, 0xe8, 0x3b,
	0x68, 0xcd, 0x67, 0x6a, 0x86, 0x0e, 0xec, 0xc9, 0xa5, 0x5f, 0xe7, 0xe4, 0xdf, 0x3f, 0xcf, 0xaf,
	0x89, 0xab, 0xf4, 0x46, 0x9a, 0x69, 0x5a, 0x84, 0x61, 0xed, 0xef, 0x08, 0x74, 0x18, 0x2f, 0x56,
	0x0b, 0xb5, 0x4f, 0x80, 0xfc, 0x35, 0x81, 0x67, 0x60, 0xf3, 0xcf, 0x99, 0xc8, 0xf9, 0x54, 0x89,
	0xc4, 0xc4, 0x64, 0x05, 0xa7, 0x55, 0xe9, 0x1d, 0xd2, 0x0c, 0x0c, 0x78, 0x2f, 0x12, 0xae, 0xf5,
	0xd2, 0x59, 0xc2, 0xd1, 0x6d, 0xad, 0xa7, 0x31, 0xc3, 0x4a, 0x3d, 0x68, 0xaf, 0x67, 0x8b, 0x15,
	0x77, 0x5a, 0xb8, 0x7d, 0x52, 0x95, 0x9e, 0x21, 0x98, 0x59, 0xe8, 0x05, 0xf4, 0xc2, 0x78, 0x1a,
	0xc9, 0x85, 0xcc, 0x9d, 0x36, 0x9e, 0xc1, 0xc8, 0xef, 0x38, 0xd6, 0x0d, 0xe3, 0x57, 0xba, 0xa1,
	0x8f, 0xa1, 0x13, 0xc6, 0xd3, 0x4c, 0x44, 0x4e, 0x07, 0x8f, 0x41, 0x55, 0x7a, 0x35, 0xc3, 0xda,
	0x61, 0x7c, 0x2d, 0xa2, 0xfe, 0x0f, 0x02, 0xf6, 0x41, 0x0a, 0x34, 0x82, 0x4e, 0x8e, 0x3f, 0x1a,
	0xff, 0x0a, 0xf6, 0xe4, 0xe5, 0x3f, 0x44, 0xe9, 0x9b, 0xd8, 0xde, 0xa4, 0x2a, 0xdf, 0x98, 0x99,
	0x46, 0x92, 0xd5, 0x6b, 0x5f, 0x80, 0x7d, 0x70, 0x84, 0xfe, 0x0f, 0xd6, 0x27, 0xbe, 0x31, 0x8f,
	0xce, 0x74, 0x4b, 0x5f, 0xdf, 0x45, 0xd0, 0xc4, 0xf7, 0xf4, 0x8f, 0x35, 0x61, 0x54, 0xeb, 0x9c,
	0x5e, 0x34, 0x9f, 0x93, 0xc9, 0x12, 0xec, 0x83, 0x3b, 0x34, 0x84, 0xd3, 0xf8, 0xcf, 0x7b, 0xf4,
	0xc9, 0x51, 0xe2, 0xcb, 0xfe, 0xc5, 0x91, 0x26, 0x82, 0xb3, 0x6f, 0x5b, 0x97, 0xdc, 0x6e, 0x5d,
	0xf2, 0x73, 0xeb, 0x92, 0xaf, 0x3b, 0xb7, 0x71, 0xbb, 0x73, 0x1b, 0xdf, 0x77, 0x6e, 0xe3, 0x43,
	0x73, 0x3d, 0x0e, 0x3b, 0xf8, 0x45, 0x5e, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x01, 0x55, 0xa6,
	0xab, 0xe1, 0x03, 0x00, 0x00,
}
