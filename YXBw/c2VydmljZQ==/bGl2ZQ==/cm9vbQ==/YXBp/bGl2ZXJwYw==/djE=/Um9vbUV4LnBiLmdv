// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/RoomEx.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RoomExGetRoundPlayVideoReq struct {
	// 房间id
	RoomId int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	// 播放类型 flv
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`
}

func (m *RoomExGetRoundPlayVideoReq) Reset()         { *m = RoomExGetRoundPlayVideoReq{} }
func (m *RoomExGetRoundPlayVideoReq) String() string { return proto.CompactTextString(m) }
func (*RoomExGetRoundPlayVideoReq) ProtoMessage()    {}
func (*RoomExGetRoundPlayVideoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomEx_a08d5abe621d8493, []int{0}
}
func (m *RoomExGetRoundPlayVideoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomExGetRoundPlayVideoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomExGetRoundPlayVideoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomExGetRoundPlayVideoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomExGetRoundPlayVideoReq.Merge(dst, src)
}
func (m *RoomExGetRoundPlayVideoReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomExGetRoundPlayVideoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomExGetRoundPlayVideoReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomExGetRoundPlayVideoReq proto.InternalMessageInfo

func (m *RoomExGetRoundPlayVideoReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoomExGetRoundPlayVideoReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type RoomExGetRoundPlayVideoResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *RoomExGetRoundPlayVideoResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *RoomExGetRoundPlayVideoResp) Reset()         { *m = RoomExGetRoundPlayVideoResp{} }
func (m *RoomExGetRoundPlayVideoResp) String() string { return proto.CompactTextString(m) }
func (*RoomExGetRoundPlayVideoResp) ProtoMessage()    {}
func (*RoomExGetRoundPlayVideoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomEx_a08d5abe621d8493, []int{1}
}
func (m *RoomExGetRoundPlayVideoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomExGetRoundPlayVideoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomExGetRoundPlayVideoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomExGetRoundPlayVideoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomExGetRoundPlayVideoResp.Merge(dst, src)
}
func (m *RoomExGetRoundPlayVideoResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomExGetRoundPlayVideoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomExGetRoundPlayVideoResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomExGetRoundPlayVideoResp proto.InternalMessageInfo

func (m *RoomExGetRoundPlayVideoResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RoomExGetRoundPlayVideoResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RoomExGetRoundPlayVideoResp) GetData() *RoomExGetRoundPlayVideoResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomExGetRoundPlayVideoResp_Data struct {
	// 分p id
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid"`
	// 播放时间
	PlayTime int64 `protobuf:"varint,2,opt,name=play_time,json=playTime,proto3" json:"play_time"`
	// 轮播序号
	Sequence int64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence"`
	// av号
	Aid int64 `protobuf:"varint,4,opt,name=aid,proto3" json:"aid"`
	// 标题
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title"`
	// 稿件序号
	Pid int64 `protobuf:"varint,6,opt,name=pid,proto3" json:"pid"`
	// 播放地址
	PlayUrl string `protobuf:"bytes,7,opt,name=play_url,json=playUrl,proto3" json:"play_url"`
}

func (m *RoomExGetRoundPlayVideoResp_Data) Reset()         { *m = RoomExGetRoundPlayVideoResp_Data{} }
func (m *RoomExGetRoundPlayVideoResp_Data) String() string { return proto.CompactTextString(m) }
func (*RoomExGetRoundPlayVideoResp_Data) ProtoMessage()    {}
func (*RoomExGetRoundPlayVideoResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomEx_a08d5abe621d8493, []int{1, 0}
}
func (m *RoomExGetRoundPlayVideoResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomExGetRoundPlayVideoResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomExGetRoundPlayVideoResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomExGetRoundPlayVideoResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomExGetRoundPlayVideoResp_Data.Merge(dst, src)
}
func (m *RoomExGetRoundPlayVideoResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *RoomExGetRoundPlayVideoResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomExGetRoundPlayVideoResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_RoomExGetRoundPlayVideoResp_Data proto.InternalMessageInfo

func (m *RoomExGetRoundPlayVideoResp_Data) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *RoomExGetRoundPlayVideoResp_Data) GetPlayTime() int64 {
	if m != nil {
		return m.PlayTime
	}
	return 0
}

func (m *RoomExGetRoundPlayVideoResp_Data) GetSequence() int64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *RoomExGetRoundPlayVideoResp_Data) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *RoomExGetRoundPlayVideoResp_Data) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RoomExGetRoundPlayVideoResp_Data) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *RoomExGetRoundPlayVideoResp_Data) GetPlayUrl() string {
	if m != nil {
		return m.PlayUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*RoomExGetRoundPlayVideoReq)(nil), "room.v1.RoomExGetRoundPlayVideoReq")
	proto.RegisterType((*RoomExGetRoundPlayVideoResp)(nil), "room.v1.RoomExGetRoundPlayVideoResp")
	proto.RegisterType((*RoomExGetRoundPlayVideoResp_Data)(nil), "room.v1.RoomExGetRoundPlayVideoResp.Data")
}
func (m *RoomExGetRoundPlayVideoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomExGetRoundPlayVideoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomEx(dAtA, i, uint64(m.RoomId))
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoomEx(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	return i, nil
}

func (m *RoomExGetRoundPlayVideoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomExGetRoundPlayVideoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomEx(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoomEx(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoomEx(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *RoomExGetRoundPlayVideoResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomExGetRoundPlayVideoResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomEx(dAtA, i, uint64(m.Cid))
	}
	if m.PlayTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoomEx(dAtA, i, uint64(m.PlayTime))
	}
	if m.Sequence != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoomEx(dAtA, i, uint64(m.Sequence))
	}
	if m.Aid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoomEx(dAtA, i, uint64(m.Aid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRoomEx(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Pid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRoomEx(dAtA, i, uint64(m.Pid))
	}
	if len(m.PlayUrl) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRoomEx(dAtA, i, uint64(len(m.PlayUrl)))
		i += copy(dAtA[i:], m.PlayUrl)
	}
	return i, nil
}

func encodeVarintRoomEx(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RoomExGetRoundPlayVideoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovRoomEx(uint64(m.RoomId))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRoomEx(uint64(l))
	}
	return n
}

func (m *RoomExGetRoundPlayVideoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoomEx(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRoomEx(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRoomEx(uint64(l))
	}
	return n
}

func (m *RoomExGetRoundPlayVideoResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cid != 0 {
		n += 1 + sovRoomEx(uint64(m.Cid))
	}
	if m.PlayTime != 0 {
		n += 1 + sovRoomEx(uint64(m.PlayTime))
	}
	if m.Sequence != 0 {
		n += 1 + sovRoomEx(uint64(m.Sequence))
	}
	if m.Aid != 0 {
		n += 1 + sovRoomEx(uint64(m.Aid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRoomEx(uint64(l))
	}
	if m.Pid != 0 {
		n += 1 + sovRoomEx(uint64(m.Pid))
	}
	l = len(m.PlayUrl)
	if l > 0 {
		n += 1 + l + sovRoomEx(uint64(l))
	}
	return n
}

func sovRoomEx(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRoomEx(x uint64) (n int) {
	return sovRoomEx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoomExGetRoundPlayVideoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomEx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomExGetRoundPlayVideoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomExGetRoundPlayVideoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomEx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomEx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomEx
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomEx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomEx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomExGetRoundPlayVideoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomEx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomExGetRoundPlayVideoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomExGetRoundPlayVideoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomEx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomEx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomEx
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomEx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomEx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &RoomExGetRoundPlayVideoResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomEx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomEx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomExGetRoundPlayVideoResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomEx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomEx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayTime", wireType)
			}
			m.PlayTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomEx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomEx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomEx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomEx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomEx
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomEx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomEx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomEx
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomEx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomEx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoomEx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoomEx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomEx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomEx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRoomEx
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRoomEx
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRoomEx(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRoomEx = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoomEx   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/RoomEx.proto", fileDescriptor_RoomEx_a08d5abe621d8493) }

var fileDescriptor_RoomEx_a08d5abe621d8493 = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0xab, 0xd3, 0x40,
	0x14, 0xed, 0xbc, 0xe4, 0x25, 0xed, 0x3c, 0x45, 0x9c, 0x55, 0x8c, 0x8f, 0xa4, 0x3c, 0x1f, 0x18,
	0x05, 0x53, 0xfa, 0xfc, 0x07, 0x41, 0x79, 0xb8, 0x93, 0x41, 0x5d, 0xb8, 0xb0, 0x4e, 0x33, 0x63,
	0x3a, 0x90, 0x74, 0xd2, 0x74, 0x52, 0xec, 0xbf, 0x70, 0xeb, 0x3f, 0x72, 0xd9, 0xa5, 0xab, 0x20,
	0xed, 0x2e, 0x7f, 0xc0, 0xad, 0xcc, 0x4d, 0x3f, 0x40, 0xf0, 0x63, 0x73, 0x73, 0xcf, 0x19, 0xce,
	0x3d, 0xf7, 0x1e, 0x82, 0xef, 0xad, 0xc6, 0x23, 0xaa, 0x54, 0xf1, 0xf2, 0x73, 0x5c, 0x56, 0x4a,
	0x2b, 0xe2, 0x56, 0x4a, 0x15, 0xf1, 0x6a, 0xec, 0x3f, 0xcb, 0xa4, 0x9e, 0xd5, 0xd3, 0x38, 0x55,
	0xc5, 0x28, 0x53, 0x99, 0x1a, 0xc1, 0xfb, 0xb4, 0xfe, 0x04, 0x08, 0x00, 0x74, 0x9d, 0xee, 0xea,
	0x23, 0xf6, 0xbb, 0x39, 0xb7, 0x42, 0x53, 0x55, 0xcf, 0xf9, 0xeb, 0x9c, 0xad, 0xdf, 0x49, 0x2e,
	0x14, 0x15, 0x0b, 0x72, 0x8d, 0x61, 0xee, 0x44, 0x72, 0x0f, 0x0d, 0x51, 0x64, 0x25, 0x17, 0x6d,
	0x13, 0x1e, 0x28, 0xea, 0x98, 0xe6, 0x15, 0x27, 0x97, 0xd8, 0xd6, 0xeb, 0x52, 0x78, 0x67, 0x43,
	0x14, 0x0d, 0x92, 0x7e, 0xdb, 0x84, 0x80, 0x29, 0xd4, 0xab, 0xaf, 0x16, 0x7e, 0xf8, 0x47, 0x8b,
	0x65, 0x69, 0xd4, 0xa9, 0xe2, 0x62, 0x6f, 0x00, 0x6a, 0x83, 0x29, 0x54, 0xf2, 0x00, 0x5b, 0xc5,
	0x32, 0xdb, 0x8f, 0x76, 0xdb, 0x26, 0x34, 0x90, 0x9a, 0x42, 0x6e, 0xb1, 0xcd, 0x99, 0x66, 0x9e,
	0x35, 0x44, 0xd1, 0xc5, 0xcd, 0x93, 0x78, 0x9f, 0x40, 0xfc, 0x17, 0xb3, 0xf8, 0x05, 0xd3, 0xac,
	0xf3, 0x30, 0x52, 0x0a, 0xd5, 0xff, 0x89, 0xb0, 0x6d, 0x1e, 0x8c, 0x59, 0x7a, 0x3c, 0x15, 0xcc,
	0x52, 0xc9, 0xa9, 0x29, 0xe4, 0x29, 0x1e, 0x94, 0x39, 0x5b, 0x4f, 0xb4, 0x2c, 0xba, 0x43, 0xad,
	0xe4, 0x6e, 0xdb, 0x84, 0x27, 0x92, 0xf6, 0x4d, 0xfb, 0x46, 0x16, 0x82, 0x44, 0xb8, 0xbf, 0x14,
	0x8b, 0x5a, 0xcc, 0x53, 0x01, 0xcb, 0x59, 0xc9, 0x9d, 0xb6, 0x09, 0x8f, 0x1c, 0x3d, 0x76, 0xc6,
	0x90, 0x49, 0xee, 0xd9, 0x27, 0x43, 0x66, 0x0c, 0x99, 0xe4, 0x24, 0xc4, 0xe7, 0x5a, 0xea, 0x5c,
	0x78, 0xe7, 0x70, 0xfa, 0xa0, 0x6d, 0xc2, 0x8e, 0xa0, 0xdd, 0xc7, 0x68, 0x4b, 0xc9, 0x3d, 0xe7,
	0xa4, 0x2d, 0x8d, 0xb6, 0x94, 0x9c, 0x3c, 0xc6, 0xb0, 0xcc, 0xa4, 0xae, 0x72, 0xcf, 0x05, 0x39,
	0x2c, 0x70, 0xe0, 0xa8, 0x6b, 0xba, 0xb7, 0x55, 0x7e, 0x33, 0xc3, 0x4e, 0x97, 0x16, 0xf9, 0x80,
	0xef, 0x67, 0xbf, 0x27, 0x46, 0x1e, 0xfd, 0x3b, 0xd3, 0x85, 0x7f, 0xfd, 0x3f, 0xc1, 0x27, 0x97,
	0xdf, 0xb6, 0x01, 0xda, 0x6c, 0x03, 0xf4, 0x63, 0x1b, 0xa0, 0x2f, 0xbb, 0xa0, 0xb7, 0xd9, 0x05,
	0xbd, 0xef, 0xbb, 0xa0, 0xf7, 0xfe, 0x6c, 0x35, 0x9e, 0x3a, 0xf0, 0x33, 0x3e, 0xff, 0x15, 0x00,
	0x00, 0xff, 0xff, 0x1a, 0xae, 0x46, 0xf4, 0xd7, 0x02, 0x00, 0x00,
}
