// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/grpc/v2/user_resource.proto

package v2

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 请求创建资源
type AddReq struct {
	// 资源类型
	ResType int32 `protobuf:"varint,1,opt,name=res_type,json=resType,proto3" json:"res_type,omitempty" form:"res_type" validate:"required"`
	// 名称
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" form:"title" validate:"required"`
	// URL
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty" form:"url" validate:"required"`
	// 权重
	Weight int32 `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty" form:"weight" validate:"required"`
	// 创建人
	Creator              string   `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty" form:"creator" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddReq) Reset()         { *m = AddReq{} }
func (m *AddReq) String() string { return proto.CompactTextString(m) }
func (*AddReq) ProtoMessage()    {}
func (*AddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_resource_6ff5ea7f3065470a, []int{0}
}
func (m *AddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddReq.Merge(dst, src)
}
func (m *AddReq) XXX_Size() int {
	return m.Size()
}
func (m *AddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddReq proto.InternalMessageInfo

func (m *AddReq) GetResType() int32 {
	if m != nil {
		return m.ResType
	}
	return 0
}

func (m *AddReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AddReq) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *AddReq) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *AddReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// 返回创建结果
type AddResp struct {
	// ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 资源类型
	ResType int32 `protobuf:"varint,2,opt,name=res_type,json=resType,proto3" json:"res_type"`
	// 资源ID
	CustomId int32 `protobuf:"varint,3,opt,name=custom_id,json=customId,proto3" json:"custom_id"`
	// 名称
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	// URL
	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url"`
	// 权重
	Weight int32 `protobuf:"varint,6,opt,name=weight,proto3" json:"weight"`
	// 创建人
	Creator string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator"`
	// "状态1.上线中2.下线"
	Status int32 `protobuf:"varint,8,opt,name=status,proto3" json:"status"`
	// 创建时刻
	Ctime string `protobuf:"bytes,9,opt,name=ctime,proto3" json:"ctime"`
	// 修改时刻
	Mtime                string   `protobuf:"bytes,10,opt,name=mtime,proto3" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddResp) Reset()         { *m = AddResp{} }
func (m *AddResp) String() string { return proto.CompactTextString(m) }
func (*AddResp) ProtoMessage()    {}
func (*AddResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_resource_6ff5ea7f3065470a, []int{1}
}
func (m *AddResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddResp.Merge(dst, src)
}
func (m *AddResp) XXX_Size() int {
	return m.Size()
}
func (m *AddResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddResp proto.InternalMessageInfo

func (m *AddResp) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AddResp) GetResType() int32 {
	if m != nil {
		return m.ResType
	}
	return 0
}

func (m *AddResp) GetCustomId() int32 {
	if m != nil {
		return m.CustomId
	}
	return 0
}

func (m *AddResp) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AddResp) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *AddResp) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *AddResp) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *AddResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *AddResp) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *AddResp) GetMtime() string {
	if m != nil {
		return m.Mtime
	}
	return ""
}

// 请求编辑资源
type EditReq struct {
	// 资源类型
	ResType int32 `protobuf:"varint,1,opt,name=res_type,json=resType,proto3" json:"res_type,omitempty" form:"res_type" validate:"required"`
	// 资源ID
	CustomId int32 `protobuf:"varint,2,opt,name=custom_id,json=customId,proto3" json:"custom_id,omitempty" form:"custom_id" validate:"required"`
	// 名称
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty" form:"title"`
	// URL
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty" form:"url"`
	// 权重
	Weight               int32    `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty" form:"weight"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EditReq) Reset()         { *m = EditReq{} }
func (m *EditReq) String() string { return proto.CompactTextString(m) }
func (*EditReq) ProtoMessage()    {}
func (*EditReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_resource_6ff5ea7f3065470a, []int{2}
}
func (m *EditReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EditReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditReq.Merge(dst, src)
}
func (m *EditReq) XXX_Size() int {
	return m.Size()
}
func (m *EditReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EditReq.DiscardUnknown(m)
}

var xxx_messageInfo_EditReq proto.InternalMessageInfo

func (m *EditReq) GetResType() int32 {
	if m != nil {
		return m.ResType
	}
	return 0
}

func (m *EditReq) GetCustomId() int32 {
	if m != nil {
		return m.CustomId
	}
	return 0
}

func (m *EditReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EditReq) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *EditReq) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// 返回编辑结果
type EditResp struct {
	// ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 资源类型
	ResType int32 `protobuf:"varint,2,opt,name=res_type,json=resType,proto3" json:"res_type"`
	// 资源ID
	CustomId int32 `protobuf:"varint,3,opt,name=custom_id,json=customId,proto3" json:"custom_id"`
	// 名称
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	// URL
	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url"`
	// 权重
	Weight int32 `protobuf:"varint,6,opt,name=weight,proto3" json:"weight"`
	// 创建人
	Creator string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator"`
	// "状态1.上线中2.下线"
	Status int32 `protobuf:"varint,8,opt,name=status,proto3" json:"status"`
	// 创建时刻
	Ctime string `protobuf:"bytes,9,opt,name=ctime,proto3" json:"ctime"`
	// 修改时刻
	Mtime                string   `protobuf:"bytes,10,opt,name=mtime,proto3" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EditResp) Reset()         { *m = EditResp{} }
func (m *EditResp) String() string { return proto.CompactTextString(m) }
func (*EditResp) ProtoMessage()    {}
func (*EditResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_resource_6ff5ea7f3065470a, []int{3}
}
func (m *EditResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EditResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditResp.Merge(dst, src)
}
func (m *EditResp) XXX_Size() int {
	return m.Size()
}
func (m *EditResp) XXX_DiscardUnknown() {
	xxx_messageInfo_EditResp.DiscardUnknown(m)
}

var xxx_messageInfo_EditResp proto.InternalMessageInfo

func (m *EditResp) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EditResp) GetResType() int32 {
	if m != nil {
		return m.ResType
	}
	return 0
}

func (m *EditResp) GetCustomId() int32 {
	if m != nil {
		return m.CustomId
	}
	return 0
}

func (m *EditResp) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EditResp) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *EditResp) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *EditResp) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EditResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *EditResp) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *EditResp) GetMtime() string {
	if m != nil {
		return m.Mtime
	}
	return ""
}

// 请求单个资源
type QueryReq struct {
	// 资源类型
	ResType int32 `protobuf:"varint,1,opt,name=res_type,json=resType,proto3" json:"res_type,omitempty" form:"res_type" validate:"required"`
	// 资源ID
	CustomId             int32    `protobuf:"varint,2,opt,name=custom_id,json=customId,proto3" json:"custom_id,omitempty" form:"custom_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryReq) Reset()         { *m = QueryReq{} }
func (m *QueryReq) String() string { return proto.CompactTextString(m) }
func (*QueryReq) ProtoMessage()    {}
func (*QueryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_resource_6ff5ea7f3065470a, []int{4}
}
func (m *QueryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QueryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReq.Merge(dst, src)
}
func (m *QueryReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReq proto.InternalMessageInfo

func (m *QueryReq) GetResType() int32 {
	if m != nil {
		return m.ResType
	}
	return 0
}

func (m *QueryReq) GetCustomId() int32 {
	if m != nil {
		return m.CustomId
	}
	return 0
}

// 返回单个资源
type QueryResp struct {
	// ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 资源类型
	ResType int32 `protobuf:"varint,2,opt,name=res_type,json=resType,proto3" json:"res_type"`
	// 资源ID
	CustomId int32 `protobuf:"varint,3,opt,name=custom_id,json=customId,proto3" json:"custom_id"`
	// 名称
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	// URL
	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url"`
	// 权重
	Weight int32 `protobuf:"varint,6,opt,name=weight,proto3" json:"weight"`
	// 创建人
	Creator string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator"`
	// "状态1.上线中2.下线"
	Status int32 `protobuf:"varint,8,opt,name=status,proto3" json:"status"`
	// 创建时刻
	Ctime string `protobuf:"bytes,9,opt,name=ctime,proto3" json:"ctime"`
	// 修改时刻
	Mtime                string   `protobuf:"bytes,10,opt,name=mtime,proto3" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryResp) Reset()         { *m = QueryResp{} }
func (m *QueryResp) String() string { return proto.CompactTextString(m) }
func (*QueryResp) ProtoMessage()    {}
func (*QueryResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_resource_6ff5ea7f3065470a, []int{5}
}
func (m *QueryResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QueryResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResp.Merge(dst, src)
}
func (m *QueryResp) XXX_Size() int {
	return m.Size()
}
func (m *QueryResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResp proto.InternalMessageInfo

func (m *QueryResp) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryResp) GetResType() int32 {
	if m != nil {
		return m.ResType
	}
	return 0
}

func (m *QueryResp) GetCustomId() int32 {
	if m != nil {
		return m.CustomId
	}
	return 0
}

func (m *QueryResp) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *QueryResp) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *QueryResp) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *QueryResp) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *QueryResp) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *QueryResp) GetMtime() string {
	if m != nil {
		return m.Mtime
	}
	return ""
}

// 请求资源列表
type ListReq struct {
	// 资源类型
	ResType int32 `protobuf:"varint,1,opt,name=res_type,json=resType,proto3" json:"res_type,omitempty" form:"res_type" validate:"required"`
	// 页码
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty" form:"page"`
	// 每页数据量
	PageSize             int32    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" form:"page_size"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListReq) Reset()         { *m = ListReq{} }
func (m *ListReq) String() string { return proto.CompactTextString(m) }
func (*ListReq) ProtoMessage()    {}
func (*ListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_resource_6ff5ea7f3065470a, []int{6}
}
func (m *ListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReq.Merge(dst, src)
}
func (m *ListReq) XXX_Size() int {
	return m.Size()
}
func (m *ListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListReq proto.InternalMessageInfo

func (m *ListReq) GetResType() int32 {
	if m != nil {
		return m.ResType
	}
	return 0
}

func (m *ListReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// 返回资源列表
type ListResp struct {
	CurrentPage          int32            `protobuf:"varint,1,opt,name=currentPage,proto3" json:"currentPage"`
	TotalCount           int32            `protobuf:"varint,2,opt,name=totalCount,proto3" json:"totalCount"`
	List                 []*ListResp_List `protobuf:"bytes,3,rep,name=list" json:"list"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListResp) Reset()         { *m = ListResp{} }
func (m *ListResp) String() string { return proto.CompactTextString(m) }
func (*ListResp) ProtoMessage()    {}
func (*ListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_resource_6ff5ea7f3065470a, []int{7}
}
func (m *ListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResp.Merge(dst, src)
}
func (m *ListResp) XXX_Size() int {
	return m.Size()
}
func (m *ListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListResp proto.InternalMessageInfo

func (m *ListResp) GetCurrentPage() int32 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *ListResp) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListResp) GetList() []*ListResp_List {
	if m != nil {
		return m.List
	}
	return nil
}

type ListResp_List struct {
	// ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 资源类型
	ResType int32 `protobuf:"varint,2,opt,name=res_type,json=resType,proto3" json:"res_type"`
	// 资源ID
	CustomId int32 `protobuf:"varint,3,opt,name=custom_id,json=customId,proto3" json:"custom_id"`
	// 名称
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	// URL
	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url"`
	// 权重
	Weight int32 `protobuf:"varint,6,opt,name=weight,proto3" json:"weight"`
	// 创建人
	Creator string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator"`
	// "状态1.上线中2.下线"
	Status int32 `protobuf:"varint,8,opt,name=status,proto3" json:"status"`
	// 创建时刻
	Ctime string `protobuf:"bytes,9,opt,name=ctime,proto3" json:"ctime"`
	// 修改时刻
	Mtime                string   `protobuf:"bytes,10,opt,name=mtime,proto3" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListResp_List) Reset()         { *m = ListResp_List{} }
func (m *ListResp_List) String() string { return proto.CompactTextString(m) }
func (*ListResp_List) ProtoMessage()    {}
func (*ListResp_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_resource_6ff5ea7f3065470a, []int{7, 0}
}
func (m *ListResp_List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResp_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResp_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListResp_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResp_List.Merge(dst, src)
}
func (m *ListResp_List) XXX_Size() int {
	return m.Size()
}
func (m *ListResp_List) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResp_List.DiscardUnknown(m)
}

var xxx_messageInfo_ListResp_List proto.InternalMessageInfo

func (m *ListResp_List) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ListResp_List) GetResType() int32 {
	if m != nil {
		return m.ResType
	}
	return 0
}

func (m *ListResp_List) GetCustomId() int32 {
	if m != nil {
		return m.CustomId
	}
	return 0
}

func (m *ListResp_List) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ListResp_List) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ListResp_List) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *ListResp_List) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ListResp_List) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ListResp_List) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *ListResp_List) GetMtime() string {
	if m != nil {
		return m.Mtime
	}
	return ""
}

// 请求变更资源状态
type SetStatusReq struct {
	// 资源类型
	ResType int32 `protobuf:"varint,1,opt,name=res_type,json=resType,proto3" json:"res_type,omitempty" form:"res_type" validate:"required"`
	// 页码
	CustomId int32 `protobuf:"varint,2,opt,name=custom_id,json=customId,proto3" json:"custom_id,omitempty" form:"custom_id" validate:"required"`
	// 每页数据量
	Status               int32    `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty" form:"status" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetStatusReq) Reset()         { *m = SetStatusReq{} }
func (m *SetStatusReq) String() string { return proto.CompactTextString(m) }
func (*SetStatusReq) ProtoMessage()    {}
func (*SetStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_resource_6ff5ea7f3065470a, []int{8}
}
func (m *SetStatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetStatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SetStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetStatusReq.Merge(dst, src)
}
func (m *SetStatusReq) XXX_Size() int {
	return m.Size()
}
func (m *SetStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetStatusReq proto.InternalMessageInfo

func (m *SetStatusReq) GetResType() int32 {
	if m != nil {
		return m.ResType
	}
	return 0
}

func (m *SetStatusReq) GetCustomId() int32 {
	if m != nil {
		return m.CustomId
	}
	return 0
}

func (m *SetStatusReq) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// 返回变更结果
type SetStatusResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetStatusResp) Reset()         { *m = SetStatusResp{} }
func (m *SetStatusResp) String() string { return proto.CompactTextString(m) }
func (*SetStatusResp) ProtoMessage()    {}
func (*SetStatusResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_resource_6ff5ea7f3065470a, []int{9}
}
func (m *SetStatusResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetStatusResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetStatusResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SetStatusResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetStatusResp.Merge(dst, src)
}
func (m *SetStatusResp) XXX_Size() int {
	return m.Size()
}
func (m *SetStatusResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetStatusResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetStatusResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AddReq)(nil), "live.resource.v2.AddReq")
	proto.RegisterType((*AddResp)(nil), "live.resource.v2.AddResp")
	proto.RegisterType((*EditReq)(nil), "live.resource.v2.EditReq")
	proto.RegisterType((*EditResp)(nil), "live.resource.v2.EditResp")
	proto.RegisterType((*QueryReq)(nil), "live.resource.v2.QueryReq")
	proto.RegisterType((*QueryResp)(nil), "live.resource.v2.QueryResp")
	proto.RegisterType((*ListReq)(nil), "live.resource.v2.ListReq")
	proto.RegisterType((*ListResp)(nil), "live.resource.v2.ListResp")
	proto.RegisterType((*ListResp_List)(nil), "live.resource.v2.ListResp.List")
	proto.RegisterType((*SetStatusReq)(nil), "live.resource.v2.SetStatusReq")
	proto.RegisterType((*SetStatusResp)(nil), "live.resource.v2.SetStatusResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserResourceClient is the client API for UserResource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserResourceClient interface {
	// Add 添加资源接口
	Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error)
	// Edit 编辑现有资源
	Edit(ctx context.Context, in *EditReq, opts ...grpc.CallOption) (*EditResp, error)
	// Query 请求单个资源
	Query(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryResp, error)
	// List 获取资源列表
	List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
	// SetStatus 更改资源状态
	SetStatus(ctx context.Context, in *SetStatusReq, opts ...grpc.CallOption) (*SetStatusResp, error)
}

type userResourceClient struct {
	cc *grpc.ClientConn
}

func NewUserResourceClient(cc *grpc.ClientConn) UserResourceClient {
	return &userResourceClient{cc}
}

func (c *userResourceClient) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error) {
	out := new(AddResp)
	err := c.cc.Invoke(ctx, "/live.resource.v2.UserResource/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userResourceClient) Edit(ctx context.Context, in *EditReq, opts ...grpc.CallOption) (*EditResp, error) {
	out := new(EditResp)
	err := c.cc.Invoke(ctx, "/live.resource.v2.UserResource/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userResourceClient) Query(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryResp, error) {
	out := new(QueryResp)
	err := c.cc.Invoke(ctx, "/live.resource.v2.UserResource/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userResourceClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, "/live.resource.v2.UserResource/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userResourceClient) SetStatus(ctx context.Context, in *SetStatusReq, opts ...grpc.CallOption) (*SetStatusResp, error) {
	out := new(SetStatusResp)
	err := c.cc.Invoke(ctx, "/live.resource.v2.UserResource/SetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserResourceServer is the server API for UserResource service.
type UserResourceServer interface {
	// Add 添加资源接口
	Add(context.Context, *AddReq) (*AddResp, error)
	// Edit 编辑现有资源
	Edit(context.Context, *EditReq) (*EditResp, error)
	// Query 请求单个资源
	Query(context.Context, *QueryReq) (*QueryResp, error)
	// List 获取资源列表
	List(context.Context, *ListReq) (*ListResp, error)
	// SetStatus 更改资源状态
	SetStatus(context.Context, *SetStatusReq) (*SetStatusResp, error)
}

func RegisterUserResourceServer(s *grpc.Server, srv UserResourceServer) {
	s.RegisterService(&_UserResource_serviceDesc, srv)
}

func _UserResource_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResourceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.resource.v2.UserResource/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResourceServer).Add(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserResource_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResourceServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.resource.v2.UserResource/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResourceServer).Edit(ctx, req.(*EditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserResource_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResourceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.resource.v2.UserResource/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResourceServer).Query(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserResource_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResourceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.resource.v2.UserResource/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResourceServer).List(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserResource_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResourceServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.resource.v2.UserResource/SetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResourceServer).SetStatus(ctx, req.(*SetStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserResource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "live.resource.v2.UserResource",
	HandlerType: (*UserResourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _UserResource_Add_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _UserResource_Edit_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _UserResource_Query_Handler,
		},
		{
			MethodName: "List",
			Handler:    _UserResource_List_Handler,
		},
		{
			MethodName: "SetStatus",
			Handler:    _UserResource_SetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v2/user_resource.proto",
}

func (m *AddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.ResType))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.Weight))
	}
	if len(m.Creator) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Creator)))
		i += copy(dAtA[i:], m.Creator)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.Id))
	}
	if m.ResType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.ResType))
	}
	if m.CustomId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.CustomId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.Weight))
	}
	if len(m.Creator) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Creator)))
		i += copy(dAtA[i:], m.Creator)
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.Status))
	}
	if len(m.Ctime) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Ctime)))
		i += copy(dAtA[i:], m.Ctime)
	}
	if len(m.Mtime) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Mtime)))
		i += copy(dAtA[i:], m.Mtime)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EditReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.ResType))
	}
	if m.CustomId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.CustomId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.Weight))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EditResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.Id))
	}
	if m.ResType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.ResType))
	}
	if m.CustomId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.CustomId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.Weight))
	}
	if len(m.Creator) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Creator)))
		i += copy(dAtA[i:], m.Creator)
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.Status))
	}
	if len(m.Ctime) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Ctime)))
		i += copy(dAtA[i:], m.Ctime)
	}
	if len(m.Mtime) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Mtime)))
		i += copy(dAtA[i:], m.Mtime)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *QueryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.ResType))
	}
	if m.CustomId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.CustomId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *QueryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.Id))
	}
	if m.ResType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.ResType))
	}
	if m.CustomId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.CustomId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.Weight))
	}
	if len(m.Creator) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Creator)))
		i += copy(dAtA[i:], m.Creator)
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.Status))
	}
	if len(m.Ctime) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Ctime)))
		i += copy(dAtA[i:], m.Ctime)
	}
	if len(m.Mtime) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Mtime)))
		i += copy(dAtA[i:], m.Mtime)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.ResType))
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.Page))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentPage != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.CurrentPage))
	}
	if m.TotalCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.TotalCount))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintUserResource(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListResp_List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResp_List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.Id))
	}
	if m.ResType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.ResType))
	}
	if m.CustomId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.CustomId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.Weight))
	}
	if len(m.Creator) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Creator)))
		i += copy(dAtA[i:], m.Creator)
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.Status))
	}
	if len(m.Ctime) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Ctime)))
		i += copy(dAtA[i:], m.Ctime)
	}
	if len(m.Mtime) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(len(m.Mtime)))
		i += copy(dAtA[i:], m.Mtime)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetStatusReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.ResType))
	}
	if m.CustomId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.CustomId))
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUserResource(dAtA, i, uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetStatusResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetStatusResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintUserResource(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResType != 0 {
		n += 1 + sovUserResource(uint64(m.ResType))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovUserResource(uint64(m.Weight))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUserResource(uint64(m.Id))
	}
	if m.ResType != 0 {
		n += 1 + sovUserResource(uint64(m.ResType))
	}
	if m.CustomId != 0 {
		n += 1 + sovUserResource(uint64(m.CustomId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovUserResource(uint64(m.Weight))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovUserResource(uint64(m.Status))
	}
	l = len(m.Ctime)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	l = len(m.Mtime)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EditReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResType != 0 {
		n += 1 + sovUserResource(uint64(m.ResType))
	}
	if m.CustomId != 0 {
		n += 1 + sovUserResource(uint64(m.CustomId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovUserResource(uint64(m.Weight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EditResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUserResource(uint64(m.Id))
	}
	if m.ResType != 0 {
		n += 1 + sovUserResource(uint64(m.ResType))
	}
	if m.CustomId != 0 {
		n += 1 + sovUserResource(uint64(m.CustomId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovUserResource(uint64(m.Weight))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovUserResource(uint64(m.Status))
	}
	l = len(m.Ctime)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	l = len(m.Mtime)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResType != 0 {
		n += 1 + sovUserResource(uint64(m.ResType))
	}
	if m.CustomId != 0 {
		n += 1 + sovUserResource(uint64(m.CustomId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUserResource(uint64(m.Id))
	}
	if m.ResType != 0 {
		n += 1 + sovUserResource(uint64(m.ResType))
	}
	if m.CustomId != 0 {
		n += 1 + sovUserResource(uint64(m.CustomId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovUserResource(uint64(m.Weight))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovUserResource(uint64(m.Status))
	}
	l = len(m.Ctime)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	l = len(m.Mtime)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResType != 0 {
		n += 1 + sovUserResource(uint64(m.ResType))
	}
	if m.Page != 0 {
		n += 1 + sovUserResource(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovUserResource(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentPage != 0 {
		n += 1 + sovUserResource(uint64(m.CurrentPage))
	}
	if m.TotalCount != 0 {
		n += 1 + sovUserResource(uint64(m.TotalCount))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovUserResource(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListResp_List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUserResource(uint64(m.Id))
	}
	if m.ResType != 0 {
		n += 1 + sovUserResource(uint64(m.ResType))
	}
	if m.CustomId != 0 {
		n += 1 + sovUserResource(uint64(m.CustomId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovUserResource(uint64(m.Weight))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovUserResource(uint64(m.Status))
	}
	l = len(m.Ctime)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	l = len(m.Mtime)
	if l > 0 {
		n += 1 + l + sovUserResource(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetStatusReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResType != 0 {
		n += 1 + sovUserResource(uint64(m.ResType))
	}
	if m.CustomId != 0 {
		n += 1 + sovUserResource(uint64(m.CustomId))
	}
	if m.Status != 0 {
		n += 1 + sovUserResource(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetStatusResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUserResource(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUserResource(x uint64) (n int) {
	return sovUserResource(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserResource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResType", wireType)
			}
			m.ResType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserResource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserResource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserResource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResType", wireType)
			}
			m.ResType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomId", wireType)
			}
			m.CustomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserResource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserResource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserResource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResType", wireType)
			}
			m.ResType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomId", wireType)
			}
			m.CustomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserResource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserResource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserResource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResType", wireType)
			}
			m.ResType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomId", wireType)
			}
			m.CustomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserResource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserResource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserResource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResType", wireType)
			}
			m.ResType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomId", wireType)
			}
			m.CustomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserResource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserResource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserResource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResType", wireType)
			}
			m.ResType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomId", wireType)
			}
			m.CustomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserResource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserResource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserResource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResType", wireType)
			}
			m.ResType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserResource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserResource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserResource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPage", wireType)
			}
			m.CurrentPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ListResp_List{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserResource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserResource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResp_List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserResource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResType", wireType)
			}
			m.ResType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomId", wireType)
			}
			m.CustomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserResource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserResource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserResource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResType", wireType)
			}
			m.ResType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomId", wireType)
			}
			m.CustomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserResource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserResource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetStatusResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserResource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetStatusResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetStatusResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUserResource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserResource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserResource(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserResource
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserResource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUserResource
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUserResource
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUserResource(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUserResource = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserResource   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("api/grpc/v2/user_resource.proto", fileDescriptor_user_resource_6ff5ea7f3065470a)
}

var fileDescriptor_user_resource_6ff5ea7f3065470a = []byte{
	// 834 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xcd, 0x6e, 0xeb, 0x44,
	0x14, 0x96, 0x9d, 0x3f, 0xe7, 0x24, 0xbd, 0x0d, 0x23, 0x84, 0xdc, 0x20, 0x65, 0x82, 0xef, 0x5f,
	0x40, 0x22, 0xd1, 0x0d, 0xac, 0x2a, 0x55, 0xba, 0x0d, 0xea, 0x02, 0xa9, 0x0b, 0x70, 0x61, 0xc3,
	0x26, 0x4a, 0xe3, 0x69, 0x3a, 0x52, 0x52, 0xbb, 0x33, 0xe3, 0xa0, 0xf2, 0x06, 0xac, 0x58, 0xf1,
	0x08, 0x3c, 0x07, 0x5b, 0x96, 0x2c, 0xbb, 0x1a, 0x55, 0x05, 0x36, 0x5e, 0xfa, 0x09, 0x90, 0x67,
	0xfc, 0x47, 0x9b, 0xb0, 0x6a, 0xa5, 0x2e, 0xba, 0xe9, 0xcc, 0x7c, 0xe7, 0x9c, 0xf1, 0x99, 0xef,
	0xfb, 0x1c, 0x4f, 0x01, 0xcf, 0x02, 0x3a, 0x5a, 0xb0, 0x60, 0x3e, 0x5a, 0x8f, 0x47, 0x21, 0x27,
	0x6c, 0xca, 0x08, 0xf7, 0x43, 0x36, 0x27, 0xc3, 0x80, 0xf9, 0xc2, 0x47, 0x9d, 0x25, 0x5d, 0x93,
	0x61, 0x0e, 0xae, 0xc7, 0xdd, 0xcf, 0x17, 0x54, 0x9c, 0x87, 0xa7, 0xc3, 0xb9, 0xbf, 0x1a, 0x2d,
	0xfc, 0x85, 0x3f, 0x52, 0x89, 0xa7, 0xe1, 0x99, 0x5a, 0xa9, 0x85, 0x9a, 0xe9, 0x0d, 0x9c, 0xdf,
	0x4d, 0xa8, 0x1f, 0x7a, 0x9e, 0x4b, 0x2e, 0xd1, 0x04, 0x2c, 0x46, 0xf8, 0x54, 0x5c, 0x05, 0xc4,
	0x36, 0xfa, 0xc6, 0xa0, 0x36, 0x79, 0x1b, 0x4b, 0xfc, 0xf2, 0xcc, 0x67, 0xab, 0x7d, 0x27, 0x8b,
	0x38, 0xfd, 0xf5, 0x6c, 0x49, 0xbd, 0x99, 0x20, 0x09, 0x76, 0x19, 0x52, 0x46, 0x3c, 0xc7, 0x6d,
	0x30, 0xc2, 0xbf, 0xbb, 0x0a, 0x08, 0xda, 0x87, 0x9a, 0xa0, 0x62, 0x49, 0x6c, 0xb3, 0x6f, 0x0c,
	0x9a, 0x93, 0x57, 0xb1, 0xc4, 0x7d, 0xbd, 0x81, 0x82, 0x37, 0x57, 0xeb, 0x12, 0xf4, 0x25, 0x54,
	0x42, 0xb6, 0xb4, 0x2b, 0xaa, 0xd2, 0x89, 0x25, 0xee, 0xe9, 0xca, 0x90, 0x2d, 0x37, 0xd7, 0x25,
	0xe9, 0xe8, 0x00, 0xea, 0x3f, 0x12, 0xba, 0x38, 0x17, 0x76, 0x55, 0xf5, 0xfc, 0x3a, 0x96, 0xf8,
	0x13, 0x5d, 0xa8, 0xf1, 0xcd, 0xb5, 0x69, 0x11, 0x7a, 0x0f, 0x8d, 0x39, 0x23, 0x33, 0xe1, 0x33,
	0xbb, 0xa6, 0x1e, 0xfc, 0x26, 0x96, 0xd8, 0xd1, 0xf5, 0x69, 0x60, 0xcb, 0x91, 0xb3, 0xe8, 0x5f,
	0x26, 0x34, 0x14, 0x83, 0x3c, 0x40, 0x1f, 0x81, 0x49, 0xbd, 0x94, 0xbc, 0x7a, 0x24, 0xb1, 0x49,
	0x3d, 0xd7, 0xa4, 0x1e, 0x7a, 0x5b, 0xa2, 0xd6, 0x54, 0xd1, 0x76, 0x24, 0x71, 0x8e, 0x15, 0xfc,
	0x7d, 0x06, 0xcd, 0x79, 0xc8, 0x85, 0xbf, 0x9a, 0x52, 0x4f, 0x31, 0x51, 0x9b, 0xec, 0x44, 0x12,
	0x17, 0xa0, 0x6b, 0xe9, 0xe9, 0xd7, 0x1e, 0xc2, 0x19, 0xd7, 0x55, 0xd5, 0x78, 0x33, 0x92, 0x58,
	0x03, 0x19, 0xa1, 0x7b, 0x9a, 0x50, 0x7d, 0xae, 0x46, 0x24, 0x71, 0xb2, 0xd4, 0xac, 0x39, 0x39,
	0x6b, 0x75, 0xf5, 0x10, 0x88, 0x24, 0x4e, 0x91, 0x9c, 0x9a, 0xd7, 0x05, 0x35, 0x0d, 0xb5, 0x45,
	0x2b, 0x92, 0x38, 0x83, 0xf2, 0xf3, 0x27, 0x5b, 0x71, 0x31, 0x13, 0x21, 0xb7, 0xad, 0x62, 0x2b,
	0x8d, 0xb8, 0xe9, 0x98, 0xb4, 0x3a, 0x17, 0x74, 0x45, 0xec, 0x66, 0xd1, 0xaa, 0x02, 0x5c, 0x3d,
	0x24, 0x09, 0x2b, 0x95, 0x00, 0x45, 0xc2, 0x4a, 0x27, 0xa8, 0xc1, 0xf9, 0xd9, 0x84, 0xc6, 0x91,
	0x47, 0xc5, 0x43, 0x19, 0xf5, 0xa8, 0x4c, 0xb4, 0x96, 0x64, 0x10, 0x4b, 0xfc, 0x2a, 0x55, 0x3e,
	0x0b, 0x6d, 0xde, 0xa5, 0xd0, 0xe0, 0x4d, 0xa6, 0x81, 0x76, 0x6d, 0x27, 0x96, 0xb8, 0x5d, 0xf6,
	0x7b, 0x26, 0x45, 0x5f, 0x4b, 0xa1, 0x95, 0x7a, 0x11, 0x4b, 0x0c, 0x85, 0xb7, 0xb5, 0x22, 0x9f,
	0xe6, 0x8a, 0xd4, 0x54, 0x37, 0x1f, 0xc4, 0x12, 0xef, 0xfc, 0xc7, 0xc7, 0x99, 0x30, 0xce, 0xdf,
	0x26, 0x58, 0x9a, 0x8b, 0x67, 0xcb, 0x3d, 0xa2, 0xe5, 0x7e, 0x35, 0xc0, 0xfa, 0x36, 0x24, 0xec,
	0xea, 0x69, 0x79, 0xce, 0xf9, 0xc7, 0x84, 0x66, 0xda, 0xd7, 0xb3, 0xfe, 0x8f, 0xa8, 0xff, 0x6f,
	0x06, 0x34, 0x8e, 0x29, 0x7f, 0xb0, 0x9f, 0x9c, 0x97, 0x50, 0x0d, 0x66, 0x8b, 0x4c, 0x8d, 0xdd,
	0x58, 0xe2, 0x96, 0xae, 0x4f, 0x50, 0xc7, 0x55, 0x41, 0xf4, 0x0e, 0x9a, 0xc9, 0x38, 0xe5, 0xf4,
	0x27, 0x92, 0xaa, 0xf1, 0x61, 0x2c, 0x71, 0xa7, 0xc8, 0x54, 0x21, 0xc7, 0xb5, 0x92, 0xf9, 0x49,
	0x32, 0xfd, 0xa5, 0x0a, 0x96, 0xee, 0x93, 0x07, 0xe8, 0x1d, 0xb4, 0xe6, 0x21, 0x63, 0xe4, 0x42,
	0x7c, 0x93, 0x3c, 0x4b, 0xf7, 0xba, 0x1b, 0x49, 0x5c, 0x86, 0xdd, 0xf2, 0x02, 0x0d, 0x01, 0x84,
	0x2f, 0x66, 0xcb, 0xaf, 0xfc, 0xf0, 0x42, 0xa4, 0xdd, 0xbd, 0x88, 0x24, 0x2e, 0xa1, 0x6e, 0x69,
	0x8e, 0x0e, 0xa0, 0xba, 0xa4, 0x5c, 0xd8, 0x95, 0x7e, 0x65, 0xd0, 0x1a, 0xe3, 0xe1, 0xdd, 0x2b,
	0xc8, 0x30, 0x6b, 0x46, 0x4d, 0x26, 0x56, 0x24, 0xb1, 0x2a, 0x70, 0xd5, 0xdf, 0xee, 0x8d, 0x09,
	0xd5, 0x24, 0xf0, 0xec, 0xdc, 0x47, 0x73, 0xee, 0xb5, 0x01, 0xed, 0x13, 0x22, 0x4e, 0xf4, 0xbe,
	0x4f, 0xeb, 0x8b, 0x79, 0x90, 0x33, 0x50, 0xb9, 0x7b, 0x5f, 0xd3, 0xf8, 0x96, 0xfb, 0x5a, 0x1a,
	0xdc, 0x85, 0x9d, 0xd2, 0xc9, 0x78, 0x30, 0xbe, 0x36, 0xa1, 0xfd, 0x3d, 0x27, 0xcc, 0x4d, 0x0d,
	0x88, 0xf6, 0xa1, 0x72, 0xe8, 0x79, 0xc8, 0xbe, 0xef, 0x4b, 0x7d, 0xcf, 0xed, 0xee, 0x6d, 0x89,
	0xf0, 0x20, 0xb1, 0x76, 0xf2, 0x61, 0x45, 0x1b, 0x52, 0xd2, 0xcb, 0x47, 0xb7, 0xbb, 0x2d, 0xc4,
	0x03, 0xf4, 0x1e, 0x6a, 0xea, 0x87, 0x19, 0x6d, 0x48, 0xca, 0xbe, 0x24, 0xdd, 0x8f, 0xb7, 0xc6,
	0x74, 0x03, 0xea, 0xdd, 0xd8, 0xdb, 0xf6, 0x56, 0x6d, 0x6c, 0x20, 0x7f, 0xfb, 0x8f, 0xa1, 0x99,
	0xb3, 0x83, 0x7a, 0xf7, 0x13, 0xcb, 0xa6, 0xe8, 0xe2, 0xff, 0x8d, 0xf3, 0x60, 0xd2, 0xf9, 0xe3,
	0xb6, 0x67, 0xfc, 0x79, 0xdb, 0x33, 0x6e, 0x6e, 0x7b, 0xc6, 0x0f, 0xe6, 0x7a, 0x7c, 0x5a, 0x57,
	0xff, 0x34, 0x7c, 0xf1, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x6a, 0x95, 0x78, 0x98, 0x0c,
	0x00, 0x00,
}
