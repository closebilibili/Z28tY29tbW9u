// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/live/xuser/api/grpc/v1/api.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 历史记录请求参数定义
type RoomAdminShowEntryReq struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminShowEntryReq) Reset()         { *m = RoomAdminShowEntryReq{} }
func (m *RoomAdminShowEntryReq) String() string { return proto.CompactTextString(m) }
func (*RoomAdminShowEntryReq) ProtoMessage()    {}
func (*RoomAdminShowEntryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{0}
}
func (m *RoomAdminShowEntryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminShowEntryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminShowEntryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminShowEntryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminShowEntryReq.Merge(dst, src)
}
func (m *RoomAdminShowEntryReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminShowEntryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminShowEntryReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminShowEntryReq proto.InternalMessageInfo

func (m *RoomAdminShowEntryReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// 获取接口返回响应
type RoomAdminShowEntryResp struct {
	// 是否有房管
	HasAdmin             int64    `protobuf:"varint,1,opt,name=has_admin,json=hasAdmin,proto3" json:"has_admin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminShowEntryResp) Reset()         { *m = RoomAdminShowEntryResp{} }
func (m *RoomAdminShowEntryResp) String() string { return proto.CompactTextString(m) }
func (*RoomAdminShowEntryResp) ProtoMessage()    {}
func (*RoomAdminShowEntryResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{1}
}
func (m *RoomAdminShowEntryResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminShowEntryResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminShowEntryResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminShowEntryResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminShowEntryResp.Merge(dst, src)
}
func (m *RoomAdminShowEntryResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminShowEntryResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminShowEntryResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminShowEntryResp proto.InternalMessageInfo

func (m *RoomAdminShowEntryResp) GetHasAdmin() int64 {
	if m != nil {
		return m.HasAdmin
	}
	return 0
}

type RoomAdminSearchForAdminReq struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	KeyWord              string   `protobuf:"bytes,2,opt,name=key_word,json=keyWord,proto3" json:"key_word,omitempty" form:"key_word" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminSearchForAdminReq) Reset()         { *m = RoomAdminSearchForAdminReq{} }
func (m *RoomAdminSearchForAdminReq) String() string { return proto.CompactTextString(m) }
func (*RoomAdminSearchForAdminReq) ProtoMessage()    {}
func (*RoomAdminSearchForAdminReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{2}
}
func (m *RoomAdminSearchForAdminReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminSearchForAdminReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminSearchForAdminReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminSearchForAdminReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminSearchForAdminReq.Merge(dst, src)
}
func (m *RoomAdminSearchForAdminReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminSearchForAdminReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminSearchForAdminReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminSearchForAdminReq proto.InternalMessageInfo

func (m *RoomAdminSearchForAdminReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomAdminSearchForAdminReq) GetKeyWord() string {
	if m != nil {
		return m.KeyWord
	}
	return ""
}

type RoomAdminSearchForAdminResp struct {
	Data                 []*RoomAdminSearchForAdminResp_Data `protobuf:"bytes,3,rep,name=data" json:"data"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *RoomAdminSearchForAdminResp) Reset()         { *m = RoomAdminSearchForAdminResp{} }
func (m *RoomAdminSearchForAdminResp) String() string { return proto.CompactTextString(m) }
func (*RoomAdminSearchForAdminResp) ProtoMessage()    {}
func (*RoomAdminSearchForAdminResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{3}
}
func (m *RoomAdminSearchForAdminResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminSearchForAdminResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminSearchForAdminResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminSearchForAdminResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminSearchForAdminResp.Merge(dst, src)
}
func (m *RoomAdminSearchForAdminResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminSearchForAdminResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminSearchForAdminResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminSearchForAdminResp proto.InternalMessageInfo

func (m *RoomAdminSearchForAdminResp) GetData() []*RoomAdminSearchForAdminResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomAdminSearchForAdminResp_Data struct {
	// 用户id
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 是否房管
	IsAdmin int64 `protobuf:"varint,2,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin"`
	// 用户名
	Uname string `protobuf:"bytes,4,opt,name=uname,proto3" json:"uname"`
	// 用户头像
	Face string `protobuf:"bytes,5,opt,name=face,proto3" json:"face"`
	// 粉丝勋章名称
	MedalName string `protobuf:"bytes,6,opt,name=medal_name,json=medalName,proto3" json:"medal_name"`
	// 粉丝勋章等级
	Level                int64    `protobuf:"varint,7,opt,name=level,proto3" json:"level"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminSearchForAdminResp_Data) Reset()         { *m = RoomAdminSearchForAdminResp_Data{} }
func (m *RoomAdminSearchForAdminResp_Data) String() string { return proto.CompactTextString(m) }
func (*RoomAdminSearchForAdminResp_Data) ProtoMessage()    {}
func (*RoomAdminSearchForAdminResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{3, 0}
}
func (m *RoomAdminSearchForAdminResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminSearchForAdminResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminSearchForAdminResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminSearchForAdminResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminSearchForAdminResp_Data.Merge(dst, src)
}
func (m *RoomAdminSearchForAdminResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminSearchForAdminResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminSearchForAdminResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminSearchForAdminResp_Data proto.InternalMessageInfo

func (m *RoomAdminSearchForAdminResp_Data) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomAdminSearchForAdminResp_Data) GetIsAdmin() int64 {
	if m != nil {
		return m.IsAdmin
	}
	return 0
}

func (m *RoomAdminSearchForAdminResp_Data) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *RoomAdminSearchForAdminResp_Data) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *RoomAdminSearchForAdminResp_Data) GetMedalName() string {
	if m != nil {
		return m.MedalName
	}
	return ""
}

func (m *RoomAdminSearchForAdminResp_Data) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

type RoomAdminResignRoomAdminReq struct {
	// 房间号
	Roomid int64 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty" form:"roomid" validate:"required"`
	// 用户uid
	Uid                  int64    `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminResignRoomAdminReq) Reset()         { *m = RoomAdminResignRoomAdminReq{} }
func (m *RoomAdminResignRoomAdminReq) String() string { return proto.CompactTextString(m) }
func (*RoomAdminResignRoomAdminReq) ProtoMessage()    {}
func (*RoomAdminResignRoomAdminReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{4}
}
func (m *RoomAdminResignRoomAdminReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminResignRoomAdminReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminResignRoomAdminReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminResignRoomAdminReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminResignRoomAdminReq.Merge(dst, src)
}
func (m *RoomAdminResignRoomAdminReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminResignRoomAdminReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminResignRoomAdminReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminResignRoomAdminReq proto.InternalMessageInfo

func (m *RoomAdminResignRoomAdminReq) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *RoomAdminResignRoomAdminReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type RoomAdminResignRoomAdminResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminResignRoomAdminResp) Reset()         { *m = RoomAdminResignRoomAdminResp{} }
func (m *RoomAdminResignRoomAdminResp) String() string { return proto.CompactTextString(m) }
func (*RoomAdminResignRoomAdminResp) ProtoMessage()    {}
func (*RoomAdminResignRoomAdminResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{5}
}
func (m *RoomAdminResignRoomAdminResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminResignRoomAdminResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminResignRoomAdminResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminResignRoomAdminResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminResignRoomAdminResp.Merge(dst, src)
}
func (m *RoomAdminResignRoomAdminResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminResignRoomAdminResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminResignRoomAdminResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminResignRoomAdminResp proto.InternalMessageInfo

type RoomAdminGetByUidReq struct {
	// 用户uid
	Uid int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	// 页数
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty" form:"page"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminGetByUidReq) Reset()         { *m = RoomAdminGetByUidReq{} }
func (m *RoomAdminGetByUidReq) String() string { return proto.CompactTextString(m) }
func (*RoomAdminGetByUidReq) ProtoMessage()    {}
func (*RoomAdminGetByUidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{6}
}
func (m *RoomAdminGetByUidReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminGetByUidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminGetByUidReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminGetByUidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminGetByUidReq.Merge(dst, src)
}
func (m *RoomAdminGetByUidReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminGetByUidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminGetByUidReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminGetByUidReq proto.InternalMessageInfo

func (m *RoomAdminGetByUidReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomAdminGetByUidReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

type RoomAdminGetByUidResp struct {
	//
	Page *RoomAdminGetByUidResp_Page `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
	//
	Data                 []*RoomAdminGetByUidResp_Data `protobuf:"bytes,3,rep,name=data" json:"data"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *RoomAdminGetByUidResp) Reset()         { *m = RoomAdminGetByUidResp{} }
func (m *RoomAdminGetByUidResp) String() string { return proto.CompactTextString(m) }
func (*RoomAdminGetByUidResp) ProtoMessage()    {}
func (*RoomAdminGetByUidResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{7}
}
func (m *RoomAdminGetByUidResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminGetByUidResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminGetByUidResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminGetByUidResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminGetByUidResp.Merge(dst, src)
}
func (m *RoomAdminGetByUidResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminGetByUidResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminGetByUidResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminGetByUidResp proto.InternalMessageInfo

func (m *RoomAdminGetByUidResp) GetPage() *RoomAdminGetByUidResp_Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *RoomAdminGetByUidResp) GetData() []*RoomAdminGetByUidResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomAdminGetByUidResp_Data struct {
	// 用户id
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 房间号
	Roomid int64 `protobuf:"varint,2,opt,name=roomid,proto3" json:"roomid"`
	// 主播的用户id
	AnchorId int64 `protobuf:"varint,3,opt,name=anchor_id,json=anchorId,proto3" json:"anchor_id"`
	// 主播用户名
	Uname string `protobuf:"bytes,4,opt,name=uname,proto3" json:"uname"`
	// 主播封面
	AnchorCover string `protobuf:"bytes,5,opt,name=anchor_cover,json=anchorCover,proto3" json:"anchor_cover"`
	// 上任时间
	Ctime                string   `protobuf:"bytes,6,opt,name=ctime,proto3" json:"ctime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminGetByUidResp_Data) Reset()         { *m = RoomAdminGetByUidResp_Data{} }
func (m *RoomAdminGetByUidResp_Data) String() string { return proto.CompactTextString(m) }
func (*RoomAdminGetByUidResp_Data) ProtoMessage()    {}
func (*RoomAdminGetByUidResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{7, 0}
}
func (m *RoomAdminGetByUidResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminGetByUidResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminGetByUidResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminGetByUidResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminGetByUidResp_Data.Merge(dst, src)
}
func (m *RoomAdminGetByUidResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminGetByUidResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminGetByUidResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminGetByUidResp_Data proto.InternalMessageInfo

func (m *RoomAdminGetByUidResp_Data) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomAdminGetByUidResp_Data) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *RoomAdminGetByUidResp_Data) GetAnchorId() int64 {
	if m != nil {
		return m.AnchorId
	}
	return 0
}

func (m *RoomAdminGetByUidResp_Data) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *RoomAdminGetByUidResp_Data) GetAnchorCover() string {
	if m != nil {
		return m.AnchorCover
	}
	return ""
}

func (m *RoomAdminGetByUidResp_Data) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

type RoomAdminGetByUidResp_Page struct {
	// 当前页码
	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// 每页大小
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 总页数
	TotalPage int64 `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	// 总记录数
	TotalCount           int64    `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminGetByUidResp_Page) Reset()         { *m = RoomAdminGetByUidResp_Page{} }
func (m *RoomAdminGetByUidResp_Page) String() string { return proto.CompactTextString(m) }
func (*RoomAdminGetByUidResp_Page) ProtoMessage()    {}
func (*RoomAdminGetByUidResp_Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{7, 1}
}
func (m *RoomAdminGetByUidResp_Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminGetByUidResp_Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminGetByUidResp_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminGetByUidResp_Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminGetByUidResp_Page.Merge(dst, src)
}
func (m *RoomAdminGetByUidResp_Page) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminGetByUidResp_Page) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminGetByUidResp_Page.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminGetByUidResp_Page proto.InternalMessageInfo

func (m *RoomAdminGetByUidResp_Page) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RoomAdminGetByUidResp_Page) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *RoomAdminGetByUidResp_Page) GetTotalPage() int64 {
	if m != nil {
		return m.TotalPage
	}
	return 0
}

func (m *RoomAdminGetByUidResp_Page) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type RoomAdminGetByAnchorReq struct {
	// 页数
	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty" form:"page"`
	// 用户uid
	Uid                  int64    `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminGetByAnchorReq) Reset()         { *m = RoomAdminGetByAnchorReq{} }
func (m *RoomAdminGetByAnchorReq) String() string { return proto.CompactTextString(m) }
func (*RoomAdminGetByAnchorReq) ProtoMessage()    {}
func (*RoomAdminGetByAnchorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{8}
}
func (m *RoomAdminGetByAnchorReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminGetByAnchorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminGetByAnchorReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminGetByAnchorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminGetByAnchorReq.Merge(dst, src)
}
func (m *RoomAdminGetByAnchorReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminGetByAnchorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminGetByAnchorReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminGetByAnchorReq proto.InternalMessageInfo

func (m *RoomAdminGetByAnchorReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RoomAdminGetByAnchorReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type RoomAdminGetByRoomReq struct {
	// 房间号
	Roomid               int64    `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty" form:"roomid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminGetByRoomReq) Reset()         { *m = RoomAdminGetByRoomReq{} }
func (m *RoomAdminGetByRoomReq) String() string { return proto.CompactTextString(m) }
func (*RoomAdminGetByRoomReq) ProtoMessage()    {}
func (*RoomAdminGetByRoomReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{9}
}
func (m *RoomAdminGetByRoomReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminGetByRoomReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminGetByRoomReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminGetByRoomReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminGetByRoomReq.Merge(dst, src)
}
func (m *RoomAdminGetByRoomReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminGetByRoomReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminGetByRoomReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminGetByRoomReq proto.InternalMessageInfo

func (m *RoomAdminGetByRoomReq) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

type RoomAdminGetByAnchorResp struct {
	//
	Page *RoomAdminGetByAnchorResp_Page `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
	//
	Data                 []*RoomAdminGetByAnchorResp_Data `protobuf:"bytes,3,rep,name=data" json:"data"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *RoomAdminGetByAnchorResp) Reset()         { *m = RoomAdminGetByAnchorResp{} }
func (m *RoomAdminGetByAnchorResp) String() string { return proto.CompactTextString(m) }
func (*RoomAdminGetByAnchorResp) ProtoMessage()    {}
func (*RoomAdminGetByAnchorResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{10}
}
func (m *RoomAdminGetByAnchorResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminGetByAnchorResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminGetByAnchorResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminGetByAnchorResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminGetByAnchorResp.Merge(dst, src)
}
func (m *RoomAdminGetByAnchorResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminGetByAnchorResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminGetByAnchorResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminGetByAnchorResp proto.InternalMessageInfo

func (m *RoomAdminGetByAnchorResp) GetPage() *RoomAdminGetByAnchorResp_Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *RoomAdminGetByAnchorResp) GetData() []*RoomAdminGetByAnchorResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomAdminGetByAnchorResp_Data struct {
	// 用户id
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 用户名
	Uname string `protobuf:"bytes,4,opt,name=uname,proto3" json:"uname"`
	// 用户头像
	Face string `protobuf:"bytes,5,opt,name=face,proto3" json:"face"`
	// 上任时间
	Ctime string `protobuf:"bytes,6,opt,name=ctime,proto3" json:"ctime"`
	// 粉丝勋章名称
	MedalName string `protobuf:"bytes,8,opt,name=medal_name,json=medalName,proto3" json:"medal_name"`
	// 粉丝勋章等级
	Level int64 `protobuf:"varint,9,opt,name=level,proto3" json:"level"`
	// 房间号
	Roomid               int64    `protobuf:"varint,10,opt,name=roomid,proto3" json:"roomid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminGetByAnchorResp_Data) Reset()         { *m = RoomAdminGetByAnchorResp_Data{} }
func (m *RoomAdminGetByAnchorResp_Data) String() string { return proto.CompactTextString(m) }
func (*RoomAdminGetByAnchorResp_Data) ProtoMessage()    {}
func (*RoomAdminGetByAnchorResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{10, 0}
}
func (m *RoomAdminGetByAnchorResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminGetByAnchorResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminGetByAnchorResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminGetByAnchorResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminGetByAnchorResp_Data.Merge(dst, src)
}
func (m *RoomAdminGetByAnchorResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminGetByAnchorResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminGetByAnchorResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminGetByAnchorResp_Data proto.InternalMessageInfo

func (m *RoomAdminGetByAnchorResp_Data) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomAdminGetByAnchorResp_Data) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *RoomAdminGetByAnchorResp_Data) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *RoomAdminGetByAnchorResp_Data) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *RoomAdminGetByAnchorResp_Data) GetMedalName() string {
	if m != nil {
		return m.MedalName
	}
	return ""
}

func (m *RoomAdminGetByAnchorResp_Data) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RoomAdminGetByAnchorResp_Data) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

type RoomAdminGetByAnchorResp_Page struct {
	// 当前页码
	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// 每页大小
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 总页数
	TotalPage int64 `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	// 总记录数
	TotalCount           int64    `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminGetByAnchorResp_Page) Reset()         { *m = RoomAdminGetByAnchorResp_Page{} }
func (m *RoomAdminGetByAnchorResp_Page) String() string { return proto.CompactTextString(m) }
func (*RoomAdminGetByAnchorResp_Page) ProtoMessage()    {}
func (*RoomAdminGetByAnchorResp_Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{10, 1}
}
func (m *RoomAdminGetByAnchorResp_Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminGetByAnchorResp_Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminGetByAnchorResp_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminGetByAnchorResp_Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminGetByAnchorResp_Page.Merge(dst, src)
}
func (m *RoomAdminGetByAnchorResp_Page) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminGetByAnchorResp_Page) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminGetByAnchorResp_Page.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminGetByAnchorResp_Page proto.InternalMessageInfo

func (m *RoomAdminGetByAnchorResp_Page) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RoomAdminGetByAnchorResp_Page) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *RoomAdminGetByAnchorResp_Page) GetTotalPage() int64 {
	if m != nil {
		return m.TotalPage
	}
	return 0
}

func (m *RoomAdminGetByAnchorResp_Page) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type RoomAdminDismissAdminReq struct {
	// 房管的用户uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	// 主播uid
	AnchorId             int64    `protobuf:"varint,2,opt,name=anchor_id,json=anchorId,proto3" json:"anchor_id,omitempty" form:"anchor_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminDismissAdminReq) Reset()         { *m = RoomAdminDismissAdminReq{} }
func (m *RoomAdminDismissAdminReq) String() string { return proto.CompactTextString(m) }
func (*RoomAdminDismissAdminReq) ProtoMessage()    {}
func (*RoomAdminDismissAdminReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{11}
}
func (m *RoomAdminDismissAdminReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminDismissAdminReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminDismissAdminReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminDismissAdminReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminDismissAdminReq.Merge(dst, src)
}
func (m *RoomAdminDismissAdminReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminDismissAdminReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminDismissAdminReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminDismissAdminReq proto.InternalMessageInfo

func (m *RoomAdminDismissAdminReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomAdminDismissAdminReq) GetAnchorId() int64 {
	if m != nil {
		return m.AnchorId
	}
	return 0
}

type RoomAdminDismissAdminResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminDismissAdminResp) Reset()         { *m = RoomAdminDismissAdminResp{} }
func (m *RoomAdminDismissAdminResp) String() string { return proto.CompactTextString(m) }
func (*RoomAdminDismissAdminResp) ProtoMessage()    {}
func (*RoomAdminDismissAdminResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{12}
}
func (m *RoomAdminDismissAdminResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminDismissAdminResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminDismissAdminResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminDismissAdminResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminDismissAdminResp.Merge(dst, src)
}
func (m *RoomAdminDismissAdminResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminDismissAdminResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminDismissAdminResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminDismissAdminResp proto.InternalMessageInfo

type RoomAdminAddReq struct {
	// 房管的uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	// 主播uid
	AnchorId             int64    `protobuf:"varint,2,opt,name=anchor_id,json=anchorId,proto3" json:"anchor_id,omitempty" form:"anchor_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminAddReq) Reset()         { *m = RoomAdminAddReq{} }
func (m *RoomAdminAddReq) String() string { return proto.CompactTextString(m) }
func (*RoomAdminAddReq) ProtoMessage()    {}
func (*RoomAdminAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{13}
}
func (m *RoomAdminAddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminAddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminAddReq.Merge(dst, src)
}
func (m *RoomAdminAddReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminAddReq proto.InternalMessageInfo

func (m *RoomAdminAddReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomAdminAddReq) GetAnchorId() int64 {
	if m != nil {
		return m.AnchorId
	}
	return 0
}

type RoomAdminAddResp struct {
	// banner
	Userinfo *RoomAdminAddResp_UI `protobuf:"bytes,1,opt,name=userinfo" json:"userinfo"`
	// 房管的用户id
	Uid int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid"`
	// 房间号
	Roomid               int64    `protobuf:"varint,3,opt,name=roomid,proto3" json:"roomid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminAddResp) Reset()         { *m = RoomAdminAddResp{} }
func (m *RoomAdminAddResp) String() string { return proto.CompactTextString(m) }
func (*RoomAdminAddResp) ProtoMessage()    {}
func (*RoomAdminAddResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{14}
}
func (m *RoomAdminAddResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminAddResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminAddResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminAddResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminAddResp.Merge(dst, src)
}
func (m *RoomAdminAddResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminAddResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminAddResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminAddResp proto.InternalMessageInfo

func (m *RoomAdminAddResp) GetUserinfo() *RoomAdminAddResp_UI {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

func (m *RoomAdminAddResp) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomAdminAddResp) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

type RoomAdminAddResp_UI struct {
	// 用户id
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 用户名
	Uname                string   `protobuf:"bytes,2,opt,name=uname,proto3" json:"uname"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminAddResp_UI) Reset()         { *m = RoomAdminAddResp_UI{} }
func (m *RoomAdminAddResp_UI) String() string { return proto.CompactTextString(m) }
func (*RoomAdminAddResp_UI) ProtoMessage()    {}
func (*RoomAdminAddResp_UI) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{14, 0}
}
func (m *RoomAdminAddResp_UI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminAddResp_UI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminAddResp_UI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminAddResp_UI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminAddResp_UI.Merge(dst, src)
}
func (m *RoomAdminAddResp_UI) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminAddResp_UI) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminAddResp_UI.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminAddResp_UI proto.InternalMessageInfo

func (m *RoomAdminAddResp_UI) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomAdminAddResp_UI) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

type RoomAdminIsAdminShortReq struct {
	// 房管的uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	// 房间号
	Roomid               int64    `protobuf:"varint,3,opt,name=roomid,proto3" json:"roomid,omitempty" form:"roomid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminIsAdminShortReq) Reset()         { *m = RoomAdminIsAdminShortReq{} }
func (m *RoomAdminIsAdminShortReq) String() string { return proto.CompactTextString(m) }
func (*RoomAdminIsAdminShortReq) ProtoMessage()    {}
func (*RoomAdminIsAdminShortReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{15}
}
func (m *RoomAdminIsAdminShortReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminIsAdminShortReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminIsAdminShortReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminIsAdminShortReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminIsAdminShortReq.Merge(dst, src)
}
func (m *RoomAdminIsAdminShortReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminIsAdminShortReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminIsAdminShortReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminIsAdminShortReq proto.InternalMessageInfo

func (m *RoomAdminIsAdminShortReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomAdminIsAdminShortReq) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

type RoomAdminIsAdminReq struct {
	// 房管的uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	// 主播uid
	AnchorId int64 `protobuf:"varint,2,opt,name=anchor_id,json=anchorId,proto3" json:"anchor_id,omitempty" form:"anchor_id" validate:"required"`
	// 房间号
	Roomid               int64    `protobuf:"varint,3,opt,name=roomid,proto3" json:"roomid,omitempty" form:"roomid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminIsAdminReq) Reset()         { *m = RoomAdminIsAdminReq{} }
func (m *RoomAdminIsAdminReq) String() string { return proto.CompactTextString(m) }
func (*RoomAdminIsAdminReq) ProtoMessage()    {}
func (*RoomAdminIsAdminReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{16}
}
func (m *RoomAdminIsAdminReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminIsAdminReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminIsAdminReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminIsAdminReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminIsAdminReq.Merge(dst, src)
}
func (m *RoomAdminIsAdminReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminIsAdminReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminIsAdminReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminIsAdminReq proto.InternalMessageInfo

func (m *RoomAdminIsAdminReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomAdminIsAdminReq) GetAnchorId() int64 {
	if m != nil {
		return m.AnchorId
	}
	return 0
}

func (m *RoomAdminIsAdminReq) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

type RoomAdminIsAdminShortResp struct {
	// 是否房管 0:不是,1:是
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminIsAdminShortResp) Reset()         { *m = RoomAdminIsAdminShortResp{} }
func (m *RoomAdminIsAdminShortResp) String() string { return proto.CompactTextString(m) }
func (*RoomAdminIsAdminShortResp) ProtoMessage()    {}
func (*RoomAdminIsAdminShortResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{17}
}
func (m *RoomAdminIsAdminShortResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminIsAdminShortResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminIsAdminShortResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminIsAdminShortResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminIsAdminShortResp.Merge(dst, src)
}
func (m *RoomAdminIsAdminShortResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminIsAdminShortResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminIsAdminShortResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminIsAdminShortResp proto.InternalMessageInfo

func (m *RoomAdminIsAdminShortResp) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type RoomAdminIsAdminResp struct {
	// banner
	Userinfo *RoomAdminIsAdminResp_UI `protobuf:"bytes,1,opt,name=userinfo" json:"userinfo"`
	// 房管的用户id
	Uid int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid"`
	// 房间号
	Roomid               int64    `protobuf:"varint,3,opt,name=roomid,proto3" json:"roomid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminIsAdminResp) Reset()         { *m = RoomAdminIsAdminResp{} }
func (m *RoomAdminIsAdminResp) String() string { return proto.CompactTextString(m) }
func (*RoomAdminIsAdminResp) ProtoMessage()    {}
func (*RoomAdminIsAdminResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{18}
}
func (m *RoomAdminIsAdminResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminIsAdminResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminIsAdminResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminIsAdminResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminIsAdminResp.Merge(dst, src)
}
func (m *RoomAdminIsAdminResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminIsAdminResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminIsAdminResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminIsAdminResp proto.InternalMessageInfo

func (m *RoomAdminIsAdminResp) GetUserinfo() *RoomAdminIsAdminResp_UI {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

func (m *RoomAdminIsAdminResp) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomAdminIsAdminResp) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

type RoomAdminIsAdminResp_UI struct {
	// 用户id
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 用户名
	Uname                string   `protobuf:"bytes,2,opt,name=uname,proto3" json:"uname"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminIsAdminResp_UI) Reset()         { *m = RoomAdminIsAdminResp_UI{} }
func (m *RoomAdminIsAdminResp_UI) String() string { return proto.CompactTextString(m) }
func (*RoomAdminIsAdminResp_UI) ProtoMessage()    {}
func (*RoomAdminIsAdminResp_UI) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{18, 0}
}
func (m *RoomAdminIsAdminResp_UI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminIsAdminResp_UI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminIsAdminResp_UI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminIsAdminResp_UI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminIsAdminResp_UI.Merge(dst, src)
}
func (m *RoomAdminIsAdminResp_UI) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminIsAdminResp_UI) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminIsAdminResp_UI.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminIsAdminResp_UI proto.InternalMessageInfo

func (m *RoomAdminIsAdminResp_UI) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomAdminIsAdminResp_UI) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

type RoomAdminGetByRoomResp struct {
	Data                 []*RoomAdminGetByRoomResp_Data `protobuf:"bytes,1,rep,name=data" json:"data"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *RoomAdminGetByRoomResp) Reset()         { *m = RoomAdminGetByRoomResp{} }
func (m *RoomAdminGetByRoomResp) String() string { return proto.CompactTextString(m) }
func (*RoomAdminGetByRoomResp) ProtoMessage()    {}
func (*RoomAdminGetByRoomResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{19}
}
func (m *RoomAdminGetByRoomResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminGetByRoomResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminGetByRoomResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminGetByRoomResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminGetByRoomResp.Merge(dst, src)
}
func (m *RoomAdminGetByRoomResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminGetByRoomResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminGetByRoomResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminGetByRoomResp proto.InternalMessageInfo

func (m *RoomAdminGetByRoomResp) GetData() []*RoomAdminGetByRoomResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomAdminGetByRoomResp_Data struct {
	// 上任时间
	Ctime string `protobuf:"bytes,1,opt,name=ctime,proto3" json:"ctime"`
	// 房管的用户id
	Uid int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid"`
	// 房间号
	Roomid               int64    `protobuf:"varint,3,opt,name=roomid,proto3" json:"roomid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAdminGetByRoomResp_Data) Reset()         { *m = RoomAdminGetByRoomResp_Data{} }
func (m *RoomAdminGetByRoomResp_Data) String() string { return proto.CompactTextString(m) }
func (*RoomAdminGetByRoomResp_Data) ProtoMessage()    {}
func (*RoomAdminGetByRoomResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_c5b121d61188340f, []int{19, 0}
}
func (m *RoomAdminGetByRoomResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAdminGetByRoomResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAdminGetByRoomResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAdminGetByRoomResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAdminGetByRoomResp_Data.Merge(dst, src)
}
func (m *RoomAdminGetByRoomResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *RoomAdminGetByRoomResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAdminGetByRoomResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAdminGetByRoomResp_Data proto.InternalMessageInfo

func (m *RoomAdminGetByRoomResp_Data) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *RoomAdminGetByRoomResp_Data) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomAdminGetByRoomResp_Data) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func init() {
	proto.RegisterType((*RoomAdminShowEntryReq)(nil), "live.xuser.v1.RoomAdminShowEntryReq")
	proto.RegisterType((*RoomAdminShowEntryResp)(nil), "live.xuser.v1.RoomAdminShowEntryResp")
	proto.RegisterType((*RoomAdminSearchForAdminReq)(nil), "live.xuser.v1.RoomAdminSearchForAdminReq")
	proto.RegisterType((*RoomAdminSearchForAdminResp)(nil), "live.xuser.v1.RoomAdminSearchForAdminResp")
	proto.RegisterType((*RoomAdminSearchForAdminResp_Data)(nil), "live.xuser.v1.RoomAdminSearchForAdminResp.Data")
	proto.RegisterType((*RoomAdminResignRoomAdminReq)(nil), "live.xuser.v1.RoomAdminResignRoomAdminReq")
	proto.RegisterType((*RoomAdminResignRoomAdminResp)(nil), "live.xuser.v1.RoomAdminResignRoomAdminResp")
	proto.RegisterType((*RoomAdminGetByUidReq)(nil), "live.xuser.v1.RoomAdminGetByUidReq")
	proto.RegisterType((*RoomAdminGetByUidResp)(nil), "live.xuser.v1.RoomAdminGetByUidResp")
	proto.RegisterType((*RoomAdminGetByUidResp_Data)(nil), "live.xuser.v1.RoomAdminGetByUidResp.Data")
	proto.RegisterType((*RoomAdminGetByUidResp_Page)(nil), "live.xuser.v1.RoomAdminGetByUidResp.Page")
	proto.RegisterType((*RoomAdminGetByAnchorReq)(nil), "live.xuser.v1.RoomAdminGetByAnchorReq")
	proto.RegisterType((*RoomAdminGetByRoomReq)(nil), "live.xuser.v1.RoomAdminGetByRoomReq")
	proto.RegisterType((*RoomAdminGetByAnchorResp)(nil), "live.xuser.v1.RoomAdminGetByAnchorResp")
	proto.RegisterType((*RoomAdminGetByAnchorResp_Data)(nil), "live.xuser.v1.RoomAdminGetByAnchorResp.Data")
	proto.RegisterType((*RoomAdminGetByAnchorResp_Page)(nil), "live.xuser.v1.RoomAdminGetByAnchorResp.Page")
	proto.RegisterType((*RoomAdminDismissAdminReq)(nil), "live.xuser.v1.RoomAdminDismissAdminReq")
	proto.RegisterType((*RoomAdminDismissAdminResp)(nil), "live.xuser.v1.RoomAdminDismissAdminResp")
	proto.RegisterType((*RoomAdminAddReq)(nil), "live.xuser.v1.RoomAdminAddReq")
	proto.RegisterType((*RoomAdminAddResp)(nil), "live.xuser.v1.RoomAdminAddResp")
	proto.RegisterType((*RoomAdminAddResp_UI)(nil), "live.xuser.v1.RoomAdminAddResp.UI")
	proto.RegisterType((*RoomAdminIsAdminShortReq)(nil), "live.xuser.v1.RoomAdminIsAdminShortReq")
	proto.RegisterType((*RoomAdminIsAdminReq)(nil), "live.xuser.v1.RoomAdminIsAdminReq")
	proto.RegisterType((*RoomAdminIsAdminShortResp)(nil), "live.xuser.v1.RoomAdminIsAdminShortResp")
	proto.RegisterType((*RoomAdminIsAdminResp)(nil), "live.xuser.v1.RoomAdminIsAdminResp")
	proto.RegisterType((*RoomAdminIsAdminResp_UI)(nil), "live.xuser.v1.RoomAdminIsAdminResp.UI")
	proto.RegisterType((*RoomAdminGetByRoomResp)(nil), "live.xuser.v1.RoomAdminGetByRoomResp")
	proto.RegisterType((*RoomAdminGetByRoomResp_Data)(nil), "live.xuser.v1.RoomAdminGetByRoomResp.Data")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RoomAdminClient is the client API for RoomAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoomAdminClient interface {
	// 根据登录态获取功能入口是否显示, 需要登录态
	IsAny(ctx context.Context, in *RoomAdminShowEntryReq, opts ...grpc.CallOption) (*RoomAdminShowEntryResp, error)
	// 获取用户拥有的的所有房管身份
	GetByUid(ctx context.Context, in *RoomAdminGetByUidReq, opts ...grpc.CallOption) (*RoomAdminGetByUidResp, error)
	// 辞职房管
	Resign(ctx context.Context, in *RoomAdminResignRoomAdminReq, opts ...grpc.CallOption) (*RoomAdminResignRoomAdminResp, error)
	// 查询需要添加的房管
	SearchForAdmin(ctx context.Context, in *RoomAdminSearchForAdminReq, opts ...grpc.CallOption) (*RoomAdminSearchForAdminResp, error)
	// 获取主播拥有的的所有房管
	GetByAnchor(ctx context.Context, in *RoomAdminGetByAnchorReq, opts ...grpc.CallOption) (*RoomAdminGetByAnchorResp, error)
	// 获取主播拥有的的所有房管,房间号维度
	GetByRoom(ctx context.Context, in *RoomAdminGetByRoomReq, opts ...grpc.CallOption) (*RoomAdminGetByRoomResp, error)
	// 撤销房管
	Dismiss(ctx context.Context, in *RoomAdminDismissAdminReq, opts ...grpc.CallOption) (*RoomAdminDismissAdminResp, error)
	// 任命房管
	Appoint(ctx context.Context, in *RoomAdminAddReq, opts ...grpc.CallOption) (*RoomAdminAddResp, error)
	// 是否房管
	IsAdmin(ctx context.Context, in *RoomAdminIsAdminReq, opts ...grpc.CallOption) (*RoomAdminIsAdminResp, error)
	// 是否房管, 不额外返回用户信息, 不判断是否主播自己
	IsAdminShort(ctx context.Context, in *RoomAdminIsAdminShortReq, opts ...grpc.CallOption) (*RoomAdminIsAdminShortResp, error)
}

type roomAdminClient struct {
	cc *grpc.ClientConn
}

func NewRoomAdminClient(cc *grpc.ClientConn) RoomAdminClient {
	return &roomAdminClient{cc}
}

func (c *roomAdminClient) IsAny(ctx context.Context, in *RoomAdminShowEntryReq, opts ...grpc.CallOption) (*RoomAdminShowEntryResp, error) {
	out := new(RoomAdminShowEntryResp)
	err := c.cc.Invoke(ctx, "/live.xuser.v1.RoomAdmin/is_any", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomAdminClient) GetByUid(ctx context.Context, in *RoomAdminGetByUidReq, opts ...grpc.CallOption) (*RoomAdminGetByUidResp, error) {
	out := new(RoomAdminGetByUidResp)
	err := c.cc.Invoke(ctx, "/live.xuser.v1.RoomAdmin/get_by_uid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomAdminClient) Resign(ctx context.Context, in *RoomAdminResignRoomAdminReq, opts ...grpc.CallOption) (*RoomAdminResignRoomAdminResp, error) {
	out := new(RoomAdminResignRoomAdminResp)
	err := c.cc.Invoke(ctx, "/live.xuser.v1.RoomAdmin/resign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomAdminClient) SearchForAdmin(ctx context.Context, in *RoomAdminSearchForAdminReq, opts ...grpc.CallOption) (*RoomAdminSearchForAdminResp, error) {
	out := new(RoomAdminSearchForAdminResp)
	err := c.cc.Invoke(ctx, "/live.xuser.v1.RoomAdmin/search_for_admin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomAdminClient) GetByAnchor(ctx context.Context, in *RoomAdminGetByAnchorReq, opts ...grpc.CallOption) (*RoomAdminGetByAnchorResp, error) {
	out := new(RoomAdminGetByAnchorResp)
	err := c.cc.Invoke(ctx, "/live.xuser.v1.RoomAdmin/get_by_anchor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomAdminClient) GetByRoom(ctx context.Context, in *RoomAdminGetByRoomReq, opts ...grpc.CallOption) (*RoomAdminGetByRoomResp, error) {
	out := new(RoomAdminGetByRoomResp)
	err := c.cc.Invoke(ctx, "/live.xuser.v1.RoomAdmin/get_by_room", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomAdminClient) Dismiss(ctx context.Context, in *RoomAdminDismissAdminReq, opts ...grpc.CallOption) (*RoomAdminDismissAdminResp, error) {
	out := new(RoomAdminDismissAdminResp)
	err := c.cc.Invoke(ctx, "/live.xuser.v1.RoomAdmin/dismiss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomAdminClient) Appoint(ctx context.Context, in *RoomAdminAddReq, opts ...grpc.CallOption) (*RoomAdminAddResp, error) {
	out := new(RoomAdminAddResp)
	err := c.cc.Invoke(ctx, "/live.xuser.v1.RoomAdmin/appoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomAdminClient) IsAdmin(ctx context.Context, in *RoomAdminIsAdminReq, opts ...grpc.CallOption) (*RoomAdminIsAdminResp, error) {
	out := new(RoomAdminIsAdminResp)
	err := c.cc.Invoke(ctx, "/live.xuser.v1.RoomAdmin/is_admin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomAdminClient) IsAdminShort(ctx context.Context, in *RoomAdminIsAdminShortReq, opts ...grpc.CallOption) (*RoomAdminIsAdminShortResp, error) {
	out := new(RoomAdminIsAdminShortResp)
	err := c.cc.Invoke(ctx, "/live.xuser.v1.RoomAdmin/is_admin_short", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomAdminServer is the server API for RoomAdmin service.
type RoomAdminServer interface {
	// 根据登录态获取功能入口是否显示, 需要登录态
	IsAny(context.Context, *RoomAdminShowEntryReq) (*RoomAdminShowEntryResp, error)
	// 获取用户拥有的的所有房管身份
	GetByUid(context.Context, *RoomAdminGetByUidReq) (*RoomAdminGetByUidResp, error)
	// 辞职房管
	Resign(context.Context, *RoomAdminResignRoomAdminReq) (*RoomAdminResignRoomAdminResp, error)
	// 查询需要添加的房管
	SearchForAdmin(context.Context, *RoomAdminSearchForAdminReq) (*RoomAdminSearchForAdminResp, error)
	// 获取主播拥有的的所有房管
	GetByAnchor(context.Context, *RoomAdminGetByAnchorReq) (*RoomAdminGetByAnchorResp, error)
	// 获取主播拥有的的所有房管,房间号维度
	GetByRoom(context.Context, *RoomAdminGetByRoomReq) (*RoomAdminGetByRoomResp, error)
	// 撤销房管
	Dismiss(context.Context, *RoomAdminDismissAdminReq) (*RoomAdminDismissAdminResp, error)
	// 任命房管
	Appoint(context.Context, *RoomAdminAddReq) (*RoomAdminAddResp, error)
	// 是否房管
	IsAdmin(context.Context, *RoomAdminIsAdminReq) (*RoomAdminIsAdminResp, error)
	// 是否房管, 不额外返回用户信息, 不判断是否主播自己
	IsAdminShort(context.Context, *RoomAdminIsAdminShortReq) (*RoomAdminIsAdminShortResp, error)
}

func RegisterRoomAdminServer(s *grpc.Server, srv RoomAdminServer) {
	s.RegisterService(&_RoomAdmin_serviceDesc, srv)
}

func _RoomAdmin_IsAny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomAdminShowEntryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomAdminServer).IsAny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xuser.v1.RoomAdmin/IsAny",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomAdminServer).IsAny(ctx, req.(*RoomAdminShowEntryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomAdmin_GetByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomAdminGetByUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomAdminServer).GetByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xuser.v1.RoomAdmin/GetByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomAdminServer).GetByUid(ctx, req.(*RoomAdminGetByUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomAdmin_Resign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomAdminResignRoomAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomAdminServer).Resign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xuser.v1.RoomAdmin/Resign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomAdminServer).Resign(ctx, req.(*RoomAdminResignRoomAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomAdmin_SearchForAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomAdminSearchForAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomAdminServer).SearchForAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xuser.v1.RoomAdmin/SearchForAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomAdminServer).SearchForAdmin(ctx, req.(*RoomAdminSearchForAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomAdmin_GetByAnchor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomAdminGetByAnchorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomAdminServer).GetByAnchor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xuser.v1.RoomAdmin/GetByAnchor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomAdminServer).GetByAnchor(ctx, req.(*RoomAdminGetByAnchorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomAdmin_GetByRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomAdminGetByRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomAdminServer).GetByRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xuser.v1.RoomAdmin/GetByRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomAdminServer).GetByRoom(ctx, req.(*RoomAdminGetByRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomAdmin_Dismiss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomAdminDismissAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomAdminServer).Dismiss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xuser.v1.RoomAdmin/Dismiss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomAdminServer).Dismiss(ctx, req.(*RoomAdminDismissAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomAdmin_Appoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomAdminAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomAdminServer).Appoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xuser.v1.RoomAdmin/Appoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomAdminServer).Appoint(ctx, req.(*RoomAdminAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomAdmin_IsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomAdminIsAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomAdminServer).IsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xuser.v1.RoomAdmin/IsAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomAdminServer).IsAdmin(ctx, req.(*RoomAdminIsAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomAdmin_IsAdminShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomAdminIsAdminShortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomAdminServer).IsAdminShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xuser.v1.RoomAdmin/IsAdminShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomAdminServer).IsAdminShort(ctx, req.(*RoomAdminIsAdminShortReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoomAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "live.xuser.v1.RoomAdmin",
	HandlerType: (*RoomAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "is_any",
			Handler:    _RoomAdmin_IsAny_Handler,
		},
		{
			MethodName: "get_by_uid",
			Handler:    _RoomAdmin_GetByUid_Handler,
		},
		{
			MethodName: "resign",
			Handler:    _RoomAdmin_Resign_Handler,
		},
		{
			MethodName: "search_for_admin",
			Handler:    _RoomAdmin_SearchForAdmin_Handler,
		},
		{
			MethodName: "get_by_anchor",
			Handler:    _RoomAdmin_GetByAnchor_Handler,
		},
		{
			MethodName: "get_by_room",
			Handler:    _RoomAdmin_GetByRoom_Handler,
		},
		{
			MethodName: "dismiss",
			Handler:    _RoomAdmin_Dismiss_Handler,
		},
		{
			MethodName: "appoint",
			Handler:    _RoomAdmin_Appoint_Handler,
		},
		{
			MethodName: "is_admin",
			Handler:    _RoomAdmin_IsAdmin_Handler,
		},
		{
			MethodName: "is_admin_short",
			Handler:    _RoomAdmin_IsAdminShort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/live/xuser/api/grpc/v1/api.proto",
}

func (m *RoomAdminShowEntryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminShowEntryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminShowEntryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminShowEntryResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HasAdmin != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.HasAdmin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminSearchForAdminReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminSearchForAdminReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if len(m.KeyWord) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.KeyWord)))
		i += copy(dAtA[i:], m.KeyWord)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminSearchForAdminResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminSearchForAdminResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminSearchForAdminResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminSearchForAdminResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.IsAdmin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.IsAdmin))
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if len(m.MedalName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MedalName)))
		i += copy(dAtA[i:], m.MedalName)
	}
	if m.Level != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Level))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminResignRoomAdminReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminResignRoomAdminReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Roomid))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminResignRoomAdminResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminResignRoomAdminResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminGetByUidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminGetByUidReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Page))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminGetByUidResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminGetByUidResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Page.Size()))
		n1, err := m.Page.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminGetByUidResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminGetByUidResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Roomid))
	}
	if m.AnchorId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AnchorId))
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if len(m.AnchorCover) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AnchorCover)))
		i += copy(dAtA[i:], m.AnchorCover)
	}
	if len(m.Ctime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ctime)))
		i += copy(dAtA[i:], m.Ctime)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminGetByUidResp_Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminGetByUidResp_Page) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Page))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PageSize))
	}
	if m.TotalPage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TotalPage))
	}
	if m.TotalCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminGetByAnchorReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminGetByAnchorReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Page))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminGetByRoomReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminGetByRoomReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Roomid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminGetByAnchorResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminGetByAnchorResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Page.Size()))
		n2, err := m.Page.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminGetByAnchorResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminGetByAnchorResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if len(m.Ctime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ctime)))
		i += copy(dAtA[i:], m.Ctime)
	}
	if len(m.MedalName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MedalName)))
		i += copy(dAtA[i:], m.MedalName)
	}
	if m.Level != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Level))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Roomid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminGetByAnchorResp_Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminGetByAnchorResp_Page) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Page))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PageSize))
	}
	if m.TotalPage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TotalPage))
	}
	if m.TotalCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminDismissAdminReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminDismissAdminReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.AnchorId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AnchorId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminDismissAdminResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminDismissAdminResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminAddReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.AnchorId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AnchorId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminAddResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminAddResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Userinfo.Size()))
		n3, err := m.Userinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Roomid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminAddResp_UI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminAddResp_UI) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminIsAdminShortReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminIsAdminShortReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Roomid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminIsAdminReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminIsAdminReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.AnchorId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AnchorId))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Roomid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminIsAdminShortResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminIsAdminShortResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminIsAdminResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminIsAdminResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Userinfo.Size()))
		n4, err := m.Userinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Roomid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminIsAdminResp_UI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminIsAdminResp_UI) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminGetByRoomResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminGetByRoomResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAdminGetByRoomResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAdminGetByRoomResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ctime) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ctime)))
		i += copy(dAtA[i:], m.Ctime)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Roomid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RoomAdminShowEntryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminShowEntryResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HasAdmin != 0 {
		n += 1 + sovApi(uint64(m.HasAdmin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminSearchForAdminReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.KeyWord)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminSearchForAdminResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminSearchForAdminResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.IsAdmin != 0 {
		n += 1 + sovApi(uint64(m.IsAdmin))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MedalName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovApi(uint64(m.Level))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminResignRoomAdminReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovApi(uint64(m.Roomid))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminResignRoomAdminResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminGetByUidReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovApi(uint64(m.Page))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminGetByUidResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminGetByUidResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.Roomid != 0 {
		n += 1 + sovApi(uint64(m.Roomid))
	}
	if m.AnchorId != 0 {
		n += 1 + sovApi(uint64(m.AnchorId))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AnchorCover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ctime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminGetByUidResp_Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovApi(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovApi(uint64(m.PageSize))
	}
	if m.TotalPage != 0 {
		n += 1 + sovApi(uint64(m.TotalPage))
	}
	if m.TotalCount != 0 {
		n += 1 + sovApi(uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminGetByAnchorReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovApi(uint64(m.Page))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminGetByRoomReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovApi(uint64(m.Roomid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminGetByAnchorResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminGetByAnchorResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ctime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MedalName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovApi(uint64(m.Level))
	}
	if m.Roomid != 0 {
		n += 1 + sovApi(uint64(m.Roomid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminGetByAnchorResp_Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovApi(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovApi(uint64(m.PageSize))
	}
	if m.TotalPage != 0 {
		n += 1 + sovApi(uint64(m.TotalPage))
	}
	if m.TotalCount != 0 {
		n += 1 + sovApi(uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminDismissAdminReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.AnchorId != 0 {
		n += 1 + sovApi(uint64(m.AnchorId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminDismissAdminResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminAddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.AnchorId != 0 {
		n += 1 + sovApi(uint64(m.AnchorId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminAddResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Userinfo != nil {
		l = m.Userinfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.Roomid != 0 {
		n += 1 + sovApi(uint64(m.Roomid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminAddResp_UI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminIsAdminShortReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.Roomid != 0 {
		n += 1 + sovApi(uint64(m.Roomid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminIsAdminReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.AnchorId != 0 {
		n += 1 + sovApi(uint64(m.AnchorId))
	}
	if m.Roomid != 0 {
		n += 1 + sovApi(uint64(m.Roomid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminIsAdminShortResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminIsAdminResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Userinfo != nil {
		l = m.Userinfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.Roomid != 0 {
		n += 1 + sovApi(uint64(m.Roomid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminIsAdminResp_UI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminGetByRoomResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAdminGetByRoomResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ctime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.Roomid != 0 {
		n += 1 + sovApi(uint64(m.Roomid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoomAdminShowEntryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminShowEntryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminShowEntryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminShowEntryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminShowEntryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminShowEntryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasAdmin", wireType)
			}
			m.HasAdmin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasAdmin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminSearchForAdminReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminSearchForAdminReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminSearchForAdminReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyWord = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminSearchForAdminResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminSearchForAdminResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminSearchForAdminResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RoomAdminSearchForAdminResp_Data{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminSearchForAdminResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			m.IsAdmin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAdmin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MedalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminResignRoomAdminReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminResignRoomAdminReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminResignRoomAdminReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminResignRoomAdminResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminResignRoomAdminResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminResignRoomAdminResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminGetByUidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminGetByUidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminGetByUidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminGetByUidResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminGetByUidResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminGetByUidResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &RoomAdminGetByUidResp_Page{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RoomAdminGetByUidResp_Data{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminGetByUidResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnchorId", wireType)
			}
			m.AnchorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnchorId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnchorCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnchorCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminGetByUidResp_Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPage", wireType)
			}
			m.TotalPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminGetByAnchorReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminGetByAnchorReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminGetByAnchorReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminGetByRoomReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminGetByRoomReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminGetByRoomReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminGetByAnchorResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminGetByAnchorResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminGetByAnchorResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &RoomAdminGetByAnchorResp_Page{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RoomAdminGetByAnchorResp_Data{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminGetByAnchorResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MedalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminGetByAnchorResp_Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPage", wireType)
			}
			m.TotalPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminDismissAdminReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminDismissAdminReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminDismissAdminReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnchorId", wireType)
			}
			m.AnchorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnchorId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminDismissAdminResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminDismissAdminResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminDismissAdminResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnchorId", wireType)
			}
			m.AnchorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnchorId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminAddResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminAddResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminAddResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Userinfo == nil {
				m.Userinfo = &RoomAdminAddResp_UI{}
			}
			if err := m.Userinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminAddResp_UI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminIsAdminShortReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminIsAdminShortReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminIsAdminShortReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminIsAdminReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminIsAdminReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminIsAdminReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnchorId", wireType)
			}
			m.AnchorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnchorId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminIsAdminShortResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminIsAdminShortResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminIsAdminShortResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminIsAdminResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminIsAdminResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminIsAdminResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Userinfo == nil {
				m.Userinfo = &RoomAdminIsAdminResp_UI{}
			}
			if err := m.Userinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminIsAdminResp_UI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminGetByRoomResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAdminGetByRoomResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAdminGetByRoomResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RoomAdminGetByRoomResp_Data{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAdminGetByRoomResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/live/xuser/api/grpc/v1/api.proto", fileDescriptor_api_c5b121d61188340f)
}

var fileDescriptor_api_c5b121d61188340f = []byte{
	// 1209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xd7, 0xda, 0x4e, 0x6c, 0x3f, 0x37, 0x6d, 0x34, 0xdf, 0x2f, 0xe0, 0x6e, 0x8a, 0x37, 0x6c,
	0xd2, 0x26, 0x0d, 0xad, 0xad, 0xa4, 0x70, 0xa9, 0x14, 0xd1, 0xb8, 0x2d, 0x25, 0x15, 0x45, 0xd5,
	0x46, 0xa1, 0x52, 0x85, 0x64, 0x26, 0xde, 0xb1, 0x3d, 0xaa, 0xed, 0x5d, 0xef, 0xac, 0x1d, 0xdc,
	0x2b, 0x77, 0x90, 0x38, 0x80, 0xf8, 0x1b, 0xf8, 0x47, 0x2a, 0x4e, 0x70, 0xe4, 0xb2, 0x82, 0x9c,
	0xc0, 0xc7, 0x48, 0xdc, 0xd1, 0xcc, 0xac, 0xd7, 0x6b, 0xd7, 0xeb, 0x6c, 0x63, 0xa1, 0x70, 0xf1,
	0xee, 0xbc, 0x99, 0xf7, 0xf6, 0xfd, 0xf8, 0xbc, 0xf7, 0xe6, 0x19, 0x6e, 0x61, 0xdb, 0x2e, 0x31,
	0xe2, 0xf4, 0x68, 0x95, 0x94, 0x9a, 0xb4, 0x47, 0x4a, 0x5f, 0x75, 0x19, 0x71, 0x4a, 0xd8, 0xa6,
	0xa5, 0xba, 0x63, 0x57, 0x4b, 0xbd, 0x6d, 0xfe, 0x5e, 0xb4, 0x1d, 0xcb, 0xb5, 0xd0, 0x12, 0x3f,
	0x51, 0x14, 0x27, 0x8a, 0xbd, 0x6d, 0xf5, 0x76, 0x9d, 0xba, 0x8d, 0xee, 0x51, 0xb1, 0x6a, 0xb5,
	0x4a, 0x75, 0xab, 0x6e, 0x95, 0xc4, 0xa9, 0xa3, 0x6e, 0x4d, 0xac, 0xc4, 0x42, 0xbc, 0x49, 0x6e,
	0xfd, 0x09, 0xbc, 0x65, 0x58, 0x56, 0x6b, 0xcf, 0x6c, 0xd1, 0xf6, 0x41, 0xc3, 0x3a, 0x7e, 0xd8,
	0x76, 0x9d, 0xbe, 0x41, 0x3a, 0xe8, 0x03, 0x48, 0x76, 0xa9, 0x99, 0x57, 0x56, 0x95, 0xcd, 0x64,
	0x59, 0x3f, 0xf5, 0xb4, 0x42, 0xcd, 0x72, 0x5a, 0x77, 0xf5, 0x2e, 0x35, 0xf5, 0xd5, 0x1e, 0x6e,
	0x52, 0x13, 0xbb, 0xe4, 0xae, 0xee, 0x90, 0x4e, 0x97, 0x3a, 0xc4, 0xd4, 0x0d, 0x7e, 0x5c, 0xff,
	0x10, 0xde, 0x9e, 0x26, 0x8e, 0xd9, 0x68, 0x05, 0xb2, 0x0d, 0xcc, 0x2a, 0x98, 0xef, 0x48, 0xa9,
	0x46, 0xa6, 0x81, 0x99, 0x38, 0xa9, 0x7f, 0xaf, 0x80, 0x3a, 0xe2, 0x23, 0xd8, 0xa9, 0x36, 0x3e,
	0xb6, 0x1c, 0xb1, 0x3a, 0xb7, 0x2e, 0xa8, 0x0c, 0x99, 0x17, 0xa4, 0x5f, 0x39, 0xb6, 0x1c, 0x33,
	0x9f, 0x58, 0x55, 0x36, 0xb3, 0xe5, 0x8d, 0x53, 0x4f, 0x5b, 0x93, 0xac, 0xc3, 0x9d, 0xe9, 0xfc,
	0xe9, 0x17, 0xa4, 0xff, 0x8c, 0xef, 0xbe, 0x4a, 0xc0, 0x4a, 0xa4, 0x62, 0xcc, 0x46, 0x4f, 0x20,
	0x65, 0x62, 0x17, 0xe7, 0x93, 0xab, 0xc9, 0xcd, 0xdc, 0x4e, 0xa9, 0x38, 0x16, 0x8b, 0xe2, 0x0c,
	0xce, 0xe2, 0x03, 0xec, 0xe2, 0x72, 0x66, 0xe0, 0x69, 0x42, 0x80, 0x21, 0x7e, 0xd5, 0xdf, 0x14,
	0x48, 0xf1, 0x0d, 0x74, 0x35, 0x6c, 0x71, 0x7a, 0xe0, 0x69, 0x7c, 0x29, 0xcd, 0xda, 0x80, 0x0c,
	0x1d, 0xfa, 0x31, 0x21, 0xf6, 0x2f, 0x0d, 0x3c, 0x2d, 0xa0, 0x19, 0x69, 0x2a, 0x9d, 0x8a, 0x34,
	0x58, 0xe8, 0xb6, 0x71, 0x8b, 0xe4, 0x53, 0xc2, 0xf8, 0xec, 0xc0, 0xd3, 0x24, 0xc1, 0x90, 0x0f,
	0x74, 0x0d, 0x52, 0x35, 0x5c, 0x25, 0xf9, 0x05, 0xb1, 0x2f, 0x74, 0xe1, 0x6b, 0x43, 0xfc, 0xa2,
	0xdb, 0x00, 0x2d, 0x62, 0xe2, 0x66, 0x45, 0xc8, 0x58, 0x14, 0x67, 0x2e, 0x0f, 0x3c, 0x2d, 0x44,
	0x35, 0xb2, 0xe2, 0xfd, 0x33, 0x2e, 0x4c, 0x83, 0x85, 0x26, 0xe9, 0x91, 0x66, 0x3e, 0x2d, 0x74,
	0x12, 0x5f, 0x13, 0x04, 0x43, 0x3e, 0xf4, 0xef, 0x94, 0x90, 0x2b, 0x0d, 0xc2, 0x68, 0xbd, 0x1d,
	0x5a, 0x76, 0xd0, 0x2e, 0x2c, 0x3a, 0x96, 0xd5, 0x0a, 0xac, 0xbe, 0x7e, 0xea, 0x69, 0xef, 0xc9,
	0x60, 0x49, 0xfa, 0xf4, 0x50, 0xf9, 0x4c, 0x43, 0x8c, 0x24, 0xde, 0x0c, 0xaf, 0x05, 0xb8, 0x16,
	0xad, 0x13, 0xb3, 0xf5, 0x0e, 0xfc, 0x3f, 0x20, 0x3c, 0x22, 0x6e, 0xb9, 0x7f, 0x48, 0x4d, 0xae,
	0xec, 0x1a, 0xa4, 0x6c, 0x5c, 0x27, 0xbe, 0xaa, 0x57, 0x4e, 0x3d, 0x2d, 0x27, 0x3f, 0xc7, 0xa9,
	0xba, 0x21, 0x36, 0xcf, 0xa9, 0xd2, 0xd7, 0xa9, 0x50, 0x4a, 0x8e, 0xbe, 0xc9, 0x6c, 0xb4, 0x1b,
	0xfa, 0x68, 0x6e, 0xe7, 0x66, 0x14, 0xd8, 0xc2, 0x3c, 0xc5, 0xa7, 0xb8, 0x4e, 0x7c, 0x75, 0x1e,
	0x8d, 0x61, 0x35, 0x1e, 0xfb, 0x54, 0x94, 0xfe, 0x19, 0x03, 0xa5, 0x7a, 0x10, 0x4d, 0x69, 0x3e,
	0x0c, 0x3c, 0xcd, 0xa7, 0x04, 0x21, 0xdb, 0x82, 0x2c, 0x6e, 0x57, 0x1b, 0x96, 0x53, 0xa1, 0x66,
	0x3e, 0x29, 0x8e, 0x2d, 0x0d, 0x3c, 0x6d, 0x44, 0x34, 0x32, 0xf2, 0x75, 0xdf, 0x3c, 0x1b, 0xcc,
	0x77, 0xe0, 0x92, 0xcf, 0x57, 0xb5, 0x7a, 0xc4, 0xf1, 0x41, 0xbd, 0x3c, 0xf0, 0xb4, 0x31, 0xba,
	0x91, 0x93, 0xab, 0xfb, 0x7c, 0xc1, 0xa5, 0x56, 0x5d, 0x1a, 0xc0, 0x5b, 0x48, 0x15, 0x04, 0x43,
	0x3e, 0xd4, 0x63, 0x48, 0x71, 0x0f, 0x22, 0x14, 0x8e, 0xb7, 0xef, 0xcf, 0x15, 0xc8, 0xf2, 0x67,
	0x85, 0xd1, 0x97, 0x44, 0x5a, 0x69, 0x64, 0x38, 0xe1, 0x80, 0xbe, 0x24, 0xe8, 0x5d, 0x00, 0xd7,
	0x72, 0x71, 0xb3, 0x22, 0xd8, 0x84, 0x71, 0x46, 0x56, 0x50, 0x84, 0x3c, 0x0d, 0x72, 0x72, 0xbb,
	0x6a, 0x75, 0xdb, 0xae, 0x30, 0x2a, 0x69, 0x48, 0x8e, 0xfb, 0x9c, 0xa2, 0xbb, 0xf0, 0xce, 0x78,
	0x44, 0xf6, 0x84, 0xda, 0xff, 0x32, 0xf6, 0x3e, 0x9f, 0x84, 0x1e, 0x5f, 0xcd, 0x9f, 0x9c, 0xfa,
	0x8f, 0x29, 0xc8, 0x4f, 0x37, 0x87, 0xd9, 0xe8, 0xde, 0x18, 0xac, 0x6f, 0xcd, 0xc4, 0xe5, 0x88,
	0x2d, 0x8c, 0xec, 0xc7, 0x63, 0xc8, 0x8e, 0x2d, 0x61, 0x2a, 0xb8, 0xff, 0x8e, 0x01, 0xee, 0x39,
	0x2b, 0xeb, 0x59, 0xa8, 0x9b, 0x28, 0xbd, 0x99, 0xd8, 0xa5, 0x37, 0x3b, 0xbd, 0xf4, 0x86, 0x92,
	0x11, 0xa2, 0x92, 0xf1, 0xe2, 0x90, 0xfe, 0x83, 0x12, 0xc2, 0xc6, 0x03, 0xca, 0x5a, 0x94, 0xb1,
	0x39, 0x3b, 0xff, 0xc3, 0x70, 0x61, 0x91, 0x29, 0xb0, 0x79, 0xea, 0x69, 0xeb, 0x92, 0x37, 0xd8,
	0x9a, 0x2e, 0x21, 0xa8, 0x39, 0xfa, 0x0a, 0x5c, 0x8d, 0x50, 0x8c, 0xd9, 0xfa, 0x37, 0x0a, 0x5c,
	0x09, 0x76, 0xf7, 0x4c, 0xf3, 0xc2, 0xb5, 0xfd, 0x43, 0x81, 0xe5, 0x71, 0x85, 0x98, 0x8d, 0x3e,
	0x85, 0x0c, 0x4f, 0x03, 0xda, 0xae, 0x59, 0x7e, 0x7e, 0xe9, 0x51, 0xd9, 0xe1, 0xb3, 0x14, 0x0f,
	0xf7, 0xe5, 0x85, 0x62, 0xc8, 0x67, 0x04, 0x6f, 0xc3, 0x94, 0x48, 0xcc, 0xac, 0xf7, 0xc9, 0x48,
	0x88, 0xdd, 0x83, 0xc4, 0xe1, 0x7e, 0xac, 0xbc, 0x4a, 0x4c, 0xcf, 0x2b, 0xfd, 0xdb, 0x30, 0x56,
	0xf6, 0xd9, 0xf0, 0x9a, 0xe9, 0xb8, 0xe7, 0xf7, 0xfe, 0xee, 0x84, 0xe2, 0x6f, 0x58, 0xd9, 0x7e,
	0x55, 0xe0, 0x7f, 0x93, 0x1a, 0x5d, 0x34, 0x14, 0xe6, 0xb5, 0xe9, 0xa3, 0x10, 0xee, 0xc7, 0x9d,
	0xcc, 0x6c, 0x11, 0x68, 0xc2, 0xba, 0x4d, 0xd7, 0xb7, 0x4d, 0x06, 0x5a, 0x50, 0x0c, 0xff, 0xa9,
	0xff, 0xa5, 0x84, 0xae, 0x4d, 0xfb, 0xa3, 0xa4, 0x41, 0x4f, 0x5f, 0x83, 0xe3, 0x8d, 0x28, 0x38,
	0x86, 0xd8, 0xfe, 0xd3, 0x90, 0xfc, 0x59, 0x09, 0x8d, 0x3c, 0xa1, 0x9e, 0xc9, 0x6c, 0xf4, 0x89,
	0xdf, 0x96, 0x14, 0xd1, 0x96, 0xb6, 0x66, 0xb6, 0xa5, 0x21, 0xd3, 0xf4, 0xa6, 0x54, 0xf3, 0x7b,
	0x52, 0xd0, 0x39, 0x94, 0x88, 0xce, 0x31, 0x9f, 0x3b, 0x76, 0x7e, 0x4a, 0x43, 0x36, 0xd0, 0x0b,
	0x1d, 0xc2, 0x22, 0x9f, 0x2a, 0xda, 0x7d, 0xb4, 0x1e, 0x39, 0xd8, 0x84, 0x46, 0x46, 0xf5, 0x7a,
	0x8c, 0x53, 0xcc, 0x46, 0xcf, 0x00, 0xea, 0xc4, 0xad, 0x1c, 0xf5, 0x2b, 0x5c, 0xad, 0xb5, 0xb3,
	0xef, 0xa1, 0x1d, 0x75, 0x3d, 0xce, 0x65, 0x15, 0x61, 0x01, 0x4d, 0x5a, 0x6f, 0xa3, 0x48, 0x5f,
	0xbf, 0x3e, 0x77, 0xa8, 0xef, 0xc7, 0x3e, 0xcb, 0x6c, 0x44, 0x61, 0x99, 0x89, 0x59, 0xae, 0x52,
	0xb3, 0x1c, 0x39, 0x70, 0xa1, 0x9b, 0x71, 0xa7, 0xbe, 0x8e, 0xba, 0x15, 0x7f, 0x40, 0x44, 0x5f,
	0xc2, 0x92, 0xef, 0x26, 0x99, 0xd7, 0xe8, 0x46, 0xac, 0x7b, 0x4d, 0x47, 0xdd, 0x88, 0x79, 0xff,
	0x41, 0xcf, 0x21, 0xe7, 0x7f, 0x81, 0x87, 0x1f, 0xad, 0xc7, 0x00, 0xe8, 0x8c, 0x20, 0x8f, 0x63,
	0xff, 0x0b, 0x48, 0x9b, 0xb2, 0x65, 0xa2, 0x48, 0x7d, 0x26, 0x9a, 0xbd, 0xba, 0x19, 0xef, 0x20,
	0xb3, 0xd1, 0x63, 0x48, 0x63, 0xdb, 0xb6, 0x68, 0xdb, 0x45, 0x85, 0x99, 0xfd, 0xac, 0xa3, 0x6a,
	0x67, 0xf4, 0x3b, 0x74, 0x30, 0x9a, 0xa7, 0x91, 0x7e, 0x66, 0x35, 0xea, 0xa8, 0x6b, 0x31, 0x2a,
	0x16, 0xaa, 0xc2, 0xe5, 0xa1, 0xd0, 0x0a, 0xe3, 0xb5, 0x33, 0xda, 0x0b, 0x13, 0x6d, 0x2c, 0xda,
	0x0b, 0x93, 0xa5, 0xb8, 0xbc, 0xfc, 0xea, 0xa4, 0xa0, 0xfc, 0x72, 0x52, 0x50, 0x7e, 0x3f, 0x29,
	0x28, 0xcf, 0x13, 0xbd, 0xed, 0xa3, 0x45, 0xf1, 0xa7, 0xce, 0x9d, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xe9, 0x39, 0x39, 0x7e, 0x42, 0x12, 0x00, 0x00,
}
