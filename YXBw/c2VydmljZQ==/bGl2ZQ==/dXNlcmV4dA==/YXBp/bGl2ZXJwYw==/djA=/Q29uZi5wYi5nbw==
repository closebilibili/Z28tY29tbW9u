// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v0/Conf.proto

package v0

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ConfSetReq struct {
	// 参数结构
	VarList []*ConfSetReq_Var `protobuf:"bytes,1,rep,name=var_list,json=varList" json:"var_list"`
}

func (m *ConfSetReq) Reset()         { *m = ConfSetReq{} }
func (m *ConfSetReq) String() string { return proto.CompactTextString(m) }
func (*ConfSetReq) ProtoMessage()    {}
func (*ConfSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Conf_c480b4e7b1d60c46, []int{0}
}
func (m *ConfSetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfSetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfSetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConfSetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfSetReq.Merge(dst, src)
}
func (m *ConfSetReq) XXX_Size() int {
	return m.Size()
}
func (m *ConfSetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfSetReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConfSetReq proto.InternalMessageInfo

func (m *ConfSetReq) GetVarList() []*ConfSetReq_Var {
	if m != nil {
		return m.VarList
	}
	return nil
}

type ConfSetReq_Var struct {
	// 用户id
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 目标id,主播uid、房间号etc
	TargetId int64 `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id"`
	// type请在 “配置仓库标识申请” 中自行分配
	Type int64 `protobuf:"varint,3,opt,name=type,proto3" json:"type"`
	// 设置内容
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content"`
}

func (m *ConfSetReq_Var) Reset()         { *m = ConfSetReq_Var{} }
func (m *ConfSetReq_Var) String() string { return proto.CompactTextString(m) }
func (*ConfSetReq_Var) ProtoMessage()    {}
func (*ConfSetReq_Var) Descriptor() ([]byte, []int) {
	return fileDescriptor_Conf_c480b4e7b1d60c46, []int{0, 0}
}
func (m *ConfSetReq_Var) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfSetReq_Var) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfSetReq_Var.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConfSetReq_Var) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfSetReq_Var.Merge(dst, src)
}
func (m *ConfSetReq_Var) XXX_Size() int {
	return m.Size()
}
func (m *ConfSetReq_Var) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfSetReq_Var.DiscardUnknown(m)
}

var xxx_messageInfo_ConfSetReq_Var proto.InternalMessageInfo

func (m *ConfSetReq_Var) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ConfSetReq_Var) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *ConfSetReq_Var) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ConfSetReq_Var) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ConfSetResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *ConfSetResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *ConfSetResp) Reset()         { *m = ConfSetResp{} }
func (m *ConfSetResp) String() string { return proto.CompactTextString(m) }
func (*ConfSetResp) ProtoMessage()    {}
func (*ConfSetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Conf_c480b4e7b1d60c46, []int{1}
}
func (m *ConfSetResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfSetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfSetResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConfSetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfSetResp.Merge(dst, src)
}
func (m *ConfSetResp) XXX_Size() int {
	return m.Size()
}
func (m *ConfSetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfSetResp.DiscardUnknown(m)
}

var xxx_messageInfo_ConfSetResp proto.InternalMessageInfo

func (m *ConfSetResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ConfSetResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ConfSetResp) GetData() *ConfSetResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type ConfSetResp_Data struct {
}

func (m *ConfSetResp_Data) Reset()         { *m = ConfSetResp_Data{} }
func (m *ConfSetResp_Data) String() string { return proto.CompactTextString(m) }
func (*ConfSetResp_Data) ProtoMessage()    {}
func (*ConfSetResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_Conf_c480b4e7b1d60c46, []int{1, 0}
}
func (m *ConfSetResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfSetResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfSetResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConfSetResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfSetResp_Data.Merge(dst, src)
}
func (m *ConfSetResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *ConfSetResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfSetResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_ConfSetResp_Data proto.InternalMessageInfo

type ConfGetReq struct {
	// 用户id
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 目标id,主播uid、房间号etc
	TargetId int64 `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id"`
	// type请在 “配置仓库标识申请” 中自行分配
	Type []int64 `protobuf:"varint,3,rep,packed,name=type" json:"type"`
}

func (m *ConfGetReq) Reset()         { *m = ConfGetReq{} }
func (m *ConfGetReq) String() string { return proto.CompactTextString(m) }
func (*ConfGetReq) ProtoMessage()    {}
func (*ConfGetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Conf_c480b4e7b1d60c46, []int{2}
}
func (m *ConfGetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfGetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfGetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConfGetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfGetReq.Merge(dst, src)
}
func (m *ConfGetReq) XXX_Size() int {
	return m.Size()
}
func (m *ConfGetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfGetReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConfGetReq proto.InternalMessageInfo

func (m *ConfGetReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ConfGetReq) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *ConfGetReq) GetType() []int64 {
	if m != nil {
		return m.Type
	}
	return nil
}

type ConfGetResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	// type -> content
	Data map[string]string `protobuf:"bytes,3,rep,name=data" json:"data" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ConfGetResp) Reset()         { *m = ConfGetResp{} }
func (m *ConfGetResp) String() string { return proto.CompactTextString(m) }
func (*ConfGetResp) ProtoMessage()    {}
func (*ConfGetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Conf_c480b4e7b1d60c46, []int{3}
}
func (m *ConfGetResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfGetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfGetResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConfGetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfGetResp.Merge(dst, src)
}
func (m *ConfGetResp) XXX_Size() int {
	return m.Size()
}
func (m *ConfGetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfGetResp.DiscardUnknown(m)
}

var xxx_messageInfo_ConfGetResp proto.InternalMessageInfo

func (m *ConfGetResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ConfGetResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ConfGetResp) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ConfSetReq)(nil), "userext.v0.ConfSetReq")
	proto.RegisterType((*ConfSetReq_Var)(nil), "userext.v0.ConfSetReq.Var")
	proto.RegisterType((*ConfSetResp)(nil), "userext.v0.ConfSetResp")
	proto.RegisterType((*ConfSetResp_Data)(nil), "userext.v0.ConfSetResp.Data")
	proto.RegisterType((*ConfGetReq)(nil), "userext.v0.ConfGetReq")
	proto.RegisterType((*ConfGetResp)(nil), "userext.v0.ConfGetResp")
	proto.RegisterMapType((map[string]string)(nil), "userext.v0.ConfGetResp.DataEntry")
}
func (m *ConfSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VarList) > 0 {
		for _, msg := range m.VarList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintConf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ConfSetReq_Var) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfSetReq_Var) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintConf(dAtA, i, uint64(m.Uid))
	}
	if m.TargetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintConf(dAtA, i, uint64(m.TargetId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintConf(dAtA, i, uint64(m.Type))
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintConf(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *ConfSetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfSetResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintConf(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConf(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConf(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ConfSetResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfSetResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ConfGetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfGetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintConf(dAtA, i, uint64(m.Uid))
	}
	if m.TargetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintConf(dAtA, i, uint64(m.TargetId))
	}
	if len(m.Type) > 0 {
		dAtA3 := make([]byte, len(m.Type)*10)
		var j2 int
		for _, num1 := range m.Type {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConf(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *ConfGetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfGetResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintConf(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConf(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x1a
			i++
			v := m.Data[k]
			mapSize := 1 + len(k) + sovConf(uint64(len(k))) + 1 + len(v) + sovConf(uint64(len(v)))
			i = encodeVarintConf(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintConf(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintConf(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func encodeVarintConf(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ConfSetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VarList) > 0 {
		for _, e := range m.VarList {
			l = e.Size()
			n += 1 + l + sovConf(uint64(l))
		}
	}
	return n
}

func (m *ConfSetReq_Var) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovConf(uint64(m.Uid))
	}
	if m.TargetId != 0 {
		n += 1 + sovConf(uint64(m.TargetId))
	}
	if m.Type != 0 {
		n += 1 + sovConf(uint64(m.Type))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovConf(uint64(l))
	}
	return n
}

func (m *ConfSetResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovConf(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovConf(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovConf(uint64(l))
	}
	return n
}

func (m *ConfSetResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConfGetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovConf(uint64(m.Uid))
	}
	if m.TargetId != 0 {
		n += 1 + sovConf(uint64(m.TargetId))
	}
	if len(m.Type) > 0 {
		l = 0
		for _, e := range m.Type {
			l += sovConf(uint64(e))
		}
		n += 1 + sovConf(uint64(l)) + l
	}
	return n
}

func (m *ConfGetResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovConf(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovConf(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovConf(uint64(len(k))) + 1 + len(v) + sovConf(uint64(len(v)))
			n += mapEntrySize + 1 + sovConf(uint64(mapEntrySize))
		}
	}
	return n
}

func sovConf(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConf(x uint64) (n int) {
	return sovConf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConfSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VarList = append(m.VarList, &ConfSetReq_Var{})
			if err := m.VarList[len(m.VarList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfSetReq_Var) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Var: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Var: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfSetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfSetResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfSetResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ConfSetResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfSetResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfGetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfGetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfGetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Type = append(m.Type, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthConf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Type) == 0 {
					m.Type = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Type = append(m.Type, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfGetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfGetResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfGetResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthConf
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthConf
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipConf(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthConf
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthConf
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConf
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConf(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConf = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConf   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v0/Conf.proto", fileDescriptor_Conf_c480b4e7b1d60c46) }

var fileDescriptor_Conf_c480b4e7b1d60c46 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xee, 0x34, 0x71, 0xdb, 0xbc, 0xba, 0x20, 0x83, 0x68, 0x0c, 0x25, 0xa9, 0x05, 0xa1, 0x08,
	0xa6, 0xa5, 0x82, 0xca, 0x5e, 0x84, 0xae, 0x52, 0x04, 0x4f, 0x23, 0xec, 0xc1, 0xcb, 0x32, 0x6d,
	0x66, 0x63, 0x70, 0xdb, 0xe9, 0xce, 0x4c, 0x82, 0xfd, 0x0b, 0x9e, 0xf4, 0x1f, 0x79, 0xf4, 0xb8,
	0x47, 0x4f, 0x41, 0x5a, 0xbc, 0xe4, 0x57, 0xc8, 0xcc, 0x74, 0x5b, 0x71, 0xbb, 0x27, 0xbd, 0x3c,
	0xde, 0x37, 0xfd, 0xde, 0x9b, 0xef, 0xfb, 0x3a, 0x81, 0xc3, 0x62, 0xd0, 0x3f, 0xe6, 0xf3, 0xb3,
	0x78, 0x21, 0xb8, 0xe2, 0x18, 0x72, 0xc9, 0x04, 0xfb, 0xa4, 0xe2, 0x62, 0x10, 0x3c, 0x49, 0x33,
	0xf5, 0x21, 0x9f, 0xc4, 0x53, 0x3e, 0xeb, 0xa7, 0x3c, 0xe5, 0x7d, 0x43, 0x99, 0xe4, 0x67, 0x06,
	0x19, 0x60, 0x3a, 0x3b, 0xda, 0xfd, 0x85, 0x00, 0xf4, 0xa6, 0x77, 0x4c, 0x11, 0x76, 0x81, 0x8f,
	0xa1, 0x59, 0x50, 0x71, 0x7a, 0x9e, 0x49, 0xe5, 0xa3, 0x8e, 0xd3, 0x6b, 0x0d, 0x83, 0x78, 0xb7,
	0x3c, 0xde, 0x31, 0xe3, 0x13, 0x2a, 0x46, 0xb7, 0xab, 0x32, 0xda, 0xf2, 0x49, 0xa3, 0xa0, 0xe2,
	0x6d, 0x26, 0x55, 0xf0, 0x15, 0x81, 0x73, 0x42, 0x05, 0x7e, 0x00, 0x4e, 0x9e, 0x25, 0x3e, 0xea,
	0xa0, 0x9e, 0x33, 0x6a, 0x54, 0x65, 0xa4, 0x21, 0xd1, 0x05, 0x3f, 0x06, 0x4f, 0x51, 0x91, 0x32,
	0x75, 0x9a, 0x25, 0x7e, 0xdd, 0x10, 0x0e, 0xab, 0x32, 0xda, 0x1d, 0x92, 0xa6, 0x6d, 0xdf, 0x24,
	0xb8, 0x0d, 0xae, 0x5a, 0x2e, 0x98, 0xef, 0x18, 0x5a, 0xb3, 0x2a, 0x23, 0x83, 0x89, 0xa9, 0xf8,
	0x11, 0x34, 0xa6, 0x7c, 0xae, 0xd8, 0x5c, 0xf9, 0x6e, 0x07, 0xf5, 0xbc, 0x51, 0xab, 0x2a, 0xa3,
	0xab, 0x23, 0x72, 0xd5, 0x74, 0x3f, 0x23, 0x68, 0x6d, 0xd5, 0xcb, 0x85, 0x5e, 0x3a, 0xe5, 0x09,
	0xdb, 0x88, 0x33, 0x4b, 0x35, 0x26, 0xa6, 0x6a, 0xe5, 0x33, 0x99, 0x1a, 0x61, 0x9e, 0x55, 0x3e,
	0x93, 0x29, 0xd1, 0x05, 0x1f, 0x81, 0x9b, 0x50, 0x45, 0x8d, 0x9a, 0xd6, 0xb0, 0xbd, 0x37, 0x1d,
	0xb9, 0x88, 0x5f, 0x51, 0x45, 0xed, 0x5a, 0xcd, 0x26, 0xa6, 0x06, 0x07, 0xe0, 0xea, 0xf3, 0xee,
	0x85, 0xcd, 0x7c, 0x6c, 0x33, 0xff, 0xef, 0x31, 0x39, 0xd7, 0x63, 0xea, 0x7e, 0xdb, 0xf8, 0x1f,
	0xff, 0xab, 0xff, 0x97, 0x5b, 0xff, 0xfa, 0x75, 0x3c, 0xfc, 0xdb, 0xff, 0xf8, 0x0f, 0xff, 0xaf,
	0xe7, 0x4a, 0x2c, 0xaf, 0x85, 0xf0, 0x1c, 0xbc, 0xed, 0x8f, 0xf8, 0x0e, 0x38, 0x1f, 0xd9, 0xd2,
	0xa8, 0xf0, 0x88, 0x6e, 0xf1, 0x5d, 0xb8, 0x55, 0xd0, 0xf3, 0x9c, 0xd9, 0xcb, 0x89, 0x05, 0x47,
	0xf5, 0x17, 0x68, 0x58, 0x80, 0xab, 0x6f, 0xc0, 0xcf, 0xc0, 0x91, 0x4c, 0xe1, 0x7b, 0xfb, 0x1f,
	0x66, 0x70, 0xff, 0x86, 0xbf, 0x44, 0xcf, 0xa5, 0xfb, 0xe6, 0xc6, 0x37, 0xcc, 0x6d, 0xac, 0x8c,
	0xda, 0xdf, 0x57, 0x21, 0xba, 0x5c, 0x85, 0xe8, 0xe7, 0x2a, 0x44, 0x5f, 0xd6, 0x61, 0xed, 0x72,
	0x1d, 0xd6, 0x7e, 0xac, 0xc3, 0xda, 0xfb, 0x7a, 0x31, 0x98, 0x1c, 0x98, 0xef, 0xe8, 0xe9, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xc9, 0xee, 0x26, 0x01, 0x93, 0x03, 0x00, 0x00,
}
