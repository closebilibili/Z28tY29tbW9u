// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/FansMedal.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FansMedalGetWearedMedalReq struct {
	//
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	//
	Source int64 `protobuf:"varint,2,opt,name=source,proto3" json:"source"`
	//
	NeedRank bool `protobuf:"varint,3,opt,name=need_rank,json=needRank,proto3" json:"need_rank"`
	//
	NeedTodayIntimacy bool `protobuf:"varint,4,opt,name=need_today_intimacy,json=needTodayIntimacy,proto3" json:"need_today_intimacy"`
	//
	IgnoreUserinfo bool `protobuf:"varint,5,opt,name=ignore_userinfo,json=ignoreUserinfo,proto3" json:"ignore_userinfo"`
}

func (m *FansMedalGetWearedMedalReq) Reset()         { *m = FansMedalGetWearedMedalReq{} }
func (m *FansMedalGetWearedMedalReq) String() string { return proto.CompactTextString(m) }
func (*FansMedalGetWearedMedalReq) ProtoMessage()    {}
func (*FansMedalGetWearedMedalReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_FansMedal_ff39868724d1873b, []int{0}
}
func (m *FansMedalGetWearedMedalReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FansMedalGetWearedMedalReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FansMedalGetWearedMedalReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FansMedalGetWearedMedalReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FansMedalGetWearedMedalReq.Merge(dst, src)
}
func (m *FansMedalGetWearedMedalReq) XXX_Size() int {
	return m.Size()
}
func (m *FansMedalGetWearedMedalReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FansMedalGetWearedMedalReq.DiscardUnknown(m)
}

var xxx_messageInfo_FansMedalGetWearedMedalReq proto.InternalMessageInfo

func (m *FansMedalGetWearedMedalReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *FansMedalGetWearedMedalReq) GetSource() int64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *FansMedalGetWearedMedalReq) GetNeedRank() bool {
	if m != nil {
		return m.NeedRank
	}
	return false
}

func (m *FansMedalGetWearedMedalReq) GetNeedTodayIntimacy() bool {
	if m != nil {
		return m.NeedTodayIntimacy
	}
	return false
}

func (m *FansMedalGetWearedMedalReq) GetIgnoreUserinfo() bool {
	if m != nil {
		return m.IgnoreUserinfo
	}
	return false
}

type FansMedalGetWearedMedalResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *FansMedalGetWearedMedalResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *FansMedalGetWearedMedalResp) Reset()         { *m = FansMedalGetWearedMedalResp{} }
func (m *FansMedalGetWearedMedalResp) String() string { return proto.CompactTextString(m) }
func (*FansMedalGetWearedMedalResp) ProtoMessage()    {}
func (*FansMedalGetWearedMedalResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_FansMedal_ff39868724d1873b, []int{1}
}
func (m *FansMedalGetWearedMedalResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FansMedalGetWearedMedalResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FansMedalGetWearedMedalResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FansMedalGetWearedMedalResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FansMedalGetWearedMedalResp.Merge(dst, src)
}
func (m *FansMedalGetWearedMedalResp) XXX_Size() int {
	return m.Size()
}
func (m *FansMedalGetWearedMedalResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FansMedalGetWearedMedalResp.DiscardUnknown(m)
}

var xxx_messageInfo_FansMedalGetWearedMedalResp proto.InternalMessageInfo

func (m *FansMedalGetWearedMedalResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *FansMedalGetWearedMedalResp) GetData() *FansMedalGetWearedMedalResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type FansMedalGetWearedMedalResp_List struct {
	// 用户uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// up主uid
	TargetId int64 `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id"`
	// 勋章id
	MedalId int64 `protobuf:"varint,3,opt,name=medal_id,json=medalId,proto3" json:"medal_id"`
	// 勋章总经验值
	Score int64 `protobuf:"varint,4,opt,name=score,proto3" json:"score"`
	// 勋章等级
	Level int64 `protobuf:"varint,5,opt,name=level,proto3" json:"level"`
	// 当前等级亲密度
	Intimacy int64 `protobuf:"varint,6,opt,name=intimacy,proto3" json:"intimacy"`
	// 当前等级升级所需
	NextIntimacy int64 `protobuf:"varint,7,opt,name=next_intimacy,json=nextIntimacy,proto3" json:"next_intimacy"`
	// 佩戴状态  0:未佩戴 1:佩戴中
	Status int64 `protobuf:"varint,8,opt,name=status,proto3" json:"status"`
	// 来源 1直播 2:投币 3:充电
	Source int64 `protobuf:"varint,9,opt,name=source,proto3" json:"source"`
	// 领取渠道 1直播 2:主站
	ReceiveChannel int64 `protobuf:"varint,10,opt,name=receive_channel,json=receiveChannel,proto3" json:"receive_channel"`
	// 是否已经领取
	IsReceive int64 `protobuf:"varint,11,opt,name=is_receive,json=isReceive,proto3" json:"is_receive"`
	// 主站佩戴状态 0:未佩戴 1:佩戴中
	MasterStatus int64 `protobuf:"varint,12,opt,name=master_status,json=masterStatus,proto3" json:"master_status"`
	// 领取时间
	ReceiveTime string `protobuf:"bytes,13,opt,name=receive_time,json=receiveTime,proto3" json:"receive_time"`
	// 今日亲密度上限
	TodayIntimacy int64 `protobuf:"varint,14,opt,name=today_intimacy,json=todayIntimacy,proto3" json:"today_intimacy"`
	// 最后佩戴的时间戳
	LastWearTime int64 `protobuf:"varint,15,opt,name=last_wear_time,json=lastWearTime,proto3" json:"last_wear_time"`
	// 勋章名称
	MedalName string `protobuf:"bytes,16,opt,name=medal_name,json=medalName,proto3" json:"medal_name"`
	// 用户uid
	MasterAvailable int64 `protobuf:"varint,17,opt,name=master_available,json=masterAvailable,proto3" json:"master_available"`
	// up主昵称
	TargetName string `protobuf:"bytes,18,opt,name=target_name,json=targetName,proto3" json:"target_name"`
	// up主头像
	TargetFace string `protobuf:"bytes,19,opt,name=target_face,json=targetFace,proto3" json:"target_face"`
	// 排名
	Rank string `protobuf:"bytes,20,opt,name=rank,proto3" json:"rank"`
	// 勋章颜色 不同等级颜色不同
	MedalColor int64 `protobuf:"varint,21,opt,name=medal_color,json=medalColor,proto3" json:"medal_color"`
	// 今天增加亲密度
	TodayFeed int64 `protobuf:"varint,22,opt,name=today_feed,json=todayFeed,proto3" json:"today_feed"`
	// 大航海类型 1 总督 2 提督 3 舰长
	GuardType int64 `protobuf:"varint,23,opt,name=guard_type,json=guardType,proto3" json:"guard_type"`
	// 今日亲密度上限
	DayLimit int64 `protobuf:"varint,24,opt,name=day_limit,json=dayLimit,proto3" json:"day_limit"`
}

func (m *FansMedalGetWearedMedalResp_List) Reset()         { *m = FansMedalGetWearedMedalResp_List{} }
func (m *FansMedalGetWearedMedalResp_List) String() string { return proto.CompactTextString(m) }
func (*FansMedalGetWearedMedalResp_List) ProtoMessage()    {}
func (*FansMedalGetWearedMedalResp_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_FansMedal_ff39868724d1873b, []int{1, 0}
}
func (m *FansMedalGetWearedMedalResp_List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FansMedalGetWearedMedalResp_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FansMedalGetWearedMedalResp_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FansMedalGetWearedMedalResp_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FansMedalGetWearedMedalResp_List.Merge(dst, src)
}
func (m *FansMedalGetWearedMedalResp_List) XXX_Size() int {
	return m.Size()
}
func (m *FansMedalGetWearedMedalResp_List) XXX_DiscardUnknown() {
	xxx_messageInfo_FansMedalGetWearedMedalResp_List.DiscardUnknown(m)
}

var xxx_messageInfo_FansMedalGetWearedMedalResp_List proto.InternalMessageInfo

func (m *FansMedalGetWearedMedalResp_List) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_List) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_List) GetMedalId() int64 {
	if m != nil {
		return m.MedalId
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_List) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_List) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_List) GetIntimacy() int64 {
	if m != nil {
		return m.Intimacy
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_List) GetNextIntimacy() int64 {
	if m != nil {
		return m.NextIntimacy
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_List) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_List) GetSource() int64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_List) GetReceiveChannel() int64 {
	if m != nil {
		return m.ReceiveChannel
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_List) GetIsReceive() int64 {
	if m != nil {
		return m.IsReceive
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_List) GetMasterStatus() int64 {
	if m != nil {
		return m.MasterStatus
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_List) GetReceiveTime() string {
	if m != nil {
		return m.ReceiveTime
	}
	return ""
}

func (m *FansMedalGetWearedMedalResp_List) GetTodayIntimacy() int64 {
	if m != nil {
		return m.TodayIntimacy
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_List) GetLastWearTime() int64 {
	if m != nil {
		return m.LastWearTime
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_List) GetMedalName() string {
	if m != nil {
		return m.MedalName
	}
	return ""
}

func (m *FansMedalGetWearedMedalResp_List) GetMasterAvailable() int64 {
	if m != nil {
		return m.MasterAvailable
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_List) GetTargetName() string {
	if m != nil {
		return m.TargetName
	}
	return ""
}

func (m *FansMedalGetWearedMedalResp_List) GetTargetFace() string {
	if m != nil {
		return m.TargetFace
	}
	return ""
}

func (m *FansMedalGetWearedMedalResp_List) GetRank() string {
	if m != nil {
		return m.Rank
	}
	return ""
}

func (m *FansMedalGetWearedMedalResp_List) GetMedalColor() int64 {
	if m != nil {
		return m.MedalColor
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_List) GetTodayFeed() int64 {
	if m != nil {
		return m.TodayFeed
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_List) GetGuardType() int64 {
	if m != nil {
		return m.GuardType
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_List) GetDayLimit() int64 {
	if m != nil {
		return m.DayLimit
	}
	return 0
}

type FansMedalGetWearedMedalResp_Data struct {
	//
	Max int64 `protobuf:"varint,1,opt,name=max,proto3" json:"max"`
	//
	Cnt int64 `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt"`
	//
	List []*FansMedalGetWearedMedalResp_List `protobuf:"bytes,3,rep,name=list" json:"list"`
}

func (m *FansMedalGetWearedMedalResp_Data) Reset()         { *m = FansMedalGetWearedMedalResp_Data{} }
func (m *FansMedalGetWearedMedalResp_Data) String() string { return proto.CompactTextString(m) }
func (*FansMedalGetWearedMedalResp_Data) ProtoMessage()    {}
func (*FansMedalGetWearedMedalResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_FansMedal_ff39868724d1873b, []int{1, 1}
}
func (m *FansMedalGetWearedMedalResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FansMedalGetWearedMedalResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FansMedalGetWearedMedalResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FansMedalGetWearedMedalResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FansMedalGetWearedMedalResp_Data.Merge(dst, src)
}
func (m *FansMedalGetWearedMedalResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *FansMedalGetWearedMedalResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_FansMedalGetWearedMedalResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_FansMedalGetWearedMedalResp_Data proto.InternalMessageInfo

func (m *FansMedalGetWearedMedalResp_Data) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_Data) GetCnt() int64 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

func (m *FansMedalGetWearedMedalResp_Data) GetList() []*FansMedalGetWearedMedalResp_List {
	if m != nil {
		return m.List
	}
	return nil
}

type FansMedalTargetsWithMedalReq struct {
	// 用户id
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 主播id
	TargetIds []int64 `protobuf:"varint,2,rep,packed,name=target_ids,json=targetIds" json:"target_ids"`
}

func (m *FansMedalTargetsWithMedalReq) Reset()         { *m = FansMedalTargetsWithMedalReq{} }
func (m *FansMedalTargetsWithMedalReq) String() string { return proto.CompactTextString(m) }
func (*FansMedalTargetsWithMedalReq) ProtoMessage()    {}
func (*FansMedalTargetsWithMedalReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_FansMedal_ff39868724d1873b, []int{2}
}
func (m *FansMedalTargetsWithMedalReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FansMedalTargetsWithMedalReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FansMedalTargetsWithMedalReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FansMedalTargetsWithMedalReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FansMedalTargetsWithMedalReq.Merge(dst, src)
}
func (m *FansMedalTargetsWithMedalReq) XXX_Size() int {
	return m.Size()
}
func (m *FansMedalTargetsWithMedalReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FansMedalTargetsWithMedalReq.DiscardUnknown(m)
}

var xxx_messageInfo_FansMedalTargetsWithMedalReq proto.InternalMessageInfo

func (m *FansMedalTargetsWithMedalReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *FansMedalTargetsWithMedalReq) GetTargetIds() []int64 {
	if m != nil {
		return m.TargetIds
	}
	return nil
}

type FansMedalTargetsWithMedalResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	//
	Data []int64 `protobuf:"varint,4,rep,packed,name=data" json:"data"`
}

func (m *FansMedalTargetsWithMedalResp) Reset()         { *m = FansMedalTargetsWithMedalResp{} }
func (m *FansMedalTargetsWithMedalResp) String() string { return proto.CompactTextString(m) }
func (*FansMedalTargetsWithMedalResp) ProtoMessage()    {}
func (*FansMedalTargetsWithMedalResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_FansMedal_ff39868724d1873b, []int{3}
}
func (m *FansMedalTargetsWithMedalResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FansMedalTargetsWithMedalResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FansMedalTargetsWithMedalResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FansMedalTargetsWithMedalResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FansMedalTargetsWithMedalResp.Merge(dst, src)
}
func (m *FansMedalTargetsWithMedalResp) XXX_Size() int {
	return m.Size()
}
func (m *FansMedalTargetsWithMedalResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FansMedalTargetsWithMedalResp.DiscardUnknown(m)
}

var xxx_messageInfo_FansMedalTargetsWithMedalResp proto.InternalMessageInfo

func (m *FansMedalTargetsWithMedalResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FansMedalTargetsWithMedalResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *FansMedalTargetsWithMedalResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *FansMedalTargetsWithMedalResp) GetData() []int64 {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*FansMedalGetWearedMedalReq)(nil), "fans_medal.v1.FansMedalGetWearedMedalReq")
	proto.RegisterType((*FansMedalGetWearedMedalResp)(nil), "fans_medal.v1.FansMedalGetWearedMedalResp")
	proto.RegisterType((*FansMedalGetWearedMedalResp_List)(nil), "fans_medal.v1.FansMedalGetWearedMedalResp.List")
	proto.RegisterType((*FansMedalGetWearedMedalResp_Data)(nil), "fans_medal.v1.FansMedalGetWearedMedalResp.Data")
	proto.RegisterType((*FansMedalTargetsWithMedalReq)(nil), "fans_medal.v1.FansMedalTargetsWithMedalReq")
	proto.RegisterType((*FansMedalTargetsWithMedalResp)(nil), "fans_medal.v1.FansMedalTargetsWithMedalResp")
}
func (m *FansMedalGetWearedMedalReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FansMedalGetWearedMedalReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.Uid))
	}
	if m.Source != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.Source))
	}
	if m.NeedRank {
		dAtA[i] = 0x18
		i++
		if m.NeedRank {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NeedTodayIntimacy {
		dAtA[i] = 0x20
		i++
		if m.NeedTodayIntimacy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IgnoreUserinfo {
		dAtA[i] = 0x28
		i++
		if m.IgnoreUserinfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *FansMedalGetWearedMedalResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FansMedalGetWearedMedalResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *FansMedalGetWearedMedalResp_List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FansMedalGetWearedMedalResp_List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.Uid))
	}
	if m.TargetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.TargetId))
	}
	if m.MedalId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.MedalId))
	}
	if m.Score != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.Score))
	}
	if m.Level != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.Level))
	}
	if m.Intimacy != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.Intimacy))
	}
	if m.NextIntimacy != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.NextIntimacy))
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.Status))
	}
	if m.Source != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.Source))
	}
	if m.ReceiveChannel != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.ReceiveChannel))
	}
	if m.IsReceive != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.IsReceive))
	}
	if m.MasterStatus != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.MasterStatus))
	}
	if len(m.ReceiveTime) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(len(m.ReceiveTime)))
		i += copy(dAtA[i:], m.ReceiveTime)
	}
	if m.TodayIntimacy != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.TodayIntimacy))
	}
	if m.LastWearTime != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.LastWearTime))
	}
	if len(m.MedalName) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(len(m.MedalName)))
		i += copy(dAtA[i:], m.MedalName)
	}
	if m.MasterAvailable != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.MasterAvailable))
	}
	if len(m.TargetName) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(len(m.TargetName)))
		i += copy(dAtA[i:], m.TargetName)
	}
	if len(m.TargetFace) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(len(m.TargetFace)))
		i += copy(dAtA[i:], m.TargetFace)
	}
	if len(m.Rank) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(len(m.Rank)))
		i += copy(dAtA[i:], m.Rank)
	}
	if m.MedalColor != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.MedalColor))
	}
	if m.TodayFeed != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.TodayFeed))
	}
	if m.GuardType != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.GuardType))
	}
	if m.DayLimit != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.DayLimit))
	}
	return i, nil
}

func (m *FansMedalGetWearedMedalResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FansMedalGetWearedMedalResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Max != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.Max))
	}
	if m.Cnt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.Cnt))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintFansMedal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FansMedalTargetsWithMedalReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FansMedalTargetsWithMedalReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.Uid))
	}
	if len(m.TargetIds) > 0 {
		dAtA3 := make([]byte, len(m.TargetIds)*10)
		var j2 int
		for _, num1 := range m.TargetIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *FansMedalTargetsWithMedalResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FansMedalTargetsWithMedalResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Data) > 0 {
		dAtA5 := make([]byte, len(m.Data)*10)
		var j4 int
		for _, num1 := range m.Data {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintFansMedal(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	return i, nil
}

func encodeVarintFansMedal(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FansMedalGetWearedMedalReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovFansMedal(uint64(m.Uid))
	}
	if m.Source != 0 {
		n += 1 + sovFansMedal(uint64(m.Source))
	}
	if m.NeedRank {
		n += 2
	}
	if m.NeedTodayIntimacy {
		n += 2
	}
	if m.IgnoreUserinfo {
		n += 2
	}
	return n
}

func (m *FansMedalGetWearedMedalResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFansMedal(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovFansMedal(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovFansMedal(uint64(l))
	}
	return n
}

func (m *FansMedalGetWearedMedalResp_List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovFansMedal(uint64(m.Uid))
	}
	if m.TargetId != 0 {
		n += 1 + sovFansMedal(uint64(m.TargetId))
	}
	if m.MedalId != 0 {
		n += 1 + sovFansMedal(uint64(m.MedalId))
	}
	if m.Score != 0 {
		n += 1 + sovFansMedal(uint64(m.Score))
	}
	if m.Level != 0 {
		n += 1 + sovFansMedal(uint64(m.Level))
	}
	if m.Intimacy != 0 {
		n += 1 + sovFansMedal(uint64(m.Intimacy))
	}
	if m.NextIntimacy != 0 {
		n += 1 + sovFansMedal(uint64(m.NextIntimacy))
	}
	if m.Status != 0 {
		n += 1 + sovFansMedal(uint64(m.Status))
	}
	if m.Source != 0 {
		n += 1 + sovFansMedal(uint64(m.Source))
	}
	if m.ReceiveChannel != 0 {
		n += 1 + sovFansMedal(uint64(m.ReceiveChannel))
	}
	if m.IsReceive != 0 {
		n += 1 + sovFansMedal(uint64(m.IsReceive))
	}
	if m.MasterStatus != 0 {
		n += 1 + sovFansMedal(uint64(m.MasterStatus))
	}
	l = len(m.ReceiveTime)
	if l > 0 {
		n += 1 + l + sovFansMedal(uint64(l))
	}
	if m.TodayIntimacy != 0 {
		n += 1 + sovFansMedal(uint64(m.TodayIntimacy))
	}
	if m.LastWearTime != 0 {
		n += 1 + sovFansMedal(uint64(m.LastWearTime))
	}
	l = len(m.MedalName)
	if l > 0 {
		n += 2 + l + sovFansMedal(uint64(l))
	}
	if m.MasterAvailable != 0 {
		n += 2 + sovFansMedal(uint64(m.MasterAvailable))
	}
	l = len(m.TargetName)
	if l > 0 {
		n += 2 + l + sovFansMedal(uint64(l))
	}
	l = len(m.TargetFace)
	if l > 0 {
		n += 2 + l + sovFansMedal(uint64(l))
	}
	l = len(m.Rank)
	if l > 0 {
		n += 2 + l + sovFansMedal(uint64(l))
	}
	if m.MedalColor != 0 {
		n += 2 + sovFansMedal(uint64(m.MedalColor))
	}
	if m.TodayFeed != 0 {
		n += 2 + sovFansMedal(uint64(m.TodayFeed))
	}
	if m.GuardType != 0 {
		n += 2 + sovFansMedal(uint64(m.GuardType))
	}
	if m.DayLimit != 0 {
		n += 2 + sovFansMedal(uint64(m.DayLimit))
	}
	return n
}

func (m *FansMedalGetWearedMedalResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Max != 0 {
		n += 1 + sovFansMedal(uint64(m.Max))
	}
	if m.Cnt != 0 {
		n += 1 + sovFansMedal(uint64(m.Cnt))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovFansMedal(uint64(l))
		}
	}
	return n
}

func (m *FansMedalTargetsWithMedalReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovFansMedal(uint64(m.Uid))
	}
	if len(m.TargetIds) > 0 {
		l = 0
		for _, e := range m.TargetIds {
			l += sovFansMedal(uint64(e))
		}
		n += 1 + sovFansMedal(uint64(l)) + l
	}
	return n
}

func (m *FansMedalTargetsWithMedalResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFansMedal(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovFansMedal(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovFansMedal(uint64(l))
	}
	if len(m.Data) > 0 {
		l = 0
		for _, e := range m.Data {
			l += sovFansMedal(uint64(e))
		}
		n += 1 + sovFansMedal(uint64(l)) + l
	}
	return n
}

func sovFansMedal(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFansMedal(x uint64) (n int) {
	return sovFansMedal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FansMedalGetWearedMedalReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFansMedal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FansMedalGetWearedMedalReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FansMedalGetWearedMedalReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedRank", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedRank = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedTodayIntimacy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedTodayIntimacy = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreUserinfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgnoreUserinfo = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFansMedal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFansMedal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FansMedalGetWearedMedalResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFansMedal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FansMedalGetWearedMedalResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FansMedalGetWearedMedalResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFansMedal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFansMedal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &FansMedalGetWearedMedalResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFansMedal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFansMedal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FansMedalGetWearedMedalResp_List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFansMedal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedalId", wireType)
			}
			m.MedalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MedalId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intimacy", wireType)
			}
			m.Intimacy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Intimacy |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextIntimacy", wireType)
			}
			m.NextIntimacy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextIntimacy |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveChannel", wireType)
			}
			m.ReceiveChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiveChannel |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReceive", wireType)
			}
			m.IsReceive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsReceive |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterStatus", wireType)
			}
			m.MasterStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MasterStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFansMedal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiveTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayIntimacy", wireType)
			}
			m.TodayIntimacy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TodayIntimacy |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWearTime", wireType)
			}
			m.LastWearTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastWearTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFansMedal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MedalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterAvailable", wireType)
			}
			m.MasterAvailable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MasterAvailable |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFansMedal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetFace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFansMedal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetFace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFansMedal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rank = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedalColor", wireType)
			}
			m.MedalColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MedalColor |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayFeed", wireType)
			}
			m.TodayFeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TodayFeed |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardType", wireType)
			}
			m.GuardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuardType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayLimit", wireType)
			}
			m.DayLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayLimit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFansMedal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFansMedal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FansMedalGetWearedMedalResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFansMedal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFansMedal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &FansMedalGetWearedMedalResp_List{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFansMedal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFansMedal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FansMedalTargetsWithMedalReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFansMedal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FansMedalTargetsWithMedalReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FansMedalTargetsWithMedalReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFansMedal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TargetIds = append(m.TargetIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFansMedal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFansMedal
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TargetIds) == 0 {
					m.TargetIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFansMedal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TargetIds = append(m.TargetIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFansMedal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFansMedal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FansMedalTargetsWithMedalResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFansMedal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FansMedalTargetsWithMedalResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FansMedalTargetsWithMedalResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFansMedal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFansMedal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFansMedal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Data = append(m.Data, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFansMedal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFansMedal
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Data) == 0 {
					m.Data = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFansMedal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Data = append(m.Data, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFansMedal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFansMedal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFansMedal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFansMedal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFansMedal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFansMedal
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFansMedal
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFansMedal(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFansMedal = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFansMedal   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/FansMedal.proto", fileDescriptor_FansMedal_ff39868724d1873b) }

var fileDescriptor_FansMedal_ff39868724d1873b = []byte{
	// 986 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0x8f, 0x63, 0x37, 0xf1, 0xad, 0x1d, 0xdb, 0xd9, 0x14, 0xba, 0x98, 0xe0, 0x8b, 0x2c, 0x21,
	0x42, 0x20, 0x0e, 0x69, 0x25, 0x04, 0x52, 0x25, 0x84, 0x8b, 0x52, 0x45, 0x6a, 0x79, 0x58, 0x82,
	0x2a, 0xf1, 0x72, 0xda, 0xdc, 0xad, 0x2f, 0xab, 0xde, 0x1f, 0xf7, 0x76, 0xed, 0xc6, 0x9f, 0x01,
	0x09, 0xf1, 0xc2, 0x23, 0xdf, 0x87, 0xc7, 0x3e, 0xf2, 0x74, 0xa0, 0x44, 0xbc, 0xdc, 0xa7, 0x40,
	0x3b, 0x7b, 0xbe, 0xb3, 0xdd, 0x26, 0x0a, 0xe2, 0x65, 0x77, 0xe6, 0x37, 0x33, 0x3b, 0xbb, 0xbf,
	0x19, 0xcf, 0x19, 0xe1, 0xe9, 0xf1, 0xd1, 0x09, 0x8b, 0xe4, 0x73, 0xee, 0xb1, 0x60, 0x30, 0x4e,
	0x62, 0x15, 0xe3, 0xad, 0x11, 0x8b, 0xa4, 0x13, 0x02, 0x32, 0x3d, 0xee, 0x1e, 0xfa, 0x42, 0x5d,
	0x4c, 0xce, 0x07, 0x6e, 0x1c, 0x1e, 0xf9, 0xb1, 0x1f, 0x1f, 0x81, 0xd7, 0xf9, 0x64, 0x04, 0x1a,
	0x28, 0x20, 0x99, 0xe8, 0xfe, 0x2f, 0xeb, 0xa8, 0x5b, 0x9c, 0xf8, 0x94, 0xab, 0x17, 0x9c, 0x25,
	0xdc, 0x03, 0x8d, 0xf2, 0x57, 0xf8, 0x03, 0x54, 0x9d, 0x08, 0x8f, 0x54, 0xf6, 0x2a, 0xfb, 0xd5,
	0xe1, 0x66, 0x96, 0xda, 0x5a, 0xa5, 0x7a, 0xc1, 0x7d, 0xb4, 0x21, 0xe3, 0x49, 0xe2, 0x72, 0xb2,
	0x0e, 0x56, 0x94, 0xa5, 0x76, 0x8e, 0xd0, 0x7c, 0xc7, 0x07, 0xc8, 0x8a, 0x38, 0xf7, 0x9c, 0x84,
	0x45, 0x2f, 0x49, 0x75, 0xaf, 0xb2, 0x5f, 0x1f, 0x6e, 0x65, 0xa9, 0x5d, 0x82, 0xb4, 0xae, 0x45,
	0xca, 0xa2, 0x97, 0xf8, 0x29, 0xda, 0x01, 0x58, 0xc5, 0x1e, 0x9b, 0x39, 0x22, 0x52, 0x22, 0x64,
	0xee, 0x8c, 0xd4, 0x20, 0xea, 0x41, 0x96, 0xda, 0xef, 0x32, 0xd3, 0x6d, 0x0d, 0x9e, 0x69, 0xec,
	0x34, 0x87, 0xf0, 0x63, 0xd4, 0x16, 0x7e, 0x14, 0x27, 0xdc, 0x99, 0x48, 0x9e, 0x88, 0x68, 0x14,
	0x93, 0x7b, 0x70, 0xc8, 0x4e, 0x96, 0xda, 0xab, 0x26, 0xda, 0x32, 0xc0, 0x8f, 0xb9, 0xde, 0xff,
	0xad, 0x81, 0x3e, 0xbc, 0x91, 0x10, 0x39, 0xc6, 0xbb, 0xa8, 0xe6, 0xc6, 0x1e, 0xcf, 0x29, 0xa9,
	0x67, 0xa9, 0x0d, 0x3a, 0x85, 0x55, 0xf3, 0x15, 0x4a, 0x1f, 0x18, 0xb1, 0x0c, 0x5f, 0xa1, 0xf4,
	0xa9, 0x5e, 0xf0, 0x73, 0x54, 0xf3, 0x98, 0x62, 0x40, 0x43, 0xe3, 0xe1, 0xd1, 0x60, 0xa9, 0x6c,
	0x83, 0x5b, 0x52, 0x0e, 0xbe, 0x63, 0x8a, 0x99, 0x4c, 0xfa, 0x00, 0x0a, 0x6b, 0xf7, 0xaf, 0x3a,
	0xaa, 0x3d, 0x13, 0x52, 0xdd, 0x56, 0xa2, 0x03, 0x64, 0x29, 0x96, 0xf8, 0x5c, 0x39, 0xc2, 0xcb,
	0xab, 0x04, 0xf4, 0x17, 0x20, 0xad, 0x1b, 0xf1, 0xd4, 0xc3, 0x9f, 0xa0, 0x3a, 0x5c, 0x46, 0xbb,
	0x56, 0xc1, 0xb5, 0x99, 0xa5, 0x76, 0x81, 0xd1, 0x4d, 0x90, 0x4e, 0x3d, 0x6c, 0xa3, 0x7b, 0xd2,
	0x8d, 0x13, 0x0e, 0x95, 0xa9, 0x0e, 0xad, 0x2c, 0xb5, 0x0d, 0x40, 0xcd, 0xa6, 0x1d, 0x02, 0x3e,
	0xe5, 0x01, 0xb0, 0x9e, 0x3b, 0x00, 0x40, 0xcd, 0x86, 0xf7, 0x51, 0xbd, 0x28, 0xef, 0x46, 0x99,
	0xaa, 0xa8, 0x69, 0x21, 0xe1, 0x2f, 0xd1, 0x56, 0xc4, 0x2f, 0x55, 0xd9, 0x0d, 0x9b, 0xe0, 0xbe,
	0x9d, 0xa5, 0xf6, 0xb2, 0x81, 0x36, 0xb5, 0x5a, 0xb4, 0x80, 0xee, 0x4d, 0xc5, 0xd4, 0x44, 0x92,
	0xfa, 0x42, 0x6f, 0x02, 0x42, 0xf3, 0x7d, 0xa1, 0x7f, 0xad, 0x1b, 0xfb, 0xf7, 0x31, 0x6a, 0x27,
	0xdc, 0xe5, 0x62, 0xca, 0x1d, 0xf7, 0x82, 0x45, 0x11, 0x0f, 0x08, 0x02, 0x67, 0x68, 0xa5, 0x15,
	0x13, 0x6d, 0xe5, 0xc0, 0x13, 0xa3, 0xe3, 0x43, 0x84, 0x84, 0x74, 0x72, 0x90, 0x34, 0x20, 0xb0,
	0x95, 0xa5, 0xf6, 0x02, 0x4a, 0x2d, 0x21, 0xa9, 0x11, 0xf5, 0x63, 0x43, 0x26, 0x15, 0x4f, 0x9c,
	0xfc, 0xee, 0xcd, 0xf2, 0xb1, 0x4b, 0x06, 0xda, 0x34, 0xea, 0x0f, 0xe6, 0x21, 0x8f, 0x50, 0x73,
	0x7e, 0x13, 0x25, 0x42, 0x4e, 0xb6, 0xa0, 0xf9, 0x3a, 0x59, 0x6a, 0x2f, 0xe1, 0xb4, 0x91, 0x6b,
	0x67, 0x22, 0xe4, 0xf8, 0x6b, 0xd4, 0x5a, 0xf9, 0xa1, 0xb5, 0x20, 0x1b, 0xce, 0x52, 0x7b, 0xc5,
	0x42, 0xb7, 0xd4, 0xd2, 0xef, 0xeb, 0x2b, 0xd4, 0x0a, 0x98, 0x54, 0xce, 0x6b, 0xce, 0x12, 0x93,
	0xb1, 0x5d, 0x86, 0x2e, 0x5b, 0x68, 0x53, 0xeb, 0xba, 0x9f, 0x21, 0xe9, 0x21, 0x42, 0xa6, 0x9f,
	0x22, 0x16, 0x72, 0xd2, 0x81, 0x7b, 0x02, 0x21, 0x25, 0x4a, 0x2d, 0x90, 0xbf, 0x67, 0x21, 0xc7,
	0xdf, 0xa0, 0x4e, 0xfe, 0x6e, 0x36, 0x65, 0x22, 0x60, 0xe7, 0x01, 0x27, 0xdb, 0x90, 0xea, 0x7e,
	0x96, 0xda, 0x6f, 0xd9, 0x68, 0xdb, 0x20, 0xdf, 0xce, 0x01, 0xfc, 0x05, 0x6a, 0xe4, 0xad, 0x0e,
	0x09, 0x31, 0x24, 0x6c, 0x67, 0xa9, 0xbd, 0x08, 0x53, 0x64, 0x14, 0x48, 0x59, 0x46, 0x8c, 0x98,
	0xcb, 0xc9, 0xce, 0x5b, 0x11, 0x1a, 0x9e, 0x47, 0x9c, 0x30, 0x97, 0xeb, 0x79, 0x00, 0xd3, 0xed,
	0x3e, 0xb8, 0xc2, 0xaf, 0x14, 0x06, 0x1b, 0xac, 0xfa, 0x3c, 0xf3, 0x36, 0x37, 0x0e, 0xe2, 0x84,
	0xbc, 0x07, 0xb7, 0x87, 0xf3, 0x16, 0x60, 0x6a, 0xde, 0xff, 0x44, 0xcb, 0x9a, 0x23, 0x43, 0xff,
	0x88, 0x73, 0x8f, 0xbc, 0x5f, 0x36, 0x4d, 0x89, 0x52, 0x0b, 0xe4, 0x13, 0xce, 0x3d, 0xed, 0xee,
	0x4f, 0x58, 0xe2, 0x39, 0x6a, 0x36, 0xe6, 0xe4, 0x41, 0xe9, 0x5e, 0xa2, 0xd4, 0x02, 0xf9, 0x6c,
	0x36, 0x86, 0x81, 0xac, 0x4f, 0x09, 0x44, 0x28, 0x14, 0x21, 0xe5, 0x44, 0x28, 0x40, 0x5a, 0xf7,
	0xd8, 0xec, 0x99, 0x96, 0xba, 0x3f, 0x57, 0x50, 0x4d, 0x8f, 0x1e, 0x18, 0x6a, 0xec, 0x72, 0x71,
	0xc2, 0x84, 0xec, 0x92, 0xea, 0x45, 0x9b, 0xdc, 0x48, 0xe5, 0xb3, 0x05, 0x4c, 0x6e, 0xa4, 0xa8,
	0x5e, 0xf4, 0xbc, 0x0b, 0x84, 0x54, 0xa4, 0xba, 0x57, 0xfd, 0x8f, 0xf3, 0x4e, 0x8f, 0x35, 0xc3,
	0xa4, 0x3e, 0x80, 0xc2, 0xda, 0xbf, 0x40, 0xbb, 0x45, 0xcc, 0x19, 0xd0, 0x2f, 0x5f, 0x08, 0x75,
	0x71, 0x97, 0x2f, 0x95, 0xa6, 0x74, 0x3e, 0xf1, 0x24, 0x59, 0xdf, 0xab, 0x16, 0x94, 0x16, 0x28,
	0xb5, 0xe6, 0x83, 0x50, 0xf6, 0x7f, 0xaf, 0xa0, 0x8f, 0x6e, 0x49, 0xf5, 0x7f, 0xbe, 0x01, 0x1f,
	0xa3, 0xcd, 0x90, 0x4b, 0xc9, 0x7c, 0x0e, 0x33, 0xd6, 0x1a, 0x36, 0xb2, 0xd4, 0x9e, 0x43, 0x74,
	0x2e, 0xe8, 0xf3, 0xe1, 0x53, 0x51, 0x83, 0xab, 0xae, 0x4c, 0xfe, 0x87, 0xff, 0x54, 0x90, 0x55,
	0xdc, 0x0f, 0x0b, 0xd4, 0xd1, 0x6f, 0x78, 0x0d, 0x1c, 0x1a, 0x7e, 0xf1, 0xa7, 0x77, 0x25, 0xfb,
	0x55, 0xf7, 0xe0, 0xee, 0x75, 0xc1, 0x21, 0xea, 0xa8, 0x15, 0x3a, 0xf0, 0x67, 0x37, 0xc5, 0xbf,
	0xa3, 0x46, 0xdd, 0xcf, 0xef, 0xee, 0x2c, 0xc7, 0xc3, 0xdd, 0x3f, 0xae, 0x7a, 0x95, 0x37, 0x57,
	0xbd, 0xca, 0xdf, 0x57, 0xbd, 0xca, 0xaf, 0xd7, 0xbd, 0xb5, 0x37, 0xd7, 0xbd, 0xb5, 0x3f, 0xaf,
	0x7b, 0x6b, 0x3f, 0xad, 0x4f, 0x8f, 0xcf, 0x37, 0xe0, 0xff, 0xcb, 0xa3, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x41, 0x4e, 0xa4, 0x90, 0x13, 0x09, 0x00, 0x00,
}
