// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/UserTitle.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UserTitleGetTitleByIdsReq struct {
	// 头衔ID列表
	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids" json:"ids"`
}

func (m *UserTitleGetTitleByIdsReq) Reset()         { *m = UserTitleGetTitleByIdsReq{} }
func (m *UserTitleGetTitleByIdsReq) String() string { return proto.CompactTextString(m) }
func (*UserTitleGetTitleByIdsReq) ProtoMessage()    {}
func (*UserTitleGetTitleByIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_UserTitle_e46c26b4c77c4970, []int{0}
}
func (m *UserTitleGetTitleByIdsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTitleGetTitleByIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTitleGetTitleByIdsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserTitleGetTitleByIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTitleGetTitleByIdsReq.Merge(dst, src)
}
func (m *UserTitleGetTitleByIdsReq) XXX_Size() int {
	return m.Size()
}
func (m *UserTitleGetTitleByIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTitleGetTitleByIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserTitleGetTitleByIdsReq proto.InternalMessageInfo

func (m *UserTitleGetTitleByIdsReq) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type UserTitleGetTitleByIdsResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	//
	Data map[int64]string `protobuf:"bytes,4,rep,name=data" json:"data" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *UserTitleGetTitleByIdsResp) Reset()         { *m = UserTitleGetTitleByIdsResp{} }
func (m *UserTitleGetTitleByIdsResp) String() string { return proto.CompactTextString(m) }
func (*UserTitleGetTitleByIdsResp) ProtoMessage()    {}
func (*UserTitleGetTitleByIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_UserTitle_e46c26b4c77c4970, []int{1}
}
func (m *UserTitleGetTitleByIdsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTitleGetTitleByIdsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTitleGetTitleByIdsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserTitleGetTitleByIdsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTitleGetTitleByIdsResp.Merge(dst, src)
}
func (m *UserTitleGetTitleByIdsResp) XXX_Size() int {
	return m.Size()
}
func (m *UserTitleGetTitleByIdsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTitleGetTitleByIdsResp.DiscardUnknown(m)
}

var xxx_messageInfo_UserTitleGetTitleByIdsResp proto.InternalMessageInfo

func (m *UserTitleGetTitleByIdsResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UserTitleGetTitleByIdsResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *UserTitleGetTitleByIdsResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UserTitleGetTitleByIdsResp) GetData() map[int64]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserTitleGetMobileTitleReq struct {
	//
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
}

func (m *UserTitleGetMobileTitleReq) Reset()         { *m = UserTitleGetMobileTitleReq{} }
func (m *UserTitleGetMobileTitleReq) String() string { return proto.CompactTextString(m) }
func (*UserTitleGetMobileTitleReq) ProtoMessage()    {}
func (*UserTitleGetMobileTitleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_UserTitle_e46c26b4c77c4970, []int{2}
}
func (m *UserTitleGetMobileTitleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTitleGetMobileTitleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTitleGetMobileTitleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserTitleGetMobileTitleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTitleGetMobileTitleReq.Merge(dst, src)
}
func (m *UserTitleGetMobileTitleReq) XXX_Size() int {
	return m.Size()
}
func (m *UserTitleGetMobileTitleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTitleGetMobileTitleReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserTitleGetMobileTitleReq proto.InternalMessageInfo

func (m *UserTitleGetMobileTitleReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type UserTitleGetMobileTitleResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	//
	Data *UserTitleGetMobileTitleResp_Data `protobuf:"bytes,4,opt,name=data" json:"data"`
}

func (m *UserTitleGetMobileTitleResp) Reset()         { *m = UserTitleGetMobileTitleResp{} }
func (m *UserTitleGetMobileTitleResp) String() string { return proto.CompactTextString(m) }
func (*UserTitleGetMobileTitleResp) ProtoMessage()    {}
func (*UserTitleGetMobileTitleResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_UserTitle_e46c26b4c77c4970, []int{3}
}
func (m *UserTitleGetMobileTitleResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTitleGetMobileTitleResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTitleGetMobileTitleResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserTitleGetMobileTitleResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTitleGetMobileTitleResp.Merge(dst, src)
}
func (m *UserTitleGetMobileTitleResp) XXX_Size() int {
	return m.Size()
}
func (m *UserTitleGetMobileTitleResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTitleGetMobileTitleResp.DiscardUnknown(m)
}

var xxx_messageInfo_UserTitleGetMobileTitleResp proto.InternalMessageInfo

func (m *UserTitleGetMobileTitleResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UserTitleGetMobileTitleResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *UserTitleGetMobileTitleResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UserTitleGetMobileTitleResp) GetData() *UserTitleGetMobileTitleResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserTitleGetMobileTitleResp_Data struct {
	// 头衔标识
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title"`
	// 头衔名称
	Activity string `protobuf:"bytes,2,opt,name=activity,proto3" json:"activity"`
}

func (m *UserTitleGetMobileTitleResp_Data) Reset()         { *m = UserTitleGetMobileTitleResp_Data{} }
func (m *UserTitleGetMobileTitleResp_Data) String() string { return proto.CompactTextString(m) }
func (*UserTitleGetMobileTitleResp_Data) ProtoMessage()    {}
func (*UserTitleGetMobileTitleResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_UserTitle_e46c26b4c77c4970, []int{3, 0}
}
func (m *UserTitleGetMobileTitleResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTitleGetMobileTitleResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTitleGetMobileTitleResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserTitleGetMobileTitleResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTitleGetMobileTitleResp_Data.Merge(dst, src)
}
func (m *UserTitleGetMobileTitleResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *UserTitleGetMobileTitleResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTitleGetMobileTitleResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_UserTitleGetMobileTitleResp_Data proto.InternalMessageInfo

func (m *UserTitleGetMobileTitleResp_Data) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UserTitleGetMobileTitleResp_Data) GetActivity() string {
	if m != nil {
		return m.Activity
	}
	return ""
}

type UserTitleGetCommentTitleReq struct {
}

func (m *UserTitleGetCommentTitleReq) Reset()         { *m = UserTitleGetCommentTitleReq{} }
func (m *UserTitleGetCommentTitleReq) String() string { return proto.CompactTextString(m) }
func (*UserTitleGetCommentTitleReq) ProtoMessage()    {}
func (*UserTitleGetCommentTitleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_UserTitle_e46c26b4c77c4970, []int{4}
}
func (m *UserTitleGetCommentTitleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTitleGetCommentTitleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTitleGetCommentTitleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserTitleGetCommentTitleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTitleGetCommentTitleReq.Merge(dst, src)
}
func (m *UserTitleGetCommentTitleReq) XXX_Size() int {
	return m.Size()
}
func (m *UserTitleGetCommentTitleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTitleGetCommentTitleReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserTitleGetCommentTitleReq proto.InternalMessageInfo

type UserTitleGetCommentTitleResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	// data[0]老头衔唯一标识如 'cake-flour', data[1]新头衔唯一标识如'title-137-1', 无头衔为空数组
	Data []string `protobuf:"bytes,3,rep,name=data" json:"data"`
}

func (m *UserTitleGetCommentTitleResp) Reset()         { *m = UserTitleGetCommentTitleResp{} }
func (m *UserTitleGetCommentTitleResp) String() string { return proto.CompactTextString(m) }
func (*UserTitleGetCommentTitleResp) ProtoMessage()    {}
func (*UserTitleGetCommentTitleResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_UserTitle_e46c26b4c77c4970, []int{5}
}
func (m *UserTitleGetCommentTitleResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTitleGetCommentTitleResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTitleGetCommentTitleResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserTitleGetCommentTitleResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTitleGetCommentTitleResp.Merge(dst, src)
}
func (m *UserTitleGetCommentTitleResp) XXX_Size() int {
	return m.Size()
}
func (m *UserTitleGetCommentTitleResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTitleGetCommentTitleResp.DiscardUnknown(m)
}

var xxx_messageInfo_UserTitleGetCommentTitleResp proto.InternalMessageInfo

func (m *UserTitleGetCommentTitleResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UserTitleGetCommentTitleResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *UserTitleGetCommentTitleResp) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserTitleAddReq struct {
	// UID
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 头衔id
	TitleId int64 `protobuf:"varint,2,opt,name=title_id,json=titleId,proto3" json:"title_id"`
	// 过期时间dateTime
	ExpireTime string `protobuf:"bytes,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time"`
	// 积分
	Score int64 `protobuf:"varint,4,opt,name=score,proto3" json:"score"`
}

func (m *UserTitleAddReq) Reset()         { *m = UserTitleAddReq{} }
func (m *UserTitleAddReq) String() string { return proto.CompactTextString(m) }
func (*UserTitleAddReq) ProtoMessage()    {}
func (*UserTitleAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_UserTitle_e46c26b4c77c4970, []int{6}
}
func (m *UserTitleAddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTitleAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTitleAddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserTitleAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTitleAddReq.Merge(dst, src)
}
func (m *UserTitleAddReq) XXX_Size() int {
	return m.Size()
}
func (m *UserTitleAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTitleAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserTitleAddReq proto.InternalMessageInfo

func (m *UserTitleAddReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserTitleAddReq) GetTitleId() int64 {
	if m != nil {
		return m.TitleId
	}
	return 0
}

func (m *UserTitleAddReq) GetExpireTime() string {
	if m != nil {
		return m.ExpireTime
	}
	return ""
}

func (m *UserTitleAddReq) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

type UserTitleAddResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *UserTitleAddResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *UserTitleAddResp) Reset()         { *m = UserTitleAddResp{} }
func (m *UserTitleAddResp) String() string { return proto.CompactTextString(m) }
func (*UserTitleAddResp) ProtoMessage()    {}
func (*UserTitleAddResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_UserTitle_e46c26b4c77c4970, []int{7}
}
func (m *UserTitleAddResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTitleAddResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTitleAddResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserTitleAddResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTitleAddResp.Merge(dst, src)
}
func (m *UserTitleAddResp) XXX_Size() int {
	return m.Size()
}
func (m *UserTitleAddResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTitleAddResp.DiscardUnknown(m)
}

var xxx_messageInfo_UserTitleAddResp proto.InternalMessageInfo

func (m *UserTitleAddResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UserTitleAddResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *UserTitleAddResp) GetData() *UserTitleAddResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserTitleAddResp_Data struct {
}

func (m *UserTitleAddResp_Data) Reset()         { *m = UserTitleAddResp_Data{} }
func (m *UserTitleAddResp_Data) String() string { return proto.CompactTextString(m) }
func (*UserTitleAddResp_Data) ProtoMessage()    {}
func (*UserTitleAddResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_UserTitle_e46c26b4c77c4970, []int{7, 0}
}
func (m *UserTitleAddResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTitleAddResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTitleAddResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserTitleAddResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTitleAddResp_Data.Merge(dst, src)
}
func (m *UserTitleAddResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *UserTitleAddResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTitleAddResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_UserTitleAddResp_Data proto.InternalMessageInfo

type UserTitleGetAllReq struct {
	// UID
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
}

func (m *UserTitleGetAllReq) Reset()         { *m = UserTitleGetAllReq{} }
func (m *UserTitleGetAllReq) String() string { return proto.CompactTextString(m) }
func (*UserTitleGetAllReq) ProtoMessage()    {}
func (*UserTitleGetAllReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_UserTitle_e46c26b4c77c4970, []int{8}
}
func (m *UserTitleGetAllReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTitleGetAllReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTitleGetAllReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserTitleGetAllReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTitleGetAllReq.Merge(dst, src)
}
func (m *UserTitleGetAllReq) XXX_Size() int {
	return m.Size()
}
func (m *UserTitleGetAllReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTitleGetAllReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserTitleGetAllReq proto.InternalMessageInfo

func (m *UserTitleGetAllReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type UserTitleGetAllResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	// type -> content
	Data map[int64]*UserTitleGetAllResp_Data `protobuf:"bytes,4,rep,name=data" json:"data" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UserTitleGetAllResp) Reset()         { *m = UserTitleGetAllResp{} }
func (m *UserTitleGetAllResp) String() string { return proto.CompactTextString(m) }
func (*UserTitleGetAllResp) ProtoMessage()    {}
func (*UserTitleGetAllResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_UserTitle_e46c26b4c77c4970, []int{9}
}
func (m *UserTitleGetAllResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTitleGetAllResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTitleGetAllResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserTitleGetAllResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTitleGetAllResp.Merge(dst, src)
}
func (m *UserTitleGetAllResp) XXX_Size() int {
	return m.Size()
}
func (m *UserTitleGetAllResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTitleGetAllResp.DiscardUnknown(m)
}

var xxx_messageInfo_UserTitleGetAllResp proto.InternalMessageInfo

func (m *UserTitleGetAllResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UserTitleGetAllResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *UserTitleGetAllResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UserTitleGetAllResp) GetData() map[int64]*UserTitleGetAllResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserTitleGetAllResp_Data struct {
	//
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	//
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid"`
	// 头衔id
	Tid string `protobuf:"bytes,3,opt,name=tid,proto3" json:"tid"`
	// 数量
	Num string `protobuf:"bytes,4,opt,name=num,proto3" json:"num"`
	//
	Score string `protobuf:"bytes,5,opt,name=score,proto3" json:"score"`
	//
	CreateTime string `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time"`
	//
	ExpireTime string `protobuf:"bytes,7,opt,name=expire_time,json=expireTime,proto3" json:"expire_time"`
	//
	Status string `protobuf:"bytes,8,opt,name=status,proto3" json:"status"`
}

func (m *UserTitleGetAllResp_Data) Reset()         { *m = UserTitleGetAllResp_Data{} }
func (m *UserTitleGetAllResp_Data) String() string { return proto.CompactTextString(m) }
func (*UserTitleGetAllResp_Data) ProtoMessage()    {}
func (*UserTitleGetAllResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_UserTitle_e46c26b4c77c4970, []int{9, 1}
}
func (m *UserTitleGetAllResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTitleGetAllResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTitleGetAllResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserTitleGetAllResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTitleGetAllResp_Data.Merge(dst, src)
}
func (m *UserTitleGetAllResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *UserTitleGetAllResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTitleGetAllResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_UserTitleGetAllResp_Data proto.InternalMessageInfo

func (m *UserTitleGetAllResp_Data) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserTitleGetAllResp_Data) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *UserTitleGetAllResp_Data) GetTid() string {
	if m != nil {
		return m.Tid
	}
	return ""
}

func (m *UserTitleGetAllResp_Data) GetNum() string {
	if m != nil {
		return m.Num
	}
	return ""
}

func (m *UserTitleGetAllResp_Data) GetScore() string {
	if m != nil {
		return m.Score
	}
	return ""
}

func (m *UserTitleGetAllResp_Data) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *UserTitleGetAllResp_Data) GetExpireTime() string {
	if m != nil {
		return m.ExpireTime
	}
	return ""
}

func (m *UserTitleGetAllResp_Data) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*UserTitleGetTitleByIdsReq)(nil), "rc.v1.UserTitleGetTitleByIdsReq")
	proto.RegisterType((*UserTitleGetTitleByIdsResp)(nil), "rc.v1.UserTitleGetTitleByIdsResp")
	proto.RegisterMapType((map[int64]string)(nil), "rc.v1.UserTitleGetTitleByIdsResp.DataEntry")
	proto.RegisterType((*UserTitleGetMobileTitleReq)(nil), "rc.v1.UserTitleGetMobileTitleReq")
	proto.RegisterType((*UserTitleGetMobileTitleResp)(nil), "rc.v1.UserTitleGetMobileTitleResp")
	proto.RegisterType((*UserTitleGetMobileTitleResp_Data)(nil), "rc.v1.UserTitleGetMobileTitleResp.Data")
	proto.RegisterType((*UserTitleGetCommentTitleReq)(nil), "rc.v1.UserTitleGetCommentTitleReq")
	proto.RegisterType((*UserTitleGetCommentTitleResp)(nil), "rc.v1.UserTitleGetCommentTitleResp")
	proto.RegisterType((*UserTitleAddReq)(nil), "rc.v1.UserTitleAddReq")
	proto.RegisterType((*UserTitleAddResp)(nil), "rc.v1.UserTitleAddResp")
	proto.RegisterType((*UserTitleAddResp_Data)(nil), "rc.v1.UserTitleAddResp.Data")
	proto.RegisterType((*UserTitleGetAllReq)(nil), "rc.v1.UserTitleGetAllReq")
	proto.RegisterType((*UserTitleGetAllResp)(nil), "rc.v1.UserTitleGetAllResp")
	proto.RegisterMapType((map[int64]*UserTitleGetAllResp_Data)(nil), "rc.v1.UserTitleGetAllResp.DataEntry")
	proto.RegisterType((*UserTitleGetAllResp_Data)(nil), "rc.v1.UserTitleGetAllResp.Data")
}
func (m *UserTitleGetTitleByIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTitleGetTitleByIdsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA2 := make([]byte, len(m.Ids)*10)
		var j1 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *UserTitleGetTitleByIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTitleGetTitleByIdsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x22
			i++
			v := m.Data[k]
			mapSize := 1 + sovUserTitle(uint64(k)) + 1 + len(v) + sovUserTitle(uint64(len(v)))
			i = encodeVarintUserTitle(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintUserTitle(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintUserTitle(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *UserTitleGetMobileTitleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTitleGetMobileTitleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *UserTitleGetMobileTitleResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTitleGetMobileTitleResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Data != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *UserTitleGetMobileTitleResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTitleGetMobileTitleResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Activity) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.Activity)))
		i += copy(dAtA[i:], m.Activity)
	}
	return i, nil
}

func (m *UserTitleGetCommentTitleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTitleGetCommentTitleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UserTitleGetCommentTitleResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTitleGetCommentTitleResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for _, s := range m.Data {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *UserTitleAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTitleAddReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(m.Uid))
	}
	if m.TitleId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(m.TitleId))
	}
	if len(m.ExpireTime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.ExpireTime)))
		i += copy(dAtA[i:], m.ExpireTime)
	}
	if m.Score != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(m.Score))
	}
	return i, nil
}

func (m *UserTitleAddResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTitleAddResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(m.Data.Size()))
		n4, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *UserTitleAddResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTitleAddResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UserTitleGetAllReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTitleGetAllReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *UserTitleGetAllResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTitleGetAllResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x22
			i++
			v := m.Data[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovUserTitle(uint64(msgSize))
			}
			mapSize := 1 + sovUserTitle(uint64(k)) + msgSize
			i = encodeVarintUserTitle(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintUserTitle(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintUserTitle(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	return i, nil
}

func (m *UserTitleGetAllResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTitleGetAllResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Uid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	if len(m.Tid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.Tid)))
		i += copy(dAtA[i:], m.Tid)
	}
	if len(m.Num) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.Num)))
		i += copy(dAtA[i:], m.Num)
	}
	if len(m.Score) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.Score)))
		i += copy(dAtA[i:], m.Score)
	}
	if len(m.CreateTime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.CreateTime)))
		i += copy(dAtA[i:], m.CreateTime)
	}
	if len(m.ExpireTime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.ExpireTime)))
		i += copy(dAtA[i:], m.ExpireTime)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintUserTitle(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	return i, nil
}

func encodeVarintUserTitle(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserTitleGetTitleByIdsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovUserTitle(uint64(e))
		}
		n += 1 + sovUserTitle(uint64(l)) + l
	}
	return n
}

func (m *UserTitleGetTitleByIdsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovUserTitle(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + sovUserTitle(uint64(k)) + 1 + len(v) + sovUserTitle(uint64(len(v)))
			n += mapEntrySize + 1 + sovUserTitle(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UserTitleGetMobileTitleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUserTitle(uint64(m.Uid))
	}
	return n
}

func (m *UserTitleGetMobileTitleResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovUserTitle(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovUserTitle(uint64(l))
	}
	return n
}

func (m *UserTitleGetMobileTitleResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	l = len(m.Activity)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	return n
}

func (m *UserTitleGetCommentTitleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserTitleGetCommentTitleResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovUserTitle(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, s := range m.Data {
			l = len(s)
			n += 1 + l + sovUserTitle(uint64(l))
		}
	}
	return n
}

func (m *UserTitleAddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUserTitle(uint64(m.Uid))
	}
	if m.TitleId != 0 {
		n += 1 + sovUserTitle(uint64(m.TitleId))
	}
	l = len(m.ExpireTime)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovUserTitle(uint64(m.Score))
	}
	return n
}

func (m *UserTitleAddResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovUserTitle(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovUserTitle(uint64(l))
	}
	return n
}

func (m *UserTitleAddResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserTitleGetAllReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUserTitle(uint64(m.Uid))
	}
	return n
}

func (m *UserTitleGetAllResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovUserTitle(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovUserTitle(uint64(l))
			}
			mapEntrySize := 1 + sovUserTitle(uint64(k)) + l
			n += mapEntrySize + 1 + sovUserTitle(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UserTitleGetAllResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	l = len(m.Tid)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	l = len(m.Num)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	l = len(m.Score)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	l = len(m.CreateTime)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	l = len(m.ExpireTime)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovUserTitle(uint64(l))
	}
	return n
}

func sovUserTitle(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUserTitle(x uint64) (n int) {
	return sovUserTitle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserTitleGetTitleByIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTitleGetTitleByIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTitleGetTitleByIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTitle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTitle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUserTitle
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserTitle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTitleGetTitleByIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTitleGetTitleByIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTitleGetTitleByIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[int64]string)
			}
			var mapkey int64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTitle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserTitle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserTitle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthUserTitle
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUserTitle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthUserTitle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTitleGetMobileTitleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTitleGetMobileTitleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTitleGetMobileTitleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTitleGetMobileTitleResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTitleGetMobileTitleResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTitleGetMobileTitleResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &UserTitleGetMobileTitleResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTitleGetMobileTitleResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Activity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTitleGetCommentTitleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTitleGetCommentTitleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTitleGetCommentTitleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUserTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTitleGetCommentTitleResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTitleGetCommentTitleResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTitleGetCommentTitleResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTitleAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTitleAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTitleAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleId", wireType)
			}
			m.TitleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpireTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTitleAddResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTitleAddResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTitleAddResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &UserTitleAddResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTitleAddResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUserTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTitleGetAllReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTitleGetAllReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTitleGetAllReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTitleGetAllResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTitleGetAllResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTitleGetAllResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[int64]*UserTitleGetAllResp_Data)
			}
			var mapkey int64
			var mapvalue *UserTitleGetAllResp_Data
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserTitle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserTitle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserTitle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUserTitle
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthUserTitle
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &UserTitleGetAllResp_Data{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUserTitle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthUserTitle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTitleGetAllResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Num = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Score = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpireTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserTitle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserTitle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserTitle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserTitle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUserTitle
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUserTitle
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUserTitle(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUserTitle = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserTitle   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/UserTitle.proto", fileDescriptor_UserTitle_e46c26b4c77c4970) }

var fileDescriptor_UserTitle_e46c26b4c77c4970 = []byte{
	// 782 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xbd, 0x6e, 0xdb, 0x48,
	0x10, 0x36, 0x49, 0xfd, 0x8e, 0xee, 0xce, 0xc6, 0xde, 0xc1, 0x27, 0xf1, 0x74, 0xa2, 0xcc, 0xbb,
	0x83, 0x05, 0x1c, 0x22, 0xc5, 0x0a, 0x62, 0x07, 0x6e, 0x02, 0x2b, 0x31, 0x02, 0x17, 0x29, 0xb2,
	0x70, 0x90, 0xc0, 0x8d, 0x41, 0x89, 0x1b, 0x66, 0x11, 0x51, 0x94, 0xc4, 0xa5, 0x10, 0x75, 0x79,
	0x03, 0xa7, 0x4b, 0x1e, 0x21, 0x55, 0x9e, 0x23, 0xa5, 0xcb, 0x54, 0x44, 0x60, 0x77, 0x7c, 0x8a,
	0x80, 0xbb, 0x14, 0x4d, 0xc9, 0x92, 0x59, 0x18, 0x70, 0x33, 0xbb, 0x33, 0xc3, 0xd9, 0x9d, 0xf9,
	0xf6, 0x9b, 0x91, 0x00, 0x4d, 0x76, 0x5a, 0x2f, 0x5d, 0x32, 0x3e, 0xa6, 0xac, 0x4f, 0x9a, 0xc3,
	0xb1, 0xc3, 0x1c, 0x94, 0x1d, 0xf7, 0x9a, 0x93, 0x1d, 0xf5, 0x9e, 0x45, 0xd9, 0x5b, 0xaf, 0xdb,
	0xec, 0x39, 0x76, 0xcb, 0x72, 0x2c, 0xa7, 0xc5, 0xbd, 0x5d, 0xef, 0x0d, 0xd7, 0xb8, 0xc2, 0x77,
	0x22, 0x4a, 0xdf, 0x85, 0x4a, 0x7c, 0xd0, 0x33, 0xc2, 0xf8, 0xda, 0x99, 0x1e, 0x99, 0x2e, 0x26,
	0x23, 0x54, 0x01, 0x85, 0x9a, 0x6e, 0x59, 0xaa, 0x2b, 0x0d, 0xa5, 0x93, 0x0f, 0x7c, 0x2d, 0x54,
	0x71, 0x28, 0xf4, 0x0f, 0x32, 0xa8, 0xab, 0x02, 0xdd, 0x21, 0xaa, 0x42, 0xa6, 0xe7, 0x98, 0xa4,
	0x2c, 0xd5, 0xa5, 0x86, 0xd2, 0x29, 0x04, 0xbe, 0xc6, 0x75, 0xcc, 0x65, 0x78, 0xae, 0xed, 0x5a,
	0x65, 0xb9, 0x2e, 0x35, 0x8a, 0xe2, 0x5c, 0xdb, 0xb5, 0x70, 0x28, 0xd0, 0x7f, 0x90, 0xb7, 0x89,
	0xeb, 0x1a, 0x16, 0x29, 0x2b, 0xdc, 0x5d, 0x0a, 0x7c, 0x6d, 0x66, 0xc2, 0xb3, 0x0d, 0x3a, 0x82,
	0x8c, 0x69, 0x30, 0xa3, 0x9c, 0xa9, 0x2b, 0x8d, 0x52, 0xfb, 0xff, 0x26, 0xaf, 0xbd, 0xb9, 0x3a,
	0xa1, 0xe6, 0x53, 0x83, 0x19, 0x87, 0x03, 0x36, 0x9e, 0x8a, 0x64, 0xc2, 0x60, 0xcc, 0xa5, 0xba,
	0x07, 0xc5, 0xd8, 0x89, 0x36, 0x40, 0x79, 0x47, 0xa6, 0x22, 0x6d, 0x1c, 0x6e, 0xd1, 0x1f, 0x90,
	0x9d, 0x18, 0x7d, 0x8f, 0x88, 0x6c, 0xb1, 0x50, 0xf6, 0xe5, 0x47, 0x92, 0xbe, 0x37, 0x8f, 0xc0,
	0x73, 0xa7, 0x4b, 0xfb, 0x84, 0x6b, 0x11, 0x76, 0x1e, 0x35, 0x23, 0x00, 0x78, 0x8d, 0x1e, 0x35,
	0x71, 0x28, 0xf4, 0x4f, 0x32, 0xfc, 0xb5, 0x32, 0xf2, 0x0e, 0xc0, 0x3b, 0x8c, 0xc1, 0x93, 0x1a,
	0xa5, 0xf6, 0xf6, 0x12, 0xf0, 0x16, 0x32, 0xe2, 0xe8, 0x5d, 0x03, 0xee, 0x05, 0x64, 0x42, 0x3b,
	0xd2, 0x20, 0xcb, 0xc2, 0x2f, 0x79, 0xbe, 0xc5, 0x4e, 0x31, 0xf0, 0x35, 0x61, 0xc0, 0x62, 0x41,
	0x0d, 0x28, 0x18, 0x3d, 0x46, 0x27, 0x94, 0x4d, 0xa3, 0xb4, 0x7f, 0x09, 0x7c, 0x2d, 0xb6, 0xe1,
	0x78, 0xa7, 0xff, 0x3d, 0x0f, 0xcc, 0x13, 0xc7, 0xb6, 0xc9, 0x80, 0xcd, 0x30, 0xd5, 0x3d, 0xa8,
	0xae, 0x76, 0xdf, 0x06, 0xb8, 0x6a, 0x84, 0x88, 0x52, 0x57, 0x1a, 0xc5, 0xc5, 0x42, 0xf5, 0x2f,
	0x12, 0xac, 0xc7, 0xf7, 0x1e, 0x98, 0xe6, 0xcd, 0xcf, 0x8b, 0xb6, 0xa1, 0xc0, 0xeb, 0x3e, 0xa5,
	0x26, 0xbf, 0x4c, 0x11, 0xe5, 0xce, 0x6c, 0x38, 0xcf, 0x77, 0x47, 0x26, 0xba, 0x0f, 0x25, 0xf2,
	0x7e, 0x48, 0xc7, 0xe4, 0x94, 0x51, 0x7b, 0xf6, 0x64, 0xeb, 0x81, 0xaf, 0x25, 0xcd, 0x18, 0x84,
	0x72, 0x4c, 0x6d, 0x12, 0x42, 0xed, 0xf6, 0x9c, 0x31, 0xe1, 0x4f, 0xa7, 0x08, 0xa8, 0xb9, 0x01,
	0x8b, 0x45, 0x3f, 0x93, 0x60, 0x63, 0x3e, 0xd5, 0xdb, 0xc0, 0xb2, 0x1f, 0xc3, 0x12, 0x12, 0xa5,
	0xba, 0x48, 0x94, 0xe8, 0xfc, 0xe5, 0xec, 0xc8, 0x09, 0x76, 0xe8, 0x2d, 0x40, 0xc9, 0x37, 0x3b,
	0xe8, 0xf7, 0x53, 0xba, 0xe3, 0x6b, 0x06, 0x7e, 0xbf, 0x16, 0x71, 0x07, 0x5d, 0xd1, 0x99, 0x1b,
	0x29, 0xff, 0x2e, 0xe9, 0x8a, 0x28, 0x93, 0x1b, 0x66, 0xc9, 0xeb, 0x9b, 0x67, 0xc9, 0xc3, 0xe4,
	0x2c, 0x29, 0xb5, 0xb5, 0x94, 0x3b, 0x12, 0xc3, 0x46, 0xfd, 0x2c, 0x47, 0xdd, 0xb6, 0x09, 0x72,
	0x04, 0x5c, 0xb1, 0x93, 0x0b, 0x7c, 0x4d, 0xa6, 0x26, 0x96, 0xa9, 0x39, 0x43, 0x34, 0x01, 0x40,
	0x4c, 0xc8, 0x0a, 0x28, 0x8c, 0x9a, 0x51, 0xf1, 0xdc, 0xc5, 0x42, 0x17, 0x13, 0xae, 0x81, 0x67,
	0x73, 0x3a, 0x45, 0xae, 0x81, 0x67, 0xe3, 0x50, 0x5c, 0x71, 0x2d, 0x7b, 0xd5, 0xd6, 0x49, 0xae,
	0x85, 0xf4, 0xed, 0x8d, 0x89, 0xc1, 0x22, 0xfa, 0xe6, 0xae, 0xe8, 0x9b, 0x30, 0x63, 0x10, 0x0a,
	0xa7, 0xef, 0x02, 0xe1, 0xf3, 0xe9, 0x84, 0xd7, 0x21, 0xe7, 0x32, 0x83, 0x79, 0x6e, 0xb9, 0xc0,
	0x3f, 0x86, 0xc0, 0xd7, 0x22, 0x0b, 0x8e, 0xd6, 0xf6, 0x99, 0x02, 0xc5, 0x18, 0x42, 0x74, 0x0c,
	0xbf, 0x5a, 0xc9, 0xe9, 0x8f, 0xea, 0x29, 0x3f, 0x0e, 0x23, 0x75, 0x2b, 0xf5, 0xe7, 0x03, 0xbd,
	0x82, 0xdf, 0xac, 0xb9, 0xb1, 0x88, 0xb6, 0xd2, 0xc6, 0xe6, 0x48, 0xd5, 0xd3, 0x27, 0x2b, 0x3a,
	0x81, 0x75, 0x6b, 0x7e, 0x92, 0xa1, 0x65, 0x61, 0x0b, 0x93, 0x50, 0xfd, 0x27, 0xf5, 0x1b, 0x77,
	0x88, 0x76, 0x41, 0x31, 0x4c, 0x13, 0x6d, 0x2e, 0xed, 0xdb, 0x91, 0xfa, 0xe7, 0x8a, 0x7e, 0x46,
	0x8f, 0x21, 0x67, 0x71, 0x26, 0xa2, 0xca, 0x2a, 0x86, 0x8e, 0x54, 0x75, 0x35, 0x79, 0x3b, 0xd5,
	0x6f, 0x17, 0x35, 0xe9, 0xfc, 0xa2, 0x26, 0xfd, 0xb8, 0xa8, 0x49, 0x1f, 0x2f, 0x6b, 0x6b, 0xe7,
	0x97, 0xb5, 0xb5, 0xef, 0x97, 0xb5, 0xb5, 0x13, 0x79, 0xb2, 0xd3, 0xcd, 0xf1, 0x7f, 0x1e, 0x0f,
	0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0xa7, 0xa5, 0x96, 0xa8, 0xc5, 0x08, 0x00, 0x00,
}
