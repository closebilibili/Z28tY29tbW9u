// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v3/User.proto

package v3

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UserGetMultipleReq struct {
	// 用户id
	Uids []int64 `protobuf:"varint,1,rep,packed,name=uids" json:"uids"`
	// 属性
	Attributes []string `protobuf:"bytes,2,rep,name=attributes" json:"attributes"`
}

func (m *UserGetMultipleReq) Reset()         { *m = UserGetMultipleReq{} }
func (m *UserGetMultipleReq) String() string { return proto.CompactTextString(m) }
func (*UserGetMultipleReq) ProtoMessage()    {}
func (*UserGetMultipleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_User_24b51a5f54773f91, []int{0}
}
func (m *UserGetMultipleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetMultipleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetMultipleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserGetMultipleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetMultipleReq.Merge(dst, src)
}
func (m *UserGetMultipleReq) XXX_Size() int {
	return m.Size()
}
func (m *UserGetMultipleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetMultipleReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetMultipleReq proto.InternalMessageInfo

func (m *UserGetMultipleReq) GetUids() []int64 {
	if m != nil {
		return m.Uids
	}
	return nil
}

func (m *UserGetMultipleReq) GetAttributes() []string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type UserGetMultipleResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data map[int64]*UserGetMultipleResp_UserInfo `protobuf:"bytes,3,rep,name=data" json:"data" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UserGetMultipleResp) Reset()         { *m = UserGetMultipleResp{} }
func (m *UserGetMultipleResp) String() string { return proto.CompactTextString(m) }
func (*UserGetMultipleResp) ProtoMessage()    {}
func (*UserGetMultipleResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_User_24b51a5f54773f91, []int{1}
}
func (m *UserGetMultipleResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetMultipleResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetMultipleResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserGetMultipleResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetMultipleResp.Merge(dst, src)
}
func (m *UserGetMultipleResp) XXX_Size() int {
	return m.Size()
}
func (m *UserGetMultipleResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetMultipleResp.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetMultipleResp proto.InternalMessageInfo

func (m *UserGetMultipleResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UserGetMultipleResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *UserGetMultipleResp) GetData() map[int64]*UserGetMultipleResp_UserInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserGetMultipleResp_OfficialVerify struct {
	//
	Type int64 `protobuf:"varint,1,opt,name=type,proto3" json:"type"`
	//
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc"`
	//
	Role int64 `protobuf:"varint,3,opt,name=role,proto3" json:"role"`
}

func (m *UserGetMultipleResp_OfficialVerify) Reset()         { *m = UserGetMultipleResp_OfficialVerify{} }
func (m *UserGetMultipleResp_OfficialVerify) String() string { return proto.CompactTextString(m) }
func (*UserGetMultipleResp_OfficialVerify) ProtoMessage()    {}
func (*UserGetMultipleResp_OfficialVerify) Descriptor() ([]byte, []int) {
	return fileDescriptor_User_24b51a5f54773f91, []int{1, 1}
}
func (m *UserGetMultipleResp_OfficialVerify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetMultipleResp_OfficialVerify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetMultipleResp_OfficialVerify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserGetMultipleResp_OfficialVerify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetMultipleResp_OfficialVerify.Merge(dst, src)
}
func (m *UserGetMultipleResp_OfficialVerify) XXX_Size() int {
	return m.Size()
}
func (m *UserGetMultipleResp_OfficialVerify) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetMultipleResp_OfficialVerify.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetMultipleResp_OfficialVerify proto.InternalMessageInfo

func (m *UserGetMultipleResp_OfficialVerify) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UserGetMultipleResp_OfficialVerify) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *UserGetMultipleResp_OfficialVerify) GetRole() int64 {
	if m != nil {
		return m.Role
	}
	return 0
}

type UserGetMultipleResp_Info struct {
	// uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 昵称
	Uname string `protobuf:"bytes,2,opt,name=uname,proto3" json:"uname"`
	// 头像
	Face string `protobuf:"bytes,3,opt,name=face,proto3" json:"face"`
	// 等级
	Rank int64 `protobuf:"varint,4,opt,name=rank,proto3" json:"rank"`
	// 用户id
	PlatformUserLevel int64 `protobuf:"varint,5,opt,name=platform_user_level,json=platformUserLevel,proto3" json:"platform_user_level"`
	// 人气值
	MobileVerify int64 `protobuf:"varint,6,opt,name=mobile_verify,json=mobileVerify,proto3" json:"mobile_verify"`
	// 认证
	OfficialVerify *UserGetMultipleResp_OfficialVerify `protobuf:"bytes,7,opt,name=official_verify,json=officialVerify" json:"official_verify"`
	// 类型
	VipType int64 `protobuf:"varint,8,opt,name=vip_type,json=vipType,proto3" json:"vip_type"`
	// 年龄
	Gender int64 `protobuf:"varint,9,opt,name=gender,proto3" json:"gender"`
}

func (m *UserGetMultipleResp_Info) Reset()         { *m = UserGetMultipleResp_Info{} }
func (m *UserGetMultipleResp_Info) String() string { return proto.CompactTextString(m) }
func (*UserGetMultipleResp_Info) ProtoMessage()    {}
func (*UserGetMultipleResp_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_User_24b51a5f54773f91, []int{1, 2}
}
func (m *UserGetMultipleResp_Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetMultipleResp_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetMultipleResp_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserGetMultipleResp_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetMultipleResp_Info.Merge(dst, src)
}
func (m *UserGetMultipleResp_Info) XXX_Size() int {
	return m.Size()
}
func (m *UserGetMultipleResp_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetMultipleResp_Info.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetMultipleResp_Info proto.InternalMessageInfo

func (m *UserGetMultipleResp_Info) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserGetMultipleResp_Info) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *UserGetMultipleResp_Info) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *UserGetMultipleResp_Info) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *UserGetMultipleResp_Info) GetPlatformUserLevel() int64 {
	if m != nil {
		return m.PlatformUserLevel
	}
	return 0
}

func (m *UserGetMultipleResp_Info) GetMobileVerify() int64 {
	if m != nil {
		return m.MobileVerify
	}
	return 0
}

func (m *UserGetMultipleResp_Info) GetOfficialVerify() *UserGetMultipleResp_OfficialVerify {
	if m != nil {
		return m.OfficialVerify
	}
	return nil
}

func (m *UserGetMultipleResp_Info) GetVipType() int64 {
	if m != nil {
		return m.VipType
	}
	return 0
}

func (m *UserGetMultipleResp_Info) GetGender() int64 {
	if m != nil {
		return m.Gender
	}
	return 0
}

type UserGetMultipleResp_MasterLevel struct {
	//
	Level int64 `protobuf:"varint,1,opt,name=level,proto3" json:"level"`
	//
	Current []int64 `protobuf:"varint,2,rep,packed,name=current" json:"current"`
	//
	Next []int64 `protobuf:"varint,3,rep,packed,name=next" json:"next"`
	//
	Color int64 `protobuf:"varint,4,opt,name=color,proto3" json:"color"`
}

func (m *UserGetMultipleResp_MasterLevel) Reset()         { *m = UserGetMultipleResp_MasterLevel{} }
func (m *UserGetMultipleResp_MasterLevel) String() string { return proto.CompactTextString(m) }
func (*UserGetMultipleResp_MasterLevel) ProtoMessage()    {}
func (*UserGetMultipleResp_MasterLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_User_24b51a5f54773f91, []int{1, 3}
}
func (m *UserGetMultipleResp_MasterLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetMultipleResp_MasterLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetMultipleResp_MasterLevel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserGetMultipleResp_MasterLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetMultipleResp_MasterLevel.Merge(dst, src)
}
func (m *UserGetMultipleResp_MasterLevel) XXX_Size() int {
	return m.Size()
}
func (m *UserGetMultipleResp_MasterLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetMultipleResp_MasterLevel.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetMultipleResp_MasterLevel proto.InternalMessageInfo

func (m *UserGetMultipleResp_MasterLevel) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *UserGetMultipleResp_MasterLevel) GetCurrent() []int64 {
	if m != nil {
		return m.Current
	}
	return nil
}

func (m *UserGetMultipleResp_MasterLevel) GetNext() []int64 {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *UserGetMultipleResp_MasterLevel) GetColor() int64 {
	if m != nil {
		return m.Color
	}
	return 0
}

type UserGetMultipleResp_Exp struct {
	//
	Cost int64 `protobuf:"varint,1,opt,name=cost,proto3" json:"cost"`
	//
	Rcost int64 `protobuf:"varint,2,opt,name=rcost,proto3" json:"rcost"`
	//
	UserLevel int64 `protobuf:"varint,3,opt,name=user_level,json=userLevel,proto3" json:"user_level"`
	//
	MasterLevel *UserGetMultipleResp_MasterLevel `protobuf:"bytes,4,opt,name=master_level,json=masterLevel" json:"master_level"`
	//
	Color int64 `protobuf:"varint,5,opt,name=color,proto3" json:"color"`
	//
	UlCost int64 `protobuf:"varint,6,opt,name=ul_cost,json=ulCost,proto3" json:"ul_cost"`
	//
	Unext int64 `protobuf:"varint,7,opt,name=unext,proto3" json:"unext"`
	//
	Rnext int64 `protobuf:"varint,8,opt,name=rnext,proto3" json:"rnext"`
}

func (m *UserGetMultipleResp_Exp) Reset()         { *m = UserGetMultipleResp_Exp{} }
func (m *UserGetMultipleResp_Exp) String() string { return proto.CompactTextString(m) }
func (*UserGetMultipleResp_Exp) ProtoMessage()    {}
func (*UserGetMultipleResp_Exp) Descriptor() ([]byte, []int) {
	return fileDescriptor_User_24b51a5f54773f91, []int{1, 4}
}
func (m *UserGetMultipleResp_Exp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetMultipleResp_Exp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetMultipleResp_Exp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserGetMultipleResp_Exp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetMultipleResp_Exp.Merge(dst, src)
}
func (m *UserGetMultipleResp_Exp) XXX_Size() int {
	return m.Size()
}
func (m *UserGetMultipleResp_Exp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetMultipleResp_Exp.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetMultipleResp_Exp proto.InternalMessageInfo

func (m *UserGetMultipleResp_Exp) GetCost() int64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *UserGetMultipleResp_Exp) GetRcost() int64 {
	if m != nil {
		return m.Rcost
	}
	return 0
}

func (m *UserGetMultipleResp_Exp) GetUserLevel() int64 {
	if m != nil {
		return m.UserLevel
	}
	return 0
}

func (m *UserGetMultipleResp_Exp) GetMasterLevel() *UserGetMultipleResp_MasterLevel {
	if m != nil {
		return m.MasterLevel
	}
	return nil
}

func (m *UserGetMultipleResp_Exp) GetColor() int64 {
	if m != nil {
		return m.Color
	}
	return 0
}

func (m *UserGetMultipleResp_Exp) GetUlCost() int64 {
	if m != nil {
		return m.UlCost
	}
	return 0
}

func (m *UserGetMultipleResp_Exp) GetUnext() int64 {
	if m != nil {
		return m.Unext
	}
	return 0
}

func (m *UserGetMultipleResp_Exp) GetRnext() int64 {
	if m != nil {
		return m.Rnext
	}
	return 0
}

type UserGetMultipleResp_UserInfo struct {
	// 直播间标题
	Info *UserGetMultipleResp_Info `protobuf:"bytes,1,opt,name=info" json:"info"`
	// 直播间标题
	Exp *UserGetMultipleResp_Exp `protobuf:"bytes,2,opt,name=exp" json:"exp"`
}

func (m *UserGetMultipleResp_UserInfo) Reset()         { *m = UserGetMultipleResp_UserInfo{} }
func (m *UserGetMultipleResp_UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserGetMultipleResp_UserInfo) ProtoMessage()    {}
func (*UserGetMultipleResp_UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_User_24b51a5f54773f91, []int{1, 5}
}
func (m *UserGetMultipleResp_UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetMultipleResp_UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetMultipleResp_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserGetMultipleResp_UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetMultipleResp_UserInfo.Merge(dst, src)
}
func (m *UserGetMultipleResp_UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserGetMultipleResp_UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetMultipleResp_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetMultipleResp_UserInfo proto.InternalMessageInfo

func (m *UserGetMultipleResp_UserInfo) GetInfo() *UserGetMultipleResp_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *UserGetMultipleResp_UserInfo) GetExp() *UserGetMultipleResp_Exp {
	if m != nil {
		return m.Exp
	}
	return nil
}

type UserGetUserLevelInfoReq struct {
	// 用户id
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
}

func (m *UserGetUserLevelInfoReq) Reset()         { *m = UserGetUserLevelInfoReq{} }
func (m *UserGetUserLevelInfoReq) String() string { return proto.CompactTextString(m) }
func (*UserGetUserLevelInfoReq) ProtoMessage()    {}
func (*UserGetUserLevelInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_User_24b51a5f54773f91, []int{2}
}
func (m *UserGetUserLevelInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetUserLevelInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetUserLevelInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserGetUserLevelInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetUserLevelInfoReq.Merge(dst, src)
}
func (m *UserGetUserLevelInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *UserGetUserLevelInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetUserLevelInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetUserLevelInfoReq proto.InternalMessageInfo

func (m *UserGetUserLevelInfoReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type UserGetUserLevelInfoResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *UserGetUserLevelInfoResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *UserGetUserLevelInfoResp) Reset()         { *m = UserGetUserLevelInfoResp{} }
func (m *UserGetUserLevelInfoResp) String() string { return proto.CompactTextString(m) }
func (*UserGetUserLevelInfoResp) ProtoMessage()    {}
func (*UserGetUserLevelInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_User_24b51a5f54773f91, []int{3}
}
func (m *UserGetUserLevelInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetUserLevelInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetUserLevelInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserGetUserLevelInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetUserLevelInfoResp.Merge(dst, src)
}
func (m *UserGetUserLevelInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *UserGetUserLevelInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetUserLevelInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetUserLevelInfoResp proto.InternalMessageInfo

func (m *UserGetUserLevelInfoResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UserGetUserLevelInfoResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *UserGetUserLevelInfoResp) GetData() *UserGetUserLevelInfoResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserGetUserLevelInfoResp_Data struct {
	//
	Level int64 `protobuf:"varint,1,opt,name=level,proto3" json:"level"`
	//
	Exp int64 `protobuf:"varint,2,opt,name=exp,proto3" json:"exp"`
	//
	Color int64 `protobuf:"varint,3,opt,name=color,proto3" json:"color"`
}

func (m *UserGetUserLevelInfoResp_Data) Reset()         { *m = UserGetUserLevelInfoResp_Data{} }
func (m *UserGetUserLevelInfoResp_Data) String() string { return proto.CompactTextString(m) }
func (*UserGetUserLevelInfoResp_Data) ProtoMessage()    {}
func (*UserGetUserLevelInfoResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_User_24b51a5f54773f91, []int{3, 0}
}
func (m *UserGetUserLevelInfoResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetUserLevelInfoResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetUserLevelInfoResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserGetUserLevelInfoResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetUserLevelInfoResp_Data.Merge(dst, src)
}
func (m *UserGetUserLevelInfoResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *UserGetUserLevelInfoResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetUserLevelInfoResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetUserLevelInfoResp_Data proto.InternalMessageInfo

func (m *UserGetUserLevelInfoResp_Data) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *UserGetUserLevelInfoResp_Data) GetExp() int64 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *UserGetUserLevelInfoResp_Data) GetColor() int64 {
	if m != nil {
		return m.Color
	}
	return 0
}

func init() {
	proto.RegisterType((*UserGetMultipleReq)(nil), "user.v3.UserGetMultipleReq")
	proto.RegisterType((*UserGetMultipleResp)(nil), "user.v3.UserGetMultipleResp")
	proto.RegisterMapType((map[int64]*UserGetMultipleResp_UserInfo)(nil), "user.v3.UserGetMultipleResp.DataEntry")
	proto.RegisterType((*UserGetMultipleResp_OfficialVerify)(nil), "user.v3.UserGetMultipleResp.Official_verify")
	proto.RegisterType((*UserGetMultipleResp_Info)(nil), "user.v3.UserGetMultipleResp.Info")
	proto.RegisterType((*UserGetMultipleResp_MasterLevel)(nil), "user.v3.UserGetMultipleResp.Master_level")
	proto.RegisterType((*UserGetMultipleResp_Exp)(nil), "user.v3.UserGetMultipleResp.Exp")
	proto.RegisterType((*UserGetMultipleResp_UserInfo)(nil), "user.v3.UserGetMultipleResp.UserInfo")
	proto.RegisterType((*UserGetUserLevelInfoReq)(nil), "user.v3.UserGetUserLevelInfoReq")
	proto.RegisterType((*UserGetUserLevelInfoResp)(nil), "user.v3.UserGetUserLevelInfoResp")
	proto.RegisterType((*UserGetUserLevelInfoResp_Data)(nil), "user.v3.UserGetUserLevelInfoResp.Data")
}
func (m *UserGetMultipleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetMultipleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uids) > 0 {
		dAtA2 := make([]byte, len(m.Uids)*10)
		var j1 int
		for _, num1 := range m.Uids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintUser(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Attributes) > 0 {
		for _, s := range m.Attributes {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *UserGetMultipleResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetMultipleResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x1a
			i++
			v := m.Data[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovUser(uint64(msgSize))
			}
			mapSize := 1 + sovUser(uint64(k)) + msgSize
			i = encodeVarintUser(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintUser(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintUser(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	return i, nil
}

func (m *UserGetMultipleResp_OfficialVerify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetMultipleResp_OfficialVerify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Type))
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.Role != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Role))
	}
	return i, nil
}

func (m *UserGetMultipleResp_Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetMultipleResp_Info) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Uid))
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if m.Rank != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Rank))
	}
	if m.PlatformUserLevel != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.PlatformUserLevel))
	}
	if m.MobileVerify != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.MobileVerify))
	}
	if m.OfficialVerify != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.OfficialVerify.Size()))
		n4, err := m.OfficialVerify.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.VipType != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.VipType))
	}
	if m.Gender != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Gender))
	}
	return i, nil
}

func (m *UserGetMultipleResp_MasterLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetMultipleResp_MasterLevel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Level))
	}
	if len(m.Current) > 0 {
		dAtA6 := make([]byte, len(m.Current)*10)
		var j5 int
		for _, num1 := range m.Current {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if len(m.Next) > 0 {
		dAtA8 := make([]byte, len(m.Next)*10)
		var j7 int
		for _, num1 := range m.Next {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUser(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if m.Color != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Color))
	}
	return i, nil
}

func (m *UserGetMultipleResp_Exp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetMultipleResp_Exp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cost != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Cost))
	}
	if m.Rcost != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Rcost))
	}
	if m.UserLevel != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.UserLevel))
	}
	if m.MasterLevel != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.MasterLevel.Size()))
		n9, err := m.MasterLevel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Color != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Color))
	}
	if m.UlCost != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.UlCost))
	}
	if m.Unext != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Unext))
	}
	if m.Rnext != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Rnext))
	}
	return i, nil
}

func (m *UserGetMultipleResp_UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetMultipleResp_UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Info.Size()))
		n10, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Exp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Exp.Size()))
		n11, err := m.Exp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *UserGetUserLevelInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetUserLevelInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *UserGetUserLevelInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetUserLevelInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Data.Size()))
		n12, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *UserGetUserLevelInfoResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetUserLevelInfoResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Level))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Exp))
	}
	if m.Color != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Color))
	}
	return i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserGetMultipleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Uids) > 0 {
		l = 0
		for _, e := range m.Uids {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	if len(m.Attributes) > 0 {
		for _, s := range m.Attributes {
			l = len(s)
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *UserGetMultipleResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovUser(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovUser(uint64(l))
			}
			mapEntrySize := 1 + sovUser(uint64(k)) + l
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UserGetMultipleResp_OfficialVerify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovUser(uint64(m.Type))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovUser(uint64(m.Role))
	}
	return n
}

func (m *UserGetMultipleResp_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUser(uint64(m.Uid))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovUser(uint64(m.Rank))
	}
	if m.PlatformUserLevel != 0 {
		n += 1 + sovUser(uint64(m.PlatformUserLevel))
	}
	if m.MobileVerify != 0 {
		n += 1 + sovUser(uint64(m.MobileVerify))
	}
	if m.OfficialVerify != nil {
		l = m.OfficialVerify.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.VipType != 0 {
		n += 1 + sovUser(uint64(m.VipType))
	}
	if m.Gender != 0 {
		n += 1 + sovUser(uint64(m.Gender))
	}
	return n
}

func (m *UserGetMultipleResp_MasterLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovUser(uint64(m.Level))
	}
	if len(m.Current) > 0 {
		l = 0
		for _, e := range m.Current {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	if len(m.Next) > 0 {
		l = 0
		for _, e := range m.Next {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	if m.Color != 0 {
		n += 1 + sovUser(uint64(m.Color))
	}
	return n
}

func (m *UserGetMultipleResp_Exp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cost != 0 {
		n += 1 + sovUser(uint64(m.Cost))
	}
	if m.Rcost != 0 {
		n += 1 + sovUser(uint64(m.Rcost))
	}
	if m.UserLevel != 0 {
		n += 1 + sovUser(uint64(m.UserLevel))
	}
	if m.MasterLevel != nil {
		l = m.MasterLevel.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Color != 0 {
		n += 1 + sovUser(uint64(m.Color))
	}
	if m.UlCost != 0 {
		n += 1 + sovUser(uint64(m.UlCost))
	}
	if m.Unext != 0 {
		n += 1 + sovUser(uint64(m.Unext))
	}
	if m.Rnext != 0 {
		n += 1 + sovUser(uint64(m.Rnext))
	}
	return n
}

func (m *UserGetMultipleResp_UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Exp != nil {
		l = m.Exp.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *UserGetUserLevelInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUser(uint64(m.Uid))
	}
	return n
}

func (m *UserGetUserLevelInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovUser(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *UserGetUserLevelInfoResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovUser(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovUser(uint64(m.Exp))
	}
	if m.Color != 0 {
		n += 1 + sovUser(uint64(m.Color))
	}
	return n
}

func sovUser(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserGetMultipleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGetMultipleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGetMultipleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uids = append(m.Uids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Uids) == 0 {
					m.Uids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uids = append(m.Uids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetMultipleResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGetMultipleResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGetMultipleResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[int64]*UserGetMultipleResp_UserInfo)
			}
			var mapkey int64
			var mapvalue *UserGetMultipleResp_UserInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUser
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthUser
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &UserGetMultipleResp_UserInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetMultipleResp_OfficialVerify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Official_verify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Official_verify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetMultipleResp_Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformUserLevel", wireType)
			}
			m.PlatformUserLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatformUserLevel |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileVerify", wireType)
			}
			m.MobileVerify = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MobileVerify |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialVerify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfficialVerify == nil {
				m.OfficialVerify = &UserGetMultipleResp_OfficialVerify{}
			}
			if err := m.OfficialVerify.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipType", wireType)
			}
			m.VipType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetMultipleResp_MasterLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Master_level: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Master_level: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Current = append(m.Current, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Current) == 0 {
					m.Current = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Current = append(m.Current, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Next = append(m.Next, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Next) == 0 {
					m.Next = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Next = append(m.Next, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetMultipleResp_Exp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Exp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Exp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rcost", wireType)
			}
			m.Rcost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rcost |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLevel", wireType)
			}
			m.UserLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserLevel |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MasterLevel == nil {
				m.MasterLevel = &UserGetMultipleResp_MasterLevel{}
			}
			if err := m.MasterLevel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UlCost", wireType)
			}
			m.UlCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UlCost |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unext", wireType)
			}
			m.Unext = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unext |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rnext", wireType)
			}
			m.Rnext = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rnext |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetMultipleResp_UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &UserGetMultipleResp_Info{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exp == nil {
				m.Exp = &UserGetMultipleResp_Exp{}
			}
			if err := m.Exp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetUserLevelInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGetUserLevelInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGetUserLevelInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetUserLevelInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGetUserLevelInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGetUserLevelInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &UserGetUserLevelInfoResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetUserLevelInfoResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUser
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUser(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUser = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v3/User.proto", fileDescriptor_User_24b51a5f54773f91) }

var fileDescriptor_User_24b51a5f54773f91 = []byte{
	// 899 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xaf, 0xe3, 0xb4, 0x49, 0x5e, 0xba, 0xbb, 0xdd, 0xe9, 0x61, 0xbd, 0xa6, 0x8a, 0xb3, 0x11,
	0x0b, 0x45, 0x62, 0x53, 0x29, 0x45, 0x08, 0xb1, 0x07, 0xa4, 0xb0, 0xd5, 0x82, 0xb4, 0x2b, 0xa4,
	0x11, 0x7f, 0x24, 0x0e, 0x1b, 0x39, 0xce, 0x24, 0x98, 0x3a, 0xb6, 0x6b, 0x8f, 0xa3, 0xf4, 0x1b,
	0x70, 0xe4, 0xc2, 0x95, 0x3b, 0xdf, 0x80, 0x8f, 0xc0, 0x71, 0x8f, 0x1c, 0x90, 0x85, 0xda, 0x9b,
	0x3f, 0x04, 0x42, 0xef, 0xcd, 0x24, 0x71, 0xda, 0x90, 0x5e, 0xb8, 0xbc, 0xf1, 0x7b, 0x33, 0xef,
	0xdf, 0xef, 0x37, 0xf3, 0x64, 0xb8, 0x37, 0x3b, 0x3d, 0xf9, 0x26, 0x15, 0x49, 0x37, 0x4e, 0x22,
	0x19, 0xb1, 0x5a, 0x86, 0xdf, 0xb3, 0x53, 0xfb, 0xd9, 0xc4, 0x97, 0x3f, 0x64, 0xc3, 0xae, 0x17,
	0x4d, 0x4f, 0x26, 0xd1, 0x24, 0x3a, 0xa1, 0xfd, 0x61, 0x36, 0x26, 0x8d, 0x14, 0xfa, 0x52, 0x7e,
	0x9d, 0x21, 0x30, 0x8c, 0xf2, 0x52, 0xc8, 0xd7, 0x59, 0x20, 0xfd, 0x38, 0x10, 0x5c, 0x5c, 0xb0,
	0x23, 0xa8, 0x66, 0xfe, 0x28, 0xb5, 0x8c, 0xb6, 0x79, 0x6c, 0xf6, 0xeb, 0x45, 0xee, 0x90, 0xce,
	0x49, 0xb2, 0x2e, 0x80, 0x2b, 0x65, 0xe2, 0x0f, 0x33, 0x29, 0x52, 0xab, 0xd2, 0x36, 0x8f, 0x1b,
	0xfd, 0xfb, 0x45, 0xee, 0x94, 0xac, 0xbc, 0xf4, 0xdd, 0xf9, 0xb5, 0x09, 0x87, 0xb7, 0x92, 0xa4,
	0x31, 0x66, 0xf1, 0xa2, 0x91, 0xb0, 0x8c, 0xb6, 0xb1, 0xc8, 0x82, 0x3a, 0x27, 0xc9, 0x1e, 0x83,
	0x39, 0x4d, 0x27, 0x56, 0xa5, 0x6d, 0x1c, 0x37, 0xfa, 0xb5, 0x22, 0x77, 0x50, 0xe5, 0x28, 0xd8,
	0x0b, 0xa8, 0x8e, 0x5c, 0xe9, 0x5a, 0x66, 0xdb, 0x3c, 0x6e, 0xf6, 0xde, 0xeb, 0xea, 0xde, 0xbb,
	0x1b, 0x92, 0x74, 0x5f, 0xb8, 0xd2, 0x3d, 0x0b, 0x65, 0x72, 0xa9, 0x12, 0xa0, 0x1f, 0x27, 0x69,
	0xbf, 0x81, 0xc6, 0x72, 0x93, 0x1d, 0x80, 0x79, 0x2e, 0x2e, 0x55, 0x29, 0x1c, 0x3f, 0xd9, 0x73,
	0xd8, 0x9d, 0xb9, 0x41, 0x26, 0xa8, 0x82, 0x66, 0xef, 0xe9, 0xd6, 0x2c, 0x68, 0xfb, 0x32, 0x1c,
	0x47, 0x5c, 0xf9, 0x7c, 0x5a, 0xf9, 0xc4, 0xb0, 0xcf, 0xe1, 0xc1, 0x57, 0xe3, 0xb1, 0xef, 0xf9,
	0x6e, 0x30, 0x98, 0x89, 0xc4, 0x1f, 0x5f, 0x62, 0xc7, 0xf2, 0x32, 0x5e, 0xeb, 0x18, 0x75, 0x4e,
	0x12, 0x77, 0x47, 0x22, 0xf5, 0x74, 0xcb, 0xaa, 0x5c, 0x91, 0x7a, 0x9c, 0x24, 0xee, 0x26, 0x51,
	0x20, 0x2c, 0x73, 0xe5, 0x8b, 0x3a, 0x27, 0x69, 0xff, 0x6e, 0x42, 0x15, 0x0b, 0x40, 0xd8, 0x32,
	0x7f, 0xa4, 0x33, 0x10, 0x6c, 0x99, 0x3f, 0xe2, 0x28, 0x98, 0x03, 0xbb, 0x59, 0xe8, 0x4e, 0x85,
	0x4e, 0xd0, 0x28, 0x72, 0x47, 0x19, 0xb8, 0x5a, 0x30, 0xc5, 0xd8, 0xf5, 0x54, 0x0a, 0x5d, 0x00,
	0xea, 0x9c, 0x24, 0x15, 0xe0, 0x86, 0xe7, 0x56, 0xb5, 0x54, 0x80, 0x1b, 0x9e, 0x73, 0x92, 0xec,
	0x25, 0x1c, 0xc6, 0x81, 0x2b, 0xc7, 0x51, 0x32, 0x1d, 0x20, 0x52, 0x83, 0x40, 0xcc, 0x44, 0x60,
	0xed, 0xd2, 0xe1, 0x47, 0x45, 0xee, 0x6c, 0xda, 0xe6, 0x0f, 0x17, 0x46, 0x04, 0xf0, 0x15, 0x9a,
	0xd8, 0xc7, 0x70, 0x6f, 0x1a, 0x0d, 0xfd, 0x40, 0x68, 0xd0, 0xac, 0x3d, 0x0a, 0xf1, 0xb0, 0xc8,
	0x9d, 0xf5, 0x0d, 0xbe, 0xaf, 0xd4, 0x6f, 0x15, 0xb6, 0x3f, 0xc2, 0x83, 0x68, 0x1d, 0x6e, 0xab,
	0x46, 0xcc, 0x7d, 0xb8, 0x95, 0xb9, 0x1b, 0x14, 0xf5, 0x0f, 0x8b, 0xdc, 0xb9, 0x19, 0x88, 0xdf,
	0x5f, 0x18, 0x74, 0xae, 0xf7, 0xa1, 0x3e, 0xf3, 0xe3, 0x01, 0x71, 0x59, 0xa7, 0xf2, 0xf6, 0x8b,
	0xdc, 0x59, 0xda, 0x78, 0x6d, 0xe6, 0xc7, 0x5f, 0x23, 0xa5, 0x1d, 0xd8, 0x9b, 0x88, 0x70, 0x24,
	0x12, 0xab, 0x41, 0xc7, 0xa0, 0xc8, 0x1d, 0x6d, 0xe1, 0x7a, 0xb5, 0x7f, 0x31, 0x60, 0xff, 0xb5,
	0x9b, 0xca, 0x05, 0x28, 0xc8, 0x93, 0x02, 0x4f, 0x91, 0x48, 0x3c, 0x29, 0xb8, 0xd4, 0xc2, 0x9e,
	0x42, 0xcd, 0xcb, 0x92, 0x44, 0x84, 0x92, 0x5e, 0x9f, 0xd9, 0x6f, 0x16, 0xb9, 0xb3, 0x30, 0xf1,
	0xc5, 0x07, 0x12, 0x16, 0x8a, 0xb9, 0xa4, 0x67, 0xa2, 0x09, 0x43, 0x9d, 0x93, 0xc4, 0x2c, 0x5e,
	0x14, 0x44, 0x89, 0xe6, 0x93, 0xb2, 0x90, 0x81, 0xab, 0xc5, 0xfe, 0xab, 0x02, 0xe6, 0xd9, 0x5c,
	0x3f, 0xd3, 0x54, 0xae, 0x3f, 0xd3, 0x54, 0x72, 0x92, 0x18, 0x26, 0xa1, 0xed, 0xca, 0x2a, 0x0c,
	0x19, 0xb8, 0x5a, 0xd8, 0x33, 0x80, 0xd2, 0x7d, 0x50, 0xb7, 0x97, 0xa6, 0x45, 0xe9, 0x1a, 0x34,
	0xb2, 0x25, 0xfd, 0x6f, 0x60, 0x7f, 0x5a, 0x02, 0x83, 0xaa, 0x6b, 0xf6, 0x3e, 0xd8, 0xca, 0x61,
	0x19, 0xbd, 0xfe, 0x41, 0x91, 0x3b, 0x6b, 0x21, 0x78, 0x53, 0x69, 0xaf, 0x16, 0xe0, 0xaa, 0xb6,
	0x77, 0x37, 0xb7, 0xcd, 0xde, 0x85, 0x5a, 0x16, 0x0c, 0xa8, 0x25, 0x75, 0xf3, 0x08, 0x5c, 0x6d,
	0xe2, 0x7b, 0x59, 0xf0, 0xb9, 0x6e, 0x3b, 0x23, 0x70, 0x6b, 0xab, 0x30, 0x64, 0xe0, 0x6a, 0x21,
	0x5c, 0xe8, 0x40, 0xbd, 0x84, 0x8b, 0x3a, 0x40, 0x8b, 0xfd, 0x93, 0x01, 0xf5, 0xc5, 0xd8, 0x60,
	0x9f, 0x41, 0xd5, 0x0f, 0xc7, 0x11, 0x61, 0xdc, 0xec, 0x3d, 0xd9, 0xda, 0x2d, 0x3a, 0x28, 0x1a,
	0xd0, 0x85, 0x93, 0x64, 0xcf, 0xc1, 0x14, 0xf3, 0x58, 0xcf, 0xaa, 0xf6, 0x56, 0xff, 0xb3, 0x79,
	0xac, 0x06, 0x83, 0x98, 0xc7, 0x1c, 0x45, 0xe7, 0x23, 0x78, 0xa4, 0x0f, 0x2e, 0x9f, 0x21, 0x0d,
	0x33, 0x71, 0xb1, 0x65, 0x9c, 0x74, 0xfe, 0x31, 0xc0, 0xda, 0xec, 0xf6, 0xff, 0xcc, 0x76, 0x63,
	0xd3, 0x6c, 0xbf, 0x95, 0x89, 0x06, 0xfc, 0xad, 0xd9, 0xee, 0x41, 0x15, 0xed, 0x77, 0x3f, 0xa5,
	0xc7, 0x2b, 0xdc, 0xcc, 0x75, 0x54, 0x56, 0x37, 0xc5, 0xdc, 0x7c, 0x53, 0x7a, 0xbf, 0x19, 0x50,
	0xc5, 0x7a, 0xd8, 0x17, 0xd0, 0x9c, 0xac, 0x40, 0x66, 0xef, 0xfc, 0x37, 0xfc, 0x17, 0xf6, 0xd1,
	0x36, 0x6e, 0xd8, 0x77, 0x70, 0x30, 0xb9, 0xd1, 0x24, 0x6b, 0xdf, 0x81, 0xc1, 0x85, 0xfd, 0xe4,
	0x4e, 0x94, 0xfa, 0x47, 0x7f, 0x5c, 0xb5, 0x8c, 0xb7, 0x57, 0x2d, 0xe3, 0xef, 0xab, 0x96, 0xf1,
	0xf3, 0x75, 0x6b, 0xe7, 0xed, 0x75, 0x6b, 0xe7, 0xcf, 0xeb, 0xd6, 0xce, 0xf7, 0x95, 0xd9, 0xe9,
	0x70, 0x8f, 0x7e, 0x06, 0x4e, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x15, 0xa0, 0xc8, 0xbd, 0x55,
	0x08, 0x00, 0x00,
}
