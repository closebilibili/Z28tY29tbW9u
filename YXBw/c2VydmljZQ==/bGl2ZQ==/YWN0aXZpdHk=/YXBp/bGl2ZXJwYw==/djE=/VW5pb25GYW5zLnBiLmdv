// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/UnionFans.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UnionFansGetSendGiftReq struct {
	//
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
}

func (m *UnionFansGetSendGiftReq) Reset()         { *m = UnionFansGetSendGiftReq{} }
func (m *UnionFansGetSendGiftReq) String() string { return proto.CompactTextString(m) }
func (*UnionFansGetSendGiftReq) ProtoMessage()    {}
func (*UnionFansGetSendGiftReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_UnionFans_23d23fa6176863e6, []int{0}
}
func (m *UnionFansGetSendGiftReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnionFansGetSendGiftReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnionFansGetSendGiftReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnionFansGetSendGiftReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnionFansGetSendGiftReq.Merge(dst, src)
}
func (m *UnionFansGetSendGiftReq) XXX_Size() int {
	return m.Size()
}
func (m *UnionFansGetSendGiftReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UnionFansGetSendGiftReq.DiscardUnknown(m)
}

var xxx_messageInfo_UnionFansGetSendGiftReq proto.InternalMessageInfo

func (m *UnionFansGetSendGiftReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type UnionFansGetSendGiftResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data []*UnionFansGetSendGiftResp_Data `protobuf:"bytes,3,rep,name=data" json:"data"`
}

func (m *UnionFansGetSendGiftResp) Reset()         { *m = UnionFansGetSendGiftResp{} }
func (m *UnionFansGetSendGiftResp) String() string { return proto.CompactTextString(m) }
func (*UnionFansGetSendGiftResp) ProtoMessage()    {}
func (*UnionFansGetSendGiftResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_UnionFans_23d23fa6176863e6, []int{1}
}
func (m *UnionFansGetSendGiftResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnionFansGetSendGiftResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnionFansGetSendGiftResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnionFansGetSendGiftResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnionFansGetSendGiftResp.Merge(dst, src)
}
func (m *UnionFansGetSendGiftResp) XXX_Size() int {
	return m.Size()
}
func (m *UnionFansGetSendGiftResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UnionFansGetSendGiftResp.DiscardUnknown(m)
}

var xxx_messageInfo_UnionFansGetSendGiftResp proto.InternalMessageInfo

func (m *UnionFansGetSendGiftResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UnionFansGetSendGiftResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *UnionFansGetSendGiftResp) GetData() []*UnionFansGetSendGiftResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type UnionFansGetSendGiftResp_GiftList struct {
	//
	GiftId string `protobuf:"bytes,1,opt,name=gift_id,json=giftId,proto3" json:"gift_id"`
	//
	GiftNum int64 `protobuf:"varint,2,opt,name=gift_num,json=giftNum,proto3" json:"gift_num"`
}

func (m *UnionFansGetSendGiftResp_GiftList) Reset()         { *m = UnionFansGetSendGiftResp_GiftList{} }
func (m *UnionFansGetSendGiftResp_GiftList) String() string { return proto.CompactTextString(m) }
func (*UnionFansGetSendGiftResp_GiftList) ProtoMessage()    {}
func (*UnionFansGetSendGiftResp_GiftList) Descriptor() ([]byte, []int) {
	return fileDescriptor_UnionFans_23d23fa6176863e6, []int{1, 0}
}
func (m *UnionFansGetSendGiftResp_GiftList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnionFansGetSendGiftResp_GiftList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnionFansGetSendGiftResp_GiftList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnionFansGetSendGiftResp_GiftList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnionFansGetSendGiftResp_GiftList.Merge(dst, src)
}
func (m *UnionFansGetSendGiftResp_GiftList) XXX_Size() int {
	return m.Size()
}
func (m *UnionFansGetSendGiftResp_GiftList) XXX_DiscardUnknown() {
	xxx_messageInfo_UnionFansGetSendGiftResp_GiftList.DiscardUnknown(m)
}

var xxx_messageInfo_UnionFansGetSendGiftResp_GiftList proto.InternalMessageInfo

func (m *UnionFansGetSendGiftResp_GiftList) GetGiftId() string {
	if m != nil {
		return m.GiftId
	}
	return ""
}

func (m *UnionFansGetSendGiftResp_GiftList) GetGiftNum() int64 {
	if m != nil {
		return m.GiftNum
	}
	return 0
}

type UnionFansGetSendGiftResp_Data struct {
	// 类型
	Type int64 `protobuf:"varint,1,opt,name=type,proto3" json:"type"`
	// 名称
	GiftTypeName string `protobuf:"bytes,2,opt,name=giftTypeName,proto3" json:"giftTypeName"`
	//
	GiftList []*UnionFansGetSendGiftResp_GiftList `protobuf:"bytes,3,rep,name=gift_list,json=giftList" json:"gift_list"`
}

func (m *UnionFansGetSendGiftResp_Data) Reset()         { *m = UnionFansGetSendGiftResp_Data{} }
func (m *UnionFansGetSendGiftResp_Data) String() string { return proto.CompactTextString(m) }
func (*UnionFansGetSendGiftResp_Data) ProtoMessage()    {}
func (*UnionFansGetSendGiftResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_UnionFans_23d23fa6176863e6, []int{1, 1}
}
func (m *UnionFansGetSendGiftResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnionFansGetSendGiftResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnionFansGetSendGiftResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnionFansGetSendGiftResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnionFansGetSendGiftResp_Data.Merge(dst, src)
}
func (m *UnionFansGetSendGiftResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *UnionFansGetSendGiftResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_UnionFansGetSendGiftResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_UnionFansGetSendGiftResp_Data proto.InternalMessageInfo

func (m *UnionFansGetSendGiftResp_Data) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UnionFansGetSendGiftResp_Data) GetGiftTypeName() string {
	if m != nil {
		return m.GiftTypeName
	}
	return ""
}

func (m *UnionFansGetSendGiftResp_Data) GetGiftList() []*UnionFansGetSendGiftResp_GiftList {
	if m != nil {
		return m.GiftList
	}
	return nil
}

type UnionFansGetSpecialMedalReq struct {
	// 用户uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 主播uid
	Ruid int64 `protobuf:"varint,2,opt,name=ruid,proto3" json:"ruid"`
}

func (m *UnionFansGetSpecialMedalReq) Reset()         { *m = UnionFansGetSpecialMedalReq{} }
func (m *UnionFansGetSpecialMedalReq) String() string { return proto.CompactTextString(m) }
func (*UnionFansGetSpecialMedalReq) ProtoMessage()    {}
func (*UnionFansGetSpecialMedalReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_UnionFans_23d23fa6176863e6, []int{2}
}
func (m *UnionFansGetSpecialMedalReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnionFansGetSpecialMedalReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnionFansGetSpecialMedalReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnionFansGetSpecialMedalReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnionFansGetSpecialMedalReq.Merge(dst, src)
}
func (m *UnionFansGetSpecialMedalReq) XXX_Size() int {
	return m.Size()
}
func (m *UnionFansGetSpecialMedalReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UnionFansGetSpecialMedalReq.DiscardUnknown(m)
}

var xxx_messageInfo_UnionFansGetSpecialMedalReq proto.InternalMessageInfo

func (m *UnionFansGetSpecialMedalReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UnionFansGetSpecialMedalReq) GetRuid() int64 {
	if m != nil {
		return m.Ruid
	}
	return 0
}

type UnionFansGetSpecialMedalResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *UnionFansGetSpecialMedalResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *UnionFansGetSpecialMedalResp) Reset()         { *m = UnionFansGetSpecialMedalResp{} }
func (m *UnionFansGetSpecialMedalResp) String() string { return proto.CompactTextString(m) }
func (*UnionFansGetSpecialMedalResp) ProtoMessage()    {}
func (*UnionFansGetSpecialMedalResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_UnionFans_23d23fa6176863e6, []int{3}
}
func (m *UnionFansGetSpecialMedalResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnionFansGetSpecialMedalResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnionFansGetSpecialMedalResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnionFansGetSpecialMedalResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnionFansGetSpecialMedalResp.Merge(dst, src)
}
func (m *UnionFansGetSpecialMedalResp) XXX_Size() int {
	return m.Size()
}
func (m *UnionFansGetSpecialMedalResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UnionFansGetSpecialMedalResp.DiscardUnknown(m)
}

var xxx_messageInfo_UnionFansGetSpecialMedalResp proto.InternalMessageInfo

func (m *UnionFansGetSpecialMedalResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UnionFansGetSpecialMedalResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *UnionFansGetSpecialMedalResp) GetData() *UnionFansGetSpecialMedalResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type UnionFansGetSpecialMedalResp_Data struct {
	// 特殊序章样式 为空或者为union
	SpecialMedal string `protobuf:"bytes,1,opt,name=special_medal,json=specialMedal,proto3" json:"special_medal"`
}

func (m *UnionFansGetSpecialMedalResp_Data) Reset()         { *m = UnionFansGetSpecialMedalResp_Data{} }
func (m *UnionFansGetSpecialMedalResp_Data) String() string { return proto.CompactTextString(m) }
func (*UnionFansGetSpecialMedalResp_Data) ProtoMessage()    {}
func (*UnionFansGetSpecialMedalResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_UnionFans_23d23fa6176863e6, []int{3, 0}
}
func (m *UnionFansGetSpecialMedalResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnionFansGetSpecialMedalResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnionFansGetSpecialMedalResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnionFansGetSpecialMedalResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnionFansGetSpecialMedalResp_Data.Merge(dst, src)
}
func (m *UnionFansGetSpecialMedalResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *UnionFansGetSpecialMedalResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_UnionFansGetSpecialMedalResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_UnionFansGetSpecialMedalResp_Data proto.InternalMessageInfo

func (m *UnionFansGetSpecialMedalResp_Data) GetSpecialMedal() string {
	if m != nil {
		return m.SpecialMedal
	}
	return ""
}

func init() {
	proto.RegisterType((*UnionFansGetSendGiftReq)(nil), "activity.v1.UnionFansGetSendGiftReq")
	proto.RegisterType((*UnionFansGetSendGiftResp)(nil), "activity.v1.UnionFansGetSendGiftResp")
	proto.RegisterType((*UnionFansGetSendGiftResp_GiftList)(nil), "activity.v1.UnionFansGetSendGiftResp.GiftList")
	proto.RegisterType((*UnionFansGetSendGiftResp_Data)(nil), "activity.v1.UnionFansGetSendGiftResp.Data")
	proto.RegisterType((*UnionFansGetSpecialMedalReq)(nil), "activity.v1.UnionFansGetSpecialMedalReq")
	proto.RegisterType((*UnionFansGetSpecialMedalResp)(nil), "activity.v1.UnionFansGetSpecialMedalResp")
	proto.RegisterType((*UnionFansGetSpecialMedalResp_Data)(nil), "activity.v1.UnionFansGetSpecialMedalResp.Data")
}
func (m *UnionFansGetSendGiftReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnionFansGetSendGiftReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUnionFans(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *UnionFansGetSendGiftResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnionFansGetSendGiftResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUnionFans(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUnionFans(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintUnionFans(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UnionFansGetSendGiftResp_GiftList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnionFansGetSendGiftResp_GiftList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GiftId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUnionFans(dAtA, i, uint64(len(m.GiftId)))
		i += copy(dAtA[i:], m.GiftId)
	}
	if m.GiftNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUnionFans(dAtA, i, uint64(m.GiftNum))
	}
	return i, nil
}

func (m *UnionFansGetSendGiftResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnionFansGetSendGiftResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUnionFans(dAtA, i, uint64(m.Type))
	}
	if len(m.GiftTypeName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUnionFans(dAtA, i, uint64(len(m.GiftTypeName)))
		i += copy(dAtA[i:], m.GiftTypeName)
	}
	if len(m.GiftList) > 0 {
		for _, msg := range m.GiftList {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintUnionFans(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UnionFansGetSpecialMedalReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnionFansGetSpecialMedalReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUnionFans(dAtA, i, uint64(m.Uid))
	}
	if m.Ruid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUnionFans(dAtA, i, uint64(m.Ruid))
	}
	return i, nil
}

func (m *UnionFansGetSpecialMedalResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnionFansGetSpecialMedalResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUnionFans(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUnionFans(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUnionFans(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *UnionFansGetSpecialMedalResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnionFansGetSpecialMedalResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SpecialMedal) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUnionFans(dAtA, i, uint64(len(m.SpecialMedal)))
		i += copy(dAtA[i:], m.SpecialMedal)
	}
	return i, nil
}

func encodeVarintUnionFans(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UnionFansGetSendGiftReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUnionFans(uint64(m.Uid))
	}
	return n
}

func (m *UnionFansGetSendGiftResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovUnionFans(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovUnionFans(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovUnionFans(uint64(l))
		}
	}
	return n
}

func (m *UnionFansGetSendGiftResp_GiftList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GiftId)
	if l > 0 {
		n += 1 + l + sovUnionFans(uint64(l))
	}
	if m.GiftNum != 0 {
		n += 1 + sovUnionFans(uint64(m.GiftNum))
	}
	return n
}

func (m *UnionFansGetSendGiftResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovUnionFans(uint64(m.Type))
	}
	l = len(m.GiftTypeName)
	if l > 0 {
		n += 1 + l + sovUnionFans(uint64(l))
	}
	if len(m.GiftList) > 0 {
		for _, e := range m.GiftList {
			l = e.Size()
			n += 1 + l + sovUnionFans(uint64(l))
		}
	}
	return n
}

func (m *UnionFansGetSpecialMedalReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUnionFans(uint64(m.Uid))
	}
	if m.Ruid != 0 {
		n += 1 + sovUnionFans(uint64(m.Ruid))
	}
	return n
}

func (m *UnionFansGetSpecialMedalResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovUnionFans(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovUnionFans(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovUnionFans(uint64(l))
	}
	return n
}

func (m *UnionFansGetSpecialMedalResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecialMedal)
	if l > 0 {
		n += 1 + l + sovUnionFans(uint64(l))
	}
	return n
}

func sovUnionFans(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUnionFans(x uint64) (n int) {
	return sovUnionFans(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UnionFansGetSendGiftReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnionFans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnionFansGetSendGiftReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnionFansGetSendGiftReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnionFans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUnionFans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUnionFans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnionFansGetSendGiftResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnionFans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnionFansGetSendGiftResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnionFansGetSendGiftResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnionFans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnionFans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUnionFans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnionFans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUnionFans
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &UnionFansGetSendGiftResp_Data{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUnionFans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUnionFans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnionFansGetSendGiftResp_GiftList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnionFans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnionFans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUnionFans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftNum", wireType)
			}
			m.GiftNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnionFans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiftNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUnionFans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUnionFans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnionFansGetSendGiftResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnionFans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnionFans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnionFans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUnionFans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiftTypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnionFans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUnionFans
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiftList = append(m.GiftList, &UnionFansGetSendGiftResp_GiftList{})
			if err := m.GiftList[len(m.GiftList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUnionFans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUnionFans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnionFansGetSpecialMedalReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnionFans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnionFansGetSpecialMedalReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnionFansGetSpecialMedalReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnionFans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ruid", wireType)
			}
			m.Ruid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnionFans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ruid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUnionFans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUnionFans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnionFansGetSpecialMedalResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnionFans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnionFansGetSpecialMedalResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnionFansGetSpecialMedalResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnionFans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnionFans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUnionFans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnionFans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUnionFans
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &UnionFansGetSpecialMedalResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUnionFans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUnionFans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnionFansGetSpecialMedalResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnionFans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialMedal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnionFans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUnionFans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialMedal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUnionFans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUnionFans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUnionFans(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUnionFans
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUnionFans
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUnionFans
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUnionFans
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUnionFans
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUnionFans(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUnionFans = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUnionFans   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/UnionFans.proto", fileDescriptor_UnionFans_23d23fa6176863e6) }

var fileDescriptor_UnionFans_23d23fa6176863e6 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0xc6, 0x51, 0x9b, 0x4c, 0x52, 0x01, 0x7b, 0x21, 0x98, 0xc8, 0x8e, 0xa2, 0x22, 0x02,
	0x12, 0x8e, 0x52, 0x2a, 0x8e, 0x1c, 0x2c, 0x44, 0x41, 0x2a, 0x3d, 0x2c, 0x3f, 0x12, 0xb9, 0x54,
	0x9b, 0xd8, 0x31, 0x2b, 0xc5, 0x3f, 0xe9, 0xae, 0x23, 0xe5, 0x2d, 0x78, 0x15, 0x2e, 0x3c, 0x03,
	0x37, 0x7a, 0xe4, 0x64, 0xa1, 0x44, 0x5c, 0xfc, 0x14, 0x68, 0x37, 0xae, 0x53, 0xa3, 0x36, 0xb2,
	0xc4, 0x65, 0xb4, 0xdf, 0xec, 0x7e, 0xf3, 0xf9, 0x9b, 0x19, 0x19, 0xf0, 0x62, 0x38, 0xf8, 0x18,
	0xb0, 0x30, 0x78, 0x4d, 0x03, 0x6e, 0x45, 0x17, 0xa1, 0x08, 0x71, 0x93, 0x4e, 0x04, 0x5b, 0x30,
	0xb1, 0xb4, 0x16, 0x43, 0xfd, 0x99, 0xc7, 0xc4, 0x97, 0x78, 0x6c, 0x4d, 0x42, 0x7f, 0xe0, 0x85,
	0x5e, 0x38, 0x50, 0x6f, 0xc6, 0xf1, 0x54, 0x21, 0x05, 0xd4, 0x69, 0xc3, 0xed, 0x1d, 0xc3, 0xfd,
	0xbc, 0xdc, 0x89, 0x2b, 0xde, 0xbb, 0x81, 0x73, 0xc2, 0xa6, 0x82, 0xb8, 0x73, 0xfc, 0x00, 0xb4,
	0x98, 0x39, 0x6d, 0xd4, 0x45, 0x7d, 0xcd, 0xde, 0x4f, 0x13, 0x53, 0x42, 0x22, 0x43, 0xef, 0x9b,
	0x06, 0xed, 0x9b, 0x69, 0x3c, 0xc2, 0x1d, 0xa8, 0x4d, 0x42, 0xc7, 0xcd, 0x88, 0xf5, 0x34, 0x31,
	0x15, 0x26, 0x2a, 0xca, 0xaa, 0x3e, 0xf7, 0xda, 0xd5, 0x2e, 0xea, 0x37, 0x36, 0x55, 0x7d, 0xee,
	0x11, 0x19, 0xf0, 0x1b, 0xa8, 0x39, 0x54, 0xd0, 0xb6, 0xd6, 0xd5, 0xfa, 0xcd, 0xa3, 0xa7, 0xd6,
	0x35, 0x5b, 0xd6, 0x6d, 0x6a, 0xd6, 0x2b, 0x2a, 0xe8, 0x46, 0x44, 0x72, 0x89, 0x8a, 0xfa, 0x67,
	0xa8, 0xcb, 0x07, 0xa7, 0x8c, 0x0b, 0x7c, 0x08, 0xfb, 0x1e, 0x9b, 0x8a, 0xf3, 0xcc, 0x4a, 0xc3,
	0x6e, 0xa6, 0x89, 0x79, 0x95, 0x22, 0x7b, 0xf2, 0xf0, 0xd6, 0xc1, 0x8f, 0xa1, 0xae, 0x52, 0x41,
	0xec, 0xab, 0x6f, 0xd3, 0xec, 0x56, 0x9a, 0x98, 0x79, 0x8e, 0x28, 0xc2, 0x59, 0xec, 0xeb, 0xdf,
	0x11, 0xd4, 0xa4, 0xa6, 0xb4, 0x29, 0x96, 0x51, 0xc1, 0xa6, 0xc4, 0x44, 0x45, 0x7c, 0x0c, 0x2d,
	0xc9, 0xf8, 0xb0, 0x8c, 0xdc, 0x33, 0xea, 0xbb, 0x99, 0xdf, 0xbb, 0x69, 0x62, 0x16, 0xf2, 0xa4,
	0x80, 0xf0, 0x08, 0x1a, 0x4a, 0x71, 0xc6, 0xb8, 0xc8, 0xda, 0x60, 0x95, 0x6b, 0xc3, 0x95, 0x5d,
	0xfb, 0x20, 0x4d, 0xcc, 0x6d, 0x11, 0xa2, 0x1c, 0xc8, 0x8b, 0xde, 0x27, 0x78, 0x58, 0x60, 0x47,
	0xee, 0x84, 0xd1, 0xd9, 0x3b, 0xd7, 0xa1, 0xb3, 0xdd, 0xd3, 0x96, 0x4e, 0x2f, 0xe4, 0x5d, 0x75,
	0xeb, 0x54, 0x62, 0xa2, 0x62, 0xef, 0x0f, 0x82, 0xce, 0xed, 0x85, 0xff, 0x67, 0x1f, 0x4e, 0xf3,
	0x7d, 0x40, 0xbb, 0x1b, 0xf1, 0x8f, 0xe2, 0xcd, 0x3b, 0xf1, 0x32, 0x9b, 0xdb, 0x0b, 0x38, 0xe0,
	0x1b, 0xc2, 0xb9, 0x2f, 0x19, 0xd9, 0x56, 0xdc, 0x4b, 0x13, 0xb3, 0x78, 0x41, 0x5a, 0xfc, 0x5a,
	0xe1, 0xa3, 0x9f, 0x08, 0x1a, 0xb9, 0x2a, 0x1e, 0x41, 0xd3, 0xdb, 0x8e, 0x00, 0x1f, 0x96, 0x98,
	0xd2, 0x5c, 0x7f, 0x54, 0x6a, 0x96, 0x78, 0x0a, 0x77, 0xbc, 0xa2, 0x2b, 0xdc, 0x2f, 0x69, 0x7e,
	0xae, 0x3f, 0x29, 0xdd, 0x26, 0xbb, 0xf3, 0x63, 0x65, 0xa0, 0xcb, 0x95, 0x81, 0x7e, 0xaf, 0x0c,
	0xf4, 0x75, 0x6d, 0x54, 0x2e, 0xd7, 0x46, 0xe5, 0xd7, 0xda, 0xa8, 0x8c, 0xaa, 0x8b, 0xe1, 0x78,
	0x4f, 0xfd, 0x20, 0x9e, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xd0, 0x46, 0x71, 0x72, 0x04,
	0x00, 0x00,
}
