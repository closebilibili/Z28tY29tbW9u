// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/openplatform/ticket-sales/api/grpc/v1/promotion.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Promo struct {
	PromoID       int64  `protobuf:"varint,1,opt,name=promo_id,json=promoId,proto3" json:"promo_id"`
	Type          int16  `protobuf:"varint,2,opt,name=type,proto3,casttype=int16" json:"type"`
	ItemID        int64  `protobuf:"varint,3,opt,name=item_id,json=itemId,proto3" json:"item_id"`
	SKUID         int64  `protobuf:"varint,4,opt,name=sku_id,json=skuId,proto3" json:"sku_id"`
	Extra         int64  `protobuf:"varint,5,opt,name=extra,proto3" json:"extra"`
	ExpireSec     int64  `protobuf:"varint,6,opt,name=expire_sec,json=expireSec,proto3" json:"expire_sec"`
	SKUCount      int64  `protobuf:"varint,7,opt,name=sku_count,json=skuCount,proto3" json:"sku_count"`
	Amount        int64  `protobuf:"varint,8,opt,name=amount,proto3" json:"amount"`
	BuyerCount    int64  `protobuf:"varint,9,opt,name=buyer_count,json=buyerCount,proto3" json:"buyer_count"`
	BeginTime     int64  `protobuf:"varint,10,opt,name=begin_time,json=beginTime,proto3" json:"begin_time"`
	EndTime       int64  `protobuf:"varint,11,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	Status        int16  `protobuf:"varint,12,opt,name=status,proto3,casttype=int16" json:"status"`
	Ctime         int64  `protobuf:"varint,13,opt,name=ctime,proto3" json:"ctime"`
	Mtime         int64  `protobuf:"varint,14,opt,name=mtime,proto3" json:"mtime"`
	PrivSKUID     int64  `protobuf:"varint,15,opt,name=priv_sku_id,json=privSkuId,proto3" json:"priv_sku_id"`
	UsableCoupons string `protobuf:"bytes,16,opt,name=usable_coupons,json=usableCoupons,proto3" json:"usable_coupons"`
}

func (m *Promo) Reset()                    { *m = Promo{} }
func (*Promo) ProtoMessage()               {}
func (*Promo) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{0} }

type PromoGroup struct {
	PromoID    int64 `protobuf:"varint,1,opt,name=promo_id,json=promoId,proto3" json:"promo_id"`
	GroupID    int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id"`
	UID        int64 `protobuf:"varint,3,opt,name=uid,proto3" json:"uid"`
	OrderCount int64 `protobuf:"varint,4,opt,name=order_count,json=orderCount,proto3" json:"order_count"`
	Status     int16 `protobuf:"varint,5,opt,name=status,proto3,casttype=int16" json:"status"`
	ExpireAt   int64 `protobuf:"varint,6,opt,name=expire_at,json=expireAt,proto3" json:"expire_at"`
	Ctime      int64 `protobuf:"varint,7,opt,name=ctime,proto3" json:"ctime"`
	Mtime      int64 `protobuf:"varint,8,opt,name=mtime,proto3" json:"mtime"`
}

func (m *PromoGroup) Reset()                    { *m = PromoGroup{} }
func (*PromoGroup) ProtoMessage()               {}
func (*PromoGroup) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{1} }

type PromoOrder struct {
	PromoID  int64 `protobuf:"varint,1,opt,name=promo_id,json=promoId,proto3" json:"promo_id"`
	GroupID  int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id"`
	OrderID  int64 `protobuf:"varint,3,opt,name=order_id,json=orderId,proto3" json:"order_id"`
	IsMaster int16 `protobuf:"varint,4,opt,name=is_master,json=isMaster,proto3,casttype=int16" json:"is_master"`
	UID      int64 `protobuf:"varint,5,opt,name=uid,proto3" json:"uid"`
	Status   int16 `protobuf:"varint,6,opt,name=status,proto3,casttype=int16" json:"status"`
	Ctime    int64 `protobuf:"varint,7,opt,name=ctime,proto3" json:"ctime"`
	Mtime    int64 `protobuf:"varint,8,opt,name=mtime,proto3" json:"mtime"`
	SKUID    int64 `protobuf:"varint,9,opt,name=sku_id,json=skuId,proto3" json:"sku_id"`
}

func (m *PromoOrder) Reset()                    { *m = PromoOrder{} }
func (*PromoOrder) ProtoMessage()               {}
func (*PromoOrder) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{2} }

type CreatePromoRequest struct {
	PromoID       int64  `protobuf:"varint,1,opt,name=promo_id,json=promoId,proto3" json:"promo_id" form:"promo_id" validate:"required"`
	Type          int16  `protobuf:"varint,2,opt,name=type,proto3,casttype=int16" json:"type" form:"type"`
	ItemID        int64  `protobuf:"varint,3,opt,name=item_id,json=itemId,proto3" json:"item_id" form:"item_id" validate:"required"`
	SKUID         int64  `protobuf:"varint,4,opt,name=sku_id,json=skuId,proto3" json:"sku_id" form:"sku_id" validate:"required"`
	Extra         int64  `protobuf:"varint,5,opt,name=extra,proto3" json:"extra" form:"extra" validate:"required"`
	ExpireSec     int64  `protobuf:"varint,6,opt,name=expire_sec,json=expireSec,proto3" json:"expire_sec" form:"expire_sec" validate:"required"`
	SKUCount      int64  `protobuf:"varint,7,opt,name=sku_count,json=skuCount,proto3" json:"sku_count" form:"sku_count" validate:"required"`
	Amount        int64  `protobuf:"varint,8,opt,name=amount,proto3" json:"amount" form:"amount" validate:"required"`
	BuyerCount    int64  `protobuf:"varint,9,opt,name=buyer_count,json=buyerCount,proto3" json:"buyer_count" form:"buyer_count" validate:"required"`
	BeginTime     int64  `protobuf:"varint,10,opt,name=begin_time,json=beginTime,proto3" json:"begin_time" form:"begin_time" validate:"required"`
	EndTime       int64  `protobuf:"varint,11,opt,name=end_time,json=endTime,proto3" json:"end_time" form:"end_time" validate:"required"`
	PrivSKUID     int64  `protobuf:"varint,12,opt,name=priv_sku_id,json=privSkuId,proto3" json:"priv_sku_id" form:"priv_sku_id"`
	UsableCoupons string `protobuf:"bytes,13,opt,name=usable_coupons,json=usableCoupons,proto3" json:"usable_coupons" form:"usable_coupons"`
}

func (m *CreatePromoRequest) Reset()                    { *m = CreatePromoRequest{} }
func (*CreatePromoRequest) ProtoMessage()               {}
func (*CreatePromoRequest) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{3} }

type OperatePromoRequest struct {
	PromoID     int64 `protobuf:"varint,1,opt,name=promo_id,json=promoId,proto3" json:"promo_id" form:"promo_id" validate:"required"`
	OperateType int16 `protobuf:"varint,2,opt,name=operate_type,json=operateType,proto3,casttype=int16" json:"operate_type" form:"operate_type" validate:"required"`
}

func (m *OperatePromoRequest) Reset()                    { *m = OperatePromoRequest{} }
func (*OperatePromoRequest) ProtoMessage()               {}
func (*OperatePromoRequest) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{4} }

type CheckCreatePromoOrderRequest struct {
	UID     int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid" form:"uid" validate:"required"`
	SKUID   int64 `protobuf:"varint,2,opt,name=sku_id,json=skuId,proto3" json:"sku_id" form:"sku_id" validate:"required"`
	PromoID int64 `protobuf:"varint,3,opt,name=promo_id,json=promoId,proto3" json:"promo_id" form:"promo_id" validate:"required"`
	GroupID int64 `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id" form:"group_id"`
}

func (m *CheckCreatePromoOrderRequest) Reset()      { *m = CheckCreatePromoOrderRequest{} }
func (*CheckCreatePromoOrderRequest) ProtoMessage() {}
func (*CheckCreatePromoOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPromotion, []int{5}
}

type RepeatOrder struct {
	OrderID  int64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id"`
	IsMaster int16 `protobuf:"varint,2,opt,name=is_master,json=isMaster,proto3,casttype=int16" json:"is_master"`
	Status   int16 `protobuf:"varint,3,opt,name=status,proto3,casttype=int16" json:"status"`
}

func (m *RepeatOrder) Reset()                    { *m = RepeatOrder{} }
func (*RepeatOrder) ProtoMessage()               {}
func (*RepeatOrder) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{6} }

type CheckCreatePromoOrderResponse struct {
	Amount        int64        `protobuf:"varint,1,opt,name=amount,proto3" json:"amount"`
	SKUID         int64        `protobuf:"varint,2,opt,name=sku_id,json=skuId,proto3" json:"sku_id"`
	PrivSKUID     int64        `protobuf:"varint,3,opt,name=priv_sku_id,json=privSkuId,proto3" json:"priv_sku_id"`
	UsableCoupons string       `protobuf:"bytes,4,opt,name=usable_coupons,json=usableCoupons,proto3" json:"usable_coupons"`
	RepeatOrder   *RepeatOrder `protobuf:"bytes,5,opt,name=repeat_order,json=repeatOrder" json:"repeat_order"`
}

func (m *CheckCreatePromoOrderResponse) Reset()      { *m = CheckCreatePromoOrderResponse{} }
func (*CheckCreatePromoOrderResponse) ProtoMessage() {}
func (*CheckCreatePromoOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPromotion, []int{7}
}

type CreatePromoOrderRequest struct {
	PromoID    int64 `protobuf:"varint,1,opt,name=promo_id,json=promoId,proto3" json:"promo_id" form:"promo_id" validate:"required"`
	OrderID    int64 `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id" form:"order_id" validate:"required"`
	GroupID    int64 `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id" form:"group_id"`
	UID        int64 `protobuf:"varint,4,opt,name=uid,proto3" json:"uid" form:"uid" validate:"required"`
	PromoSKUID int64 `protobuf:"varint,5,opt,name=promo_sku_id,json=promoSkuId,proto3" json:"promo_sku_id" form:"promo_sku_id" validate:"required"`
	Ctime      int64 `protobuf:"varint,6,opt,name=ctime,proto3" json:"ctime" form:"ctime" validate:"required"`
	PayMoney   int64 `protobuf:"varint,7,opt,name=pay_money,json=payMoney,proto3" json:"pay_money" form:"pay_money"`
}

func (m *CreatePromoOrderRequest) Reset()                    { *m = CreatePromoOrderRequest{} }
func (*CreatePromoOrderRequest) ProtoMessage()               {}
func (*CreatePromoOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{8} }

type CommonResponse struct {
	Res int64 `protobuf:"varint,1,opt,name=res,proto3" json:"res"`
}

func (m *CommonResponse) Reset()                    { *m = CommonResponse{} }
func (*CommonResponse) ProtoMessage()               {}
func (*CommonResponse) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{9} }

type PromoID struct {
	PromoID int64 `protobuf:"varint,1,opt,name=promo_id,json=promoId,proto3" json:"promo_id" form:"promo_id" validate:"required"`
}

func (m *PromoID) Reset()                    { *m = PromoID{} }
func (*PromoID) ProtoMessage()               {}
func (*PromoID) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{10} }

type OrderID struct {
	OrderID int64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id" form:"order_id" validate:"required"`
}

func (m *OrderID) Reset()                    { *m = OrderID{} }
func (*OrderID) ProtoMessage()               {}
func (*OrderID) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{11} }

type GroupID struct {
	GroupID int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id" form:"group_id" validate:"required"`
}

func (m *GroupID) Reset()                    { *m = GroupID{} }
func (*GroupID) ProtoMessage()               {}
func (*GroupID) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{12} }

type GetPromoGroupInfoRequest struct {
	OrderID int64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id" form:"order_id" validate:"required"`
}

func (m *GetPromoGroupInfoRequest) Reset()      { *m = GetPromoGroupInfoRequest{} }
func (*GetPromoGroupInfoRequest) ProtoMessage() {}
func (*GetPromoGroupInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPromotion, []int{13}
}

type GetPromoGroupInfoResponse struct {
	PromoID    int64 `protobuf:"varint,1,opt,name=promo_id,json=promoId,proto3" json:"promo_id"`
	SKUCount   int64 `protobuf:"varint,2,opt,name=sku_count,json=skuCount,proto3" json:"sku_count"`
	Amount     int64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount"`
	GroupID    int64 `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id"`
	OrderCount int64 `protobuf:"varint,5,opt,name=order_count,json=orderCount,proto3" json:"order_count"`
	ExpireAt   int64 `protobuf:"varint,6,opt,name=expire_at,json=expireAt,proto3" json:"expire_at"`
	Status     int16 `protobuf:"varint,7,opt,name=status,proto3,casttype=int16" json:"status"`
	Ctime      int64 `protobuf:"varint,8,opt,name=ctime,proto3" json:"ctime"`
}

func (m *GetPromoGroupInfoResponse) Reset()      { *m = GetPromoGroupInfoResponse{} }
func (*GetPromoGroupInfoResponse) ProtoMessage() {}
func (*GetPromoGroupInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPromotion, []int{14}
}

type CheckIssueResponse struct {
	PromoID    int64      `protobuf:"varint,1,opt,name=promo_id,json=promoId,proto3" json:"promo_id"`
	GroupID    int64      `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id"`
	PaidOrders []*OrderID `protobuf:"bytes,3,rep,name=paid_orders,json=paidOrders" json:"paid_orders"`
}

func (m *CheckIssueResponse) Reset()                    { *m = CheckIssueResponse{} }
func (*CheckIssueResponse) ProtoMessage()               {}
func (*CheckIssueResponse) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{15} }

type FinishIssueRequest struct {
	PromoID int64 `protobuf:"varint,1,opt,name=promo_id,json=promoId,proto3" json:"promo_id" form:"promo_id" validate:"required"`
	GroupID int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id" form:"group_id" validate:"required"`
}

func (m *FinishIssueRequest) Reset()                    { *m = FinishIssueRequest{} }
func (*FinishIssueRequest) ProtoMessage()               {}
func (*FinishIssueRequest) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{16} }

type GroupFailedRequest struct {
	GroupID   int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id" form:"group_id" validate:"required"`
	CancelNum int64 `protobuf:"varint,2,opt,name=cancel_num,json=cancelNum,proto3" json:"cancel_num" form:"cancel_num" validate:"required"`
}

func (m *GroupFailedRequest) Reset()                    { *m = GroupFailedRequest{} }
func (*GroupFailedRequest) ProtoMessage()               {}
func (*GroupFailedRequest) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{17} }

type EditPromoRequest struct {
	PromoID       int64  `protobuf:"varint,1,opt,name=promo_id,json=promoId,proto3" json:"promo_id" form:"promo_id" validate:"required"`
	Amount        int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount" form:"amount"`
	ExpireSec     int64  `protobuf:"varint,3,opt,name=expire_sec,json=expireSec,proto3" json:"expire_sec" form:"expire_sec"`
	BeginTime     int64  `protobuf:"varint,4,opt,name=begin_time,json=beginTime,proto3" json:"begin_time" form:"begin_time"`
	EndTime       int64  `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time" form:"end_time"`
	PrivSKUID     int64  `protobuf:"varint,6,opt,name=priv_sku_id,json=privSkuId,proto3" json:"priv_sku_id" form:"priv_sku_id"`
	UsableCoupons string `protobuf:"bytes,7,opt,name=usable_coupons,json=usableCoupons,proto3" json:"usable_coupons" form:"usable_coupons"`
	SKUCount      int64  `protobuf:"varint,8,opt,name=sku_count,json=skuCount,proto3" json:"sku_count" form:"sku_count"`
}

func (m *EditPromoRequest) Reset()                    { *m = EditPromoRequest{} }
func (*EditPromoRequest) ProtoMessage()               {}
func (*EditPromoRequest) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{18} }

func init() {
	proto.RegisterType((*Promo)(nil), "ticket.service.sales.v1.Promo")
	proto.RegisterType((*PromoGroup)(nil), "ticket.service.sales.v1.PromoGroup")
	proto.RegisterType((*PromoOrder)(nil), "ticket.service.sales.v1.PromoOrder")
	proto.RegisterType((*CreatePromoRequest)(nil), "ticket.service.sales.v1.CreatePromoRequest")
	proto.RegisterType((*OperatePromoRequest)(nil), "ticket.service.sales.v1.OperatePromoRequest")
	proto.RegisterType((*CheckCreatePromoOrderRequest)(nil), "ticket.service.sales.v1.CheckCreatePromoOrderRequest")
	proto.RegisterType((*RepeatOrder)(nil), "ticket.service.sales.v1.RepeatOrder")
	proto.RegisterType((*CheckCreatePromoOrderResponse)(nil), "ticket.service.sales.v1.CheckCreatePromoOrderResponse")
	proto.RegisterType((*CreatePromoOrderRequest)(nil), "ticket.service.sales.v1.CreatePromoOrderRequest")
	proto.RegisterType((*CommonResponse)(nil), "ticket.service.sales.v1.CommonResponse")
	proto.RegisterType((*PromoID)(nil), "ticket.service.sales.v1.PromoID")
	proto.RegisterType((*OrderID)(nil), "ticket.service.sales.v1.OrderID")
	proto.RegisterType((*GroupID)(nil), "ticket.service.sales.v1.GroupID")
	proto.RegisterType((*GetPromoGroupInfoRequest)(nil), "ticket.service.sales.v1.GetPromoGroupInfoRequest")
	proto.RegisterType((*GetPromoGroupInfoResponse)(nil), "ticket.service.sales.v1.GetPromoGroupInfoResponse")
	proto.RegisterType((*CheckIssueResponse)(nil), "ticket.service.sales.v1.CheckIssueResponse")
	proto.RegisterType((*FinishIssueRequest)(nil), "ticket.service.sales.v1.FinishIssueRequest")
	proto.RegisterType((*GroupFailedRequest)(nil), "ticket.service.sales.v1.GroupFailedRequest")
	proto.RegisterType((*EditPromoRequest)(nil), "ticket.service.sales.v1.EditPromoRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Promotion service

type PromotionClient interface {
	CreatePromo(ctx context.Context, in *CreatePromoRequest, opts ...grpc.CallOption) (*PromoID, error)
	GetPromo(ctx context.Context, in *PromoID, opts ...grpc.CallOption) (*Promo, error)
	OperatePromo(ctx context.Context, in *OperatePromoRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	EditPromo(ctx context.Context, in *EditPromoRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	GetPromoGroupInfo(ctx context.Context, in *GetPromoGroupInfoRequest, opts ...grpc.CallOption) (*GetPromoGroupInfoResponse, error)
	GroupFailed(ctx context.Context, in *GroupFailedRequest, opts ...grpc.CallOption) (*GroupID, error)
	CheckCreateStatus(ctx context.Context, in *CheckCreatePromoOrderRequest, opts ...grpc.CallOption) (*CheckCreatePromoOrderResponse, error)
	CreatePromoOrder(ctx context.Context, in *CreatePromoOrderRequest, opts ...grpc.CallOption) (*OrderID, error)
	PromoPayNotify(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*OrderID, error)
	CancelOrder(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*OrderID, error)
	CheckIssue(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*CheckIssueResponse, error)
	FinishIssue(ctx context.Context, in *FinishIssueRequest, opts ...grpc.CallOption) (*GroupID, error)
	PromoRefundNotify(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*OrderID, error)
}

type promotionClient struct {
	cc *grpc.ClientConn
}

func NewPromotionClient(cc *grpc.ClientConn) PromotionClient {
	return &promotionClient{cc}
}

func (c *promotionClient) CreatePromo(ctx context.Context, in *CreatePromoRequest, opts ...grpc.CallOption) (*PromoID, error) {
	out := new(PromoID)
	err := grpc.Invoke(ctx, "/ticket.service.sales.v1.Promotion/CreatePromo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionClient) GetPromo(ctx context.Context, in *PromoID, opts ...grpc.CallOption) (*Promo, error) {
	out := new(Promo)
	err := grpc.Invoke(ctx, "/ticket.service.sales.v1.Promotion/GetPromo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionClient) OperatePromo(ctx context.Context, in *OperatePromoRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := grpc.Invoke(ctx, "/ticket.service.sales.v1.Promotion/OperatePromo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionClient) EditPromo(ctx context.Context, in *EditPromoRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := grpc.Invoke(ctx, "/ticket.service.sales.v1.Promotion/EditPromo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionClient) GetPromoGroupInfo(ctx context.Context, in *GetPromoGroupInfoRequest, opts ...grpc.CallOption) (*GetPromoGroupInfoResponse, error) {
	out := new(GetPromoGroupInfoResponse)
	err := grpc.Invoke(ctx, "/ticket.service.sales.v1.Promotion/GetPromoGroupInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionClient) GroupFailed(ctx context.Context, in *GroupFailedRequest, opts ...grpc.CallOption) (*GroupID, error) {
	out := new(GroupID)
	err := grpc.Invoke(ctx, "/ticket.service.sales.v1.Promotion/GroupFailed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionClient) CheckCreateStatus(ctx context.Context, in *CheckCreatePromoOrderRequest, opts ...grpc.CallOption) (*CheckCreatePromoOrderResponse, error) {
	out := new(CheckCreatePromoOrderResponse)
	err := grpc.Invoke(ctx, "/ticket.service.sales.v1.Promotion/CheckCreateStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionClient) CreatePromoOrder(ctx context.Context, in *CreatePromoOrderRequest, opts ...grpc.CallOption) (*OrderID, error) {
	out := new(OrderID)
	err := grpc.Invoke(ctx, "/ticket.service.sales.v1.Promotion/CreatePromoOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionClient) PromoPayNotify(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*OrderID, error) {
	out := new(OrderID)
	err := grpc.Invoke(ctx, "/ticket.service.sales.v1.Promotion/PromoPayNotify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionClient) CancelOrder(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*OrderID, error) {
	out := new(OrderID)
	err := grpc.Invoke(ctx, "/ticket.service.sales.v1.Promotion/CancelOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionClient) CheckIssue(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*CheckIssueResponse, error) {
	out := new(CheckIssueResponse)
	err := grpc.Invoke(ctx, "/ticket.service.sales.v1.Promotion/CheckIssue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionClient) FinishIssue(ctx context.Context, in *FinishIssueRequest, opts ...grpc.CallOption) (*GroupID, error) {
	out := new(GroupID)
	err := grpc.Invoke(ctx, "/ticket.service.sales.v1.Promotion/FinishIssue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionClient) PromoRefundNotify(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*OrderID, error) {
	out := new(OrderID)
	err := grpc.Invoke(ctx, "/ticket.service.sales.v1.Promotion/PromoRefundNotify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Promotion service

type PromotionServer interface {
	CreatePromo(context.Context, *CreatePromoRequest) (*PromoID, error)
	GetPromo(context.Context, *PromoID) (*Promo, error)
	OperatePromo(context.Context, *OperatePromoRequest) (*CommonResponse, error)
	EditPromo(context.Context, *EditPromoRequest) (*CommonResponse, error)
	GetPromoGroupInfo(context.Context, *GetPromoGroupInfoRequest) (*GetPromoGroupInfoResponse, error)
	GroupFailed(context.Context, *GroupFailedRequest) (*GroupID, error)
	CheckCreateStatus(context.Context, *CheckCreatePromoOrderRequest) (*CheckCreatePromoOrderResponse, error)
	CreatePromoOrder(context.Context, *CreatePromoOrderRequest) (*OrderID, error)
	PromoPayNotify(context.Context, *OrderID) (*OrderID, error)
	CancelOrder(context.Context, *OrderID) (*OrderID, error)
	CheckIssue(context.Context, *OrderID) (*CheckIssueResponse, error)
	FinishIssue(context.Context, *FinishIssueRequest) (*GroupID, error)
	PromoRefundNotify(context.Context, *OrderID) (*OrderID, error)
}

func RegisterPromotionServer(s *grpc.Server, srv PromotionServer) {
	s.RegisterService(&_Promotion_serviceDesc, srv)
}

func _Promotion_CreatePromo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePromoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).CreatePromo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.service.sales.v1.Promotion/CreatePromo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).CreatePromo(ctx, req.(*CreatePromoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotion_GetPromo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).GetPromo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.service.sales.v1.Promotion/GetPromo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).GetPromo(ctx, req.(*PromoID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotion_OperatePromo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatePromoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).OperatePromo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.service.sales.v1.Promotion/OperatePromo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).OperatePromo(ctx, req.(*OperatePromoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotion_EditPromo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPromoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).EditPromo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.service.sales.v1.Promotion/EditPromo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).EditPromo(ctx, req.(*EditPromoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotion_GetPromoGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPromoGroupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).GetPromoGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.service.sales.v1.Promotion/GetPromoGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).GetPromoGroupInfo(ctx, req.(*GetPromoGroupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotion_GroupFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupFailedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).GroupFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.service.sales.v1.Promotion/GroupFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).GroupFailed(ctx, req.(*GroupFailedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotion_CheckCreateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCreatePromoOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).CheckCreateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.service.sales.v1.Promotion/CheckCreateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).CheckCreateStatus(ctx, req.(*CheckCreatePromoOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotion_CreatePromoOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePromoOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).CreatePromoOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.service.sales.v1.Promotion/CreatePromoOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).CreatePromoOrder(ctx, req.(*CreatePromoOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotion_PromoPayNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).PromoPayNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.service.sales.v1.Promotion/PromoPayNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).PromoPayNotify(ctx, req.(*OrderID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotion_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.service.sales.v1.Promotion/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).CancelOrder(ctx, req.(*OrderID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotion_CheckIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).CheckIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.service.sales.v1.Promotion/CheckIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).CheckIssue(ctx, req.(*OrderID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotion_FinishIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).FinishIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.service.sales.v1.Promotion/FinishIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).FinishIssue(ctx, req.(*FinishIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotion_PromoRefundNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).PromoRefundNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.service.sales.v1.Promotion/PromoRefundNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).PromoRefundNotify(ctx, req.(*OrderID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Promotion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.service.sales.v1.Promotion",
	HandlerType: (*PromotionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePromo",
			Handler:    _Promotion_CreatePromo_Handler,
		},
		{
			MethodName: "GetPromo",
			Handler:    _Promotion_GetPromo_Handler,
		},
		{
			MethodName: "OperatePromo",
			Handler:    _Promotion_OperatePromo_Handler,
		},
		{
			MethodName: "EditPromo",
			Handler:    _Promotion_EditPromo_Handler,
		},
		{
			MethodName: "GetPromoGroupInfo",
			Handler:    _Promotion_GetPromoGroupInfo_Handler,
		},
		{
			MethodName: "GroupFailed",
			Handler:    _Promotion_GroupFailed_Handler,
		},
		{
			MethodName: "CheckCreateStatus",
			Handler:    _Promotion_CheckCreateStatus_Handler,
		},
		{
			MethodName: "CreatePromoOrder",
			Handler:    _Promotion_CreatePromoOrder_Handler,
		},
		{
			MethodName: "PromoPayNotify",
			Handler:    _Promotion_PromoPayNotify_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Promotion_CancelOrder_Handler,
		},
		{
			MethodName: "CheckIssue",
			Handler:    _Promotion_CheckIssue_Handler,
		},
		{
			MethodName: "FinishIssue",
			Handler:    _Promotion_FinishIssue_Handler,
		},
		{
			MethodName: "PromoRefundNotify",
			Handler:    _Promotion_PromoRefundNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/openplatform/ticket-sales/api/grpc/v1/promotion.proto",
}

func (m *Promo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Promo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PromoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.PromoID))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Type))
	}
	if m.ItemID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.ItemID))
	}
	if m.SKUID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.SKUID))
	}
	if m.Extra != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Extra))
	}
	if m.ExpireSec != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.ExpireSec))
	}
	if m.SKUCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.SKUCount))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Amount))
	}
	if m.BuyerCount != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.BuyerCount))
	}
	if m.BeginTime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.BeginTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.EndTime))
	}
	if m.Status != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Status))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Mtime))
	}
	if m.PrivSKUID != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.PrivSKUID))
	}
	if len(m.UsableCoupons) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(len(m.UsableCoupons)))
		i += copy(dAtA[i:], m.UsableCoupons)
	}
	return i, nil
}

func (m *PromoGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromoGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PromoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.PromoID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.GroupID))
	}
	if m.UID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.UID))
	}
	if m.OrderCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.OrderCount))
	}
	if m.Status != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Status))
	}
	if m.ExpireAt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.ExpireAt))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Mtime))
	}
	return i, nil
}

func (m *PromoOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromoOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PromoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.PromoID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.GroupID))
	}
	if m.OrderID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.OrderID))
	}
	if m.IsMaster != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.IsMaster))
	}
	if m.UID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.UID))
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Status))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Mtime))
	}
	if m.SKUID != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.SKUID))
	}
	return i, nil
}

func (m *CreatePromoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePromoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PromoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.PromoID))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Type))
	}
	if m.ItemID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.ItemID))
	}
	if m.SKUID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.SKUID))
	}
	if m.Extra != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Extra))
	}
	if m.ExpireSec != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.ExpireSec))
	}
	if m.SKUCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.SKUCount))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Amount))
	}
	if m.BuyerCount != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.BuyerCount))
	}
	if m.BeginTime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.BeginTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.EndTime))
	}
	if m.PrivSKUID != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.PrivSKUID))
	}
	if len(m.UsableCoupons) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(len(m.UsableCoupons)))
		i += copy(dAtA[i:], m.UsableCoupons)
	}
	return i, nil
}

func (m *OperatePromoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatePromoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PromoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.PromoID))
	}
	if m.OperateType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.OperateType))
	}
	return i, nil
}

func (m *CheckCreatePromoOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckCreatePromoOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.UID))
	}
	if m.SKUID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.SKUID))
	}
	if m.PromoID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.PromoID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.GroupID))
	}
	return i, nil
}

func (m *RepeatOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepeatOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.OrderID))
	}
	if m.IsMaster != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.IsMaster))
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *CheckCreatePromoOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckCreatePromoOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Amount))
	}
	if m.SKUID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.SKUID))
	}
	if m.PrivSKUID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.PrivSKUID))
	}
	if len(m.UsableCoupons) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(len(m.UsableCoupons)))
		i += copy(dAtA[i:], m.UsableCoupons)
	}
	if m.RepeatOrder != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.RepeatOrder.Size()))
		n1, err := m.RepeatOrder.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *CreatePromoOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePromoOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PromoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.PromoID))
	}
	if m.OrderID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.OrderID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.GroupID))
	}
	if m.UID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.UID))
	}
	if m.PromoSKUID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.PromoSKUID))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Ctime))
	}
	if m.PayMoney != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.PayMoney))
	}
	return i, nil
}

func (m *CommonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Res != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Res))
	}
	return i, nil
}

func (m *PromoID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromoID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PromoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.PromoID))
	}
	return i, nil
}

func (m *OrderID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.OrderID))
	}
	return i, nil
}

func (m *GroupID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.GroupID))
	}
	return i, nil
}

func (m *GetPromoGroupInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPromoGroupInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.OrderID))
	}
	return i, nil
}

func (m *GetPromoGroupInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPromoGroupInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PromoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.PromoID))
	}
	if m.SKUCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.SKUCount))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Amount))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.GroupID))
	}
	if m.OrderCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.OrderCount))
	}
	if m.ExpireAt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.ExpireAt))
	}
	if m.Status != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Status))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Ctime))
	}
	return i, nil
}

func (m *CheckIssueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckIssueResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PromoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.PromoID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.GroupID))
	}
	if len(m.PaidOrders) > 0 {
		for _, msg := range m.PaidOrders {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPromotion(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FinishIssueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinishIssueRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PromoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.PromoID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.GroupID))
	}
	return i, nil
}

func (m *GroupFailedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupFailedRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.GroupID))
	}
	if m.CancelNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.CancelNum))
	}
	return i, nil
}

func (m *EditPromoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditPromoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PromoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.PromoID))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Amount))
	}
	if m.ExpireSec != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.ExpireSec))
	}
	if m.BeginTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.BeginTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.EndTime))
	}
	if m.PrivSKUID != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.PrivSKUID))
	}
	if len(m.UsableCoupons) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(len(m.UsableCoupons)))
		i += copy(dAtA[i:], m.UsableCoupons)
	}
	if m.SKUCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.SKUCount))
	}
	return i, nil
}

func encodeVarintPromotion(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Promo) Size() (n int) {
	var l int
	_ = l
	if m.PromoID != 0 {
		n += 1 + sovPromotion(uint64(m.PromoID))
	}
	if m.Type != 0 {
		n += 1 + sovPromotion(uint64(m.Type))
	}
	if m.ItemID != 0 {
		n += 1 + sovPromotion(uint64(m.ItemID))
	}
	if m.SKUID != 0 {
		n += 1 + sovPromotion(uint64(m.SKUID))
	}
	if m.Extra != 0 {
		n += 1 + sovPromotion(uint64(m.Extra))
	}
	if m.ExpireSec != 0 {
		n += 1 + sovPromotion(uint64(m.ExpireSec))
	}
	if m.SKUCount != 0 {
		n += 1 + sovPromotion(uint64(m.SKUCount))
	}
	if m.Amount != 0 {
		n += 1 + sovPromotion(uint64(m.Amount))
	}
	if m.BuyerCount != 0 {
		n += 1 + sovPromotion(uint64(m.BuyerCount))
	}
	if m.BeginTime != 0 {
		n += 1 + sovPromotion(uint64(m.BeginTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovPromotion(uint64(m.EndTime))
	}
	if m.Status != 0 {
		n += 1 + sovPromotion(uint64(m.Status))
	}
	if m.Ctime != 0 {
		n += 1 + sovPromotion(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovPromotion(uint64(m.Mtime))
	}
	if m.PrivSKUID != 0 {
		n += 1 + sovPromotion(uint64(m.PrivSKUID))
	}
	l = len(m.UsableCoupons)
	if l > 0 {
		n += 2 + l + sovPromotion(uint64(l))
	}
	return n
}

func (m *PromoGroup) Size() (n int) {
	var l int
	_ = l
	if m.PromoID != 0 {
		n += 1 + sovPromotion(uint64(m.PromoID))
	}
	if m.GroupID != 0 {
		n += 1 + sovPromotion(uint64(m.GroupID))
	}
	if m.UID != 0 {
		n += 1 + sovPromotion(uint64(m.UID))
	}
	if m.OrderCount != 0 {
		n += 1 + sovPromotion(uint64(m.OrderCount))
	}
	if m.Status != 0 {
		n += 1 + sovPromotion(uint64(m.Status))
	}
	if m.ExpireAt != 0 {
		n += 1 + sovPromotion(uint64(m.ExpireAt))
	}
	if m.Ctime != 0 {
		n += 1 + sovPromotion(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovPromotion(uint64(m.Mtime))
	}
	return n
}

func (m *PromoOrder) Size() (n int) {
	var l int
	_ = l
	if m.PromoID != 0 {
		n += 1 + sovPromotion(uint64(m.PromoID))
	}
	if m.GroupID != 0 {
		n += 1 + sovPromotion(uint64(m.GroupID))
	}
	if m.OrderID != 0 {
		n += 1 + sovPromotion(uint64(m.OrderID))
	}
	if m.IsMaster != 0 {
		n += 1 + sovPromotion(uint64(m.IsMaster))
	}
	if m.UID != 0 {
		n += 1 + sovPromotion(uint64(m.UID))
	}
	if m.Status != 0 {
		n += 1 + sovPromotion(uint64(m.Status))
	}
	if m.Ctime != 0 {
		n += 1 + sovPromotion(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovPromotion(uint64(m.Mtime))
	}
	if m.SKUID != 0 {
		n += 1 + sovPromotion(uint64(m.SKUID))
	}
	return n
}

func (m *CreatePromoRequest) Size() (n int) {
	var l int
	_ = l
	if m.PromoID != 0 {
		n += 1 + sovPromotion(uint64(m.PromoID))
	}
	if m.Type != 0 {
		n += 1 + sovPromotion(uint64(m.Type))
	}
	if m.ItemID != 0 {
		n += 1 + sovPromotion(uint64(m.ItemID))
	}
	if m.SKUID != 0 {
		n += 1 + sovPromotion(uint64(m.SKUID))
	}
	if m.Extra != 0 {
		n += 1 + sovPromotion(uint64(m.Extra))
	}
	if m.ExpireSec != 0 {
		n += 1 + sovPromotion(uint64(m.ExpireSec))
	}
	if m.SKUCount != 0 {
		n += 1 + sovPromotion(uint64(m.SKUCount))
	}
	if m.Amount != 0 {
		n += 1 + sovPromotion(uint64(m.Amount))
	}
	if m.BuyerCount != 0 {
		n += 1 + sovPromotion(uint64(m.BuyerCount))
	}
	if m.BeginTime != 0 {
		n += 1 + sovPromotion(uint64(m.BeginTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovPromotion(uint64(m.EndTime))
	}
	if m.PrivSKUID != 0 {
		n += 1 + sovPromotion(uint64(m.PrivSKUID))
	}
	l = len(m.UsableCoupons)
	if l > 0 {
		n += 1 + l + sovPromotion(uint64(l))
	}
	return n
}

func (m *OperatePromoRequest) Size() (n int) {
	var l int
	_ = l
	if m.PromoID != 0 {
		n += 1 + sovPromotion(uint64(m.PromoID))
	}
	if m.OperateType != 0 {
		n += 1 + sovPromotion(uint64(m.OperateType))
	}
	return n
}

func (m *CheckCreatePromoOrderRequest) Size() (n int) {
	var l int
	_ = l
	if m.UID != 0 {
		n += 1 + sovPromotion(uint64(m.UID))
	}
	if m.SKUID != 0 {
		n += 1 + sovPromotion(uint64(m.SKUID))
	}
	if m.PromoID != 0 {
		n += 1 + sovPromotion(uint64(m.PromoID))
	}
	if m.GroupID != 0 {
		n += 1 + sovPromotion(uint64(m.GroupID))
	}
	return n
}

func (m *RepeatOrder) Size() (n int) {
	var l int
	_ = l
	if m.OrderID != 0 {
		n += 1 + sovPromotion(uint64(m.OrderID))
	}
	if m.IsMaster != 0 {
		n += 1 + sovPromotion(uint64(m.IsMaster))
	}
	if m.Status != 0 {
		n += 1 + sovPromotion(uint64(m.Status))
	}
	return n
}

func (m *CheckCreatePromoOrderResponse) Size() (n int) {
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovPromotion(uint64(m.Amount))
	}
	if m.SKUID != 0 {
		n += 1 + sovPromotion(uint64(m.SKUID))
	}
	if m.PrivSKUID != 0 {
		n += 1 + sovPromotion(uint64(m.PrivSKUID))
	}
	l = len(m.UsableCoupons)
	if l > 0 {
		n += 1 + l + sovPromotion(uint64(l))
	}
	if m.RepeatOrder != nil {
		l = m.RepeatOrder.Size()
		n += 1 + l + sovPromotion(uint64(l))
	}
	return n
}

func (m *CreatePromoOrderRequest) Size() (n int) {
	var l int
	_ = l
	if m.PromoID != 0 {
		n += 1 + sovPromotion(uint64(m.PromoID))
	}
	if m.OrderID != 0 {
		n += 1 + sovPromotion(uint64(m.OrderID))
	}
	if m.GroupID != 0 {
		n += 1 + sovPromotion(uint64(m.GroupID))
	}
	if m.UID != 0 {
		n += 1 + sovPromotion(uint64(m.UID))
	}
	if m.PromoSKUID != 0 {
		n += 1 + sovPromotion(uint64(m.PromoSKUID))
	}
	if m.Ctime != 0 {
		n += 1 + sovPromotion(uint64(m.Ctime))
	}
	if m.PayMoney != 0 {
		n += 1 + sovPromotion(uint64(m.PayMoney))
	}
	return n
}

func (m *CommonResponse) Size() (n int) {
	var l int
	_ = l
	if m.Res != 0 {
		n += 1 + sovPromotion(uint64(m.Res))
	}
	return n
}

func (m *PromoID) Size() (n int) {
	var l int
	_ = l
	if m.PromoID != 0 {
		n += 1 + sovPromotion(uint64(m.PromoID))
	}
	return n
}

func (m *OrderID) Size() (n int) {
	var l int
	_ = l
	if m.OrderID != 0 {
		n += 1 + sovPromotion(uint64(m.OrderID))
	}
	return n
}

func (m *GroupID) Size() (n int) {
	var l int
	_ = l
	if m.GroupID != 0 {
		n += 1 + sovPromotion(uint64(m.GroupID))
	}
	return n
}

func (m *GetPromoGroupInfoRequest) Size() (n int) {
	var l int
	_ = l
	if m.OrderID != 0 {
		n += 1 + sovPromotion(uint64(m.OrderID))
	}
	return n
}

func (m *GetPromoGroupInfoResponse) Size() (n int) {
	var l int
	_ = l
	if m.PromoID != 0 {
		n += 1 + sovPromotion(uint64(m.PromoID))
	}
	if m.SKUCount != 0 {
		n += 1 + sovPromotion(uint64(m.SKUCount))
	}
	if m.Amount != 0 {
		n += 1 + sovPromotion(uint64(m.Amount))
	}
	if m.GroupID != 0 {
		n += 1 + sovPromotion(uint64(m.GroupID))
	}
	if m.OrderCount != 0 {
		n += 1 + sovPromotion(uint64(m.OrderCount))
	}
	if m.ExpireAt != 0 {
		n += 1 + sovPromotion(uint64(m.ExpireAt))
	}
	if m.Status != 0 {
		n += 1 + sovPromotion(uint64(m.Status))
	}
	if m.Ctime != 0 {
		n += 1 + sovPromotion(uint64(m.Ctime))
	}
	return n
}

func (m *CheckIssueResponse) Size() (n int) {
	var l int
	_ = l
	if m.PromoID != 0 {
		n += 1 + sovPromotion(uint64(m.PromoID))
	}
	if m.GroupID != 0 {
		n += 1 + sovPromotion(uint64(m.GroupID))
	}
	if len(m.PaidOrders) > 0 {
		for _, e := range m.PaidOrders {
			l = e.Size()
			n += 1 + l + sovPromotion(uint64(l))
		}
	}
	return n
}

func (m *FinishIssueRequest) Size() (n int) {
	var l int
	_ = l
	if m.PromoID != 0 {
		n += 1 + sovPromotion(uint64(m.PromoID))
	}
	if m.GroupID != 0 {
		n += 1 + sovPromotion(uint64(m.GroupID))
	}
	return n
}

func (m *GroupFailedRequest) Size() (n int) {
	var l int
	_ = l
	if m.GroupID != 0 {
		n += 1 + sovPromotion(uint64(m.GroupID))
	}
	if m.CancelNum != 0 {
		n += 1 + sovPromotion(uint64(m.CancelNum))
	}
	return n
}

func (m *EditPromoRequest) Size() (n int) {
	var l int
	_ = l
	if m.PromoID != 0 {
		n += 1 + sovPromotion(uint64(m.PromoID))
	}
	if m.Amount != 0 {
		n += 1 + sovPromotion(uint64(m.Amount))
	}
	if m.ExpireSec != 0 {
		n += 1 + sovPromotion(uint64(m.ExpireSec))
	}
	if m.BeginTime != 0 {
		n += 1 + sovPromotion(uint64(m.BeginTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovPromotion(uint64(m.EndTime))
	}
	if m.PrivSKUID != 0 {
		n += 1 + sovPromotion(uint64(m.PrivSKUID))
	}
	l = len(m.UsableCoupons)
	if l > 0 {
		n += 1 + l + sovPromotion(uint64(l))
	}
	if m.SKUCount != 0 {
		n += 1 + sovPromotion(uint64(m.SKUCount))
	}
	return n
}

func sovPromotion(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPromotion(x uint64) (n int) {
	return sovPromotion(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Promo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Promo{`,
		`PromoID:` + fmt.Sprintf("%v", this.PromoID) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ItemID:` + fmt.Sprintf("%v", this.ItemID) + `,`,
		`SKUID:` + fmt.Sprintf("%v", this.SKUID) + `,`,
		`Extra:` + fmt.Sprintf("%v", this.Extra) + `,`,
		`ExpireSec:` + fmt.Sprintf("%v", this.ExpireSec) + `,`,
		`SKUCount:` + fmt.Sprintf("%v", this.SKUCount) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`BuyerCount:` + fmt.Sprintf("%v", this.BuyerCount) + `,`,
		`BeginTime:` + fmt.Sprintf("%v", this.BeginTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Ctime:` + fmt.Sprintf("%v", this.Ctime) + `,`,
		`Mtime:` + fmt.Sprintf("%v", this.Mtime) + `,`,
		`PrivSKUID:` + fmt.Sprintf("%v", this.PrivSKUID) + `,`,
		`UsableCoupons:` + fmt.Sprintf("%v", this.UsableCoupons) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PromoGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PromoGroup{`,
		`PromoID:` + fmt.Sprintf("%v", this.PromoID) + `,`,
		`GroupID:` + fmt.Sprintf("%v", this.GroupID) + `,`,
		`UID:` + fmt.Sprintf("%v", this.UID) + `,`,
		`OrderCount:` + fmt.Sprintf("%v", this.OrderCount) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`ExpireAt:` + fmt.Sprintf("%v", this.ExpireAt) + `,`,
		`Ctime:` + fmt.Sprintf("%v", this.Ctime) + `,`,
		`Mtime:` + fmt.Sprintf("%v", this.Mtime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PromoOrder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PromoOrder{`,
		`PromoID:` + fmt.Sprintf("%v", this.PromoID) + `,`,
		`GroupID:` + fmt.Sprintf("%v", this.GroupID) + `,`,
		`OrderID:` + fmt.Sprintf("%v", this.OrderID) + `,`,
		`IsMaster:` + fmt.Sprintf("%v", this.IsMaster) + `,`,
		`UID:` + fmt.Sprintf("%v", this.UID) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Ctime:` + fmt.Sprintf("%v", this.Ctime) + `,`,
		`Mtime:` + fmt.Sprintf("%v", this.Mtime) + `,`,
		`SKUID:` + fmt.Sprintf("%v", this.SKUID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreatePromoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatePromoRequest{`,
		`PromoID:` + fmt.Sprintf("%v", this.PromoID) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ItemID:` + fmt.Sprintf("%v", this.ItemID) + `,`,
		`SKUID:` + fmt.Sprintf("%v", this.SKUID) + `,`,
		`Extra:` + fmt.Sprintf("%v", this.Extra) + `,`,
		`ExpireSec:` + fmt.Sprintf("%v", this.ExpireSec) + `,`,
		`SKUCount:` + fmt.Sprintf("%v", this.SKUCount) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`BuyerCount:` + fmt.Sprintf("%v", this.BuyerCount) + `,`,
		`BeginTime:` + fmt.Sprintf("%v", this.BeginTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`PrivSKUID:` + fmt.Sprintf("%v", this.PrivSKUID) + `,`,
		`UsableCoupons:` + fmt.Sprintf("%v", this.UsableCoupons) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OperatePromoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OperatePromoRequest{`,
		`PromoID:` + fmt.Sprintf("%v", this.PromoID) + `,`,
		`OperateType:` + fmt.Sprintf("%v", this.OperateType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckCreatePromoOrderRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckCreatePromoOrderRequest{`,
		`UID:` + fmt.Sprintf("%v", this.UID) + `,`,
		`SKUID:` + fmt.Sprintf("%v", this.SKUID) + `,`,
		`PromoID:` + fmt.Sprintf("%v", this.PromoID) + `,`,
		`GroupID:` + fmt.Sprintf("%v", this.GroupID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RepeatOrder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RepeatOrder{`,
		`OrderID:` + fmt.Sprintf("%v", this.OrderID) + `,`,
		`IsMaster:` + fmt.Sprintf("%v", this.IsMaster) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckCreatePromoOrderResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckCreatePromoOrderResponse{`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`SKUID:` + fmt.Sprintf("%v", this.SKUID) + `,`,
		`PrivSKUID:` + fmt.Sprintf("%v", this.PrivSKUID) + `,`,
		`UsableCoupons:` + fmt.Sprintf("%v", this.UsableCoupons) + `,`,
		`RepeatOrder:` + strings.Replace(fmt.Sprintf("%v", this.RepeatOrder), "RepeatOrder", "RepeatOrder", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreatePromoOrderRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatePromoOrderRequest{`,
		`PromoID:` + fmt.Sprintf("%v", this.PromoID) + `,`,
		`OrderID:` + fmt.Sprintf("%v", this.OrderID) + `,`,
		`GroupID:` + fmt.Sprintf("%v", this.GroupID) + `,`,
		`UID:` + fmt.Sprintf("%v", this.UID) + `,`,
		`PromoSKUID:` + fmt.Sprintf("%v", this.PromoSKUID) + `,`,
		`Ctime:` + fmt.Sprintf("%v", this.Ctime) + `,`,
		`PayMoney:` + fmt.Sprintf("%v", this.PayMoney) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommonResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonResponse{`,
		`Res:` + fmt.Sprintf("%v", this.Res) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PromoID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PromoID{`,
		`PromoID:` + fmt.Sprintf("%v", this.PromoID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrderID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrderID{`,
		`OrderID:` + fmt.Sprintf("%v", this.OrderID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GroupID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GroupID{`,
		`GroupID:` + fmt.Sprintf("%v", this.GroupID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPromoGroupInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPromoGroupInfoRequest{`,
		`OrderID:` + fmt.Sprintf("%v", this.OrderID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPromoGroupInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPromoGroupInfoResponse{`,
		`PromoID:` + fmt.Sprintf("%v", this.PromoID) + `,`,
		`SKUCount:` + fmt.Sprintf("%v", this.SKUCount) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`GroupID:` + fmt.Sprintf("%v", this.GroupID) + `,`,
		`OrderCount:` + fmt.Sprintf("%v", this.OrderCount) + `,`,
		`ExpireAt:` + fmt.Sprintf("%v", this.ExpireAt) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Ctime:` + fmt.Sprintf("%v", this.Ctime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckIssueResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckIssueResponse{`,
		`PromoID:` + fmt.Sprintf("%v", this.PromoID) + `,`,
		`GroupID:` + fmt.Sprintf("%v", this.GroupID) + `,`,
		`PaidOrders:` + strings.Replace(fmt.Sprintf("%v", this.PaidOrders), "OrderID", "OrderID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FinishIssueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FinishIssueRequest{`,
		`PromoID:` + fmt.Sprintf("%v", this.PromoID) + `,`,
		`GroupID:` + fmt.Sprintf("%v", this.GroupID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GroupFailedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GroupFailedRequest{`,
		`GroupID:` + fmt.Sprintf("%v", this.GroupID) + `,`,
		`CancelNum:` + fmt.Sprintf("%v", this.CancelNum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EditPromoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EditPromoRequest{`,
		`PromoID:` + fmt.Sprintf("%v", this.PromoID) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`ExpireSec:` + fmt.Sprintf("%v", this.ExpireSec) + `,`,
		`BeginTime:` + fmt.Sprintf("%v", this.BeginTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`PrivSKUID:` + fmt.Sprintf("%v", this.PrivSKUID) + `,`,
		`UsableCoupons:` + fmt.Sprintf("%v", this.UsableCoupons) + `,`,
		`SKUCount:` + fmt.Sprintf("%v", this.SKUCount) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPromotion(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Promo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Promo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Promo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromoID", wireType)
			}
			m.PromoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromoID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SKUID", wireType)
			}
			m.SKUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SKUID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			m.Extra = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Extra |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireSec", wireType)
			}
			m.ExpireSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireSec |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SKUCount", wireType)
			}
			m.SKUCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SKUCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCount", wireType)
			}
			m.BuyerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyerCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			m.BeginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivSKUID", wireType)
			}
			m.PrivSKUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivSKUID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsableCoupons", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPromotion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsableCoupons = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromoGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromoGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromoID", wireType)
			}
			m.PromoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromoID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			m.UID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderCount", wireType)
			}
			m.OrderCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			m.ExpireAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromoOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromoOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromoID", wireType)
			}
			m.PromoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromoID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			m.OrderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMaster", wireType)
			}
			m.IsMaster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsMaster |= (int16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			m.UID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SKUID", wireType)
			}
			m.SKUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SKUID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePromoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePromoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePromoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromoID", wireType)
			}
			m.PromoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromoID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SKUID", wireType)
			}
			m.SKUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SKUID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			m.Extra = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Extra |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireSec", wireType)
			}
			m.ExpireSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireSec |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SKUCount", wireType)
			}
			m.SKUCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SKUCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCount", wireType)
			}
			m.BuyerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyerCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			m.BeginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivSKUID", wireType)
			}
			m.PrivSKUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivSKUID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsableCoupons", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPromotion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsableCoupons = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatePromoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatePromoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatePromoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromoID", wireType)
			}
			m.PromoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromoID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperateType", wireType)
			}
			m.OperateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperateType |= (int16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckCreatePromoOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckCreatePromoOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckCreatePromoOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			m.UID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SKUID", wireType)
			}
			m.SKUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SKUID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromoID", wireType)
			}
			m.PromoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromoID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepeatOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepeatOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepeatOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			m.OrderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMaster", wireType)
			}
			m.IsMaster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsMaster |= (int16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckCreatePromoOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckCreatePromoOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckCreatePromoOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SKUID", wireType)
			}
			m.SKUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SKUID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivSKUID", wireType)
			}
			m.PrivSKUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivSKUID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsableCoupons", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPromotion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsableCoupons = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPromotion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RepeatOrder == nil {
				m.RepeatOrder = &RepeatOrder{}
			}
			if err := m.RepeatOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePromoOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePromoOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePromoOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromoID", wireType)
			}
			m.PromoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromoID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			m.OrderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			m.UID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromoSKUID", wireType)
			}
			m.PromoSKUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromoSKUID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayMoney", wireType)
			}
			m.PayMoney = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayMoney |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			m.Res = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Res |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromoID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromoID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromoID", wireType)
			}
			m.PromoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromoID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			m.OrderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPromoGroupInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPromoGroupInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPromoGroupInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			m.OrderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPromoGroupInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPromoGroupInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPromoGroupInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromoID", wireType)
			}
			m.PromoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromoID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SKUCount", wireType)
			}
			m.SKUCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SKUCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderCount", wireType)
			}
			m.OrderCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			m.ExpireAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckIssueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckIssueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckIssueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromoID", wireType)
			}
			m.PromoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromoID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaidOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPromotion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaidOrders = append(m.PaidOrders, &OrderID{})
			if err := m.PaidOrders[len(m.PaidOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinishIssueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinishIssueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinishIssueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromoID", wireType)
			}
			m.PromoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromoID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupFailedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupFailedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupFailedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelNum", wireType)
			}
			m.CancelNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CancelNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditPromoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditPromoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditPromoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromoID", wireType)
			}
			m.PromoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromoID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireSec", wireType)
			}
			m.ExpireSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireSec |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			m.BeginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivSKUID", wireType)
			}
			m.PrivSKUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivSKUID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsableCoupons", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPromotion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsableCoupons = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SKUCount", wireType)
			}
			m.SKUCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SKUCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPromotion(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPromotion
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPromotion
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPromotion(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPromotion = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPromotion   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/openplatform/ticket-sales/api/grpc/v1/promotion.proto", fileDescriptorPromotion)
}

var fileDescriptorPromotion = []byte{
	// 1921 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xcd, 0x6f, 0xdb, 0xca,
	0x11, 0x37, 0xf5, 0xad, 0x95, 0x3f, 0x37, 0x78, 0x8d, 0xe2, 0xa6, 0xa2, 0x1e, 0xf3, 0x5e, 0xe3,
	0xda, 0xb5, 0x14, 0xcb, 0x6d, 0x5e, 0x5f, 0x5a, 0x04, 0x88, 0xdc, 0x24, 0x50, 0x83, 0x24, 0x06,
	0x9d, 0x04, 0x70, 0x80, 0x46, 0xa0, 0xc5, 0xb5, 0x4d, 0xd8, 0x14, 0x19, 0x7e, 0x18, 0x31, 0xd0,
	0x43, 0x0f, 0xbd, 0xf5, 0x3f, 0x28, 0xd0, 0x53, 0xff, 0x8f, 0x5e, 0x7a, 0x68, 0x50, 0xf4, 0x90,
	0x4b, 0x81, 0xb6, 0x28, 0x88, 0x46, 0xbd, 0xf9, 0xa8, 0x63, 0x4f, 0x0f, 0xbb, 0x4b, 0x72, 0x97,
	0x14, 0x29, 0xf9, 0xfb, 0x62, 0x71, 0x67, 0x67, 0x67, 0xb9, 0x33, 0xb3, 0xf3, 0x9b, 0x1f, 0x0d,
	0x1e, 0x29, 0xa6, 0xd9, 0xb4, 0x91, 0x75, 0xa4, 0xf5, 0x50, 0xd3, 0x30, 0x51, 0xdf, 0x3c, 0x54,
	0x9c, 0x5d, 0xc3, 0xd2, 0x9b, 0x8e, 0xd6, 0x3b, 0x40, 0xce, 0xaa, 0xad, 0x1c, 0x22, 0xbb, 0xa9,
	0x98, 0x5a, 0x73, 0xcf, 0x32, 0x7b, 0xcd, 0xa3, 0xb5, 0xa6, 0x69, 0x19, 0xba, 0xe1, 0x68, 0x46,
	0xbf, 0x61, 0x5a, 0x86, 0x63, 0xc0, 0x9b, 0x54, 0xb3, 0xe1, 0x5b, 0x69, 0x90, 0x15, 0x8d, 0xa3,
	0xb5, 0xc5, 0xd5, 0x3d, 0xcd, 0xd9, 0x77, 0x77, 0x1a, 0x3d, 0x43, 0x6f, 0xee, 0x19, 0x7b, 0x46,
	0x93, 0xe8, 0xef, 0xb8, 0xbb, 0x64, 0x44, 0x06, 0xe4, 0x89, 0xda, 0x91, 0xfe, 0x93, 0x07, 0xf9,
	0x4d, 0x6c, 0x1b, 0xb6, 0x40, 0x89, 0x6c, 0xd2, 0xd5, 0xd4, 0xaa, 0x50, 0x17, 0x96, 0xb2, 0xed,
	0x9b, 0x03, 0x4f, 0x2c, 0x92, 0xc9, 0xce, 0x2f, 0x4f, 0x3c, 0x31, 0x9c, 0x96, 0x8b, 0xe4, 0xa9,
	0xa3, 0xc2, 0xaf, 0x41, 0xce, 0x39, 0x36, 0x51, 0x35, 0x53, 0x17, 0x96, 0xf2, 0xed, 0x85, 0x13,
	0x4f, 0x24, 0xe3, 0xff, 0x7b, 0x62, 0x5e, 0xeb, 0x3b, 0x6b, 0xf7, 0x65, 0x32, 0x84, 0x0d, 0x50,
	0xd4, 0x1c, 0xa4, 0x63, 0xcb, 0x59, 0x62, 0xf9, 0x8b, 0x81, 0x27, 0x16, 0x3a, 0x0e, 0xd2, 0x89,
	0xe1, 0x60, 0x52, 0x2e, 0xe0, 0x87, 0x8e, 0x0a, 0x97, 0x41, 0xc1, 0x3e, 0x70, 0xb1, 0x7a, 0x8e,
	0xa8, 0xdf, 0x18, 0x78, 0x62, 0x7e, 0xeb, 0xd9, 0x6b, 0xa2, 0xed, 0x4f, 0xc9, 0x79, 0xfb, 0xc0,
	0xed, 0xa8, 0x50, 0x04, 0x79, 0xf4, 0xc1, 0xb1, 0x94, 0x6a, 0x9e, 0xa8, 0x96, 0x4f, 0x3c, 0x91,
	0x0a, 0x64, 0xfa, 0x03, 0x57, 0x01, 0x40, 0x1f, 0x4c, 0xcd, 0x42, 0x5d, 0x1b, 0xf5, 0xaa, 0x05,
	0xa2, 0x35, 0x7b, 0xe2, 0x89, 0x9c, 0x54, 0x2e, 0xd3, 0xe7, 0x2d, 0xd4, 0x83, 0xf7, 0x41, 0x19,
	0x6f, 0xd0, 0x33, 0xdc, 0xbe, 0x53, 0x2d, 0x12, 0xed, 0x5b, 0x03, 0x4f, 0x2c, 0x6d, 0x3d, 0x7b,
	0xbd, 0x81, 0x65, 0x27, 0x9e, 0xc8, 0x14, 0xe4, 0x92, 0x7d, 0xe0, 0x12, 0x31, 0x94, 0x40, 0x41,
	0xd1, 0xc9, 0xa2, 0x12, 0x59, 0x04, 0xf0, 0xab, 0x52, 0x89, 0xec, 0xff, 0xc2, 0x7b, 0xa0, 0xb2,
	0xe3, 0x1e, 0x23, 0xcb, 0xb7, 0x5e, 0x26, 0x8a, 0x73, 0x27, 0x9e, 0xc8, 0x8b, 0x65, 0x40, 0x06,
	0xd4, 0xea, 0x2a, 0x00, 0x3b, 0x68, 0x4f, 0xeb, 0x77, 0x1d, 0x4d, 0x47, 0x55, 0xc0, 0x5e, 0x9e,
	0x49, 0xe5, 0x32, 0x79, 0x7e, 0xa5, 0xe9, 0x08, 0xde, 0x05, 0x25, 0xd4, 0x57, 0xa9, 0x72, 0x85,
	0x28, 0x4f, 0xe3, 0xc0, 0x05, 0x32, 0xb9, 0x88, 0xfa, 0x2a, 0x51, 0x5c, 0x01, 0x05, 0xdb, 0x51,
	0x1c, 0xd7, 0xae, 0x4e, 0x93, 0xd0, 0xdd, 0x20, 0x8e, 0x25, 0x12, 0x16, 0x3c, 0x5f, 0x80, 0x5d,
	0xdc, 0x23, 0x26, 0x67, 0x98, 0x8b, 0x89, 0x40, 0xa6, 0x3f, 0x58, 0x41, 0x27, 0x0a, 0xb3, 0x4c,
	0x41, 0xa7, 0x0a, 0xe4, 0x07, 0xfe, 0x02, 0x54, 0x4c, 0x4b, 0x3b, 0xea, 0xfa, 0x51, 0x9d, 0x23,
	0x6a, 0xb7, 0x07, 0x9e, 0x58, 0xde, 0xb4, 0xb4, 0xa3, 0x20, 0xb2, 0xbc, 0x8e, 0x5c, 0xc6, 0x83,
	0x2d, 0x12, 0xe2, 0x6f, 0xc1, 0xac, 0x6b, 0x2b, 0x3b, 0x87, 0x08, 0x3b, 0xc8, 0x34, 0xfa, 0x76,
	0x75, 0xbe, 0x2e, 0x2c, 0x95, 0xdb, 0xf0, 0xc4, 0x13, 0x63, 0x33, 0xf2, 0x0c, 0x1d, 0x6f, 0xd0,
	0xa1, 0xf4, 0xbf, 0x0c, 0x00, 0x24, 0x83, 0x9f, 0x5a, 0x86, 0x6b, 0x9e, 0x2b, 0xc7, 0x5b, 0xa0,
	0xb4, 0x87, 0x17, 0xe3, 0x35, 0x19, 0xb6, 0x86, 0x18, 0xa4, 0x6b, 0x82, 0x69, 0xb9, 0x48, 0x9e,
	0x3a, 0x2a, 0xac, 0x83, 0xac, 0x1b, 0x26, 0xfb, 0xec, 0xc0, 0x13, 0xb3, 0xf4, 0x84, 0x58, 0x2a,
	0xe3, 0x3f, 0x38, 0x15, 0x0c, 0x4b, 0x0d, 0x53, 0x21, 0xc7, 0x52, 0x81, 0x13, 0xcb, 0x80, 0x0c,
	0x68, 0x2a, 0xb0, 0x90, 0xe5, 0x27, 0x87, 0x6c, 0x19, 0xf8, 0x29, 0xdd, 0x55, 0x1c, 0x3f, 0xe7,
	0x67, 0x70, 0xe6, 0x86, 0x42, 0xb9, 0x44, 0x1f, 0x1f, 0x39, 0x2c, 0xbc, 0xc5, 0x49, 0xe1, 0x2d,
	0x25, 0x87, 0x57, 0xfa, 0x43, 0xd6, 0xf7, 0xf2, 0x4b, 0xfc, 0xba, 0xd7, 0xe6, 0xe5, 0x16, 0x28,
	0x51, 0x67, 0x85, 0xae, 0x26, 0x6b, 0xc8, 0x4b, 0xd0, 0x35, 0xc1, 0xb4, 0x5c, 0x24, 0x4f, 0x1d,
	0x15, 0xae, 0x83, 0xb2, 0x66, 0x77, 0x75, 0xc5, 0x76, 0x90, 0x45, 0xbc, 0x9e, 0x6f, 0x7f, 0x0f,
	0x3b, 0x26, 0x14, 0x32, 0x5f, 0x96, 0x34, 0xfb, 0x39, 0x11, 0x05, 0xe1, 0xcc, 0xa7, 0x87, 0x93,
	0x05, 0xa7, 0x70, 0x86, 0xfb, 0x74, 0x5e, 0x87, 0x73, 0x05, 0xb2, 0x3c, 0xa9, 0x40, 0x4a, 0x7f,
	0x2e, 0x01, 0xb8, 0x61, 0x21, 0xc5, 0x41, 0x24, 0x00, 0x32, 0x7a, 0xef, 0x22, 0xdb, 0x81, 0xdb,
	0x23, 0x41, 0x7a, 0x98, 0x12, 0xa4, 0xa1, 0x27, 0xde, 0xc1, 0xe0, 0xf4, 0x40, 0x0a, 0x24, 0x52,
	0xfd, 0x48, 0x39, 0xd4, 0x54, 0xc5, 0x41, 0x0f, 0x24, 0x0b, 0xbd, 0x77, 0x35, 0x0b, 0xa9, 0x12,
	0x8b, 0xe5, 0x4f, 0x22, 0xa8, 0x50, 0x0f, 0x50, 0x61, 0xe8, 0x89, 0x15, 0x6a, 0x07, 0x8f, 0xa4,
	0x38, 0x48, 0xbc, 0x8a, 0x83, 0xc4, 0xcf, 0x13, 0x41, 0x62, 0xe8, 0x89, 0x12, 0xb5, 0xe2, 0x0b,
	0x92, 0x5f, 0x26, 0x80, 0x92, 0x97, 0x31, 0x28, 0xf9, 0x59, 0x82, 0xa7, 0x86, 0x9e, 0xf8, 0x25,
	0x35, 0x49, 0xc7, 0xc9, 0x16, 0x7d, 0xbc, 0xd9, 0x88, 0xe2, 0xcd, 0x6a, 0x88, 0x37, 0x43, 0x4f,
	0xac, 0x53, 0x2b, 0x64, 0x98, 0x62, 0x84, 0x62, 0xd2, 0x9b, 0x04, 0x4c, 0xfa, 0x26, 0x8a, 0x49,
	0x43, 0x4f, 0xfc, 0x3a, 0x30, 0x17, 0xc8, 0x92, 0x6d, 0x72, 0xe0, 0xf5, 0x6e, 0x14, 0xbc, 0x1e,
	0xa5, 0x82, 0xd7, 0xd0, 0x13, 0xbf, 0x62, 0xc7, 0x26, 0xa2, 0xe4, 0x0d, 0x18, 0xc8, 0x3d, 0x8d,
	0x81, 0x5c, 0x93, 0x81, 0x1c, 0x73, 0x22, 0x1d, 0xa7, 0x84, 0xc5, 0x47, 0xc2, 0xb7, 0x49, 0x48,
	0xf8, 0x6d, 0x0c, 0x09, 0x87, 0x9e, 0xf8, 0x43, 0x6a, 0x92, 0x13, 0x26, 0xdb, 0xe5, 0x31, 0xf3,
	0x4d, 0x02, 0x66, 0x7e, 0x13, 0xc5, 0x4c, 0xe6, 0x5c, 0x26, 0x4b, 0x71, 0x2e, 0x03, 0xd7, 0x17,
	0x23, 0xe0, 0xba, 0xce, 0x83, 0x2b, 0xbb, 0x26, 0x81, 0x24, 0xe5, 0x9a, 0x04, 0x18, 0x2c, 0x47,
	0x41, 0x71, 0x9a, 0x98, 0x6c, 0x8d, 0x03, 0xc5, 0xa1, 0x27, 0xc2, 0xe0, 0x26, 0x86, 0x42, 0x89,
	0x87, 0x4a, 0x79, 0x04, 0x2a, 0x67, 0x08, 0x54, 0xae, 0x8c, 0x42, 0xe5, 0xd0, 0x13, 0xbf, 0xa0,
	0xc6, 0xa2, 0x72, 0x29, 0x8e, 0xa1, 0xff, 0x12, 0xc0, 0x8d, 0x97, 0x26, 0xb2, 0xae, 0xb1, 0x82,
	0xec, 0x81, 0x69, 0x83, 0xee, 0xd8, 0xe5, 0x2a, 0x09, 0xb6, 0x19, 0x91, 0x0f, 0x3d, 0xf1, 0x2e,
	0xb5, 0xcb, 0x4b, 0x13, 0x6d, 0xb3, 0x6a, 0x53, 0xf1, 0x75, 0x5f, 0x61, 0xd5, 0x7f, 0x64, 0xc0,
	0xed, 0x8d, 0x7d, 0xd4, 0x3b, 0xe0, 0x2a, 0x24, 0xc1, 0x8f, 0xe0, 0x90, 0x6d, 0x5a, 0xfa, 0xe9,
	0xf9, 0xee, 0x45, 0x4b, 0xff, 0xd0, 0x13, 0x6b, 0xbe, 0x07, 0xd3, 0x4e, 0x44, 0xc0, 0x81, 0xd5,
	0xa0, 0xcc, 0xe5, 0xd4, 0x20, 0xde, 0xf3, 0xd9, 0xcb, 0xf5, 0xfc, 0x63, 0x0e, 0x87, 0x69, 0xc5,
	0x5c, 0x4e, 0xc1, 0xe1, 0xa1, 0x27, 0xce, 0x51, 0xd3, 0x81, 0x44, 0x0a, 0xa1, 0x59, 0xfa, 0x93,
	0x00, 0x2a, 0x32, 0x32, 0x91, 0xe2, 0x84, 0x2d, 0x41, 0x08, 0xd5, 0xc2, 0x79, 0xa0, 0x3a, 0x73,
	0x4a, 0xa8, 0x66, 0x40, 0x9c, 0x9d, 0x08, 0xc4, 0xd2, 0x5f, 0x32, 0xe0, 0x07, 0x29, 0xd1, 0xb7,
	0x71, 0xea, 0x23, 0xae, 0xab, 0x17, 0x52, 0xbb, 0xfa, 0xe5, 0x58, 0x78, 0xc7, 0xb1, 0x95, 0x58,
	0x23, 0x9c, 0xbd, 0x68, 0x23, 0x9c, 0x3b, 0x65, 0x23, 0x0c, 0xb7, 0xc1, 0xb4, 0x45, 0xe2, 0xd1,
	0x25, 0xee, 0x25, 0xe8, 0x55, 0x69, 0x7d, 0xd5, 0x48, 0xa1, 0x91, 0x0d, 0x2e, 0x78, 0xed, 0x79,
	0x7c, 0xef, 0xf8, 0xd5, 0x72, 0xc5, 0x62, 0xd3, 0xd2, 0xdf, 0x73, 0xe0, 0x66, 0xda, 0xf5, 0xb9,
	0xc2, 0x1a, 0xb1, 0xcd, 0xa5, 0x54, 0x86, 0x99, 0x4e, 0x48, 0x29, 0x66, 0x3a, 0x90, 0xa4, 0x98,
	0x0e, 0x32, 0x8f, 0xbf, 0x04, 0xd9, 0x73, 0x5f, 0x82, 0xa0, 0x76, 0xe4, 0x2e, 0x52, 0x3b, 0x0e,
	0xc0, 0x34, 0xf5, 0x87, 0x9f, 0x31, 0xb4, 0xeb, 0xe8, 0x0c, 0x3c, 0x91, 0x76, 0xdc, 0x41, 0xca,
	0x44, 0xb4, 0x58, 0x5d, 0xe4, 0xa5, 0x29, 0xc8, 0x49, 0x54, 0xb6, 0x82, 0xde, 0x86, 0x36, 0xa6,
	0x05, 0xd6, 0xdb, 0xf4, 0x7c, 0x6c, 0xf3, 0x7b, 0x9b, 0x5e, 0x3a, 0xb0, 0xf9, 0xcd, 0xeb, 0x43,
	0x50, 0x36, 0x95, 0xe3, 0xae, 0x6e, 0xf4, 0xd1, 0xb1, 0xdf, 0x83, 0x7c, 0x89, 0xaf, 0x6d, 0x28,
	0x1c, 0x7a, 0xe2, 0xbc, 0xff, 0x76, 0x81, 0x48, 0x92, 0x4b, 0xa6, 0x72, 0xfc, 0x9c, 0x3c, 0xae,
	0x80, 0xd9, 0x0d, 0x43, 0xd7, 0x8d, 0x7e, 0x78, 0x09, 0x6f, 0x81, 0xac, 0x85, 0x6c, 0x3f, 0x7f,
	0x8a, 0xd8, 0x81, 0x16, 0xb2, 0x65, 0xfc, 0x47, 0x52, 0x41, 0x90, 0x4b, 0x57, 0x98, 0x6a, 0x78,
	0x17, 0x3f, 0xad, 0x22, 0x59, 0x27, 0x5c, 0x6a, 0xd6, 0xe1, 0x5d, 0xfc, 0x0c, 0xc3, 0xbb, 0x84,
	0x09, 0xc8, 0xed, 0x92, 0x9c, 0x80, 0x77, 0x62, 0x09, 0x98, 0xbc, 0x4b, 0x50, 0x99, 0x5d, 0x50,
	0x7d, 0x8a, 0x1c, 0xc6, 0x89, 0x3b, 0xfd, 0x5d, 0x1e, 0xd1, 0xaf, 0xea, 0x70, 0xbf, 0xcf, 0x82,
	0x5b, 0x09, 0xfb, 0xfa, 0x11, 0x3e, 0x0f, 0x63, 0x8c, 0x7c, 0xa8, 0xc9, 0x9c, 0xe7, 0x43, 0x4d,
	0x36, 0xb5, 0xa4, 0xb7, 0x46, 0x50, 0x70, 0x32, 0x1b, 0x8d, 0x31, 0xfa, 0xfc, 0x64, 0x46, 0x7f,
	0x16, 0x92, 0xce, 0x70, 0xad, 0x78, 0x06, 0x82, 0x59, 0x4a, 0x26, 0x98, 0xd2, 0x27, 0x01, 0x40,
	0x02, 0x7c, 0x1d, 0xdb, 0x76, 0xd1, 0x85, 0xc2, 0x70, 0x1e, 0xe2, 0x8e, 0x3b, 0x5f, 0x45, 0x53,
	0x29, 0x98, 0x60, 0xa4, 0xce, 0x2e, 0x55, 0x5a, 0xf5, 0x54, 0x2c, 0xf2, 0xf3, 0x8f, 0x3a, 0x93,
	0x5b, 0x28, 0x03, 0x3c, 0x20, 0xb3, 0xb6, 0xf4, 0x37, 0x01, 0xc0, 0x27, 0x5a, 0x5f, 0xb3, 0xf7,
	0xfd, 0x33, 0x5d, 0x07, 0x00, 0xc5, 0x4e, 0x7e, 0x69, 0x97, 0xf4, 0xaf, 0x02, 0x80, 0xc4, 0xce,
	0x13, 0x45, 0x3b, 0x44, 0x2a, 0x77, 0x98, 0x2b, 0x2a, 0x0b, 0x98, 0x34, 0xf5, 0x94, 0x7e, 0x0f,
	0x1d, 0x76, 0xfb, 0xae, 0xee, 0x1f, 0x87, 0x90, 0x26, 0x26, 0x65, 0xa4, 0x89, 0xc9, 0x52, 0x48,
	0x13, 0x55, 0x78, 0xe1, 0xea, 0xd2, 0xbf, 0x73, 0x60, 0xfe, 0xb1, 0xaa, 0x39, 0xd7, 0xc5, 0x1c,
	0xd6, 0xc3, 0xdb, 0x4d, 0xcf, 0xf0, 0xfd, 0x08, 0x43, 0x9d, 0x89, 0x30, 0xd4, 0xf0, 0xba, 0xb7,
	0x23, 0x74, 0x9c, 0x96, 0x85, 0x3b, 0x23, 0x74, 0x7c, 0x61, 0x84, 0x8e, 0xf3, 0xd4, 0xbb, 0x1d,
	0x61, 0x9d, 0x39, 0x66, 0x23, 0xc2, 0x3a, 0x17, 0x46, 0x58, 0x27, 0xcf, 0x30, 0x1f, 0x70, 0x0c,
	0x93, 0xd6, 0x0f, 0x31, 0xc6, 0x30, 0xe7, 0x62, 0x0c, 0x33, 0x95, 0x4d, 0x16, 0xae, 0x86, 0x4d,
	0x16, 0x2f, 0xca, 0x26, 0xe1, 0xaf, 0xf8, 0xb2, 0x4d, 0xeb, 0xd3, 0xea, 0xb8, 0x4f, 0x14, 0xf3,
	0xf1, 0x4f, 0x14, 0xac, 0x94, 0xb7, 0xfe, 0x08, 0x40, 0x79, 0x33, 0xf8, 0xc7, 0x08, 0x7c, 0x07,
	0x2a, 0x5c, 0x1b, 0x0a, 0x57, 0x52, 0xeb, 0xc9, 0xe8, 0xd7, 0xb0, 0xc5, 0xf4, 0xe2, 0xe3, 0x27,
	0xa5, 0x34, 0x85, 0xf9, 0x7f, 0x80, 0x60, 0x70, 0xa2, 0xfe, 0x62, 0x6d, 0xbc, 0x86, 0x34, 0x85,
	0x49, 0x2e, 0x4f, 0xab, 0xe1, 0x8f, 0xd3, 0x0b, 0xe0, 0x28, 0xfb, 0x5e, 0xbc, 0x9b, 0x7e, 0xbc,
	0x48, 0xf7, 0x24, 0x4d, 0x41, 0x05, 0x94, 0xc3, 0x2b, 0x08, 0x7f, 0x94, 0xba, 0x2e, 0x7e, 0x4d,
	0xcf, 0xb2, 0xc5, 0x6f, 0xc0, 0xc2, 0x08, 0xba, 0xc3, 0xb5, 0xd4, 0xf5, 0x69, 0x1d, 0xc8, 0x62,
	0xeb, 0x2c, 0x4b, 0xc2, 0xdd, 0xdf, 0x81, 0x0a, 0x57, 0x2d, 0xc7, 0x44, 0x7e, 0xb4, 0xa6, 0x8e,
	0x89, 0xbc, 0x5f, 0x56, 0xa5, 0x29, 0xf8, 0x3b, 0x01, 0x2c, 0x70, 0x3c, 0x71, 0x8b, 0xa2, 0xec,
	0x4f, 0xd3, 0xdd, 0x33, 0xe6, 0x8b, 0xc2, 0xe2, 0xfd, 0xb3, 0x2e, 0x0b, 0x8f, 0xb9, 0x0f, 0xe6,
	0xe3, 0xb3, 0xf0, 0xde, 0x69, 0xb2, 0x3c, 0xb2, 0xff, 0x44, 0x9c, 0x95, 0xa6, 0xe0, 0x1b, 0x30,
	0x4b, 0x16, 0x6e, 0x2a, 0xc7, 0x2f, 0x0c, 0x47, 0xdb, 0x3d, 0x86, 0x13, 0x57, 0x9d, 0xca, 0xee,
	0x16, 0xa8, 0x6c, 0x10, 0x68, 0xa0, 0x2f, 0x7f, 0x39, 0x46, 0x7f, 0x0d, 0x00, 0xeb, 0x65, 0x4e,
	0x61, 0x73, 0x65, 0x7c, 0x00, 0x22, 0x2d, 0x11, 0x4d, 0x2e, 0xae, 0xaf, 0x18, 0x93, 0x5c, 0xa3,
	0xdd, 0xc7, 0xa9, 0x92, 0x6b, 0x1b, 0x2c, 0xf8, 0xb7, 0x6e, 0xd7, 0xed, 0xab, 0x97, 0xe9, 0xee,
	0xf6, 0xed, 0x8f, 0x9f, 0x6b, 0x53, 0xff, 0xfc, 0x5c, 0x9b, 0xfa, 0xed, 0xa0, 0x26, 0x7c, 0x1c,
	0xd4, 0x84, 0x4f, 0x83, 0x9a, 0xf0, 0xdf, 0x41, 0x4d, 0x78, 0x9b, 0x39, 0x5a, 0xdb, 0x29, 0x90,
	0xff, 0x00, 0xaf, 0x7f, 0x17, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x45, 0x0f, 0xe2, 0x8e, 0x1e, 0x00,
	0x00,
}
