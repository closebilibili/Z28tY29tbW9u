// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/openplatform/ticket-item/api/grpc/v1/place.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The response message containing the Place info
type PlaceInfo struct {
	// 状态
	ID int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 场地名
	Status int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status"`
	// 场地底图
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	// 场馆ID
	BasePic string `protobuf:"bytes,4,opt,name=base_pic,json=basePic,proto3" json:"base_pic"`
	// mis画框宽度
	DWidth int32 `protobuf:"varint,5,opt,name=d_width,json=dWidth,proto3" json:"d_width"`
	// mis画框高度
	DHeight int32 `protobuf:"varint,6,opt,name=d_height,json=dHeight,proto3" json:"d_height"`
}

func (m *PlaceInfo) Reset()                    { *m = PlaceInfo{} }
func (m *PlaceInfo) String() string            { return proto.CompactTextString(m) }
func (*PlaceInfo) ProtoMessage()               {}
func (*PlaceInfo) Descriptor() ([]byte, []int) { return fileDescriptorPlace, []int{0} }

// placeInfo接口请求
type PlaceInfoRequest struct {
	// 待修改场地的ID（为0表示创建）
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id" validate:"min=0"`
	// 状态
	Status int32 `protobuf:"varint,2,opt,name=Status,proto3" json:"status" validate:"min=0,max=1"`
	// 场地名
	Name string `protobuf:"bytes,3,opt,name=Name,proto3" json:"name" validate:"max=16"`
	// 场地底图
	BasePic string `protobuf:"bytes,4,opt,name=BasePic,proto3" json:"base_pic" validate:"max=128"`
	// 场馆ID
	Venue int64 `protobuf:"varint,5,opt,name=Venue,proto3" json:"venue" validate:"min=1"`
	// mis画框宽度
	DWidth int32 `protobuf:"varint,6,opt,name=DWidth,proto3" json:"d_width" validate:"min=0"`
	// mis画框高度
	DHeight int32 `protobuf:"varint,7,opt,name=DHeight,proto3" json:"d_height" validate:"min=0"`
}

func (m *PlaceInfoRequest) Reset()                    { *m = PlaceInfoRequest{} }
func (m *PlaceInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*PlaceInfoRequest) ProtoMessage()               {}
func (*PlaceInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorPlace, []int{1} }

// placeInfo接口返回
type PlaceInfoReply struct {
	// 操作结果
	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"success"`
	// 操作场地ID
	ID int64 `protobuf:"varint,2,opt,name=ID,proto3" json:"id"`
}

func (m *PlaceInfoReply) Reset()                    { *m = PlaceInfoReply{} }
func (m *PlaceInfoReply) String() string            { return proto.CompactTextString(m) }
func (*PlaceInfoReply) ProtoMessage()               {}
func (*PlaceInfoReply) Descriptor() ([]byte, []int) { return fileDescriptorPlace, []int{2} }

func init() {
	proto.RegisterType((*PlaceInfo)(nil), "ticket.service.item.v1.PlaceInfo")
	proto.RegisterType((*PlaceInfoRequest)(nil), "ticket.service.item.v1.PlaceInfoRequest")
	proto.RegisterType((*PlaceInfoReply)(nil), "ticket.service.item.v1.PlaceInfoReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Place service

type PlaceClient interface {
	PlaceInfo(ctx context.Context, in *PlaceInfoRequest, opts ...grpc.CallOption) (*PlaceInfoReply, error)
}

type placeClient struct {
	cc *grpc.ClientConn
}

func NewPlaceClient(cc *grpc.ClientConn) PlaceClient {
	return &placeClient{cc}
}

func (c *placeClient) PlaceInfo(ctx context.Context, in *PlaceInfoRequest, opts ...grpc.CallOption) (*PlaceInfoReply, error) {
	out := new(PlaceInfoReply)
	err := grpc.Invoke(ctx, "/ticket.service.item.v1.Place/PlaceInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Place service

type PlaceServer interface {
	PlaceInfo(context.Context, *PlaceInfoRequest) (*PlaceInfoReply, error)
}

func RegisterPlaceServer(s *grpc.Server, srv PlaceServer) {
	s.RegisterService(&_Place_serviceDesc, srv)
}

func _Place_PlaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServer).PlaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.service.item.v1.Place/PlaceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServer).PlaceInfo(ctx, req.(*PlaceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Place_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.service.item.v1.Place",
	HandlerType: (*PlaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceInfo",
			Handler:    _Place_PlaceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/openplatform/ticket-item/api/grpc/v1/place.proto",
}

func (m *PlaceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPlace(dAtA, i, uint64(m.ID))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPlace(dAtA, i, uint64(m.Status))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPlace(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.BasePic) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPlace(dAtA, i, uint64(len(m.BasePic)))
		i += copy(dAtA[i:], m.BasePic)
	}
	if m.DWidth != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPlace(dAtA, i, uint64(m.DWidth))
	}
	if m.DHeight != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPlace(dAtA, i, uint64(m.DHeight))
	}
	return i, nil
}

func (m *PlaceInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaceInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPlace(dAtA, i, uint64(m.ID))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPlace(dAtA, i, uint64(m.Status))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPlace(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.BasePic) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPlace(dAtA, i, uint64(len(m.BasePic)))
		i += copy(dAtA[i:], m.BasePic)
	}
	if m.Venue != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPlace(dAtA, i, uint64(m.Venue))
	}
	if m.DWidth != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPlace(dAtA, i, uint64(m.DWidth))
	}
	if m.DHeight != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPlace(dAtA, i, uint64(m.DHeight))
	}
	return i, nil
}

func (m *PlaceInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaceInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPlace(dAtA, i, uint64(m.ID))
	}
	return i, nil
}

func encodeVarintPlace(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PlaceInfo) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPlace(uint64(m.ID))
	}
	if m.Status != 0 {
		n += 1 + sovPlace(uint64(m.Status))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlace(uint64(l))
	}
	l = len(m.BasePic)
	if l > 0 {
		n += 1 + l + sovPlace(uint64(l))
	}
	if m.DWidth != 0 {
		n += 1 + sovPlace(uint64(m.DWidth))
	}
	if m.DHeight != 0 {
		n += 1 + sovPlace(uint64(m.DHeight))
	}
	return n
}

func (m *PlaceInfoRequest) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPlace(uint64(m.ID))
	}
	if m.Status != 0 {
		n += 1 + sovPlace(uint64(m.Status))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlace(uint64(l))
	}
	l = len(m.BasePic)
	if l > 0 {
		n += 1 + l + sovPlace(uint64(l))
	}
	if m.Venue != 0 {
		n += 1 + sovPlace(uint64(m.Venue))
	}
	if m.DWidth != 0 {
		n += 1 + sovPlace(uint64(m.DWidth))
	}
	if m.DHeight != 0 {
		n += 1 + sovPlace(uint64(m.DHeight))
	}
	return n
}

func (m *PlaceInfoReply) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.ID != 0 {
		n += 1 + sovPlace(uint64(m.ID))
	}
	return n
}

func sovPlace(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPlace(x uint64) (n int) {
	return sovPlace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlaceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasePic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DWidth", wireType)
			}
			m.DWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DWidth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DHeight", wireType)
			}
			m.DHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DHeight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaceInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaceInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaceInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasePic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Venue", wireType)
			}
			m.Venue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Venue |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DWidth", wireType)
			}
			m.DWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DWidth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DHeight", wireType)
			}
			m.DHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DHeight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaceInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaceInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaceInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPlace
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPlace
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPlace(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPlace = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlace   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/openplatform/ticket-item/api/grpc/v1/place.proto", fileDescriptorPlace)
}

var fileDescriptorPlace = []byte{
	// 560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x41, 0x6f, 0xd3, 0x3e,
	0x1c, 0x6d, 0xd2, 0x36, 0xe9, 0xfc, 0x9f, 0xfe, 0x1a, 0x3e, 0x54, 0x51, 0x35, 0xea, 0xca, 0x1a,
	0x50, 0x21, 0x96, 0x90, 0x4d, 0x02, 0x34, 0x75, 0x97, 0x2a, 0x07, 0x7a, 0x81, 0xc9, 0x93, 0x40,
	0xe2, 0x52, 0xa5, 0x89, 0xdb, 0x5a, 0x34, 0x8d, 0x69, 0x9c, 0xc0, 0x3e, 0x09, 0x5f, 0x69, 0xc7,
	0x7d, 0x82, 0x88, 0x95, 0x5b, 0x8f, 0xfd, 0x04, 0x28, 0x4e, 0xb2, 0x45, 0xa5, 0x07, 0x2e, 0xb1,
	0xfd, 0xcb, 0x7b, 0xcf, 0x7a, 0xef, 0xf7, 0x33, 0x18, 0xb8, 0x9c, 0x5b, 0x11, 0x5d, 0x25, 0xcc,
	0xa3, 0x56, 0xc8, 0xe9, 0x92, 0x2f, 0x5c, 0x31, 0x0d, 0x57, 0x81, 0x25, 0x98, 0xf7, 0x95, 0x8a,
	0x53, 0x26, 0x68, 0x60, 0xb9, 0x9c, 0x59, 0xb3, 0x15, 0xf7, 0xac, 0xc4, 0xb6, 0xf8, 0xc2, 0xf5,
	0xa8, 0xc9, 0x57, 0xa1, 0x08, 0x61, 0x3b, 0x07, 0x99, 0x85, 0x80, 0x99, 0x81, 0xcd, 0xc4, 0xee,
	0x9c, 0xce, 0x98, 0x98, 0xc7, 0x13, 0xd3, 0x0b, 0x03, 0x6b, 0x16, 0xce, 0x42, 0x4b, 0xc2, 0x27,
	0xf1, 0x54, 0x9e, 0xe4, 0x41, 0xee, 0x72, 0x19, 0xfc, 0x5b, 0x01, 0x07, 0x57, 0x99, 0xec, 0x68,
	0x39, 0x0d, 0xe1, 0x31, 0x50, 0x99, 0x6f, 0x28, 0x3d, 0xa5, 0x5f, 0x1f, 0x1e, 0xae, 0x53, 0xa4,
	0x8e, 0x9c, 0x4d, 0x8a, 0x54, 0xe6, 0x13, 0x95, 0xf9, 0x10, 0x03, 0x2d, 0x12, 0xae, 0x88, 0x23,
	0x43, 0xed, 0x29, 0xfd, 0xe6, 0x10, 0x6c, 0x52, 0x54, 0x54, 0x48, 0xb1, 0xc2, 0x63, 0xd0, 0x58,
	0xba, 0x01, 0x35, 0xea, 0x3d, 0xa5, 0x7f, 0x30, 0x6c, 0x6d, 0x52, 0x24, 0xcf, 0x44, 0x7e, 0xe1,
	0x0b, 0xd0, 0x9a, 0xb8, 0x11, 0x1d, 0x73, 0xe6, 0x19, 0x0d, 0x89, 0x38, 0xdc, 0xa4, 0xe8, 0xa1,
	0x46, 0xf4, 0x6c, 0x77, 0xc5, 0x3c, 0x78, 0x02, 0x74, 0x7f, 0xfc, 0x9d, 0xf9, 0x62, 0x6e, 0x34,
	0xe5, 0x5d, 0xff, 0x6d, 0x52, 0x54, 0x96, 0x88, 0xe6, 0x7f, 0xce, 0xd6, 0x4c, 0xce, 0x1f, 0xcf,
	0x29, 0x9b, 0xcd, 0x85, 0xa1, 0x49, 0x98, 0x94, 0x2b, 0x6b, 0x44, 0xf7, 0xdf, 0xcb, 0x0d, 0xfe,
	0x59, 0x07, 0x47, 0x0f, 0x2e, 0x09, 0xfd, 0x16, 0xd3, 0x48, 0xc0, 0x97, 0x40, 0x1d, 0x39, 0x85,
	0xd9, 0x4e, 0x6e, 0x73, 0x9b, 0xa2, 0xa3, 0xc4, 0x5d, 0x30, 0xdf, 0x15, 0xf4, 0x02, 0x07, 0x6c,
	0x79, 0xf9, 0x1a, 0x13, 0x75, 0xe4, 0xc0, 0x01, 0xd0, 0xae, 0xab, 0xd6, 0x4f, 0x1e, 0xad, 0x6f,
	0x53, 0xd4, 0xde, 0xe1, 0xbc, 0x0a, 0xdc, 0x1f, 0x97, 0x36, 0x26, 0x05, 0x07, 0xda, 0xa0, 0xf1,
	0xe1, 0x31, 0x94, 0xa7, 0x65, 0x28, 0xdb, 0x14, 0x3d, 0xa9, 0x30, 0x33, 0xce, 0x1b, 0x4c, 0x24,
	0x14, 0x0e, 0x80, 0x3e, 0xcc, 0xb3, 0x28, 0x82, 0xc2, 0xd5, 0xa0, 0xb6, 0x29, 0x82, 0x3b, 0xcc,
	0xb3, 0x77, 0x98, 0x94, 0x14, 0x78, 0x0e, 0x9a, 0x9f, 0xe8, 0x32, 0xa6, 0x32, 0xbc, 0xba, 0xbc,
	0xb1, 0x99, 0x64, 0x85, 0xbf, 0x0d, 0xda, 0x98, 0xe4, 0x58, 0xf8, 0x16, 0x68, 0x8e, 0xcc, 0xb5,
	0xc8, 0x12, 0x55, 0x22, 0xdf, 0x1b, 0x4c, 0x01, 0x87, 0x17, 0x40, 0x77, 0xf2, 0xa0, 0x0d, 0x5d,
	0x32, 0x7b, 0xd5, 0x2e, 0xec, 0xa5, 0x96, 0x04, 0xfc, 0x11, 0xfc, 0x5f, 0x69, 0x0c, 0x5f, 0xdc,
	0xc0, 0x67, 0x40, 0xbf, 0x8e, 0x3d, 0x8f, 0x46, 0x91, 0xec, 0x4d, 0x2b, 0x6f, 0x7d, 0x94, 0x97,
	0x48, 0xf9, 0x0f, 0xb6, 0x65, 0xf7, 0x54, 0xe9, 0x4f, 0x2b, 0x87, 0x74, 0xe4, 0x9c, 0xcd, 0x41,
	0x53, 0x0a, 0xc2, 0x71, 0x75, 0xb0, 0xfb, 0xe6, 0xfe, 0xe7, 0x62, 0xee, 0x4e, 0x45, 0xe7, 0xf9,
	0x3f, 0x20, 0xf9, 0xe2, 0x06, 0xd7, 0x86, 0xc6, 0xed, 0x7d, 0xb7, 0x76, 0x77, 0xdf, 0xad, 0xdd,
	0xae, 0xbb, 0xca, 0xdd, 0xba, 0xab, 0xfc, 0x5a, 0x77, 0x95, 0x2f, 0x6a, 0x62, 0x4f, 0x34, 0xf9,
	0xb6, 0xce, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x92, 0x2d, 0x3c, 0x4a, 0xe2, 0x03, 0x00, 0x00,
}
