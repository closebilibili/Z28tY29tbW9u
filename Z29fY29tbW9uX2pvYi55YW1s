branch-protection: {}
build-status:
  db:
    active: 0
    idle: 0
    idleTimeout: 0
    ip: ""
    name: ""
    password: ""
    port: ""
    username: ""
deck:
  host: localhost:8080
  spyglass:
    size_limit: 100000000
gerrit:
  ratelimit: 5
hdfs: {}
log_level: info
owners_dir_blacklist:
  default: null
  repos: null
plank:
  max_goroutines: 20
pod_namespace: default
presubmits:
  platform/go-common:
  - agent: kubernetes
    always_run: true
    cluster: default
    context: go_common_make_update
    name: go_common_make_update
    namespace: default
    rerun_command: /test go_common_make_update
    run_after_success:
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-ep-melloi-bazel-build
      name: admin-ep-melloi-bazel-build
      namespace: default
      rerun_command: +test admin-ep-melloi-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/ep/melloi
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-ep-melloi
          resources: {}
      trigger: (?m)^\+test( | .* )admin-ep-melloi-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/ep/melloi
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-ep-melloi-bazel-test
      name: admin-ep-melloi-bazel-test
      namespace: default
      rerun_command: +test admin-ep-melloi-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/ep/melloi
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-ep-melloi
          resources: {}
      trigger: (?m)^\+test( | .* )admin-ep-melloi-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/ep/melloi
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-ep-melloi-lint
      name: admin-ep-melloi-lint
      namespace: default
      rerun_command: +test admin-ep-melloi-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/ep/melloi/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-ep-melloi
          resources: {}
      trigger: (?m)^\+test( | .* )admin-ep-melloi-lint,?($|\s.*)
      trusted_labels:
      - admin/ep/melloi
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-ep-merlin-bazel-build
      name: admin-ep-merlin-bazel-build
      namespace: default
      rerun_command: +test admin-ep-merlin-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/ep/merlin
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-ep-merlin
          resources: {}
      trigger: (?m)^\+test( | .* )admin-ep-merlin-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/ep/merlin
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-ep-merlin-bazel-test
      name: admin-ep-merlin-bazel-test
      namespace: default
      rerun_command: +test admin-ep-merlin-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/ep/merlin
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-ep-merlin
          resources: {}
      trigger: (?m)^\+test( | .* )admin-ep-merlin-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/ep/merlin
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-ep-merlin-lint
      name: admin-ep-merlin-lint
      namespace: default
      rerun_command: +test admin-ep-merlin-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/ep/merlin/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-ep-merlin
          resources: {}
      trigger: (?m)^\+test( | .* )admin-ep-merlin-lint,?($|\s.*)
      trusted_labels:
      - admin/ep/merlin
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-ep-saga-bazel-build
      name: admin-ep-saga-bazel-build
      namespace: default
      rerun_command: +test admin-ep-saga-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/ep/saga
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-ep-saga
          resources: {}
      trigger: (?m)^\+test( | .* )admin-ep-saga-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/ep/saga
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-ep-saga-bazel-test
      name: admin-ep-saga-bazel-test
      namespace: default
      rerun_command: +test admin-ep-saga-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/ep/saga
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-ep-saga
          resources: {}
      trigger: (?m)^\+test( | .* )admin-ep-saga-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/ep/saga
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-ep-saga-lint
      name: admin-ep-saga-lint
      namespace: default
      rerun_command: +test admin-ep-saga-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/ep/saga/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-ep-saga
          resources: {}
      trigger: (?m)^\+test( | .* )admin-ep-saga-lint,?($|\s.*)
      trusted_labels:
      - admin/ep/saga
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-ep-tapd-bazel-build
      name: admin-ep-tapd-bazel-build
      namespace: default
      rerun_command: +test admin-ep-tapd-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/ep/tapd
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-ep-tapd
          resources: {}
      trigger: (?m)^\+test( | .* )admin-ep-tapd-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/ep/tapd
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-ep-tapd-bazel-test
      name: admin-ep-tapd-bazel-test
      namespace: default
      rerun_command: +test admin-ep-tapd-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/ep/tapd
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-ep-tapd
          resources: {}
      trigger: (?m)^\+test( | .* )admin-ep-tapd-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/ep/tapd
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-ep-tapd-lint
      name: admin-ep-tapd-lint
      namespace: default
      rerun_command: +test admin-ep-tapd-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/ep/tapd/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-ep-tapd
          resources: {}
      trigger: (?m)^\+test( | .* )admin-ep-tapd-lint,?($|\s.*)
      trusted_labels:
      - admin/ep/tapd
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-live-live-admin-bazel-build
      name: admin-live-live-admin-bazel-build
      namespace: default
      rerun_command: +test admin-live-live-admin-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/live/live-admin
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-live-live-admin
          resources: {}
      trigger: (?m)^\+test( | .* )admin-live-live-admin-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/live/live-admin
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-live-live-admin-bazel-test
      name: admin-live-live-admin-bazel-test
      namespace: default
      rerun_command: +test admin-live-live-admin-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/live/live-admin
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-live-live-admin
          resources: {}
      trigger: (?m)^\+test( | .* )admin-live-live-admin-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/live/live-admin
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-live-live-admin-lint
      name: admin-live-live-admin-lint
      namespace: default
      rerun_command: +test admin-live-live-admin-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/live/live-admin/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-live-live-admin
          resources: {}
      trigger: (?m)^\+test( | .* )admin-live-live-admin-lint,?($|\s.*)
      trusted_labels:
      - admin/live/live-admin
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-activity-bazel-build
      name: admin-main-activity-bazel-build
      namespace: default
      rerun_command: +test admin-main-activity-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/activity
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-activity
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-activity-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/activity
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-activity-bazel-test
      name: admin-main-activity-bazel-test
      namespace: default
      rerun_command: +test admin-main-activity-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/activity
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-activity
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-activity-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/activity
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-activity-lint
      name: admin-main-activity-lint
      namespace: default
      rerun_command: +test admin-main-activity-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/activity/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-activity
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-activity-lint,?($|\s.*)
      trusted_labels:
      - admin/main/activity
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-aegis-bazel-build
      name: admin-main-aegis-bazel-build
      namespace: default
      rerun_command: +test admin-main-aegis-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/aegis
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-aegis
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-aegis-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/aegis
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-aegis-bazel-test
      name: admin-main-aegis-bazel-test
      namespace: default
      rerun_command: +test admin-main-aegis-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/aegis
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-aegis
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-aegis-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/aegis
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-aegis-lint
      name: admin-main-aegis-lint
      namespace: default
      rerun_command: +test admin-main-aegis-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/aegis/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-aegis
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-aegis-lint,?($|\s.*)
      trusted_labels:
      - admin/main/aegis
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-answer-bazel-build
      name: admin-main-answer-bazel-build
      namespace: default
      rerun_command: +test admin-main-answer-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/answer
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-answer
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-answer-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/answer
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-answer-bazel-test
      name: admin-main-answer-bazel-test
      namespace: default
      rerun_command: +test admin-main-answer-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/answer
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-answer
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-answer-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/answer
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-answer-lint
      name: admin-main-answer-lint
      namespace: default
      rerun_command: +test admin-main-answer-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/answer/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-answer
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-answer-lint,?($|\s.*)
      trusted_labels:
      - admin/main/answer
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-apm-bazel-build
      name: admin-main-apm-bazel-build
      namespace: default
      rerun_command: +test admin-main-apm-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/apm
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-apm
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-apm-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/apm
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-apm-bazel-test
      name: admin-main-apm-bazel-test
      namespace: default
      rerun_command: +test admin-main-apm-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/apm
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-apm
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-apm-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/apm
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-apm-lint
      name: admin-main-apm-lint
      namespace: default
      rerun_command: +test admin-main-apm-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/apm/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-apm
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-apm-lint,?($|\s.*)
      trusted_labels:
      - admin/main/apm
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-app-bazel-build
      name: admin-main-app-bazel-build
      namespace: default
      rerun_command: +test admin-main-app-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/app
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-app
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-app-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/app
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-app-bazel-test
      name: admin-main-app-bazel-test
      namespace: default
      rerun_command: +test admin-main-app-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/app
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-app
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-app-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/app
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-app-lint
      name: admin-main-app-lint
      namespace: default
      rerun_command: +test admin-main-app-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/app/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-app
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-app-lint,?($|\s.*)
      trusted_labels:
      - admin/main/app
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-appstatic-bazel-build
      name: admin-main-appstatic-bazel-build
      namespace: default
      rerun_command: +test admin-main-appstatic-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/appstatic
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-appstatic
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-appstatic-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/appstatic
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-appstatic-bazel-test
      name: admin-main-appstatic-bazel-test
      namespace: default
      rerun_command: +test admin-main-appstatic-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/appstatic
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-appstatic
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-appstatic-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/appstatic
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-appstatic-lint
      name: admin-main-appstatic-lint
      namespace: default
      rerun_command: +test admin-main-appstatic-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/appstatic/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-appstatic
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-appstatic-lint,?($|\s.*)
      trusted_labels:
      - admin/main/appstatic
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-bfs-bazel-build
      name: admin-main-bfs-bazel-build
      namespace: default
      rerun_command: +test admin-main-bfs-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/bfs
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-bfs
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-bfs-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/bfs
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-bfs-bazel-test
      name: admin-main-bfs-bazel-test
      namespace: default
      rerun_command: +test admin-main-bfs-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/bfs
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-bfs
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-bfs-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/bfs
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-bfs-lint
      name: admin-main-bfs-lint
      namespace: default
      rerun_command: +test admin-main-bfs-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/bfs/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-bfs
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-bfs-lint,?($|\s.*)
      trusted_labels:
      - admin/main/bfs
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-block-bazel-build
      name: admin-main-block-bazel-build
      namespace: default
      rerun_command: +test admin-main-block-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/block
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-block
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-block-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/block
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-block-bazel-test
      name: admin-main-block-bazel-test
      namespace: default
      rerun_command: +test admin-main-block-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/block
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-block
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-block-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/block
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-block-lint
      name: admin-main-block-lint
      namespace: default
      rerun_command: +test admin-main-block-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/block/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-block
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-block-lint,?($|\s.*)
      trusted_labels:
      - admin/main/block
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-cache-bazel-build
      name: admin-main-cache-bazel-build
      namespace: default
      rerun_command: +test admin-main-cache-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/cache
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-cache
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-cache-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/cache
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-cache-bazel-test
      name: admin-main-cache-bazel-test
      namespace: default
      rerun_command: +test admin-main-cache-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/cache
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-cache
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-cache-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/cache
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-cache-lint
      name: admin-main-cache-lint
      namespace: default
      rerun_command: +test admin-main-cache-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/cache/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-cache
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-cache-lint,?($|\s.*)
      trusted_labels:
      - admin/main/cache
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-card-bazel-build
      name: admin-main-card-bazel-build
      namespace: default
      rerun_command: +test admin-main-card-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/card
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-card
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-card-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/card
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-card-bazel-test
      name: admin-main-card-bazel-test
      namespace: default
      rerun_command: +test admin-main-card-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/card
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-card
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-card-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/card
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-card-lint
      name: admin-main-card-lint
      namespace: default
      rerun_command: +test admin-main-card-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/card/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-card
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-card-lint,?($|\s.*)
      trusted_labels:
      - admin/main/card
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-config-bazel-build
      name: admin-main-config-bazel-build
      namespace: default
      rerun_command: +test admin-main-config-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/config
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-config
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-config-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/config
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-config-bazel-test
      name: admin-main-config-bazel-test
      namespace: default
      rerun_command: +test admin-main-config-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/config
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-config
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-config-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/config
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-config-lint
      name: admin-main-config-lint
      namespace: default
      rerun_command: +test admin-main-config-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/config/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-config
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-config-lint,?($|\s.*)
      trusted_labels:
      - admin/main/config
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-coupon-bazel-build
      name: admin-main-coupon-bazel-build
      namespace: default
      rerun_command: +test admin-main-coupon-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/coupon
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-coupon
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-coupon-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/coupon
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-coupon-bazel-test
      name: admin-main-coupon-bazel-test
      namespace: default
      rerun_command: +test admin-main-coupon-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/coupon
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-coupon
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-coupon-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/coupon
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-coupon-lint
      name: admin-main-coupon-lint
      namespace: default
      rerun_command: +test admin-main-coupon-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/coupon/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-coupon
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-coupon-lint,?($|\s.*)
      trusted_labels:
      - admin/main/coupon
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-creative-bazel-build
      name: admin-main-creative-bazel-build
      namespace: default
      rerun_command: +test admin-main-creative-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/creative
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-creative
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-creative-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/creative
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-creative-bazel-test
      name: admin-main-creative-bazel-test
      namespace: default
      rerun_command: +test admin-main-creative-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/creative
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-creative
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-creative-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/creative
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-creative-lint
      name: admin-main-creative-lint
      namespace: default
      rerun_command: +test admin-main-creative-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/creative/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-creative
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-creative-lint,?($|\s.*)
      trusted_labels:
      - admin/main/creative
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-credit-bazel-build
      name: admin-main-credit-bazel-build
      namespace: default
      rerun_command: +test admin-main-credit-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/credit
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-credit
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-credit-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/credit
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-credit-bazel-test
      name: admin-main-credit-bazel-test
      namespace: default
      rerun_command: +test admin-main-credit-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/credit
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-credit
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-credit-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/credit
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-credit-lint
      name: admin-main-credit-lint
      namespace: default
      rerun_command: +test admin-main-credit-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/credit/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-credit
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-credit-lint,?($|\s.*)
      trusted_labels:
      - admin/main/credit
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-dm-bazel-build
      name: admin-main-dm-bazel-build
      namespace: default
      rerun_command: +test admin-main-dm-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/dm
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-dm
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-dm-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/dm
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-dm-bazel-test
      name: admin-main-dm-bazel-test
      namespace: default
      rerun_command: +test admin-main-dm-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/dm
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-dm
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-dm-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/dm
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-dm-lint
      name: admin-main-dm-lint
      namespace: default
      rerun_command: +test admin-main-dm-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/dm/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-dm
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-dm-lint,?($|\s.*)
      trusted_labels:
      - admin/main/dm
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-esports-bazel-build
      name: admin-main-esports-bazel-build
      namespace: default
      rerun_command: +test admin-main-esports-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/esports
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-esports
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-esports-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/esports
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-esports-bazel-test
      name: admin-main-esports-bazel-test
      namespace: default
      rerun_command: +test admin-main-esports-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/esports
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-esports
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-esports-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/esports
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-esports-lint
      name: admin-main-esports-lint
      namespace: default
      rerun_command: +test admin-main-esports-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/esports/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-esports
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-esports-lint,?($|\s.*)
      trusted_labels:
      - admin/main/esports
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-feed-bazel-build
      name: admin-main-feed-bazel-build
      namespace: default
      rerun_command: +test admin-main-feed-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/feed
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-feed
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-feed-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/feed
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-feed-bazel-test
      name: admin-main-feed-bazel-test
      namespace: default
      rerun_command: +test admin-main-feed-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/feed
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-feed
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-feed-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/feed
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-feed-lint
      name: admin-main-feed-lint
      namespace: default
      rerun_command: +test admin-main-feed-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/feed/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-feed
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-feed-lint,?($|\s.*)
      trusted_labels:
      - admin/main/feed
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-filter-bazel-build
      name: admin-main-filter-bazel-build
      namespace: default
      rerun_command: +test admin-main-filter-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/filter
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-filter
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-filter-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/filter
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-filter-bazel-test
      name: admin-main-filter-bazel-test
      namespace: default
      rerun_command: +test admin-main-filter-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/filter
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-filter
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-filter-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/filter
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-filter-lint
      name: admin-main-filter-lint
      namespace: default
      rerun_command: +test admin-main-filter-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/filter/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-filter
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-filter-lint,?($|\s.*)
      trusted_labels:
      - admin/main/filter
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-growup-bazel-build
      name: admin-main-growup-bazel-build
      namespace: default
      rerun_command: +test admin-main-growup-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/growup
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-growup
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-growup-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/growup
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-growup-bazel-test
      name: admin-main-growup-bazel-test
      namespace: default
      rerun_command: +test admin-main-growup-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/growup
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-growup
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-growup-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/growup
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-growup-lint
      name: admin-main-growup-lint
      namespace: default
      rerun_command: +test admin-main-growup-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/growup/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-growup
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-growup-lint,?($|\s.*)
      trusted_labels:
      - admin/main/growup
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-laser-bazel-build
      name: admin-main-laser-bazel-build
      namespace: default
      rerun_command: +test admin-main-laser-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/laser
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-laser
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-laser-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/laser
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-laser-bazel-test
      name: admin-main-laser-bazel-test
      namespace: default
      rerun_command: +test admin-main-laser-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/laser
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-laser
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-laser-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/laser
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-laser-lint
      name: admin-main-laser-lint
      namespace: default
      rerun_command: +test admin-main-laser-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/laser/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-laser
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-laser-lint,?($|\s.*)
      trusted_labels:
      - admin/main/laser
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-macross-bazel-build
      name: admin-main-macross-bazel-build
      namespace: default
      rerun_command: +test admin-main-macross-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/macross
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-macross
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-macross-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/macross
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-macross-bazel-test
      name: admin-main-macross-bazel-test
      namespace: default
      rerun_command: +test admin-main-macross-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/macross
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-macross
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-macross-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/macross
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-macross-lint
      name: admin-main-macross-lint
      namespace: default
      rerun_command: +test admin-main-macross-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/macross/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-macross
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-macross-lint,?($|\s.*)
      trusted_labels:
      - admin/main/macross
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-manager-bazel-build
      name: admin-main-manager-bazel-build
      namespace: default
      rerun_command: +test admin-main-manager-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/manager
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-manager
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-manager-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/manager
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-manager-bazel-test
      name: admin-main-manager-bazel-test
      namespace: default
      rerun_command: +test admin-main-manager-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/manager
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-manager
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-manager-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/manager
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-manager-lint
      name: admin-main-manager-lint
      namespace: default
      rerun_command: +test admin-main-manager-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/manager/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-manager
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-manager-lint,?($|\s.*)
      trusted_labels:
      - admin/main/manager
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-mcn-bazel-build
      name: admin-main-mcn-bazel-build
      namespace: default
      rerun_command: +test admin-main-mcn-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/mcn
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-mcn
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-mcn-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/mcn
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-mcn-bazel-test
      name: admin-main-mcn-bazel-test
      namespace: default
      rerun_command: +test admin-main-mcn-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/mcn
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-mcn
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-mcn-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/mcn
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-mcn-lint
      name: admin-main-mcn-lint
      namespace: default
      rerun_command: +test admin-main-mcn-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/mcn/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-mcn
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-mcn-lint,?($|\s.*)
      trusted_labels:
      - admin/main/mcn
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-member-bazel-build
      name: admin-main-member-bazel-build
      namespace: default
      rerun_command: +test admin-main-member-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/member
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-member
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-member-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/member
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-member-bazel-test
      name: admin-main-member-bazel-test
      namespace: default
      rerun_command: +test admin-main-member-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/member
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-member
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-member-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/member
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-member-lint
      name: admin-main-member-lint
      namespace: default
      rerun_command: +test admin-main-member-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/member/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-member
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-member-lint,?($|\s.*)
      trusted_labels:
      - admin/main/member
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-open-bazel-build
      name: admin-main-open-bazel-build
      namespace: default
      rerun_command: +test admin-main-open-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/open
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-open
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-open-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/open
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-open-bazel-test
      name: admin-main-open-bazel-test
      namespace: default
      rerun_command: +test admin-main-open-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/open
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-open
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-open-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/open
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-open-lint
      name: admin-main-open-lint
      namespace: default
      rerun_command: +test admin-main-open-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/open/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-open
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-open-lint,?($|\s.*)
      trusted_labels:
      - admin/main/open
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-passport-bazel-build
      name: admin-main-passport-bazel-build
      namespace: default
      rerun_command: +test admin-main-passport-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/passport
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-passport
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-passport-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/passport
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-passport-bazel-test
      name: admin-main-passport-bazel-test
      namespace: default
      rerun_command: +test admin-main-passport-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/passport
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-passport
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-passport-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/passport
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-passport-lint
      name: admin-main-passport-lint
      namespace: default
      rerun_command: +test admin-main-passport-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/passport/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-passport
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-passport-lint,?($|\s.*)
      trusted_labels:
      - admin/main/passport
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-point-bazel-build
      name: admin-main-point-bazel-build
      namespace: default
      rerun_command: +test admin-main-point-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/point
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-point
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-point-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/point
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-point-bazel-test
      name: admin-main-point-bazel-test
      namespace: default
      rerun_command: +test admin-main-point-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/point
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-point
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-point-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/point
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-point-lint
      name: admin-main-point-lint
      namespace: default
      rerun_command: +test admin-main-point-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/point/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-point
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-point-lint,?($|\s.*)
      trusted_labels:
      - admin/main/point
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-push-bazel-build
      name: admin-main-push-bazel-build
      namespace: default
      rerun_command: +test admin-main-push-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/push
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-push
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-push-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/push
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-push-bazel-test
      name: admin-main-push-bazel-test
      namespace: default
      rerun_command: +test admin-main-push-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/push
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-push
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-push-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/push
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-push-lint
      name: admin-main-push-lint
      namespace: default
      rerun_command: +test admin-main-push-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/push/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-push
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-push-lint,?($|\s.*)
      trusted_labels:
      - admin/main/push
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-relation-bazel-build
      name: admin-main-relation-bazel-build
      namespace: default
      rerun_command: +test admin-main-relation-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/relation
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-relation
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-relation-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/relation
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-relation-bazel-test
      name: admin-main-relation-bazel-test
      namespace: default
      rerun_command: +test admin-main-relation-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/relation
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-relation
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-relation-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/relation
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-relation-lint
      name: admin-main-relation-lint
      namespace: default
      rerun_command: +test admin-main-relation-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/relation/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-relation
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-relation-lint,?($|\s.*)
      trusted_labels:
      - admin/main/relation
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-reply-bazel-build
      name: admin-main-reply-bazel-build
      namespace: default
      rerun_command: +test admin-main-reply-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/reply
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-reply
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-reply-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/reply
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-reply-bazel-test
      name: admin-main-reply-bazel-test
      namespace: default
      rerun_command: +test admin-main-reply-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/reply
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-reply
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-reply-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/reply
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-reply-lint
      name: admin-main-reply-lint
      namespace: default
      rerun_command: +test admin-main-reply-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/reply/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-reply
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-reply-lint,?($|\s.*)
      trusted_labels:
      - admin/main/reply
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-search-bazel-build
      name: admin-main-search-bazel-build
      namespace: default
      rerun_command: +test admin-main-search-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/search
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-search
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-search-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/search
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-search-bazel-test
      name: admin-main-search-bazel-test
      namespace: default
      rerun_command: +test admin-main-search-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/search
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-search
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-search-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/search
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-search-lint
      name: admin-main-search-lint
      namespace: default
      rerun_command: +test admin-main-search-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/search/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-search
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-search-lint,?($|\s.*)
      trusted_labels:
      - admin/main/search
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-sms-bazel-build
      name: admin-main-sms-bazel-build
      namespace: default
      rerun_command: +test admin-main-sms-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/sms
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-sms
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-sms-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/sms
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-sms-bazel-test
      name: admin-main-sms-bazel-test
      namespace: default
      rerun_command: +test admin-main-sms-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/sms
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-sms
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-sms-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/sms
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-sms-lint
      name: admin-main-sms-lint
      namespace: default
      rerun_command: +test admin-main-sms-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/sms/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-sms
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-sms-lint,?($|\s.*)
      trusted_labels:
      - admin/main/sms
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-space-bazel-build
      name: admin-main-space-bazel-build
      namespace: default
      rerun_command: +test admin-main-space-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/space
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-space
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-space-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/space
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-space-bazel-test
      name: admin-main-space-bazel-test
      namespace: default
      rerun_command: +test admin-main-space-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/space
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-space
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-space-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/space
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-space-lint
      name: admin-main-space-lint
      namespace: default
      rerun_command: +test admin-main-space-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/space/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-space
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-space-lint,?($|\s.*)
      trusted_labels:
      - admin/main/space
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-spy-bazel-build
      name: admin-main-spy-bazel-build
      namespace: default
      rerun_command: +test admin-main-spy-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/spy
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-spy
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-spy-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/spy
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-spy-bazel-test
      name: admin-main-spy-bazel-test
      namespace: default
      rerun_command: +test admin-main-spy-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/spy
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-spy
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-spy-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/spy
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-spy-lint
      name: admin-main-spy-lint
      namespace: default
      rerun_command: +test admin-main-spy-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/spy/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-spy
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-spy-lint,?($|\s.*)
      trusted_labels:
      - admin/main/spy
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-tag-bazel-build
      name: admin-main-tag-bazel-build
      namespace: default
      rerun_command: +test admin-main-tag-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/tag
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-tag
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-tag-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/tag
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-tag-bazel-test
      name: admin-main-tag-bazel-test
      namespace: default
      rerun_command: +test admin-main-tag-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/tag
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-tag
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-tag-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/tag
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-tag-lint
      name: admin-main-tag-lint
      namespace: default
      rerun_command: +test admin-main-tag-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/tag/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-tag
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-tag-lint,?($|\s.*)
      trusted_labels:
      - admin/main/tag
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-tv-bazel-build
      name: admin-main-tv-bazel-build
      namespace: default
      rerun_command: +test admin-main-tv-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/tv
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-tv
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-tv-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/tv
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-tv-bazel-test
      name: admin-main-tv-bazel-test
      namespace: default
      rerun_command: +test admin-main-tv-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/tv
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-tv
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-tv-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/tv
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-tv-lint
      name: admin-main-tv-lint
      namespace: default
      rerun_command: +test admin-main-tv-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/tv/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-tv
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-tv-lint,?($|\s.*)
      trusted_labels:
      - admin/main/tv
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-up-bazel-build
      name: admin-main-up-bazel-build
      namespace: default
      rerun_command: +test admin-main-up-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/up
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-up
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-up-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/up
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-up-bazel-test
      name: admin-main-up-bazel-test
      namespace: default
      rerun_command: +test admin-main-up-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/up
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-up
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-up-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/up
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-up-lint
      name: admin-main-up-lint
      namespace: default
      rerun_command: +test admin-main-up-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/up/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-up
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-up-lint,?($|\s.*)
      trusted_labels:
      - admin/main/up
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-up-rating-bazel-build
      name: admin-main-up-rating-bazel-build
      namespace: default
      rerun_command: +test admin-main-up-rating-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/up-rating
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-up-rating
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-up-rating-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/up-rating
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-up-rating-bazel-test
      name: admin-main-up-rating-bazel-test
      namespace: default
      rerun_command: +test admin-main-up-rating-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/up-rating
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-up-rating
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-up-rating-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/up-rating
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-up-rating-lint
      name: admin-main-up-rating-lint
      namespace: default
      rerun_command: +test admin-main-up-rating-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/up-rating/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-up-rating
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-up-rating-lint,?($|\s.*)
      trusted_labels:
      - admin/main/up-rating
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-upload-bazel-build
      name: admin-main-upload-bazel-build
      namespace: default
      rerun_command: +test admin-main-upload-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/upload
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-upload
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-upload-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/upload
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-upload-bazel-test
      name: admin-main-upload-bazel-test
      namespace: default
      rerun_command: +test admin-main-upload-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/upload
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-upload
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-upload-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/upload
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-upload-lint
      name: admin-main-upload-lint
      namespace: default
      rerun_command: +test admin-main-upload-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/upload/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-upload
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-upload-lint,?($|\s.*)
      trusted_labels:
      - admin/main/upload
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-usersuit-bazel-build
      name: admin-main-usersuit-bazel-build
      namespace: default
      rerun_command: +test admin-main-usersuit-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/usersuit
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-usersuit
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-usersuit-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/usersuit
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-usersuit-bazel-test
      name: admin-main-usersuit-bazel-test
      namespace: default
      rerun_command: +test admin-main-usersuit-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/usersuit
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-usersuit
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-usersuit-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/usersuit
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-usersuit-lint
      name: admin-main-usersuit-lint
      namespace: default
      rerun_command: +test admin-main-usersuit-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/usersuit/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-usersuit
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-usersuit-lint,?($|\s.*)
      trusted_labels:
      - admin/main/usersuit
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-videoup-bazel-build
      name: admin-main-videoup-bazel-build
      namespace: default
      rerun_command: +test admin-main-videoup-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/videoup
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-videoup
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-videoup-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/videoup
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-videoup-bazel-test
      name: admin-main-videoup-bazel-test
      namespace: default
      rerun_command: +test admin-main-videoup-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/videoup
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-videoup
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-videoup-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/videoup
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-videoup-lint
      name: admin-main-videoup-lint
      namespace: default
      rerun_command: +test admin-main-videoup-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/videoup/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-videoup
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-videoup-lint,?($|\s.*)
      trusted_labels:
      - admin/main/videoup
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-videoup-task-bazel-build
      name: admin-main-videoup-task-bazel-build
      namespace: default
      rerun_command: +test admin-main-videoup-task-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/videoup-task
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-videoup-task
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-videoup-task-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/videoup-task
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-videoup-task-bazel-test
      name: admin-main-videoup-task-bazel-test
      namespace: default
      rerun_command: +test admin-main-videoup-task-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/videoup-task
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-videoup-task
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-videoup-task-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/videoup-task
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-videoup-task-lint
      name: admin-main-videoup-task-lint
      namespace: default
      rerun_command: +test admin-main-videoup-task-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/videoup-task/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-videoup-task
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-videoup-task-lint,?($|\s.*)
      trusted_labels:
      - admin/main/videoup-task
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-vip-bazel-build
      name: admin-main-vip-bazel-build
      namespace: default
      rerun_command: +test admin-main-vip-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/vip
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-vip
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-vip-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/vip
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-vip-bazel-test
      name: admin-main-vip-bazel-test
      namespace: default
      rerun_command: +test admin-main-vip-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/vip
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-vip
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-vip-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/vip
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-vip-lint
      name: admin-main-vip-lint
      namespace: default
      rerun_command: +test admin-main-vip-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/vip/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-vip
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-vip-lint,?($|\s.*)
      trusted_labels:
      - admin/main/vip
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-workflow-bazel-build
      name: admin-main-workflow-bazel-build
      namespace: default
      rerun_command: +test admin-main-workflow-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/main/workflow
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-workflow
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-workflow-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/main/workflow
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-workflow-bazel-test
      name: admin-main-workflow-bazel-test
      namespace: default
      rerun_command: +test admin-main-workflow-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/main/workflow
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-main-workflow
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-workflow-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/main/workflow
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-main-workflow-lint
      name: admin-main-workflow-lint
      namespace: default
      rerun_command: +test admin-main-workflow-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/main/workflow/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-main-workflow
          resources: {}
      trigger: (?m)^\+test( | .* )admin-main-workflow-lint,?($|\s.*)
      trusted_labels:
      - admin/main/workflow
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-openplatform-sug-bazel-build
      name: admin-openplatform-sug-bazel-build
      namespace: default
      rerun_command: +test admin-openplatform-sug-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/admin/openplatform/sug
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-openplatform-sug
          resources: {}
      trigger: (?m)^\+test( | .* )admin-openplatform-sug-bazel-build,?($|\s.*)
      trusted_labels:
      - admin/openplatform/sug
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-openplatform-sug-bazel-test
      name: admin-openplatform-sug-bazel-test
      namespace: default
      rerun_command: +test admin-openplatform-sug-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/admin/openplatform/sug
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: admin-openplatform-sug
          resources: {}
      trigger: (?m)^\+test( | .* )admin-openplatform-sug-bazel-test,?($|\s.*)
      trusted_labels:
      - admin/openplatform/sug
    - agent: kubernetes
      always_run: true
      cluster: default
      context: admin-openplatform-sug-lint
      name: admin-openplatform-sug-lint
      namespace: default
      rerun_command: +test admin-openplatform-sug-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/admin/openplatform/sug/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: admin-openplatform-sug
          resources: {}
      trigger: (?m)^\+test( | .* )admin-openplatform-sug-lint,?($|\s.*)
      trusted_labels:
      - admin/openplatform/sug
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-bbq-bullet-bazel-build
      name: interface-bbq-bullet-bazel-build
      namespace: default
      rerun_command: +test interface-bbq-bullet-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/bbq/bullet
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-bbq-bullet
          resources: {}
      trigger: (?m)^\+test( | .* )interface-bbq-bullet-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/bbq/bullet
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-bbq-bullet-bazel-test
      name: interface-bbq-bullet-bazel-test
      namespace: default
      rerun_command: +test interface-bbq-bullet-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/bbq/bullet
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-bbq-bullet
          resources: {}
      trigger: (?m)^\+test( | .* )interface-bbq-bullet-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/bbq/bullet
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-bbq-bullet-lint
      name: interface-bbq-bullet-lint
      namespace: default
      rerun_command: +test interface-bbq-bullet-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/bbq/bullet/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-bbq-bullet
          resources: {}
      trigger: (?m)^\+test( | .* )interface-bbq-bullet-lint,?($|\s.*)
      trusted_labels:
      - interface/bbq/bullet
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-bbq-video-bazel-build
      name: interface-bbq-video-bazel-build
      namespace: default
      rerun_command: +test interface-bbq-video-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/bbq/video
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-bbq-video
          resources: {}
      trigger: (?m)^\+test( | .* )interface-bbq-video-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/bbq/video
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-bbq-video-bazel-test
      name: interface-bbq-video-bazel-test
      namespace: default
      rerun_command: +test interface-bbq-video-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/bbq/video
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-bbq-video
          resources: {}
      trigger: (?m)^\+test( | .* )interface-bbq-video-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/bbq/video
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-bbq-video-lint
      name: interface-bbq-video-lint
      namespace: default
      rerun_command: +test interface-bbq-video-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/bbq/video/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-bbq-video
          resources: {}
      trigger: (?m)^\+test( | .* )interface-bbq-video-lint,?($|\s.*)
      trusted_labels:
      - interface/bbq/video
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-bbq-wechat-bazel-build
      name: interface-bbq-wechat-bazel-build
      namespace: default
      rerun_command: +test interface-bbq-wechat-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/bbq/wechat
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-bbq-wechat
          resources: {}
      trigger: (?m)^\+test( | .* )interface-bbq-wechat-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/bbq/wechat
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-bbq-wechat-bazel-test
      name: interface-bbq-wechat-bazel-test
      namespace: default
      rerun_command: +test interface-bbq-wechat-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/bbq/wechat
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-bbq-wechat
          resources: {}
      trigger: (?m)^\+test( | .* )interface-bbq-wechat-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/bbq/wechat
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-bbq-wechat-lint
      name: interface-bbq-wechat-lint
      namespace: default
      rerun_command: +test interface-bbq-wechat-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/bbq/wechat/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-bbq-wechat
          resources: {}
      trigger: (?m)^\+test( | .* )interface-bbq-wechat-lint,?($|\s.*)
      trusted_labels:
      - interface/bbq/wechat
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-app-blink-bazel-build
      name: interface-live-app-blink-bazel-build
      namespace: default
      rerun_command: +test interface-live-app-blink-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/live/app-blink
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-live-app-blink
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-app-blink-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/live/app-blink
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-app-blink-bazel-test
      name: interface-live-app-blink-bazel-test
      namespace: default
      rerun_command: +test interface-live-app-blink-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/live/app-blink
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-live-app-blink
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-app-blink-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/live/app-blink
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-app-blink-lint
      name: interface-live-app-blink-lint
      namespace: default
      rerun_command: +test interface-live-app-blink-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/live/app-blink/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-live-app-blink
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-app-blink-lint,?($|\s.*)
      trusted_labels:
      - interface/live/app-blink
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-app-interface-bazel-build
      name: interface-live-app-interface-bazel-build
      namespace: default
      rerun_command: +test interface-live-app-interface-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/live/app-interface
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-live-app-interface
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-app-interface-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/live/app-interface
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-app-interface-bazel-test
      name: interface-live-app-interface-bazel-test
      namespace: default
      rerun_command: +test interface-live-app-interface-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/live/app-interface
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-live-app-interface
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-app-interface-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/live/app-interface
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-app-interface-lint
      name: interface-live-app-interface-lint
      namespace: default
      rerun_command: +test interface-live-app-interface-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/live/app-interface/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-live-app-interface
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-app-interface-lint,?($|\s.*)
      trusted_labels:
      - interface/live/app-interface
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-app-room-bazel-build
      name: interface-live-app-room-bazel-build
      namespace: default
      rerun_command: +test interface-live-app-room-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/live/app-room
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-live-app-room
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-app-room-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/live/app-room
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-app-room-bazel-test
      name: interface-live-app-room-bazel-test
      namespace: default
      rerun_command: +test interface-live-app-room-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/live/app-room
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-live-app-room
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-app-room-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/live/app-room
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-app-room-lint
      name: interface-live-app-room-lint
      namespace: default
      rerun_command: +test interface-live-app-room-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/live/app-room/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-live-app-room
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-app-room-lint,?($|\s.*)
      trusted_labels:
      - interface/live/app-room
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-app-ucenter-bazel-build
      name: interface-live-app-ucenter-bazel-build
      namespace: default
      rerun_command: +test interface-live-app-ucenter-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/live/app-ucenter
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-live-app-ucenter
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-app-ucenter-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/live/app-ucenter
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-app-ucenter-bazel-test
      name: interface-live-app-ucenter-bazel-test
      namespace: default
      rerun_command: +test interface-live-app-ucenter-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/live/app-ucenter
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-live-app-ucenter
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-app-ucenter-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/live/app-ucenter
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-app-ucenter-lint
      name: interface-live-app-ucenter-lint
      namespace: default
      rerun_command: +test interface-live-app-ucenter-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/live/app-ucenter/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-live-app-ucenter
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-app-ucenter-lint,?($|\s.*)
      trusted_labels:
      - interface/live/app-ucenter
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-live-demo-bazel-build
      name: interface-live-live-demo-bazel-build
      namespace: default
      rerun_command: +test interface-live-live-demo-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/live/live-demo
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-live-live-demo
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-live-demo-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/live/live-demo
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-live-demo-bazel-test
      name: interface-live-live-demo-bazel-test
      namespace: default
      rerun_command: +test interface-live-live-demo-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/live/live-demo
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-live-live-demo
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-live-demo-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/live/live-demo
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-live-demo-lint
      name: interface-live-live-demo-lint
      namespace: default
      rerun_command: +test interface-live-live-demo-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/live/live-demo/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-live-live-demo
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-live-demo-lint,?($|\s.*)
      trusted_labels:
      - interface/live/live-demo
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-lottery-interface-bazel-build
      name: interface-live-lottery-interface-bazel-build
      namespace: default
      rerun_command: +test interface-live-lottery-interface-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/live/lottery-interface
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-live-lottery-interface
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-lottery-interface-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/live/lottery-interface
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-lottery-interface-bazel-test
      name: interface-live-lottery-interface-bazel-test
      namespace: default
      rerun_command: +test interface-live-lottery-interface-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/live/lottery-interface
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-live-lottery-interface
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-lottery-interface-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/live/lottery-interface
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-lottery-interface-lint
      name: interface-live-lottery-interface-lint
      namespace: default
      rerun_command: +test interface-live-lottery-interface-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/live/lottery-interface/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-live-lottery-interface
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-lottery-interface-lint,?($|\s.*)
      trusted_labels:
      - interface/live/lottery-interface
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-push-live-bazel-build
      name: interface-live-push-live-bazel-build
      namespace: default
      rerun_command: +test interface-live-push-live-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/live/push-live
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-live-push-live
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-push-live-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/live/push-live
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-push-live-bazel-test
      name: interface-live-push-live-bazel-test
      namespace: default
      rerun_command: +test interface-live-push-live-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/live/push-live
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-live-push-live
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-push-live-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/live/push-live
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-push-live-lint
      name: interface-live-push-live-lint
      namespace: default
      rerun_command: +test interface-live-push-live-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/live/push-live/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-live-push-live
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-push-live-lint,?($|\s.*)
      trusted_labels:
      - interface/live/push-live
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-web-room-bazel-build
      name: interface-live-web-room-bazel-build
      namespace: default
      rerun_command: +test interface-live-web-room-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/live/web-room
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-live-web-room
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-web-room-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/live/web-room
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-web-room-bazel-test
      name: interface-live-web-room-bazel-test
      namespace: default
      rerun_command: +test interface-live-web-room-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/live/web-room
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-live-web-room
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-web-room-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/live/web-room
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-web-room-lint
      name: interface-live-web-room-lint
      namespace: default
      rerun_command: +test interface-live-web-room-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/live/web-room/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-live-web-room
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-web-room-lint,?($|\s.*)
      trusted_labels:
      - interface/live/web-room
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-web-ucenter-bazel-build
      name: interface-live-web-ucenter-bazel-build
      namespace: default
      rerun_command: +test interface-live-web-ucenter-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/live/web-ucenter
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-live-web-ucenter
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-web-ucenter-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/live/web-ucenter
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-web-ucenter-bazel-test
      name: interface-live-web-ucenter-bazel-test
      namespace: default
      rerun_command: +test interface-live-web-ucenter-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/live/web-ucenter
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-live-web-ucenter
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-web-ucenter-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/live/web-ucenter
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-live-web-ucenter-lint
      name: interface-live-web-ucenter-lint
      namespace: default
      rerun_command: +test interface-live-web-ucenter-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/live/web-ucenter/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-live-web-ucenter
          resources: {}
      trigger: (?m)^\+test( | .* )interface-live-web-ucenter-lint,?($|\s.*)
      trusted_labels:
      - interface/live/web-ucenter
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-account-bazel-build
      name: interface-main-account-bazel-build
      namespace: default
      rerun_command: +test interface-main-account-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/account
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-account
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-account-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/account
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-account-bazel-test
      name: interface-main-account-bazel-test
      namespace: default
      rerun_command: +test interface-main-account-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/account
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-account
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-account-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/account
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-account-lint
      name: interface-main-account-lint
      namespace: default
      rerun_command: +test interface-main-account-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/account/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-account
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-account-lint,?($|\s.*)
      trusted_labels:
      - interface/main/account
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-activity-bazel-build
      name: interface-main-activity-bazel-build
      namespace: default
      rerun_command: +test interface-main-activity-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/activity
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-activity
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-activity-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/activity
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-activity-bazel-test
      name: interface-main-activity-bazel-test
      namespace: default
      rerun_command: +test interface-main-activity-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/activity
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-activity
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-activity-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/activity
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-activity-lint
      name: interface-main-activity-lint
      namespace: default
      rerun_command: +test interface-main-activity-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/activity/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-activity
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-activity-lint,?($|\s.*)
      trusted_labels:
      - interface/main/activity
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-answer-bazel-build
      name: interface-main-answer-bazel-build
      namespace: default
      rerun_command: +test interface-main-answer-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/answer
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-answer
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-answer-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/answer
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-answer-bazel-test
      name: interface-main-answer-bazel-test
      namespace: default
      rerun_command: +test interface-main-answer-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/answer
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-answer
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-answer-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/answer
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-answer-lint
      name: interface-main-answer-lint
      namespace: default
      rerun_command: +test interface-main-answer-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/answer/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-answer
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-answer-lint,?($|\s.*)
      trusted_labels:
      - interface/main/answer
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-card-bazel-build
      name: interface-main-app-card-bazel-build
      namespace: default
      rerun_command: +test interface-main-app-card-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/app-card
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-card
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-card-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/app-card
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-card-bazel-test
      name: interface-main-app-card-bazel-test
      namespace: default
      rerun_command: +test interface-main-app-card-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/app-card
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-card
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-card-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/app-card
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-card-lint
      name: interface-main-app-card-lint
      namespace: default
      rerun_command: +test interface-main-app-card-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/app-card/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-app-card
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-card-lint,?($|\s.*)
      trusted_labels:
      - interface/main/app-card
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-channel-bazel-build
      name: interface-main-app-channel-bazel-build
      namespace: default
      rerun_command: +test interface-main-app-channel-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/app-channel
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-channel
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-channel-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/app-channel
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-channel-bazel-test
      name: interface-main-app-channel-bazel-test
      namespace: default
      rerun_command: +test interface-main-app-channel-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/app-channel
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-channel
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-channel-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/app-channel
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-channel-lint
      name: interface-main-app-channel-lint
      namespace: default
      rerun_command: +test interface-main-app-channel-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/app-channel/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-app-channel
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-channel-lint,?($|\s.*)
      trusted_labels:
      - interface/main/app-channel
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-feed-bazel-build
      name: interface-main-app-feed-bazel-build
      namespace: default
      rerun_command: +test interface-main-app-feed-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/app-feed
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-feed
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-feed-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/app-feed
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-feed-bazel-test
      name: interface-main-app-feed-bazel-test
      namespace: default
      rerun_command: +test interface-main-app-feed-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/app-feed
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-feed
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-feed-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/app-feed
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-feed-lint
      name: interface-main-app-feed-lint
      namespace: default
      rerun_command: +test interface-main-app-feed-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/app-feed/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-app-feed
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-feed-lint,?($|\s.*)
      trusted_labels:
      - interface/main/app-feed
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-interface-bazel-build
      name: interface-main-app-interface-bazel-build
      namespace: default
      rerun_command: +test interface-main-app-interface-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/app-interface
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-interface
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-interface-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/app-interface
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-interface-bazel-test
      name: interface-main-app-interface-bazel-test
      namespace: default
      rerun_command: +test interface-main-app-interface-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/app-interface
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-interface
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-interface-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/app-interface
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-interface-lint
      name: interface-main-app-interface-lint
      namespace: default
      rerun_command: +test interface-main-app-interface-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/app-interface/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-app-interface
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-interface-lint,?($|\s.*)
      trusted_labels:
      - interface/main/app-interface
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-intl-bazel-build
      name: interface-main-app-intl-bazel-build
      namespace: default
      rerun_command: +test interface-main-app-intl-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/app-intl
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-intl
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-intl-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/app-intl
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-intl-bazel-test
      name: interface-main-app-intl-bazel-test
      namespace: default
      rerun_command: +test interface-main-app-intl-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/app-intl
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-intl
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-intl-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/app-intl
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-intl-lint
      name: interface-main-app-intl-lint
      namespace: default
      rerun_command: +test interface-main-app-intl-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/app-intl/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-app-intl
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-intl-lint,?($|\s.*)
      trusted_labels:
      - interface/main/app-intl
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-player-bazel-build
      name: interface-main-app-player-bazel-build
      namespace: default
      rerun_command: +test interface-main-app-player-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/app-player
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-player
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-player-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/app-player
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-player-bazel-test
      name: interface-main-app-player-bazel-test
      namespace: default
      rerun_command: +test interface-main-app-player-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/app-player
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-player
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-player-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/app-player
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-player-lint
      name: interface-main-app-player-lint
      namespace: default
      rerun_command: +test interface-main-app-player-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/app-player/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-app-player
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-player-lint,?($|\s.*)
      trusted_labels:
      - interface/main/app-player
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-resource-bazel-build
      name: interface-main-app-resource-bazel-build
      namespace: default
      rerun_command: +test interface-main-app-resource-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/app-resource
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-resource
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-resource-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/app-resource
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-resource-bazel-test
      name: interface-main-app-resource-bazel-test
      namespace: default
      rerun_command: +test interface-main-app-resource-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/app-resource
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-resource
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-resource-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/app-resource
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-resource-lint
      name: interface-main-app-resource-lint
      namespace: default
      rerun_command: +test interface-main-app-resource-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/app-resource/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-app-resource
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-resource-lint,?($|\s.*)
      trusted_labels:
      - interface/main/app-resource
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-show-bazel-build
      name: interface-main-app-show-bazel-build
      namespace: default
      rerun_command: +test interface-main-app-show-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/app-show
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-show
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-show-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/app-show
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-show-bazel-test
      name: interface-main-app-show-bazel-test
      namespace: default
      rerun_command: +test interface-main-app-show-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/app-show
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-show
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-show-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/app-show
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-show-lint
      name: interface-main-app-show-lint
      namespace: default
      rerun_command: +test interface-main-app-show-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/app-show/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-app-show
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-show-lint,?($|\s.*)
      trusted_labels:
      - interface/main/app-show
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-tag-bazel-build
      name: interface-main-app-tag-bazel-build
      namespace: default
      rerun_command: +test interface-main-app-tag-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/app-tag
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-tag
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-tag-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/app-tag
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-tag-bazel-test
      name: interface-main-app-tag-bazel-test
      namespace: default
      rerun_command: +test interface-main-app-tag-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/app-tag
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-tag
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-tag-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/app-tag
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-tag-lint
      name: interface-main-app-tag-lint
      namespace: default
      rerun_command: +test interface-main-app-tag-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/app-tag/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-app-tag
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-tag-lint,?($|\s.*)
      trusted_labels:
      - interface/main/app-tag
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-view-bazel-build
      name: interface-main-app-view-bazel-build
      namespace: default
      rerun_command: +test interface-main-app-view-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/app-view
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-view
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-view-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/app-view
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-view-bazel-test
      name: interface-main-app-view-bazel-test
      namespace: default
      rerun_command: +test interface-main-app-view-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/app-view
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-view
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-view-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/app-view
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-view-lint
      name: interface-main-app-view-lint
      namespace: default
      rerun_command: +test interface-main-app-view-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/app-view/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-app-view
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-view-lint,?($|\s.*)
      trusted_labels:
      - interface/main/app-view
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-wall-bazel-build
      name: interface-main-app-wall-bazel-build
      namespace: default
      rerun_command: +test interface-main-app-wall-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/app-wall
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-wall
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-wall-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/app-wall
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-wall-bazel-test
      name: interface-main-app-wall-bazel-test
      namespace: default
      rerun_command: +test interface-main-app-wall-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/app-wall
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-app-wall
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-wall-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/app-wall
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-app-wall-lint
      name: interface-main-app-wall-lint
      namespace: default
      rerun_command: +test interface-main-app-wall-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/app-wall/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-app-wall
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-app-wall-lint,?($|\s.*)
      trusted_labels:
      - interface/main/app-wall
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-broadcast-bazel-build
      name: interface-main-broadcast-bazel-build
      namespace: default
      rerun_command: +test interface-main-broadcast-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/broadcast
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-broadcast
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-broadcast-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/broadcast
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-broadcast-bazel-test
      name: interface-main-broadcast-bazel-test
      namespace: default
      rerun_command: +test interface-main-broadcast-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/broadcast
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-broadcast
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-broadcast-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/broadcast
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-broadcast-lint
      name: interface-main-broadcast-lint
      namespace: default
      rerun_command: +test interface-main-broadcast-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/broadcast/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-broadcast
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-broadcast-lint,?($|\s.*)
      trusted_labels:
      - interface/main/broadcast
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-captcha-bazel-build
      name: interface-main-captcha-bazel-build
      namespace: default
      rerun_command: +test interface-main-captcha-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/captcha
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-captcha
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-captcha-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/captcha
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-captcha-bazel-test
      name: interface-main-captcha-bazel-test
      namespace: default
      rerun_command: +test interface-main-captcha-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/captcha
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-captcha
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-captcha-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/captcha
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-captcha-lint
      name: interface-main-captcha-lint
      namespace: default
      rerun_command: +test interface-main-captcha-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/captcha/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-captcha
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-captcha-lint,?($|\s.*)
      trusted_labels:
      - interface/main/captcha
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-creative-bazel-build
      name: interface-main-creative-bazel-build
      namespace: default
      rerun_command: +test interface-main-creative-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/creative
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-creative
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-creative-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/creative
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-creative-bazel-test
      name: interface-main-creative-bazel-test
      namespace: default
      rerun_command: +test interface-main-creative-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/creative
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-creative
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-creative-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/creative
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-creative-lint
      name: interface-main-creative-lint
      namespace: default
      rerun_command: +test interface-main-creative-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/creative/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-creative
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-creative-lint,?($|\s.*)
      trusted_labels:
      - interface/main/creative
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-credit-bazel-build
      name: interface-main-credit-bazel-build
      namespace: default
      rerun_command: +test interface-main-credit-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/credit
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-credit
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-credit-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/credit
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-credit-bazel-test
      name: interface-main-credit-bazel-test
      namespace: default
      rerun_command: +test interface-main-credit-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/credit
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-credit
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-credit-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/credit
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-credit-lint
      name: interface-main-credit-lint
      namespace: default
      rerun_command: +test interface-main-credit-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/credit/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-credit
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-credit-lint,?($|\s.*)
      trusted_labels:
      - interface/main/credit
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-dm-bazel-build
      name: interface-main-dm-bazel-build
      namespace: default
      rerun_command: +test interface-main-dm-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/dm
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-dm
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-dm-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/dm
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-dm-bazel-test
      name: interface-main-dm-bazel-test
      namespace: default
      rerun_command: +test interface-main-dm-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/dm
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-dm
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-dm-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/dm
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-dm-lint
      name: interface-main-dm-lint
      namespace: default
      rerun_command: +test interface-main-dm-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/dm/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-dm
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-dm-lint,?($|\s.*)
      trusted_labels:
      - interface/main/dm
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-dm2-bazel-build
      name: interface-main-dm2-bazel-build
      namespace: default
      rerun_command: +test interface-main-dm2-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/dm2
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-dm2
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-dm2-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/dm2
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-dm2-bazel-test
      name: interface-main-dm2-bazel-test
      namespace: default
      rerun_command: +test interface-main-dm2-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/dm2
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-dm2
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-dm2-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/dm2
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-dm2-lint
      name: interface-main-dm2-lint
      namespace: default
      rerun_command: +test interface-main-dm2-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/dm2/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-dm2
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-dm2-lint,?($|\s.*)
      trusted_labels:
      - interface/main/dm2
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-esports-bazel-build
      name: interface-main-esports-bazel-build
      namespace: default
      rerun_command: +test interface-main-esports-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/esports
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-esports
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-esports-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/esports
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-esports-bazel-test
      name: interface-main-esports-bazel-test
      namespace: default
      rerun_command: +test interface-main-esports-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/esports
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-esports
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-esports-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/esports
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-esports-lint
      name: interface-main-esports-lint
      namespace: default
      rerun_command: +test interface-main-esports-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/esports/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-esports
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-esports-lint,?($|\s.*)
      trusted_labels:
      - interface/main/esports
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-favorite-bazel-build
      name: interface-main-favorite-bazel-build
      namespace: default
      rerun_command: +test interface-main-favorite-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/favorite
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-favorite
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-favorite-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/favorite
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-favorite-bazel-test
      name: interface-main-favorite-bazel-test
      namespace: default
      rerun_command: +test interface-main-favorite-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/favorite
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-favorite
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-favorite-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/favorite
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-favorite-lint
      name: interface-main-favorite-lint
      namespace: default
      rerun_command: +test interface-main-favorite-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/favorite/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-favorite
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-favorite-lint,?($|\s.*)
      trusted_labels:
      - interface/main/favorite
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-feedback-bazel-build
      name: interface-main-feedback-bazel-build
      namespace: default
      rerun_command: +test interface-main-feedback-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/feedback
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-feedback
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-feedback-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/feedback
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-feedback-bazel-test
      name: interface-main-feedback-bazel-test
      namespace: default
      rerun_command: +test interface-main-feedback-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/feedback
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-feedback
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-feedback-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/feedback
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-feedback-lint
      name: interface-main-feedback-lint
      namespace: default
      rerun_command: +test interface-main-feedback-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/feedback/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-feedback
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-feedback-lint,?($|\s.*)
      trusted_labels:
      - interface/main/feedback
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-growup-bazel-build
      name: interface-main-growup-bazel-build
      namespace: default
      rerun_command: +test interface-main-growup-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/growup
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-growup
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-growup-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/growup
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-growup-bazel-test
      name: interface-main-growup-bazel-test
      namespace: default
      rerun_command: +test interface-main-growup-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/growup
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-growup
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-growup-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/growup
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-growup-lint
      name: interface-main-growup-lint
      namespace: default
      rerun_command: +test interface-main-growup-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/growup/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-growup
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-growup-lint,?($|\s.*)
      trusted_labels:
      - interface/main/growup
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-history-bazel-build
      name: interface-main-history-bazel-build
      namespace: default
      rerun_command: +test interface-main-history-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/history
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-history
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-history-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/history
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-history-bazel-test
      name: interface-main-history-bazel-test
      namespace: default
      rerun_command: +test interface-main-history-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/history
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-history
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-history-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/history
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-history-lint
      name: interface-main-history-lint
      namespace: default
      rerun_command: +test interface-main-history-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/history/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-history
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-history-lint,?($|\s.*)
      trusted_labels:
      - interface/main/history
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-kvo-bazel-build
      name: interface-main-kvo-bazel-build
      namespace: default
      rerun_command: +test interface-main-kvo-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/kvo
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-kvo
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-kvo-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/kvo
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-kvo-bazel-test
      name: interface-main-kvo-bazel-test
      namespace: default
      rerun_command: +test interface-main-kvo-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/kvo
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-kvo
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-kvo-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/kvo
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-kvo-lint
      name: interface-main-kvo-lint
      namespace: default
      rerun_command: +test interface-main-kvo-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/kvo/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-kvo
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-kvo-lint,?($|\s.*)
      trusted_labels:
      - interface/main/kvo
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-laser-bazel-build
      name: interface-main-laser-bazel-build
      namespace: default
      rerun_command: +test interface-main-laser-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/laser
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-laser
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-laser-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/laser
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-laser-bazel-test
      name: interface-main-laser-bazel-test
      namespace: default
      rerun_command: +test interface-main-laser-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/laser
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-laser
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-laser-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/laser
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-laser-lint
      name: interface-main-laser-lint
      namespace: default
      rerun_command: +test interface-main-laser-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/laser/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-laser
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-laser-lint,?($|\s.*)
      trusted_labels:
      - interface/main/laser
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-mcn-bazel-build
      name: interface-main-mcn-bazel-build
      namespace: default
      rerun_command: +test interface-main-mcn-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/mcn
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-mcn
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-mcn-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/mcn
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-mcn-bazel-test
      name: interface-main-mcn-bazel-test
      namespace: default
      rerun_command: +test interface-main-mcn-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/mcn
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-mcn
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-mcn-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/mcn
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-mcn-lint
      name: interface-main-mcn-lint
      namespace: default
      rerun_command: +test interface-main-mcn-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/mcn/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-mcn
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-mcn-lint,?($|\s.*)
      trusted_labels:
      - interface/main/mcn
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-passport-login-bazel-build
      name: interface-main-passport-login-bazel-build
      namespace: default
      rerun_command: +test interface-main-passport-login-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/passport-login
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-passport-login
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-passport-login-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/passport-login
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-passport-login-bazel-test
      name: interface-main-passport-login-bazel-test
      namespace: default
      rerun_command: +test interface-main-passport-login-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/passport-login
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-passport-login
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-passport-login-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/passport-login
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-passport-login-lint
      name: interface-main-passport-login-lint
      namespace: default
      rerun_command: +test interface-main-passport-login-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/passport-login/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-passport-login
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-passport-login-lint,?($|\s.*)
      trusted_labels:
      - interface/main/passport-login
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-player-bazel-build
      name: interface-main-player-bazel-build
      namespace: default
      rerun_command: +test interface-main-player-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/player
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-player
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-player-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/player
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-player-bazel-test
      name: interface-main-player-bazel-test
      namespace: default
      rerun_command: +test interface-main-player-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/player
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-player
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-player-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/player
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-player-lint
      name: interface-main-player-lint
      namespace: default
      rerun_command: +test interface-main-player-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/player/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-player
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-player-lint,?($|\s.*)
      trusted_labels:
      - interface/main/player
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-playlist-bazel-build
      name: interface-main-playlist-bazel-build
      namespace: default
      rerun_command: +test interface-main-playlist-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/playlist
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-playlist
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-playlist-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/playlist
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-playlist-bazel-test
      name: interface-main-playlist-bazel-test
      namespace: default
      rerun_command: +test interface-main-playlist-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/playlist
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-playlist
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-playlist-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/playlist
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-playlist-lint
      name: interface-main-playlist-lint
      namespace: default
      rerun_command: +test interface-main-playlist-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/playlist/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-playlist
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-playlist-lint,?($|\s.*)
      trusted_labels:
      - interface/main/playlist
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-push-bazel-build
      name: interface-main-push-bazel-build
      namespace: default
      rerun_command: +test interface-main-push-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/push
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-push
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-push-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/push
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-push-bazel-test
      name: interface-main-push-bazel-test
      namespace: default
      rerun_command: +test interface-main-push-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/push
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-push
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-push-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/push
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-push-lint
      name: interface-main-push-lint
      namespace: default
      rerun_command: +test interface-main-push-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/push/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-push
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-push-lint,?($|\s.*)
      trusted_labels:
      - interface/main/push
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-push-archive-bazel-build
      name: interface-main-push-archive-bazel-build
      namespace: default
      rerun_command: +test interface-main-push-archive-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/push-archive
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-push-archive
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-push-archive-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/push-archive
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-push-archive-bazel-test
      name: interface-main-push-archive-bazel-test
      namespace: default
      rerun_command: +test interface-main-push-archive-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/push-archive
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-push-archive
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-push-archive-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/push-archive
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-push-archive-lint
      name: interface-main-push-archive-lint
      namespace: default
      rerun_command: +test interface-main-push-archive-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/push-archive/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-push-archive
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-push-archive-lint,?($|\s.*)
      trusted_labels:
      - interface/main/push-archive
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-reply-bazel-build
      name: interface-main-reply-bazel-build
      namespace: default
      rerun_command: +test interface-main-reply-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/reply
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-reply
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-reply-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/reply
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-reply-bazel-test
      name: interface-main-reply-bazel-test
      namespace: default
      rerun_command: +test interface-main-reply-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/reply
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-reply
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-reply-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/reply
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-reply-lint
      name: interface-main-reply-lint
      namespace: default
      rerun_command: +test interface-main-reply-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/reply/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-reply
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-reply-lint,?($|\s.*)
      trusted_labels:
      - interface/main/reply
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-report-click-bazel-build
      name: interface-main-report-click-bazel-build
      namespace: default
      rerun_command: +test interface-main-report-click-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/report-click
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-report-click
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-report-click-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/report-click
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-report-click-bazel-test
      name: interface-main-report-click-bazel-test
      namespace: default
      rerun_command: +test interface-main-report-click-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/report-click
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-report-click
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-report-click-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/report-click
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-report-click-lint
      name: interface-main-report-click-lint
      namespace: default
      rerun_command: +test interface-main-report-click-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/report-click/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-report-click
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-report-click-lint,?($|\s.*)
      trusted_labels:
      - interface/main/report-click
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-shorturl-bazel-build
      name: interface-main-shorturl-bazel-build
      namespace: default
      rerun_command: +test interface-main-shorturl-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/shorturl
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-shorturl
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-shorturl-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/shorturl
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-shorturl-bazel-test
      name: interface-main-shorturl-bazel-test
      namespace: default
      rerun_command: +test interface-main-shorturl-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/shorturl
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-shorturl
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-shorturl-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/shorturl
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-shorturl-lint
      name: interface-main-shorturl-lint
      namespace: default
      rerun_command: +test interface-main-shorturl-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/shorturl/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-shorturl
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-shorturl-lint,?($|\s.*)
      trusted_labels:
      - interface/main/shorturl
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-space-bazel-build
      name: interface-main-space-bazel-build
      namespace: default
      rerun_command: +test interface-main-space-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/space
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-space
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-space-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/space
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-space-bazel-test
      name: interface-main-space-bazel-test
      namespace: default
      rerun_command: +test interface-main-space-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/space
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-space
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-space-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/space
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-space-lint
      name: interface-main-space-lint
      namespace: default
      rerun_command: +test interface-main-space-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/space/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-space
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-space-lint,?($|\s.*)
      trusted_labels:
      - interface/main/space
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-spread-bazel-build
      name: interface-main-spread-bazel-build
      namespace: default
      rerun_command: +test interface-main-spread-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/spread
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-spread
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-spread-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/spread
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-spread-bazel-test
      name: interface-main-spread-bazel-test
      namespace: default
      rerun_command: +test interface-main-spread-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/spread
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-spread
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-spread-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/spread
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-spread-lint
      name: interface-main-spread-lint
      namespace: default
      rerun_command: +test interface-main-spread-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/spread/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-spread
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-spread-lint,?($|\s.*)
      trusted_labels:
      - interface/main/spread
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-tag-bazel-build
      name: interface-main-tag-bazel-build
      namespace: default
      rerun_command: +test interface-main-tag-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/tag
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-tag
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-tag-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/tag
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-tag-bazel-test
      name: interface-main-tag-bazel-test
      namespace: default
      rerun_command: +test interface-main-tag-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/tag
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-tag
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-tag-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/tag
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-tag-lint
      name: interface-main-tag-lint
      namespace: default
      rerun_command: +test interface-main-tag-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/tag/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-tag
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-tag-lint,?($|\s.*)
      trusted_labels:
      - interface/main/tag
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-tv-bazel-build
      name: interface-main-tv-bazel-build
      namespace: default
      rerun_command: +test interface-main-tv-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/tv
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-tv
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-tv-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/tv
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-tv-bazel-test
      name: interface-main-tv-bazel-test
      namespace: default
      rerun_command: +test interface-main-tv-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/tv
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-tv
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-tv-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/tv
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-tv-lint
      name: interface-main-tv-lint
      namespace: default
      rerun_command: +test interface-main-tv-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/tv/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-tv
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-tv-lint,?($|\s.*)
      trusted_labels:
      - interface/main/tv
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-ugcpay-bazel-build
      name: interface-main-ugcpay-bazel-build
      namespace: default
      rerun_command: +test interface-main-ugcpay-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/ugcpay
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-ugcpay
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-ugcpay-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/ugcpay
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-ugcpay-bazel-test
      name: interface-main-ugcpay-bazel-test
      namespace: default
      rerun_command: +test interface-main-ugcpay-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/ugcpay
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-ugcpay
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-ugcpay-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/ugcpay
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-ugcpay-lint
      name: interface-main-ugcpay-lint
      namespace: default
      rerun_command: +test interface-main-ugcpay-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/ugcpay/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-ugcpay
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-ugcpay-lint,?($|\s.*)
      trusted_labels:
      - interface/main/ugcpay
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-ugcpay-rank-bazel-build
      name: interface-main-ugcpay-rank-bazel-build
      namespace: default
      rerun_command: +test interface-main-ugcpay-rank-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/ugcpay-rank
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-ugcpay-rank
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-ugcpay-rank-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/ugcpay-rank
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-ugcpay-rank-bazel-test
      name: interface-main-ugcpay-rank-bazel-test
      namespace: default
      rerun_command: +test interface-main-ugcpay-rank-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/ugcpay-rank
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-ugcpay-rank
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-ugcpay-rank-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/ugcpay-rank
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-ugcpay-rank-lint
      name: interface-main-ugcpay-rank-lint
      namespace: default
      rerun_command: +test interface-main-ugcpay-rank-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/ugcpay-rank/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-ugcpay-rank
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-ugcpay-rank-lint,?($|\s.*)
      trusted_labels:
      - interface/main/ugcpay-rank
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-up-rating-bazel-build
      name: interface-main-up-rating-bazel-build
      namespace: default
      rerun_command: +test interface-main-up-rating-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/up-rating
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-up-rating
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-up-rating-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/up-rating
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-up-rating-bazel-test
      name: interface-main-up-rating-bazel-test
      namespace: default
      rerun_command: +test interface-main-up-rating-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/up-rating
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-up-rating
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-up-rating-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/up-rating
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-up-rating-lint
      name: interface-main-up-rating-lint
      namespace: default
      rerun_command: +test interface-main-up-rating-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/up-rating/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-up-rating
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-up-rating-lint,?($|\s.*)
      trusted_labels:
      - interface/main/up-rating
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-upload-bazel-build
      name: interface-main-upload-bazel-build
      namespace: default
      rerun_command: +test interface-main-upload-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/upload
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-upload
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-upload-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/upload
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-upload-bazel-test
      name: interface-main-upload-bazel-test
      namespace: default
      rerun_command: +test interface-main-upload-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/upload
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-upload
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-upload-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/upload
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-upload-lint
      name: interface-main-upload-lint
      namespace: default
      rerun_command: +test interface-main-upload-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/upload/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-upload
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-upload-lint,?($|\s.*)
      trusted_labels:
      - interface/main/upload
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-videoup-bazel-build
      name: interface-main-videoup-bazel-build
      namespace: default
      rerun_command: +test interface-main-videoup-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/videoup
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-videoup
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-videoup-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/videoup
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-videoup-bazel-test
      name: interface-main-videoup-bazel-test
      namespace: default
      rerun_command: +test interface-main-videoup-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/videoup
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-videoup
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-videoup-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/videoup
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-videoup-lint
      name: interface-main-videoup-lint
      namespace: default
      rerun_command: +test interface-main-videoup-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/videoup/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-videoup
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-videoup-lint,?($|\s.*)
      trusted_labels:
      - interface/main/videoup
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-web-bazel-build
      name: interface-main-web-bazel-build
      namespace: default
      rerun_command: +test interface-main-web-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/web
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-web
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-web-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/web
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-web-bazel-test
      name: interface-main-web-bazel-test
      namespace: default
      rerun_command: +test interface-main-web-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/web
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-web
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-web-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/web
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-web-lint
      name: interface-main-web-lint
      namespace: default
      rerun_command: +test interface-main-web-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/web/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-web
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-web-lint,?($|\s.*)
      trusted_labels:
      - interface/main/web
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-web-feed-bazel-build
      name: interface-main-web-feed-bazel-build
      namespace: default
      rerun_command: +test interface-main-web-feed-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/web-feed
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-web-feed
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-web-feed-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/web-feed
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-web-feed-bazel-test
      name: interface-main-web-feed-bazel-test
      namespace: default
      rerun_command: +test interface-main-web-feed-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/web-feed
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-web-feed
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-web-feed-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/web-feed
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-web-feed-lint
      name: interface-main-web-feed-lint
      namespace: default
      rerun_command: +test interface-main-web-feed-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/web-feed/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-web-feed
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-web-feed-lint,?($|\s.*)
      trusted_labels:
      - interface/main/web-feed
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-web-goblin-bazel-build
      name: interface-main-web-goblin-bazel-build
      namespace: default
      rerun_command: +test interface-main-web-goblin-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/web-goblin
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-web-goblin
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-web-goblin-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/web-goblin
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-web-goblin-bazel-test
      name: interface-main-web-goblin-bazel-test
      namespace: default
      rerun_command: +test interface-main-web-goblin-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/web-goblin
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-web-goblin
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-web-goblin-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/web-goblin
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-web-goblin-lint
      name: interface-main-web-goblin-lint
      namespace: default
      rerun_command: +test interface-main-web-goblin-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/web-goblin/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-web-goblin
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-web-goblin-lint,?($|\s.*)
      trusted_labels:
      - interface/main/web-goblin
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-web-show-bazel-build
      name: interface-main-web-show-bazel-build
      namespace: default
      rerun_command: +test interface-main-web-show-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/main/web-show
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-web-show
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-web-show-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/main/web-show
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-web-show-bazel-test
      name: interface-main-web-show-bazel-test
      namespace: default
      rerun_command: +test interface-main-web-show-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/main/web-show
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-main-web-show
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-web-show-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/main/web-show
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-main-web-show-lint
      name: interface-main-web-show-lint
      namespace: default
      rerun_command: +test interface-main-web-show-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/main/web-show/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-main-web-show
          resources: {}
      trigger: (?m)^\+test( | .* )interface-main-web-show-lint,?($|\s.*)
      trusted_labels:
      - interface/main/web-show
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-openplatform-article-bazel-build
      name: interface-openplatform-article-bazel-build
      namespace: default
      rerun_command: +test interface-openplatform-article-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/openplatform/article
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-openplatform-article
          resources: {}
      trigger: (?m)^\+test( | .* )interface-openplatform-article-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/openplatform/article
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-openplatform-article-bazel-test
      name: interface-openplatform-article-bazel-test
      namespace: default
      rerun_command: +test interface-openplatform-article-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/openplatform/article
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-openplatform-article
          resources: {}
      trigger: (?m)^\+test( | .* )interface-openplatform-article-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/openplatform/article
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-openplatform-article-lint
      name: interface-openplatform-article-lint
      namespace: default
      rerun_command: +test interface-openplatform-article-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/openplatform/article/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-openplatform-article
          resources: {}
      trigger: (?m)^\+test( | .* )interface-openplatform-article-lint,?($|\s.*)
      trusted_labels:
      - interface/openplatform/article
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-openplatform-monitor-end-bazel-build
      name: interface-openplatform-monitor-end-bazel-build
      namespace: default
      rerun_command: +test interface-openplatform-monitor-end-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/openplatform/monitor-end
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-openplatform-monitor-end
          resources: {}
      trigger: (?m)^\+test( | .* )interface-openplatform-monitor-end-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/openplatform/monitor-end
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-openplatform-monitor-end-bazel-test
      name: interface-openplatform-monitor-end-bazel-test
      namespace: default
      rerun_command: +test interface-openplatform-monitor-end-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/openplatform/monitor-end
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-openplatform-monitor-end
          resources: {}
      trigger: (?m)^\+test( | .* )interface-openplatform-monitor-end-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/openplatform/monitor-end
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-openplatform-monitor-end-lint
      name: interface-openplatform-monitor-end-lint
      namespace: default
      rerun_command: +test interface-openplatform-monitor-end-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/openplatform/monitor-end/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-openplatform-monitor-end
          resources: {}
      trigger: (?m)^\+test( | .* )interface-openplatform-monitor-end-lint,?($|\s.*)
      trusted_labels:
      - interface/openplatform/monitor-end
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-video-portal-bazel-build
      name: interface-video-portal-bazel-build
      namespace: default
      rerun_command: +test interface-video-portal-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/interface/video/portal
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-video-portal
          resources: {}
      trigger: (?m)^\+test( | .* )interface-video-portal-bazel-build,?($|\s.*)
      trusted_labels:
      - interface/video/portal
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-video-portal-bazel-test
      name: interface-video-portal-bazel-test
      namespace: default
      rerun_command: +test interface-video-portal-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/interface/video/portal
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: interface-video-portal
          resources: {}
      trigger: (?m)^\+test( | .* )interface-video-portal-bazel-test,?($|\s.*)
      trusted_labels:
      - interface/video/portal
    - agent: kubernetes
      always_run: true
      cluster: default
      context: interface-video-portal-lint
      name: interface-video-portal-lint
      namespace: default
      rerun_command: +test interface-video-portal-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/interface/video/portal/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: interface-video-portal
          resources: {}
      trigger: (?m)^\+test( | .* )interface-video-portal-lint,?($|\s.*)
      trusted_labels:
      - interface/video/portal
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-bbq-recall-bazel-build
      name: job-bbq-recall-bazel-build
      namespace: default
      rerun_command: +test job-bbq-recall-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/bbq/recall
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-bbq-recall
          resources: {}
      trigger: (?m)^\+test( | .* )job-bbq-recall-bazel-build,?($|\s.*)
      trusted_labels:
      - job/bbq/recall
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-bbq-recall-bazel-test
      name: job-bbq-recall-bazel-test
      namespace: default
      rerun_command: +test job-bbq-recall-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/bbq/recall
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-bbq-recall
          resources: {}
      trigger: (?m)^\+test( | .* )job-bbq-recall-bazel-test,?($|\s.*)
      trusted_labels:
      - job/bbq/recall
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-bbq-recall-lint
      name: job-bbq-recall-lint
      namespace: default
      rerun_command: +test job-bbq-recall-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/bbq/recall/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-bbq-recall
          resources: {}
      trigger: (?m)^\+test( | .* )job-bbq-recall-lint,?($|\s.*)
      trusted_labels:
      - job/bbq/recall
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-bbq-video-bazel-build
      name: job-bbq-video-bazel-build
      namespace: default
      rerun_command: +test job-bbq-video-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/bbq/video
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-bbq-video
          resources: {}
      trigger: (?m)^\+test( | .* )job-bbq-video-bazel-build,?($|\s.*)
      trusted_labels:
      - job/bbq/video
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-bbq-video-bazel-test
      name: job-bbq-video-bazel-test
      namespace: default
      rerun_command: +test job-bbq-video-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/bbq/video
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-bbq-video
          resources: {}
      trigger: (?m)^\+test( | .* )job-bbq-video-bazel-test,?($|\s.*)
      trusted_labels:
      - job/bbq/video
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-bbq-video-lint
      name: job-bbq-video-lint
      namespace: default
      rerun_command: +test job-bbq-video-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/bbq/video/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-bbq-video
          resources: {}
      trigger: (?m)^\+test( | .* )job-bbq-video-lint,?($|\s.*)
      trusted_labels:
      - job/bbq/video
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-live-gift-bazel-build
      name: job-live-gift-bazel-build
      namespace: default
      rerun_command: +test job-live-gift-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/live/gift
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-live-gift
          resources: {}
      trigger: (?m)^\+test( | .* )job-live-gift-bazel-build,?($|\s.*)
      trusted_labels:
      - job/live/gift
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-live-gift-bazel-test
      name: job-live-gift-bazel-test
      namespace: default
      rerun_command: +test job-live-gift-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/live/gift
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-live-gift
          resources: {}
      trigger: (?m)^\+test( | .* )job-live-gift-bazel-test,?($|\s.*)
      trusted_labels:
      - job/live/gift
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-live-gift-lint
      name: job-live-gift-lint
      namespace: default
      rerun_command: +test job-live-gift-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/live/gift/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-live-gift
          resources: {}
      trigger: (?m)^\+test( | .* )job-live-gift-lint,?($|\s.*)
      trusted_labels:
      - job/live/gift
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-live-push-search-bazel-build
      name: job-live-push-search-bazel-build
      namespace: default
      rerun_command: +test job-live-push-search-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/live/push-search
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-live-push-search
          resources: {}
      trigger: (?m)^\+test( | .* )job-live-push-search-bazel-build,?($|\s.*)
      trusted_labels:
      - job/live/push-search
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-live-push-search-bazel-test
      name: job-live-push-search-bazel-test
      namespace: default
      rerun_command: +test job-live-push-search-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/live/push-search
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-live-push-search
          resources: {}
      trigger: (?m)^\+test( | .* )job-live-push-search-bazel-test,?($|\s.*)
      trusted_labels:
      - job/live/push-search
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-live-push-search-lint
      name: job-live-push-search-lint
      namespace: default
      rerun_command: +test job-live-push-search-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/live/push-search/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-live-push-search
          resources: {}
      trigger: (?m)^\+test( | .* )job-live-push-search-lint,?($|\s.*)
      trusted_labels:
      - job/live/push-search
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-live-recommend-job-bazel-build
      name: job-live-recommend-job-bazel-build
      namespace: default
      rerun_command: +test job-live-recommend-job-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/live/recommend-job
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-live-recommend-job
          resources: {}
      trigger: (?m)^\+test( | .* )job-live-recommend-job-bazel-build,?($|\s.*)
      trusted_labels:
      - job/live/recommend-job
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-live-recommend-job-bazel-test
      name: job-live-recommend-job-bazel-test
      namespace: default
      rerun_command: +test job-live-recommend-job-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/live/recommend-job
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-live-recommend-job
          resources: {}
      trigger: (?m)^\+test( | .* )job-live-recommend-job-bazel-test,?($|\s.*)
      trusted_labels:
      - job/live/recommend-job
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-live-recommend-job-lint
      name: job-live-recommend-job-lint
      namespace: default
      rerun_command: +test job-live-recommend-job-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/live/recommend-job/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-live-recommend-job
          resources: {}
      trigger: (?m)^\+test( | .* )job-live-recommend-job-lint,?($|\s.*)
      trusted_labels:
      - job/live/recommend-job
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-live-wallet-bazel-build
      name: job-live-wallet-bazel-build
      namespace: default
      rerun_command: +test job-live-wallet-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/live/wallet
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-live-wallet
          resources: {}
      trigger: (?m)^\+test( | .* )job-live-wallet-bazel-build,?($|\s.*)
      trusted_labels:
      - job/live/wallet
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-live-wallet-bazel-test
      name: job-live-wallet-bazel-test
      namespace: default
      rerun_command: +test job-live-wallet-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/live/wallet
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-live-wallet
          resources: {}
      trigger: (?m)^\+test( | .* )job-live-wallet-bazel-test,?($|\s.*)
      trusted_labels:
      - job/live/wallet
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-live-wallet-lint
      name: job-live-wallet-lint
      namespace: default
      rerun_command: +test job-live-wallet-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/live/wallet/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-live-wallet
          resources: {}
      trigger: (?m)^\+test( | .* )job-live-wallet-lint,?($|\s.*)
      trusted_labels:
      - job/live/wallet
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-live-xlottery-bazel-build
      name: job-live-xlottery-bazel-build
      namespace: default
      rerun_command: +test job-live-xlottery-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/live/xlottery
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-live-xlottery
          resources: {}
      trigger: (?m)^\+test( | .* )job-live-xlottery-bazel-build,?($|\s.*)
      trusted_labels:
      - job/live/xlottery
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-live-xlottery-bazel-test
      name: job-live-xlottery-bazel-test
      namespace: default
      rerun_command: +test job-live-xlottery-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/live/xlottery
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-live-xlottery
          resources: {}
      trigger: (?m)^\+test( | .* )job-live-xlottery-bazel-test,?($|\s.*)
      trusted_labels:
      - job/live/xlottery
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-live-xlottery-lint
      name: job-live-xlottery-lint
      namespace: default
      rerun_command: +test job-live-xlottery-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/live/xlottery/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-live-xlottery
          resources: {}
      trigger: (?m)^\+test( | .* )job-live-xlottery-lint,?($|\s.*)
      trusted_labels:
      - job/live/xlottery
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-account-notify-bazel-build
      name: job-main-account-notify-bazel-build
      namespace: default
      rerun_command: +test job-main-account-notify-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/account-notify
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-account-notify
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-account-notify-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/account-notify
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-account-notify-bazel-test
      name: job-main-account-notify-bazel-test
      namespace: default
      rerun_command: +test job-main-account-notify-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/account-notify
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-account-notify
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-account-notify-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/account-notify
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-account-notify-lint
      name: job-main-account-notify-lint
      namespace: default
      rerun_command: +test job-main-account-notify-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/account-notify/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-account-notify
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-account-notify-lint,?($|\s.*)
      trusted_labels:
      - job/main/account-notify
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-account-recovery-bazel-build
      name: job-main-account-recovery-bazel-build
      namespace: default
      rerun_command: +test job-main-account-recovery-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/account-recovery
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-account-recovery
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-account-recovery-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/account-recovery
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-account-recovery-bazel-test
      name: job-main-account-recovery-bazel-test
      namespace: default
      rerun_command: +test job-main-account-recovery-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/account-recovery
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-account-recovery
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-account-recovery-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/account-recovery
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-account-recovery-lint
      name: job-main-account-recovery-lint
      namespace: default
      rerun_command: +test job-main-account-recovery-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/account-recovery/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-account-recovery
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-account-recovery-lint,?($|\s.*)
      trusted_labels:
      - job/main/account-recovery
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-account-summary-bazel-build
      name: job-main-account-summary-bazel-build
      namespace: default
      rerun_command: +test job-main-account-summary-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/account-summary
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-account-summary
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-account-summary-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/account-summary
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-account-summary-bazel-test
      name: job-main-account-summary-bazel-test
      namespace: default
      rerun_command: +test job-main-account-summary-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/account-summary
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-account-summary
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-account-summary-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/account-summary
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-account-summary-lint
      name: job-main-account-summary-lint
      namespace: default
      rerun_command: +test job-main-account-summary-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/account-summary/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-account-summary
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-account-summary-lint,?($|\s.*)
      trusted_labels:
      - job/main/account-summary
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-activity-bazel-build
      name: job-main-activity-bazel-build
      namespace: default
      rerun_command: +test job-main-activity-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/activity
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-activity
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-activity-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/activity
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-activity-bazel-test
      name: job-main-activity-bazel-test
      namespace: default
      rerun_command: +test job-main-activity-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/activity
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-activity
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-activity-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/activity
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-activity-lint
      name: job-main-activity-lint
      namespace: default
      rerun_command: +test job-main-activity-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/activity/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-activity
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-activity-lint,?($|\s.*)
      trusted_labels:
      - job/main/activity
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-aegis-bazel-build
      name: job-main-aegis-bazel-build
      namespace: default
      rerun_command: +test job-main-aegis-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/aegis
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-aegis
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-aegis-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/aegis
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-aegis-bazel-test
      name: job-main-aegis-bazel-test
      namespace: default
      rerun_command: +test job-main-aegis-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/aegis
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-aegis
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-aegis-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/aegis
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-aegis-lint
      name: job-main-aegis-lint
      namespace: default
      rerun_command: +test job-main-aegis-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/aegis/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-aegis
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-aegis-lint,?($|\s.*)
      trusted_labels:
      - job/main/aegis
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-answer-bazel-build
      name: job-main-answer-bazel-build
      namespace: default
      rerun_command: +test job-main-answer-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/answer
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-answer
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-answer-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/answer
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-answer-bazel-test
      name: job-main-answer-bazel-test
      namespace: default
      rerun_command: +test job-main-answer-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/answer
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-answer
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-answer-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/answer
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-answer-lint
      name: job-main-answer-lint
      namespace: default
      rerun_command: +test job-main-answer-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/answer/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-answer
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-answer-lint,?($|\s.*)
      trusted_labels:
      - job/main/answer
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-app-bazel-build
      name: job-main-app-bazel-build
      namespace: default
      rerun_command: +test job-main-app-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/app
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-app
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-app-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/app
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-app-bazel-test
      name: job-main-app-bazel-test
      namespace: default
      rerun_command: +test job-main-app-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/app
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-app
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-app-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/app
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-app-lint
      name: job-main-app-lint
      namespace: default
      rerun_command: +test job-main-app-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/app/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-app
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-app-lint,?($|\s.*)
      trusted_labels:
      - job/main/app
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-app-player-bazel-build
      name: job-main-app-player-bazel-build
      namespace: default
      rerun_command: +test job-main-app-player-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/app-player
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-app-player
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-app-player-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/app-player
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-app-player-bazel-test
      name: job-main-app-player-bazel-test
      namespace: default
      rerun_command: +test job-main-app-player-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/app-player
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-app-player
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-app-player-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/app-player
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-app-player-lint
      name: job-main-app-player-lint
      namespace: default
      rerun_command: +test job-main-app-player-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/app-player/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-app-player
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-app-player-lint,?($|\s.*)
      trusted_labels:
      - job/main/app-player
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-app-wall-bazel-build
      name: job-main-app-wall-bazel-build
      namespace: default
      rerun_command: +test job-main-app-wall-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/app-wall
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-app-wall
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-app-wall-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/app-wall
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-app-wall-bazel-test
      name: job-main-app-wall-bazel-test
      namespace: default
      rerun_command: +test job-main-app-wall-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/app-wall
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-app-wall
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-app-wall-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/app-wall
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-app-wall-lint
      name: job-main-app-wall-lint
      namespace: default
      rerun_command: +test job-main-app-wall-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/app-wall/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-app-wall
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-app-wall-lint,?($|\s.*)
      trusted_labels:
      - job/main/app-wall
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-archive-bazel-build
      name: job-main-archive-bazel-build
      namespace: default
      rerun_command: +test job-main-archive-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/archive
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-archive
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-archive-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/archive
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-archive-bazel-test
      name: job-main-archive-bazel-test
      namespace: default
      rerun_command: +test job-main-archive-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/archive
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-archive
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-archive-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/archive
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-archive-lint
      name: job-main-archive-lint
      namespace: default
      rerun_command: +test job-main-archive-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/archive/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-archive
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-archive-lint,?($|\s.*)
      trusted_labels:
      - job/main/archive
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-archive-shjd-bazel-build
      name: job-main-archive-shjd-bazel-build
      namespace: default
      rerun_command: +test job-main-archive-shjd-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/archive-shjd
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-archive-shjd
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-archive-shjd-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/archive-shjd
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-archive-shjd-bazel-test
      name: job-main-archive-shjd-bazel-test
      namespace: default
      rerun_command: +test job-main-archive-shjd-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/archive-shjd
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-archive-shjd
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-archive-shjd-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/archive-shjd
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-archive-shjd-lint
      name: job-main-archive-shjd-lint
      namespace: default
      rerun_command: +test job-main-archive-shjd-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/archive-shjd/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-archive-shjd
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-archive-shjd-lint,?($|\s.*)
      trusted_labels:
      - job/main/archive-shjd
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-block-bazel-build
      name: job-main-block-bazel-build
      namespace: default
      rerun_command: +test job-main-block-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/block
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-block
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-block-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/block
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-block-bazel-test
      name: job-main-block-bazel-test
      namespace: default
      rerun_command: +test job-main-block-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/block
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-block
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-block-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/block
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-block-lint
      name: job-main-block-lint
      namespace: default
      rerun_command: +test job-main-block-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/block/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-block
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-block-lint,?($|\s.*)
      trusted_labels:
      - job/main/block
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-broadcast-bazel-build
      name: job-main-broadcast-bazel-build
      namespace: default
      rerun_command: +test job-main-broadcast-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/broadcast
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-broadcast
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-broadcast-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/broadcast
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-broadcast-bazel-test
      name: job-main-broadcast-bazel-test
      namespace: default
      rerun_command: +test job-main-broadcast-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/broadcast
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-broadcast
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-broadcast-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/broadcast
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-broadcast-lint
      name: job-main-broadcast-lint
      namespace: default
      rerun_command: +test job-main-broadcast-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/broadcast/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-broadcast
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-broadcast-lint,?($|\s.*)
      trusted_labels:
      - job/main/broadcast
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-card-bazel-build
      name: job-main-card-bazel-build
      namespace: default
      rerun_command: +test job-main-card-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/card
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-card
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-card-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/card
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-card-bazel-test
      name: job-main-card-bazel-test
      namespace: default
      rerun_command: +test job-main-card-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/card
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-card
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-card-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/card
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-card-lint
      name: job-main-card-lint
      namespace: default
      rerun_command: +test job-main-card-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/card/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-card
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-card-lint,?($|\s.*)
      trusted_labels:
      - job/main/card
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-click-bazel-build
      name: job-main-click-bazel-build
      namespace: default
      rerun_command: +test job-main-click-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/click
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-click
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-click-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/click
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-click-bazel-test
      name: job-main-click-bazel-test
      namespace: default
      rerun_command: +test job-main-click-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/click
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-click
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-click-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/click
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-click-lint
      name: job-main-click-lint
      namespace: default
      rerun_command: +test job-main-click-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/click/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-click
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-click-lint,?($|\s.*)
      trusted_labels:
      - job/main/click
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-coin-bazel-build
      name: job-main-coin-bazel-build
      namespace: default
      rerun_command: +test job-main-coin-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/coin
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-coin
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-coin-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/coin
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-coin-bazel-test
      name: job-main-coin-bazel-test
      namespace: default
      rerun_command: +test job-main-coin-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/coin
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-coin
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-coin-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/coin
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-coin-lint
      name: job-main-coin-lint
      namespace: default
      rerun_command: +test job-main-coin-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/coin/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-coin
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-coin-lint,?($|\s.*)
      trusted_labels:
      - job/main/coin
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-coupon-bazel-build
      name: job-main-coupon-bazel-build
      namespace: default
      rerun_command: +test job-main-coupon-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/coupon
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-coupon
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-coupon-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/coupon
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-coupon-bazel-test
      name: job-main-coupon-bazel-test
      namespace: default
      rerun_command: +test job-main-coupon-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/coupon
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-coupon
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-coupon-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/coupon
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-coupon-lint
      name: job-main-coupon-lint
      namespace: default
      rerun_command: +test job-main-coupon-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/coupon/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-coupon
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-coupon-lint,?($|\s.*)
      trusted_labels:
      - job/main/coupon
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-creative-bazel-build
      name: job-main-creative-bazel-build
      namespace: default
      rerun_command: +test job-main-creative-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/creative
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-creative
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-creative-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/creative
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-creative-bazel-test
      name: job-main-creative-bazel-test
      namespace: default
      rerun_command: +test job-main-creative-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/creative
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-creative
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-creative-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/creative
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-creative-lint
      name: job-main-creative-lint
      namespace: default
      rerun_command: +test job-main-creative-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/creative/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-creative
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-creative-lint,?($|\s.*)
      trusted_labels:
      - job/main/creative
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-credit-bazel-build
      name: job-main-credit-bazel-build
      namespace: default
      rerun_command: +test job-main-credit-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/credit
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-credit
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-credit-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/credit
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-credit-bazel-test
      name: job-main-credit-bazel-test
      namespace: default
      rerun_command: +test job-main-credit-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/credit
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-credit
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-credit-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/credit
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-credit-lint
      name: job-main-credit-lint
      namespace: default
      rerun_command: +test job-main-credit-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/credit/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-credit
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-credit-lint,?($|\s.*)
      trusted_labels:
      - job/main/credit
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-credit-timer-bazel-build
      name: job-main-credit-timer-bazel-build
      namespace: default
      rerun_command: +test job-main-credit-timer-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/credit-timer
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-credit-timer
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-credit-timer-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/credit-timer
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-credit-timer-bazel-test
      name: job-main-credit-timer-bazel-test
      namespace: default
      rerun_command: +test job-main-credit-timer-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/credit-timer
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-credit-timer
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-credit-timer-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/credit-timer
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-credit-timer-lint
      name: job-main-credit-timer-lint
      namespace: default
      rerun_command: +test job-main-credit-timer-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/credit-timer/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-credit-timer
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-credit-timer-lint,?($|\s.*)
      trusted_labels:
      - job/main/credit-timer
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-dm-bazel-build
      name: job-main-dm-bazel-build
      namespace: default
      rerun_command: +test job-main-dm-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/dm
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-dm
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-dm-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/dm
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-dm-bazel-test
      name: job-main-dm-bazel-test
      namespace: default
      rerun_command: +test job-main-dm-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/dm
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-dm
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-dm-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/dm
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-dm-lint
      name: job-main-dm-lint
      namespace: default
      rerun_command: +test job-main-dm-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/dm/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-dm
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-dm-lint,?($|\s.*)
      trusted_labels:
      - job/main/dm
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-dm2-bazel-build
      name: job-main-dm2-bazel-build
      namespace: default
      rerun_command: +test job-main-dm2-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/dm2
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-dm2
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-dm2-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/dm2
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-dm2-bazel-test
      name: job-main-dm2-bazel-test
      namespace: default
      rerun_command: +test job-main-dm2-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/dm2
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-dm2
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-dm2-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/dm2
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-dm2-lint
      name: job-main-dm2-lint
      namespace: default
      rerun_command: +test job-main-dm2-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/dm2/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-dm2
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-dm2-lint,?($|\s.*)
      trusted_labels:
      - job/main/dm2
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-favorite-bazel-build
      name: job-main-favorite-bazel-build
      namespace: default
      rerun_command: +test job-main-favorite-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/favorite
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-favorite
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-favorite-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/favorite
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-favorite-bazel-test
      name: job-main-favorite-bazel-test
      namespace: default
      rerun_command: +test job-main-favorite-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/favorite
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-favorite
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-favorite-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/favorite
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-favorite-lint
      name: job-main-favorite-lint
      namespace: default
      rerun_command: +test job-main-favorite-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/favorite/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-favorite
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-favorite-lint,?($|\s.*)
      trusted_labels:
      - job/main/favorite
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-feed-bazel-build
      name: job-main-feed-bazel-build
      namespace: default
      rerun_command: +test job-main-feed-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/feed
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-feed
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-feed-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/feed
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-feed-bazel-test
      name: job-main-feed-bazel-test
      namespace: default
      rerun_command: +test job-main-feed-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/feed
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-feed
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-feed-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/feed
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-feed-lint
      name: job-main-feed-lint
      namespace: default
      rerun_command: +test job-main-feed-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/feed/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-feed
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-feed-lint,?($|\s.*)
      trusted_labels:
      - job/main/feed
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-figure-bazel-build
      name: job-main-figure-bazel-build
      namespace: default
      rerun_command: +test job-main-figure-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/figure
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-figure
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-figure-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/figure
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-figure-bazel-test
      name: job-main-figure-bazel-test
      namespace: default
      rerun_command: +test job-main-figure-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/figure
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-figure
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-figure-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/figure
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-figure-lint
      name: job-main-figure-lint
      namespace: default
      rerun_command: +test job-main-figure-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/figure/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-figure
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-figure-lint,?($|\s.*)
      trusted_labels:
      - job/main/figure
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-figure-timer-bazel-build
      name: job-main-figure-timer-bazel-build
      namespace: default
      rerun_command: +test job-main-figure-timer-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/figure-timer
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-figure-timer
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-figure-timer-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/figure-timer
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-figure-timer-bazel-test
      name: job-main-figure-timer-bazel-test
      namespace: default
      rerun_command: +test job-main-figure-timer-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/figure-timer
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-figure-timer
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-figure-timer-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/figure-timer
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-figure-timer-lint
      name: job-main-figure-timer-lint
      namespace: default
      rerun_command: +test job-main-figure-timer-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/figure-timer/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-figure-timer
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-figure-timer-lint,?($|\s.*)
      trusted_labels:
      - job/main/figure-timer
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-growup-bazel-build
      name: job-main-growup-bazel-build
      namespace: default
      rerun_command: +test job-main-growup-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/growup
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-growup
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-growup-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/growup
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-growup-bazel-test
      name: job-main-growup-bazel-test
      namespace: default
      rerun_command: +test job-main-growup-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/growup
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-growup
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-growup-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/growup
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-growup-lint
      name: job-main-growup-lint
      namespace: default
      rerun_command: +test job-main-growup-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/growup/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-growup
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-growup-lint,?($|\s.*)
      trusted_labels:
      - job/main/growup
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-history-bazel-build
      name: job-main-history-bazel-build
      namespace: default
      rerun_command: +test job-main-history-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/history
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-history
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-history-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/history
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-history-bazel-test
      name: job-main-history-bazel-test
      namespace: default
      rerun_command: +test job-main-history-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/history
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-history
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-history-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/history
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-history-lint
      name: job-main-history-lint
      namespace: default
      rerun_command: +test job-main-history-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/history/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-history
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-history-lint,?($|\s.*)
      trusted_labels:
      - job/main/history
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-identify-bazel-build
      name: job-main-identify-bazel-build
      namespace: default
      rerun_command: +test job-main-identify-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/identify
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-identify
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-identify-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/identify
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-identify-bazel-test
      name: job-main-identify-bazel-test
      namespace: default
      rerun_command: +test job-main-identify-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/identify
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-identify
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-identify-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/identify
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-identify-lint
      name: job-main-identify-lint
      namespace: default
      rerun_command: +test job-main-identify-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/identify/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-identify
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-identify-lint,?($|\s.*)
      trusted_labels:
      - job/main/identify
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-mcn-bazel-build
      name: job-main-mcn-bazel-build
      namespace: default
      rerun_command: +test job-main-mcn-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/mcn
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-mcn
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-mcn-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/mcn
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-mcn-bazel-test
      name: job-main-mcn-bazel-test
      namespace: default
      rerun_command: +test job-main-mcn-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/mcn
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-mcn
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-mcn-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/mcn
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-mcn-lint
      name: job-main-mcn-lint
      namespace: default
      rerun_command: +test job-main-mcn-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/mcn/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-mcn
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-mcn-lint,?($|\s.*)
      trusted_labels:
      - job/main/mcn
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-member-bazel-build
      name: job-main-member-bazel-build
      namespace: default
      rerun_command: +test job-main-member-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/member
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-member
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-member-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/member
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-member-bazel-test
      name: job-main-member-bazel-test
      namespace: default
      rerun_command: +test job-main-member-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/member
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-member
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-member-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/member
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-member-lint
      name: job-main-member-lint
      namespace: default
      rerun_command: +test job-main-member-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/member/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-member
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-member-lint,?($|\s.*)
      trusted_labels:
      - job/main/member
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-member-cache-bazel-build
      name: job-main-member-cache-bazel-build
      namespace: default
      rerun_command: +test job-main-member-cache-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/member-cache
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-member-cache
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-member-cache-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/member-cache
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-member-cache-bazel-test
      name: job-main-member-cache-bazel-test
      namespace: default
      rerun_command: +test job-main-member-cache-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/member-cache
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-member-cache
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-member-cache-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/member-cache
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-member-cache-lint
      name: job-main-member-cache-lint
      namespace: default
      rerun_command: +test job-main-member-cache-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/member-cache/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-member-cache
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-member-cache-lint,?($|\s.*)
      trusted_labels:
      - job/main/member-cache
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-bazel-build
      name: job-main-passport-bazel-build
      namespace: default
      rerun_command: +test job-main-passport-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/passport
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-passport
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/passport
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-bazel-test
      name: job-main-passport-bazel-test
      namespace: default
      rerun_command: +test job-main-passport-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/passport
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-passport
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/passport
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-lint
      name: job-main-passport-lint
      namespace: default
      rerun_command: +test job-main-passport-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/passport/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-passport
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-lint,?($|\s.*)
      trusted_labels:
      - job/main/passport
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-auth-bazel-build
      name: job-main-passport-auth-bazel-build
      namespace: default
      rerun_command: +test job-main-passport-auth-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/passport-auth
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-passport-auth
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-auth-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/passport-auth
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-auth-bazel-test
      name: job-main-passport-auth-bazel-test
      namespace: default
      rerun_command: +test job-main-passport-auth-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/passport-auth
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-passport-auth
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-auth-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/passport-auth
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-auth-lint
      name: job-main-passport-auth-lint
      namespace: default
      rerun_command: +test job-main-passport-auth-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/passport-auth/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-passport-auth
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-auth-lint,?($|\s.*)
      trusted_labels:
      - job/main/passport-auth
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-encrypt-bazel-build
      name: job-main-passport-encrypt-bazel-build
      namespace: default
      rerun_command: +test job-main-passport-encrypt-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/passport-encrypt
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-passport-encrypt
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-encrypt-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/passport-encrypt
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-encrypt-bazel-test
      name: job-main-passport-encrypt-bazel-test
      namespace: default
      rerun_command: +test job-main-passport-encrypt-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/passport-encrypt
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-passport-encrypt
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-encrypt-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/passport-encrypt
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-encrypt-lint
      name: job-main-passport-encrypt-lint
      namespace: default
      rerun_command: +test job-main-passport-encrypt-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/passport-encrypt/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-passport-encrypt
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-encrypt-lint,?($|\s.*)
      trusted_labels:
      - job/main/passport-encrypt
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-game-cloud-bazel-build
      name: job-main-passport-game-cloud-bazel-build
      namespace: default
      rerun_command: +test job-main-passport-game-cloud-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/passport-game-cloud
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-passport-game-cloud
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-game-cloud-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/passport-game-cloud
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-game-cloud-bazel-test
      name: job-main-passport-game-cloud-bazel-test
      namespace: default
      rerun_command: +test job-main-passport-game-cloud-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/passport-game-cloud
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-passport-game-cloud
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-game-cloud-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/passport-game-cloud
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-game-cloud-lint
      name: job-main-passport-game-cloud-lint
      namespace: default
      rerun_command: +test job-main-passport-game-cloud-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/passport-game-cloud/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-passport-game-cloud
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-game-cloud-lint,?($|\s.*)
      trusted_labels:
      - job/main/passport-game-cloud
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-game-data-bazel-build
      name: job-main-passport-game-data-bazel-build
      namespace: default
      rerun_command: +test job-main-passport-game-data-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/passport-game-data
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-passport-game-data
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-game-data-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/passport-game-data
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-game-data-bazel-test
      name: job-main-passport-game-data-bazel-test
      namespace: default
      rerun_command: +test job-main-passport-game-data-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/passport-game-data
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-passport-game-data
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-game-data-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/passport-game-data
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-game-data-lint
      name: job-main-passport-game-data-lint
      namespace: default
      rerun_command: +test job-main-passport-game-data-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/passport-game-data/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-passport-game-data
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-game-data-lint,?($|\s.*)
      trusted_labels:
      - job/main/passport-game-data
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-game-local-bazel-build
      name: job-main-passport-game-local-bazel-build
      namespace: default
      rerun_command: +test job-main-passport-game-local-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/passport-game-local
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-passport-game-local
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-game-local-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/passport-game-local
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-game-local-bazel-test
      name: job-main-passport-game-local-bazel-test
      namespace: default
      rerun_command: +test job-main-passport-game-local-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/passport-game-local
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-passport-game-local
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-game-local-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/passport-game-local
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-game-local-lint
      name: job-main-passport-game-local-lint
      namespace: default
      rerun_command: +test job-main-passport-game-local-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/passport-game-local/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-passport-game-local
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-game-local-lint,?($|\s.*)
      trusted_labels:
      - job/main/passport-game-local
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-user-bazel-build
      name: job-main-passport-user-bazel-build
      namespace: default
      rerun_command: +test job-main-passport-user-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/passport-user
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-passport-user
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-user-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/passport-user
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-user-bazel-test
      name: job-main-passport-user-bazel-test
      namespace: default
      rerun_command: +test job-main-passport-user-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/passport-user
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-passport-user
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-user-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/passport-user
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-user-lint
      name: job-main-passport-user-lint
      namespace: default
      rerun_command: +test job-main-passport-user-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/passport-user/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-passport-user
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-user-lint,?($|\s.*)
      trusted_labels:
      - job/main/passport-user
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-user-compare-bazel-build
      name: job-main-passport-user-compare-bazel-build
      namespace: default
      rerun_command: +test job-main-passport-user-compare-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/passport-user-compare
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-passport-user-compare
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-user-compare-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/passport-user-compare
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-user-compare-bazel-test
      name: job-main-passport-user-compare-bazel-test
      namespace: default
      rerun_command: +test job-main-passport-user-compare-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/passport-user-compare
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-passport-user-compare
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-user-compare-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/passport-user-compare
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-passport-user-compare-lint
      name: job-main-passport-user-compare-lint
      namespace: default
      rerun_command: +test job-main-passport-user-compare-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/passport-user-compare/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-passport-user-compare
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-passport-user-compare-lint,?($|\s.*)
      trusted_labels:
      - job/main/passport-user-compare
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-playlist-bazel-build
      name: job-main-playlist-bazel-build
      namespace: default
      rerun_command: +test job-main-playlist-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/playlist
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-playlist
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-playlist-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/playlist
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-playlist-bazel-test
      name: job-main-playlist-bazel-test
      namespace: default
      rerun_command: +test job-main-playlist-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/playlist
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-playlist
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-playlist-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/playlist
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-playlist-lint
      name: job-main-playlist-lint
      namespace: default
      rerun_command: +test job-main-playlist-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/playlist/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-playlist
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-playlist-lint,?($|\s.*)
      trusted_labels:
      - job/main/playlist
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-point-bazel-build
      name: job-main-point-bazel-build
      namespace: default
      rerun_command: +test job-main-point-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/point
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-point
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-point-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/point
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-point-bazel-test
      name: job-main-point-bazel-test
      namespace: default
      rerun_command: +test job-main-point-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/point
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-point
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-point-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/point
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-point-lint
      name: job-main-point-lint
      namespace: default
      rerun_command: +test job-main-point-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/point/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-point
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-point-lint,?($|\s.*)
      trusted_labels:
      - job/main/point
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-push-bazel-build
      name: job-main-push-bazel-build
      namespace: default
      rerun_command: +test job-main-push-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/push
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-push
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-push-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/push
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-push-bazel-test
      name: job-main-push-bazel-test
      namespace: default
      rerun_command: +test job-main-push-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/push
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-push
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-push-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/push
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-push-lint
      name: job-main-push-lint
      namespace: default
      rerun_command: +test job-main-push-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/push/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-push
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-push-lint,?($|\s.*)
      trusted_labels:
      - job/main/push
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-relation-bazel-build
      name: job-main-relation-bazel-build
      namespace: default
      rerun_command: +test job-main-relation-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/relation
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-relation
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-relation-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/relation
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-relation-bazel-test
      name: job-main-relation-bazel-test
      namespace: default
      rerun_command: +test job-main-relation-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/relation
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-relation
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-relation-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/relation
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-relation-lint
      name: job-main-relation-lint
      namespace: default
      rerun_command: +test job-main-relation-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/relation/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-relation
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-relation-lint,?($|\s.*)
      trusted_labels:
      - job/main/relation
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-relation-cache-bazel-build
      name: job-main-relation-cache-bazel-build
      namespace: default
      rerun_command: +test job-main-relation-cache-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/relation-cache
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-relation-cache
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-relation-cache-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/relation-cache
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-relation-cache-bazel-test
      name: job-main-relation-cache-bazel-test
      namespace: default
      rerun_command: +test job-main-relation-cache-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/relation-cache
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-relation-cache
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-relation-cache-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/relation-cache
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-relation-cache-lint
      name: job-main-relation-cache-lint
      namespace: default
      rerun_command: +test job-main-relation-cache-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/relation-cache/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-relation-cache
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-relation-cache-lint,?($|\s.*)
      trusted_labels:
      - job/main/relation-cache
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-reply-bazel-build
      name: job-main-reply-bazel-build
      namespace: default
      rerun_command: +test job-main-reply-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/reply
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-reply
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-reply-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/reply
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-reply-bazel-test
      name: job-main-reply-bazel-test
      namespace: default
      rerun_command: +test job-main-reply-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/reply
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-reply
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-reply-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/reply
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-reply-lint
      name: job-main-reply-lint
      namespace: default
      rerun_command: +test job-main-reply-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/reply/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-reply
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-reply-lint,?($|\s.*)
      trusted_labels:
      - job/main/reply
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-reply-feed-bazel-build
      name: job-main-reply-feed-bazel-build
      namespace: default
      rerun_command: +test job-main-reply-feed-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/reply-feed
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-reply-feed
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-reply-feed-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/reply-feed
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-reply-feed-bazel-test
      name: job-main-reply-feed-bazel-test
      namespace: default
      rerun_command: +test job-main-reply-feed-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/reply-feed
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-reply-feed
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-reply-feed-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/reply-feed
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-reply-feed-lint
      name: job-main-reply-feed-lint
      namespace: default
      rerun_command: +test job-main-reply-feed-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/reply-feed/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-reply-feed
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-reply-feed-lint,?($|\s.*)
      trusted_labels:
      - job/main/reply-feed
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-search-bazel-build
      name: job-main-search-bazel-build
      namespace: default
      rerun_command: +test job-main-search-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/search
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-search
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-search-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/search
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-search-bazel-test
      name: job-main-search-bazel-test
      namespace: default
      rerun_command: +test job-main-search-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/search
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-search
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-search-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/search
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-search-lint
      name: job-main-search-lint
      namespace: default
      rerun_command: +test job-main-search-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/search/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-search
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-search-lint,?($|\s.*)
      trusted_labels:
      - job/main/search
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-sms-bazel-build
      name: job-main-sms-bazel-build
      namespace: default
      rerun_command: +test job-main-sms-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/sms
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-sms
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-sms-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/sms
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-sms-bazel-test
      name: job-main-sms-bazel-test
      namespace: default
      rerun_command: +test job-main-sms-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/sms
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-sms
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-sms-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/sms
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-sms-lint
      name: job-main-sms-lint
      namespace: default
      rerun_command: +test job-main-sms-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/sms/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-sms
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-sms-lint,?($|\s.*)
      trusted_labels:
      - job/main/sms
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-spy-bazel-build
      name: job-main-spy-bazel-build
      namespace: default
      rerun_command: +test job-main-spy-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/spy
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-spy
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-spy-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/spy
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-spy-bazel-test
      name: job-main-spy-bazel-test
      namespace: default
      rerun_command: +test job-main-spy-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/spy
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-spy
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-spy-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/spy
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-spy-lint
      name: job-main-spy-lint
      namespace: default
      rerun_command: +test job-main-spy-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/spy/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-spy
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-spy-lint,?($|\s.*)
      trusted_labels:
      - job/main/spy
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-stat-bazel-build
      name: job-main-stat-bazel-build
      namespace: default
      rerun_command: +test job-main-stat-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/stat
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-stat
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-stat-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/stat
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-stat-bazel-test
      name: job-main-stat-bazel-test
      namespace: default
      rerun_command: +test job-main-stat-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/stat
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-stat
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-stat-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/stat
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-stat-lint
      name: job-main-stat-lint
      namespace: default
      rerun_command: +test job-main-stat-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/stat/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-stat
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-stat-lint,?($|\s.*)
      trusted_labels:
      - job/main/stat
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-tag-bazel-build
      name: job-main-tag-bazel-build
      namespace: default
      rerun_command: +test job-main-tag-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/tag
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-tag
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-tag-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/tag
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-tag-bazel-test
      name: job-main-tag-bazel-test
      namespace: default
      rerun_command: +test job-main-tag-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/tag
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-tag
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-tag-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/tag
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-tag-lint
      name: job-main-tag-lint
      namespace: default
      rerun_command: +test job-main-tag-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/tag/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-tag
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-tag-lint,?($|\s.*)
      trusted_labels:
      - job/main/tag
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-tv-bazel-build
      name: job-main-tv-bazel-build
      namespace: default
      rerun_command: +test job-main-tv-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/tv
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-tv
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-tv-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/tv
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-tv-bazel-test
      name: job-main-tv-bazel-test
      namespace: default
      rerun_command: +test job-main-tv-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/tv
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-tv
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-tv-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/tv
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-tv-lint
      name: job-main-tv-lint
      namespace: default
      rerun_command: +test job-main-tv-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/tv/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-tv
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-tv-lint,?($|\s.*)
      trusted_labels:
      - job/main/tv
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-ugcpay-bazel-build
      name: job-main-ugcpay-bazel-build
      namespace: default
      rerun_command: +test job-main-ugcpay-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/ugcpay
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-ugcpay
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-ugcpay-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/ugcpay
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-ugcpay-bazel-test
      name: job-main-ugcpay-bazel-test
      namespace: default
      rerun_command: +test job-main-ugcpay-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/ugcpay
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-ugcpay
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-ugcpay-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/ugcpay
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-ugcpay-lint
      name: job-main-ugcpay-lint
      namespace: default
      rerun_command: +test job-main-ugcpay-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/ugcpay/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-ugcpay
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-ugcpay-lint,?($|\s.*)
      trusted_labels:
      - job/main/ugcpay
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-up-bazel-build
      name: job-main-up-bazel-build
      namespace: default
      rerun_command: +test job-main-up-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/up
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-up
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-up-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/up
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-up-bazel-test
      name: job-main-up-bazel-test
      namespace: default
      rerun_command: +test job-main-up-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/up
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-up
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-up-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/up
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-up-lint
      name: job-main-up-lint
      namespace: default
      rerun_command: +test job-main-up-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/up/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-up
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-up-lint,?($|\s.*)
      trusted_labels:
      - job/main/up
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-up-rating-bazel-build
      name: job-main-up-rating-bazel-build
      namespace: default
      rerun_command: +test job-main-up-rating-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/up-rating
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-up-rating
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-up-rating-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/up-rating
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-up-rating-bazel-test
      name: job-main-up-rating-bazel-test
      namespace: default
      rerun_command: +test job-main-up-rating-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/up-rating
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-up-rating
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-up-rating-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/up-rating
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-up-rating-lint
      name: job-main-up-rating-lint
      namespace: default
      rerun_command: +test job-main-up-rating-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/up-rating/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-up-rating
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-up-rating-lint,?($|\s.*)
      trusted_labels:
      - job/main/up-rating
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-upload-bazel-build
      name: job-main-upload-bazel-build
      namespace: default
      rerun_command: +test job-main-upload-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/upload
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-upload
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-upload-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/upload
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-upload-bazel-test
      name: job-main-upload-bazel-test
      namespace: default
      rerun_command: +test job-main-upload-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/upload
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-upload
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-upload-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/upload
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-upload-lint
      name: job-main-upload-lint
      namespace: default
      rerun_command: +test job-main-upload-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/upload/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-upload
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-upload-lint,?($|\s.*)
      trusted_labels:
      - job/main/upload
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-usersuit-bazel-build
      name: job-main-usersuit-bazel-build
      namespace: default
      rerun_command: +test job-main-usersuit-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/usersuit
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-usersuit
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-usersuit-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/usersuit
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-usersuit-bazel-test
      name: job-main-usersuit-bazel-test
      namespace: default
      rerun_command: +test job-main-usersuit-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/usersuit
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-usersuit
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-usersuit-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/usersuit
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-usersuit-lint
      name: job-main-usersuit-lint
      namespace: default
      rerun_command: +test job-main-usersuit-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/usersuit/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-usersuit
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-usersuit-lint,?($|\s.*)
      trusted_labels:
      - job/main/usersuit
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-videoup-bazel-build
      name: job-main-videoup-bazel-build
      namespace: default
      rerun_command: +test job-main-videoup-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/videoup
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-videoup
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-videoup-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/videoup
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-videoup-bazel-test
      name: job-main-videoup-bazel-test
      namespace: default
      rerun_command: +test job-main-videoup-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/videoup
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-videoup
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-videoup-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/videoup
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-videoup-lint
      name: job-main-videoup-lint
      namespace: default
      rerun_command: +test job-main-videoup-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/videoup/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-videoup
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-videoup-lint,?($|\s.*)
      trusted_labels:
      - job/main/videoup
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-videoup-report-bazel-build
      name: job-main-videoup-report-bazel-build
      namespace: default
      rerun_command: +test job-main-videoup-report-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/videoup-report
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-videoup-report
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-videoup-report-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/videoup-report
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-videoup-report-bazel-test
      name: job-main-videoup-report-bazel-test
      namespace: default
      rerun_command: +test job-main-videoup-report-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/videoup-report
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-videoup-report
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-videoup-report-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/videoup-report
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-videoup-report-lint
      name: job-main-videoup-report-lint
      namespace: default
      rerun_command: +test job-main-videoup-report-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/videoup-report/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-videoup-report
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-videoup-report-lint,?($|\s.*)
      trusted_labels:
      - job/main/videoup-report
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-vip-bazel-build
      name: job-main-vip-bazel-build
      namespace: default
      rerun_command: +test job-main-vip-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/vip
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-vip
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-vip-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/vip
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-vip-bazel-test
      name: job-main-vip-bazel-test
      namespace: default
      rerun_command: +test job-main-vip-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/vip
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-vip
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-vip-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/vip
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-vip-lint
      name: job-main-vip-lint
      namespace: default
      rerun_command: +test job-main-vip-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/vip/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-vip
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-vip-lint,?($|\s.*)
      trusted_labels:
      - job/main/vip
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-web-goblin-bazel-build
      name: job-main-web-goblin-bazel-build
      namespace: default
      rerun_command: +test job-main-web-goblin-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/web-goblin
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-web-goblin
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-web-goblin-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/web-goblin
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-web-goblin-bazel-test
      name: job-main-web-goblin-bazel-test
      namespace: default
      rerun_command: +test job-main-web-goblin-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/web-goblin
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-web-goblin
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-web-goblin-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/web-goblin
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-web-goblin-lint
      name: job-main-web-goblin-lint
      namespace: default
      rerun_command: +test job-main-web-goblin-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/web-goblin/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-web-goblin
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-web-goblin-lint,?($|\s.*)
      trusted_labels:
      - job/main/web-goblin
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-workflow-bazel-build
      name: job-main-workflow-bazel-build
      namespace: default
      rerun_command: +test job-main-workflow-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/main/workflow
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-workflow
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-workflow-bazel-build,?($|\s.*)
      trusted_labels:
      - job/main/workflow
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-workflow-bazel-test
      name: job-main-workflow-bazel-test
      namespace: default
      rerun_command: +test job-main-workflow-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/main/workflow
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-main-workflow
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-workflow-bazel-test,?($|\s.*)
      trusted_labels:
      - job/main/workflow
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-main-workflow-lint
      name: job-main-workflow-lint
      namespace: default
      rerun_command: +test job-main-workflow-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/main/workflow/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-main-workflow
          resources: {}
      trigger: (?m)^\+test( | .* )job-main-workflow-lint,?($|\s.*)
      trusted_labels:
      - job/main/workflow
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-openplatform-article-bazel-build
      name: job-openplatform-article-bazel-build
      namespace: default
      rerun_command: +test job-openplatform-article-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/openplatform/article
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-openplatform-article
          resources: {}
      trigger: (?m)^\+test( | .* )job-openplatform-article-bazel-build,?($|\s.*)
      trusted_labels:
      - job/openplatform/article
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-openplatform-article-bazel-test
      name: job-openplatform-article-bazel-test
      namespace: default
      rerun_command: +test job-openplatform-article-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/openplatform/article
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-openplatform-article
          resources: {}
      trigger: (?m)^\+test( | .* )job-openplatform-article-bazel-test,?($|\s.*)
      trusted_labels:
      - job/openplatform/article
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-openplatform-article-lint
      name: job-openplatform-article-lint
      namespace: default
      rerun_command: +test job-openplatform-article-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/openplatform/article/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-openplatform-article
          resources: {}
      trigger: (?m)^\+test( | .* )job-openplatform-article-lint,?($|\s.*)
      trusted_labels:
      - job/openplatform/article
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-openplatform-open-market-bazel-build
      name: job-openplatform-open-market-bazel-build
      namespace: default
      rerun_command: +test job-openplatform-open-market-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/openplatform/open-market
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-openplatform-open-market
          resources: {}
      trigger: (?m)^\+test( | .* )job-openplatform-open-market-bazel-build,?($|\s.*)
      trusted_labels:
      - job/openplatform/open-market
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-openplatform-open-market-bazel-test
      name: job-openplatform-open-market-bazel-test
      namespace: default
      rerun_command: +test job-openplatform-open-market-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/openplatform/open-market
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-openplatform-open-market
          resources: {}
      trigger: (?m)^\+test( | .* )job-openplatform-open-market-bazel-test,?($|\s.*)
      trusted_labels:
      - job/openplatform/open-market
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-openplatform-open-market-lint
      name: job-openplatform-open-market-lint
      namespace: default
      rerun_command: +test job-openplatform-open-market-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/openplatform/open-market/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-openplatform-open-market
          resources: {}
      trigger: (?m)^\+test( | .* )job-openplatform-open-market-lint,?($|\s.*)
      trusted_labels:
      - job/openplatform/open-market
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-openplatform-open-sug-bazel-build
      name: job-openplatform-open-sug-bazel-build
      namespace: default
      rerun_command: +test job-openplatform-open-sug-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/job/openplatform/open-sug
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-openplatform-open-sug
          resources: {}
      trigger: (?m)^\+test( | .* )job-openplatform-open-sug-bazel-build,?($|\s.*)
      trusted_labels:
      - job/openplatform/open-sug
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-openplatform-open-sug-bazel-test
      name: job-openplatform-open-sug-bazel-test
      namespace: default
      rerun_command: +test job-openplatform-open-sug-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/job/openplatform/open-sug
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: job-openplatform-open-sug
          resources: {}
      trigger: (?m)^\+test( | .* )job-openplatform-open-sug-bazel-test,?($|\s.*)
      trusted_labels:
      - job/openplatform/open-sug
    - agent: kubernetes
      always_run: true
      cluster: default
      context: job-openplatform-open-sug-lint
      name: job-openplatform-open-sug-lint
      namespace: default
      rerun_command: +test job-openplatform-open-sug-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/job/openplatform/open-sug/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: job-openplatform-open-sug
          resources: {}
      trigger: (?m)^\+test( | .* )job-openplatform-open-sug-lint,?($|\s.*)
      trusted_labels:
      - job/openplatform/open-sug
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-notice-service-bazel-build
      name: service-bbq-notice-service-bazel-build
      namespace: default
      rerun_command: +test service-bbq-notice-service-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/bbq/notice-service
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-bbq-notice-service
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-notice-service-bazel-build,?($|\s.*)
      trusted_labels:
      - service/bbq/notice-service
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-notice-service-bazel-test
      name: service-bbq-notice-service-bazel-test
      namespace: default
      rerun_command: +test service-bbq-notice-service-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/bbq/notice-service
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-bbq-notice-service
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-notice-service-bazel-test,?($|\s.*)
      trusted_labels:
      - service/bbq/notice-service
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-notice-service-lint
      name: service-bbq-notice-service-lint
      namespace: default
      rerun_command: +test service-bbq-notice-service-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/bbq/notice-service/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-bbq-notice-service
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-notice-service-lint,?($|\s.*)
      trusted_labels:
      - service/bbq/notice-service
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-push-bazel-build
      name: service-bbq-push-bazel-build
      namespace: default
      rerun_command: +test service-bbq-push-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/bbq/push
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-bbq-push
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-push-bazel-build,?($|\s.*)
      trusted_labels:
      - service/bbq/push
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-push-bazel-test
      name: service-bbq-push-bazel-test
      namespace: default
      rerun_command: +test service-bbq-push-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/bbq/push
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-bbq-push
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-push-bazel-test,?($|\s.*)
      trusted_labels:
      - service/bbq/push
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-push-lint
      name: service-bbq-push-lint
      namespace: default
      rerun_command: +test service-bbq-push-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/bbq/push/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-bbq-push
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-push-lint,?($|\s.*)
      trusted_labels:
      - service/bbq/push
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-recsys-bazel-build
      name: service-bbq-recsys-bazel-build
      namespace: default
      rerun_command: +test service-bbq-recsys-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/bbq/recsys
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-bbq-recsys
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-recsys-bazel-build,?($|\s.*)
      trusted_labels:
      - service/bbq/recsys
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-recsys-bazel-test
      name: service-bbq-recsys-bazel-test
      namespace: default
      rerun_command: +test service-bbq-recsys-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/bbq/recsys
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-bbq-recsys
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-recsys-bazel-test,?($|\s.*)
      trusted_labels:
      - service/bbq/recsys
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-recsys-lint
      name: service-bbq-recsys-lint
      namespace: default
      rerun_command: +test service-bbq-recsys-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/bbq/recsys/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-bbq-recsys
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-recsys-lint,?($|\s.*)
      trusted_labels:
      - service/bbq/recsys
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-recsys-recall-bazel-build
      name: service-bbq-recsys-recall-bazel-build
      namespace: default
      rerun_command: +test service-bbq-recsys-recall-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/bbq/recsys-recall
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-bbq-recsys-recall
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-recsys-recall-bazel-build,?($|\s.*)
      trusted_labels:
      - service/bbq/recsys-recall
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-recsys-recall-bazel-test
      name: service-bbq-recsys-recall-bazel-test
      namespace: default
      rerun_command: +test service-bbq-recsys-recall-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/bbq/recsys-recall
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-bbq-recsys-recall
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-recsys-recall-bazel-test,?($|\s.*)
      trusted_labels:
      - service/bbq/recsys-recall
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-recsys-recall-lint
      name: service-bbq-recsys-recall-lint
      namespace: default
      rerun_command: +test service-bbq-recsys-recall-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/bbq/recsys-recall/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-bbq-recsys-recall
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-recsys-recall-lint,?($|\s.*)
      trusted_labels:
      - service/bbq/recsys-recall
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-search-bazel-build
      name: service-bbq-search-bazel-build
      namespace: default
      rerun_command: +test service-bbq-search-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/bbq/search
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-bbq-search
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-search-bazel-build,?($|\s.*)
      trusted_labels:
      - service/bbq/search
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-search-bazel-test
      name: service-bbq-search-bazel-test
      namespace: default
      rerun_command: +test service-bbq-search-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/bbq/search
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-bbq-search
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-search-bazel-test,?($|\s.*)
      trusted_labels:
      - service/bbq/search
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-search-lint
      name: service-bbq-search-lint
      namespace: default
      rerun_command: +test service-bbq-search-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/bbq/search/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-bbq-search
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-search-lint,?($|\s.*)
      trusted_labels:
      - service/bbq/search
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-sys-msg-bazel-build
      name: service-bbq-sys-msg-bazel-build
      namespace: default
      rerun_command: +test service-bbq-sys-msg-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/bbq/sys-msg
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-bbq-sys-msg
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-sys-msg-bazel-build,?($|\s.*)
      trusted_labels:
      - service/bbq/sys-msg
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-sys-msg-bazel-test
      name: service-bbq-sys-msg-bazel-test
      namespace: default
      rerun_command: +test service-bbq-sys-msg-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/bbq/sys-msg
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-bbq-sys-msg
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-sys-msg-bazel-test,?($|\s.*)
      trusted_labels:
      - service/bbq/sys-msg
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-sys-msg-lint
      name: service-bbq-sys-msg-lint
      namespace: default
      rerun_command: +test service-bbq-sys-msg-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/bbq/sys-msg/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-bbq-sys-msg
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-sys-msg-lint,?($|\s.*)
      trusted_labels:
      - service/bbq/sys-msg
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-user-bazel-build
      name: service-bbq-user-bazel-build
      namespace: default
      rerun_command: +test service-bbq-user-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/bbq/user
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-bbq-user
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-user-bazel-build,?($|\s.*)
      trusted_labels:
      - service/bbq/user
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-user-bazel-test
      name: service-bbq-user-bazel-test
      namespace: default
      rerun_command: +test service-bbq-user-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/bbq/user
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-bbq-user
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-user-bazel-test,?($|\s.*)
      trusted_labels:
      - service/bbq/user
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-user-lint
      name: service-bbq-user-lint
      namespace: default
      rerun_command: +test service-bbq-user-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/bbq/user/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-bbq-user
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-user-lint,?($|\s.*)
      trusted_labels:
      - service/bbq/user
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-video-bazel-build
      name: service-bbq-video-bazel-build
      namespace: default
      rerun_command: +test service-bbq-video-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/bbq/video
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-bbq-video
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-video-bazel-build,?($|\s.*)
      trusted_labels:
      - service/bbq/video
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-video-bazel-test
      name: service-bbq-video-bazel-test
      namespace: default
      rerun_command: +test service-bbq-video-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/bbq/video
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-bbq-video
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-video-bazel-test,?($|\s.*)
      trusted_labels:
      - service/bbq/video
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-video-lint
      name: service-bbq-video-lint
      namespace: default
      rerun_command: +test service-bbq-video-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/bbq/video/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-bbq-video
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-video-lint,?($|\s.*)
      trusted_labels:
      - service/bbq/video
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-video-image-bazel-build
      name: service-bbq-video-image-bazel-build
      namespace: default
      rerun_command: +test service-bbq-video-image-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/bbq/video-image
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-bbq-video-image
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-video-image-bazel-build,?($|\s.*)
      trusted_labels:
      - service/bbq/video-image
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-video-image-bazel-test
      name: service-bbq-video-image-bazel-test
      namespace: default
      rerun_command: +test service-bbq-video-image-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/bbq/video-image
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-bbq-video-image
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-video-image-bazel-test,?($|\s.*)
      trusted_labels:
      - service/bbq/video-image
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-bbq-video-image-lint
      name: service-bbq-video-image-lint
      namespace: default
      rerun_command: +test service-bbq-video-image-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/bbq/video-image/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-bbq-video-image
          resources: {}
      trigger: (?m)^\+test( | .* )service-bbq-video-image-lint,?($|\s.*)
      trusted_labels:
      - service/bbq/video-image
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-ep-footman-bazel-build
      name: service-ep-footman-bazel-build
      namespace: default
      rerun_command: +test service-ep-footman-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/ep/footman
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-ep-footman
          resources: {}
      trigger: (?m)^\+test( | .* )service-ep-footman-bazel-build,?($|\s.*)
      trusted_labels:
      - service/ep/footman
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-ep-footman-bazel-test
      name: service-ep-footman-bazel-test
      namespace: default
      rerun_command: +test service-ep-footman-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/ep/footman
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-ep-footman
          resources: {}
      trigger: (?m)^\+test( | .* )service-ep-footman-bazel-test,?($|\s.*)
      trusted_labels:
      - service/ep/footman
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-ep-footman-lint
      name: service-ep-footman-lint
      namespace: default
      rerun_command: +test service-ep-footman-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/ep/footman/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-ep-footman
          resources: {}
      trigger: (?m)^\+test( | .* )service-ep-footman-lint,?($|\s.*)
      trusted_labels:
      - service/ep/footman
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-ep-saga-agent-bazel-build
      name: service-ep-saga-agent-bazel-build
      namespace: default
      rerun_command: +test service-ep-saga-agent-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/ep/saga-agent
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-ep-saga-agent
          resources: {}
      trigger: (?m)^\+test( | .* )service-ep-saga-agent-bazel-build,?($|\s.*)
      trusted_labels:
      - service/ep/saga-agent
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-ep-saga-agent-bazel-test
      name: service-ep-saga-agent-bazel-test
      namespace: default
      rerun_command: +test service-ep-saga-agent-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/ep/saga-agent
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-ep-saga-agent
          resources: {}
      trigger: (?m)^\+test( | .* )service-ep-saga-agent-bazel-test,?($|\s.*)
      trusted_labels:
      - service/ep/saga-agent
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-ep-saga-agent-lint
      name: service-ep-saga-agent-lint
      namespace: default
      rerun_command: +test service-ep-saga-agent-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/ep/saga-agent/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-ep-saga-agent
          resources: {}
      trigger: (?m)^\+test( | .* )service-ep-saga-agent-lint,?($|\s.*)
      trusted_labels:
      - service/ep/saga-agent
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-activity-bazel-build
      name: service-live-activity-bazel-build
      namespace: default
      rerun_command: +test service-live-activity-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/activity
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-activity
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-activity-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/activity
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-activity-bazel-test
      name: service-live-activity-bazel-test
      namespace: default
      rerun_command: +test service-live-activity-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/activity
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-activity
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-activity-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/activity
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-activity-lint
      name: service-live-activity-lint
      namespace: default
      rerun_command: +test service-live-activity-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/activity/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-activity
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-activity-lint,?($|\s.*)
      trusted_labels:
      - service/live/activity
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-broadcast-proxy-bazel-build
      name: service-live-broadcast-proxy-bazel-build
      namespace: default
      rerun_command: +test service-live-broadcast-proxy-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/broadcast-proxy
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-broadcast-proxy
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-broadcast-proxy-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/broadcast-proxy
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-broadcast-proxy-bazel-test
      name: service-live-broadcast-proxy-bazel-test
      namespace: default
      rerun_command: +test service-live-broadcast-proxy-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/broadcast-proxy
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-broadcast-proxy
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-broadcast-proxy-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/broadcast-proxy
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-broadcast-proxy-lint
      name: service-live-broadcast-proxy-lint
      namespace: default
      rerun_command: +test service-live-broadcast-proxy-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/broadcast-proxy/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-broadcast-proxy
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-broadcast-proxy-lint,?($|\s.*)
      trusted_labels:
      - service/live/broadcast-proxy
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-fans_medal-bazel-build
      name: service-live-fans_medal-bazel-build
      namespace: default
      rerun_command: +test service-live-fans_medal-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/fans_medal
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-fans_medal
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-fans_medal-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/fans_medal
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-fans_medal-bazel-test
      name: service-live-fans_medal-bazel-test
      namespace: default
      rerun_command: +test service-live-fans_medal-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/fans_medal
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-fans_medal
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-fans_medal-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/fans_medal
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-fans_medal-lint
      name: service-live-fans_medal-lint
      namespace: default
      rerun_command: +test service-live-fans_medal-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/fans_medal/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-fans_medal
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-fans_medal-lint,?($|\s.*)
      trusted_labels:
      - service/live/fans_medal
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-gift-bazel-build
      name: service-live-gift-bazel-build
      namespace: default
      rerun_command: +test service-live-gift-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/gift
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-gift
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-gift-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/gift
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-gift-bazel-test
      name: service-live-gift-bazel-test
      namespace: default
      rerun_command: +test service-live-gift-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/gift
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-gift
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-gift-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/gift
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-gift-lint
      name: service-live-gift-lint
      namespace: default
      rerun_command: +test service-live-gift-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/gift/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-gift
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-gift-lint,?($|\s.*)
      trusted_labels:
      - service/live/gift
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-grpc-demo-bazel-build
      name: service-live-grpc-demo-bazel-build
      namespace: default
      rerun_command: +test service-live-grpc-demo-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/grpc-demo
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-grpc-demo
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-grpc-demo-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/grpc-demo
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-grpc-demo-bazel-test
      name: service-live-grpc-demo-bazel-test
      namespace: default
      rerun_command: +test service-live-grpc-demo-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/grpc-demo
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-grpc-demo
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-grpc-demo-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/grpc-demo
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-grpc-demo-lint
      name: service-live-grpc-demo-lint
      namespace: default
      rerun_command: +test service-live-grpc-demo-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/grpc-demo/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-grpc-demo
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-grpc-demo-lint,?($|\s.*)
      trusted_labels:
      - service/live/grpc-demo
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-live-dm-bazel-build
      name: service-live-live-dm-bazel-build
      namespace: default
      rerun_command: +test service-live-live-dm-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/live-dm
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-live-dm
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-live-dm-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/live-dm
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-live-dm-bazel-test
      name: service-live-live-dm-bazel-test
      namespace: default
      rerun_command: +test service-live-live-dm-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/live-dm
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-live-dm
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-live-dm-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/live-dm
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-live-dm-lint
      name: service-live-live-dm-lint
      namespace: default
      rerun_command: +test service-live-live-dm-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/live-dm/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-live-dm
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-live-dm-lint,?($|\s.*)
      trusted_labels:
      - service/live/live-dm
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-live_riskcontrol-bazel-build
      name: service-live-live_riskcontrol-bazel-build
      namespace: default
      rerun_command: +test service-live-live_riskcontrol-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/live_riskcontrol
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-live_riskcontrol
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-live_riskcontrol-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/live_riskcontrol
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-live_riskcontrol-bazel-test
      name: service-live-live_riskcontrol-bazel-test
      namespace: default
      rerun_command: +test service-live-live_riskcontrol-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/live_riskcontrol
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-live_riskcontrol
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-live_riskcontrol-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/live_riskcontrol
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-live_riskcontrol-lint
      name: service-live-live_riskcontrol-lint
      namespace: default
      rerun_command: +test service-live-live_riskcontrol-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/live_riskcontrol/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-live_riskcontrol
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-live_riskcontrol-lint,?($|\s.*)
      trusted_labels:
      - service/live/live_riskcontrol
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-rankdb-bazel-build
      name: service-live-rankdb-bazel-build
      namespace: default
      rerun_command: +test service-live-rankdb-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/rankdb
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-rankdb
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-rankdb-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/rankdb
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-rankdb-bazel-test
      name: service-live-rankdb-bazel-test
      namespace: default
      rerun_command: +test service-live-rankdb-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/rankdb
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-rankdb
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-rankdb-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/rankdb
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-rankdb-lint
      name: service-live-rankdb-lint
      namespace: default
      rerun_command: +test service-live-rankdb-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/rankdb/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-rankdb
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-rankdb-lint,?($|\s.*)
      trusted_labels:
      - service/live/rankdb
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-recommend-bazel-build
      name: service-live-recommend-bazel-build
      namespace: default
      rerun_command: +test service-live-recommend-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/recommend
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-recommend
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-recommend-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/recommend
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-recommend-bazel-test
      name: service-live-recommend-bazel-test
      namespace: default
      rerun_command: +test service-live-recommend-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/recommend
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-recommend
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-recommend-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/recommend
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-recommend-lint
      name: service-live-recommend-lint
      namespace: default
      rerun_command: +test service-live-recommend-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/recommend/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-recommend
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-recommend-lint,?($|\s.*)
      trusted_labels:
      - service/live/recommend
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-resource-bazel-build
      name: service-live-resource-bazel-build
      namespace: default
      rerun_command: +test service-live-resource-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/resource
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-resource
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-resource-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/resource
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-resource-bazel-test
      name: service-live-resource-bazel-test
      namespace: default
      rerun_command: +test service-live-resource-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/resource
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-resource
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-resource-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/resource
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-resource-lint
      name: service-live-resource-lint
      namespace: default
      rerun_command: +test service-live-resource-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/resource/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-resource
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-resource-lint,?($|\s.*)
      trusted_labels:
      - service/live/resource
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-rtc-bazel-build
      name: service-live-rtc-bazel-build
      namespace: default
      rerun_command: +test service-live-rtc-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/rtc
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-rtc
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-rtc-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/rtc
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-rtc-bazel-test
      name: service-live-rtc-bazel-test
      namespace: default
      rerun_command: +test service-live-rtc-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/rtc
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-rtc
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-rtc-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/rtc
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-rtc-lint
      name: service-live-rtc-lint
      namespace: default
      rerun_command: +test service-live-rtc-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/rtc/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-rtc
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-rtc-lint,?($|\s.*)
      trusted_labels:
      - service/live/rtc
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-userexp-bazel-build
      name: service-live-userexp-bazel-build
      namespace: default
      rerun_command: +test service-live-userexp-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/userexp
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-userexp
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-userexp-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/userexp
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-userexp-bazel-test
      name: service-live-userexp-bazel-test
      namespace: default
      rerun_command: +test service-live-userexp-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/userexp
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-userexp
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-userexp-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/userexp
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-userexp-lint
      name: service-live-userexp-lint
      namespace: default
      rerun_command: +test service-live-userexp-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/userexp/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-userexp
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-userexp-lint,?($|\s.*)
      trusted_labels:
      - service/live/userexp
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-wallet-bazel-build
      name: service-live-wallet-bazel-build
      namespace: default
      rerun_command: +test service-live-wallet-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/wallet
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-wallet
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-wallet-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/wallet
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-wallet-bazel-test
      name: service-live-wallet-bazel-test
      namespace: default
      rerun_command: +test service-live-wallet-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/wallet
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-wallet
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-wallet-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/wallet
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-wallet-lint
      name: service-live-wallet-lint
      namespace: default
      rerun_command: +test service-live-wallet-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/wallet/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-wallet
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-wallet-lint,?($|\s.*)
      trusted_labels:
      - service/live/wallet
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-xanchor-bazel-build
      name: service-live-xanchor-bazel-build
      namespace: default
      rerun_command: +test service-live-xanchor-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/xanchor
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-xanchor
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-xanchor-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/xanchor
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-xanchor-bazel-test
      name: service-live-xanchor-bazel-test
      namespace: default
      rerun_command: +test service-live-xanchor-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/xanchor
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-xanchor
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-xanchor-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/xanchor
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-xanchor-lint
      name: service-live-xanchor-lint
      namespace: default
      rerun_command: +test service-live-xanchor-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/xanchor/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-xanchor
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-xanchor-lint,?($|\s.*)
      trusted_labels:
      - service/live/xanchor
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-xfansmedal-bazel-build
      name: service-live-xfansmedal-bazel-build
      namespace: default
      rerun_command: +test service-live-xfansmedal-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/xfansmedal
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-xfansmedal
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-xfansmedal-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/xfansmedal
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-xfansmedal-bazel-test
      name: service-live-xfansmedal-bazel-test
      namespace: default
      rerun_command: +test service-live-xfansmedal-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/xfansmedal
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-xfansmedal
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-xfansmedal-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/xfansmedal
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-xfansmedal-lint
      name: service-live-xfansmedal-lint
      namespace: default
      rerun_command: +test service-live-xfansmedal-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/xfansmedal/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-xfansmedal
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-xfansmedal-lint,?($|\s.*)
      trusted_labels:
      - service/live/xfansmedal
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-xlottery-bazel-build
      name: service-live-xlottery-bazel-build
      namespace: default
      rerun_command: +test service-live-xlottery-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/xlottery
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-xlottery
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-xlottery-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/xlottery
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-xlottery-bazel-test
      name: service-live-xlottery-bazel-test
      namespace: default
      rerun_command: +test service-live-xlottery-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/xlottery
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-xlottery
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-xlottery-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/xlottery
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-xlottery-lint
      name: service-live-xlottery-lint
      namespace: default
      rerun_command: +test service-live-xlottery-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/xlottery/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-xlottery
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-xlottery-lint,?($|\s.*)
      trusted_labels:
      - service/live/xlottery
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-xrewardcenter-bazel-build
      name: service-live-xrewardcenter-bazel-build
      namespace: default
      rerun_command: +test service-live-xrewardcenter-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/xrewardcenter
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-xrewardcenter
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-xrewardcenter-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/xrewardcenter
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-xrewardcenter-bazel-test
      name: service-live-xrewardcenter-bazel-test
      namespace: default
      rerun_command: +test service-live-xrewardcenter-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/xrewardcenter
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-xrewardcenter
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-xrewardcenter-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/xrewardcenter
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-xrewardcenter-lint
      name: service-live-xrewardcenter-lint
      namespace: default
      rerun_command: +test service-live-xrewardcenter-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/xrewardcenter/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-xrewardcenter
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-xrewardcenter-lint,?($|\s.*)
      trusted_labels:
      - service/live/xrewardcenter
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-xuser-bazel-build
      name: service-live-xuser-bazel-build
      namespace: default
      rerun_command: +test service-live-xuser-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/xuser
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-xuser
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-xuser-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/xuser
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-xuser-bazel-test
      name: service-live-xuser-bazel-test
      namespace: default
      rerun_command: +test service-live-xuser-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/xuser
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-xuser
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-xuser-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/xuser
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-xuser-lint
      name: service-live-xuser-lint
      namespace: default
      rerun_command: +test service-live-xuser-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/xuser/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-xuser
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-xuser-lint,?($|\s.*)
      trusted_labels:
      - service/live/xuser
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-zeus-bazel-build
      name: service-live-zeus-bazel-build
      namespace: default
      rerun_command: +test service-live-zeus-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/live/zeus
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-zeus
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-zeus-bazel-build,?($|\s.*)
      trusted_labels:
      - service/live/zeus
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-zeus-bazel-test
      name: service-live-zeus-bazel-test
      namespace: default
      rerun_command: +test service-live-zeus-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/live/zeus
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-live-zeus
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-zeus-bazel-test,?($|\s.*)
      trusted_labels:
      - service/live/zeus
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-live-zeus-lint
      name: service-live-zeus-lint
      namespace: default
      rerun_command: +test service-live-zeus-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/live/zeus/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-live-zeus
          resources: {}
      trigger: (?m)^\+test( | .* )service-live-zeus-lint,?($|\s.*)
      trusted_labels:
      - service/live/zeus
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-account-bazel-build
      name: service-main-account-bazel-build
      namespace: default
      rerun_command: +test service-main-account-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/account
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-account
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-account-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/account
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-account-bazel-test
      name: service-main-account-bazel-test
      namespace: default
      rerun_command: +test service-main-account-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/account
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-account
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-account-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/account
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-account-lint
      name: service-main-account-lint
      namespace: default
      rerun_command: +test service-main-account-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/account/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-account
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-account-lint,?($|\s.*)
      trusted_labels:
      - service/main/account
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-account-recovery-bazel-build
      name: service-main-account-recovery-bazel-build
      namespace: default
      rerun_command: +test service-main-account-recovery-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/account-recovery
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-account-recovery
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-account-recovery-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/account-recovery
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-account-recovery-bazel-test
      name: service-main-account-recovery-bazel-test
      namespace: default
      rerun_command: +test service-main-account-recovery-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/account-recovery
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-account-recovery
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-account-recovery-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/account-recovery
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-account-recovery-lint
      name: service-main-account-recovery-lint
      namespace: default
      rerun_command: +test service-main-account-recovery-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/account-recovery/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-account-recovery
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-account-recovery-lint,?($|\s.*)
      trusted_labels:
      - service/main/account-recovery
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-antispam-bazel-build
      name: service-main-antispam-bazel-build
      namespace: default
      rerun_command: +test service-main-antispam-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/antispam
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-antispam
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-antispam-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/antispam
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-antispam-bazel-test
      name: service-main-antispam-bazel-test
      namespace: default
      rerun_command: +test service-main-antispam-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/antispam
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-antispam
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-antispam-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/antispam
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-antispam-lint
      name: service-main-antispam-lint
      namespace: default
      rerun_command: +test service-main-antispam-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/antispam/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-antispam
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-antispam-lint,?($|\s.*)
      trusted_labels:
      - service/main/antispam
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-archive-bazel-build
      name: service-main-archive-bazel-build
      namespace: default
      rerun_command: +test service-main-archive-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/archive
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-archive
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-archive-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/archive
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-archive-bazel-test
      name: service-main-archive-bazel-test
      namespace: default
      rerun_command: +test service-main-archive-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/archive
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-archive
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-archive-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/archive
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-archive-lint
      name: service-main-archive-lint
      namespace: default
      rerun_command: +test service-main-archive-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/archive/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-archive
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-archive-lint,?($|\s.*)
      trusted_labels:
      - service/main/archive
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-assist-bazel-build
      name: service-main-assist-bazel-build
      namespace: default
      rerun_command: +test service-main-assist-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/assist
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-assist
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-assist-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/assist
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-assist-bazel-test
      name: service-main-assist-bazel-test
      namespace: default
      rerun_command: +test service-main-assist-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/assist
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-assist
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-assist-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/assist
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-assist-lint
      name: service-main-assist-lint
      namespace: default
      rerun_command: +test service-main-assist-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/assist/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-assist
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-assist-lint,?($|\s.*)
      trusted_labels:
      - service/main/assist
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-bns-bazel-build
      name: service-main-bns-bazel-build
      namespace: default
      rerun_command: +test service-main-bns-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/bns
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-bns
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-bns-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/bns
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-bns-bazel-test
      name: service-main-bns-bazel-test
      namespace: default
      rerun_command: +test service-main-bns-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/bns
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-bns
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-bns-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/bns
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-bns-lint
      name: service-main-bns-lint
      namespace: default
      rerun_command: +test service-main-bns-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/bns/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-bns
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-bns-lint,?($|\s.*)
      trusted_labels:
      - service/main/bns
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-broadcast-bazel-build
      name: service-main-broadcast-bazel-build
      namespace: default
      rerun_command: +test service-main-broadcast-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/broadcast
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-broadcast
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-broadcast-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/broadcast
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-broadcast-bazel-test
      name: service-main-broadcast-bazel-test
      namespace: default
      rerun_command: +test service-main-broadcast-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/broadcast
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-broadcast
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-broadcast-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/broadcast
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-broadcast-lint
      name: service-main-broadcast-lint
      namespace: default
      rerun_command: +test service-main-broadcast-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/broadcast/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-broadcast
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-broadcast-lint,?($|\s.*)
      trusted_labels:
      - service/main/broadcast
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-card-bazel-build
      name: service-main-card-bazel-build
      namespace: default
      rerun_command: +test service-main-card-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/card
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-card
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-card-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/card
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-card-bazel-test
      name: service-main-card-bazel-test
      namespace: default
      rerun_command: +test service-main-card-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/card
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-card
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-card-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/card
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-card-lint
      name: service-main-card-lint
      namespace: default
      rerun_command: +test service-main-card-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/card/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-card
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-card-lint,?($|\s.*)
      trusted_labels:
      - service/main/card
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-coin-bazel-build
      name: service-main-coin-bazel-build
      namespace: default
      rerun_command: +test service-main-coin-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/coin
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-coin
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-coin-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/coin
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-coin-bazel-test
      name: service-main-coin-bazel-test
      namespace: default
      rerun_command: +test service-main-coin-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/coin
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-coin
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-coin-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/coin
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-coin-lint
      name: service-main-coin-lint
      namespace: default
      rerun_command: +test service-main-coin-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/coin/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-coin
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-coin-lint,?($|\s.*)
      trusted_labels:
      - service/main/coin
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-config-bazel-build
      name: service-main-config-bazel-build
      namespace: default
      rerun_command: +test service-main-config-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=go-common/app/infra/config
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-config
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-config-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/config
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-config-bazel-test
      name: service-main-config-bazel-test
      namespace: default
      rerun_command: +test service-main-config-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh go-common/app/infra/config
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-config
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-config-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/config
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-config-lint
      name: service-main-config-lint
      namespace: default
      rerun_command: +test service-main-config-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./go-common/app/infra/config/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-config
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-config-lint,?($|\s.*)
      trusted_labels:
      - service/main/config
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-coupon-bazel-build
      name: service-main-coupon-bazel-build
      namespace: default
      rerun_command: +test service-main-coupon-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/coupon
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-coupon
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-coupon-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/coupon
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-coupon-bazel-test
      name: service-main-coupon-bazel-test
      namespace: default
      rerun_command: +test service-main-coupon-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/coupon
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-coupon
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-coupon-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/coupon
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-coupon-lint
      name: service-main-coupon-lint
      namespace: default
      rerun_command: +test service-main-coupon-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/coupon/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-coupon
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-coupon-lint,?($|\s.*)
      trusted_labels:
      - service/main/coupon
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-dapper-bazel-build
      name: service-main-dapper-bazel-build
      namespace: default
      rerun_command: +test service-main-dapper-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/dapper
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-dapper
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-dapper-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/dapper
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-dapper-bazel-test
      name: service-main-dapper-bazel-test
      namespace: default
      rerun_command: +test service-main-dapper-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/dapper
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-dapper
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-dapper-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/dapper
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-dapper-lint
      name: service-main-dapper-lint
      namespace: default
      rerun_command: +test service-main-dapper-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/dapper/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-dapper
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-dapper-lint,?($|\s.*)
      trusted_labels:
      - service/main/dapper
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-dapper-query-bazel-build
      name: service-main-dapper-query-bazel-build
      namespace: default
      rerun_command: +test service-main-dapper-query-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/dapper-query
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-dapper-query
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-dapper-query-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/dapper-query
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-dapper-query-bazel-test
      name: service-main-dapper-query-bazel-test
      namespace: default
      rerun_command: +test service-main-dapper-query-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/dapper-query
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-dapper-query
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-dapper-query-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/dapper-query
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-dapper-query-lint
      name: service-main-dapper-query-lint
      namespace: default
      rerun_command: +test service-main-dapper-query-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/dapper-query/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-dapper-query
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-dapper-query-lint,?($|\s.*)
      trusted_labels:
      - service/main/dapper-query
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-dynamic-bazel-build
      name: service-main-dynamic-bazel-build
      namespace: default
      rerun_command: +test service-main-dynamic-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/dynamic
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-dynamic
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-dynamic-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/dynamic
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-dynamic-bazel-test
      name: service-main-dynamic-bazel-test
      namespace: default
      rerun_command: +test service-main-dynamic-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/dynamic
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-dynamic
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-dynamic-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/dynamic
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-dynamic-lint
      name: service-main-dynamic-lint
      namespace: default
      rerun_command: +test service-main-dynamic-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/dynamic/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-dynamic
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-dynamic-lint,?($|\s.*)
      trusted_labels:
      - service/main/dynamic
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-favorite-bazel-build
      name: service-main-favorite-bazel-build
      namespace: default
      rerun_command: +test service-main-favorite-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/favorite
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-favorite
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-favorite-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/favorite
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-favorite-bazel-test
      name: service-main-favorite-bazel-test
      namespace: default
      rerun_command: +test service-main-favorite-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/favorite
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-favorite
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-favorite-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/favorite
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-favorite-lint
      name: service-main-favorite-lint
      namespace: default
      rerun_command: +test service-main-favorite-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/favorite/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-favorite
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-favorite-lint,?($|\s.*)
      trusted_labels:
      - service/main/favorite
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-feed-bazel-build
      name: service-main-feed-bazel-build
      namespace: default
      rerun_command: +test service-main-feed-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/feed
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-feed
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-feed-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/feed
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-feed-bazel-test
      name: service-main-feed-bazel-test
      namespace: default
      rerun_command: +test service-main-feed-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/feed
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-feed
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-feed-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/feed
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-feed-lint
      name: service-main-feed-lint
      namespace: default
      rerun_command: +test service-main-feed-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/feed/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-feed
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-feed-lint,?($|\s.*)
      trusted_labels:
      - service/main/feed
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-figure-bazel-build
      name: service-main-figure-bazel-build
      namespace: default
      rerun_command: +test service-main-figure-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/figure
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-figure
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-figure-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/figure
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-figure-bazel-test
      name: service-main-figure-bazel-test
      namespace: default
      rerun_command: +test service-main-figure-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/figure
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-figure
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-figure-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/figure
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-figure-lint
      name: service-main-figure-lint
      namespace: default
      rerun_command: +test service-main-figure-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/figure/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-figure
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-figure-lint,?($|\s.*)
      trusted_labels:
      - service/main/figure
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-filter-bazel-build
      name: service-main-filter-bazel-build
      namespace: default
      rerun_command: +test service-main-filter-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/filter
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-filter
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-filter-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/filter
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-filter-bazel-test
      name: service-main-filter-bazel-test
      namespace: default
      rerun_command: +test service-main-filter-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/filter
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-filter
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-filter-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/filter
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-filter-lint
      name: service-main-filter-lint
      namespace: default
      rerun_command: +test service-main-filter-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/filter/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-filter
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-filter-lint,?($|\s.*)
      trusted_labels:
      - service/main/filter
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-history-bazel-build
      name: service-main-history-bazel-build
      namespace: default
      rerun_command: +test service-main-history-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/history
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-history
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-history-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/history
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-history-bazel-test
      name: service-main-history-bazel-test
      namespace: default
      rerun_command: +test service-main-history-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/history
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-history
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-history-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/history
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-history-lint
      name: service-main-history-lint
      namespace: default
      rerun_command: +test service-main-history-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/history/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-history
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-history-lint,?($|\s.*)
      trusted_labels:
      - service/main/history
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-identify-bazel-build
      name: service-main-identify-bazel-build
      namespace: default
      rerun_command: +test service-main-identify-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/identify
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-identify
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-identify-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/identify
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-identify-bazel-test
      name: service-main-identify-bazel-test
      namespace: default
      rerun_command: +test service-main-identify-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/identify
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-identify
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-identify-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/identify
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-identify-lint
      name: service-main-identify-lint
      namespace: default
      rerun_command: +test service-main-identify-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/identify/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-identify
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-identify-lint,?($|\s.*)
      trusted_labels:
      - service/main/identify
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-identify-game-bazel-build
      name: service-main-identify-game-bazel-build
      namespace: default
      rerun_command: +test service-main-identify-game-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/identify-game
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-identify-game
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-identify-game-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/identify-game
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-identify-game-bazel-test
      name: service-main-identify-game-bazel-test
      namespace: default
      rerun_command: +test service-main-identify-game-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/identify-game
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-identify-game
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-identify-game-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/identify-game
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-identify-game-lint
      name: service-main-identify-game-lint
      namespace: default
      rerun_command: +test service-main-identify-game-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/identify-game/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-identify-game
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-identify-game-lint,?($|\s.*)
      trusted_labels:
      - service/main/identify-game
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-location-bazel-build
      name: service-main-location-bazel-build
      namespace: default
      rerun_command: +test service-main-location-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/location
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-location
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-location-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/location
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-location-bazel-test
      name: service-main-location-bazel-test
      namespace: default
      rerun_command: +test service-main-location-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/location
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-location
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-location-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/location
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-location-lint
      name: service-main-location-lint
      namespace: default
      rerun_command: +test service-main-location-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/location/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-location
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-location-lint,?($|\s.*)
      trusted_labels:
      - service/main/location
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-member-bazel-build
      name: service-main-member-bazel-build
      namespace: default
      rerun_command: +test service-main-member-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/member
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-member
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-member-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/member
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-member-bazel-test
      name: service-main-member-bazel-test
      namespace: default
      rerun_command: +test service-main-member-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/member
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-member
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-member-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/member
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-member-lint
      name: service-main-member-lint
      namespace: default
      rerun_command: +test service-main-member-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/member/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-member
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-member-lint,?($|\s.*)
      trusted_labels:
      - service/main/member
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-msm-bazel-build
      name: service-main-msm-bazel-build
      namespace: default
      rerun_command: +test service-main-msm-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/msm
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-msm
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-msm-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/msm
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-msm-bazel-test
      name: service-main-msm-bazel-test
      namespace: default
      rerun_command: +test service-main-msm-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/msm
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-msm
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-msm-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/msm
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-msm-lint
      name: service-main-msm-lint
      namespace: default
      rerun_command: +test service-main-msm-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/msm/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-msm
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-msm-lint,?($|\s.*)
      trusted_labels:
      - service/main/msm
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-notify-bazel-build
      name: service-main-notify-bazel-build
      namespace: default
      rerun_command: +test service-main-notify-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/notify
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-notify
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-notify-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/notify
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-notify-bazel-test
      name: service-main-notify-bazel-test
      namespace: default
      rerun_command: +test service-main-notify-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/notify
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-notify
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-notify-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/notify
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-notify-lint
      name: service-main-notify-lint
      namespace: default
      rerun_command: +test service-main-notify-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/notify/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-notify
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-notify-lint,?($|\s.*)
      trusted_labels:
      - service/main/notify
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-open-bazel-build
      name: service-main-open-bazel-build
      namespace: default
      rerun_command: +test service-main-open-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/open
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-open
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-open-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/open
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-open-bazel-test
      name: service-main-open-bazel-test
      namespace: default
      rerun_command: +test service-main-open-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/open
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-open
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-open-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/open
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-open-lint
      name: service-main-open-lint
      namespace: default
      rerun_command: +test service-main-open-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/open/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-open
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-open-lint,?($|\s.*)
      trusted_labels:
      - service/main/open
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-passport-bazel-build
      name: service-main-passport-bazel-build
      namespace: default
      rerun_command: +test service-main-passport-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/passport
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-passport
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-passport-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/passport
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-passport-bazel-test
      name: service-main-passport-bazel-test
      namespace: default
      rerun_command: +test service-main-passport-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/passport
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-passport
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-passport-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/passport
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-passport-lint
      name: service-main-passport-lint
      namespace: default
      rerun_command: +test service-main-passport-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/passport/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-passport
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-passport-lint,?($|\s.*)
      trusted_labels:
      - service/main/passport
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-passport-auth-bazel-build
      name: service-main-passport-auth-bazel-build
      namespace: default
      rerun_command: +test service-main-passport-auth-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/passport-auth
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-passport-auth
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-passport-auth-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/passport-auth
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-passport-auth-bazel-test
      name: service-main-passport-auth-bazel-test
      namespace: default
      rerun_command: +test service-main-passport-auth-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/passport-auth
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-passport-auth
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-passport-auth-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/passport-auth
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-passport-auth-lint
      name: service-main-passport-auth-lint
      namespace: default
      rerun_command: +test service-main-passport-auth-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/passport-auth/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-passport-auth
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-passport-auth-lint,?($|\s.*)
      trusted_labels:
      - service/main/passport-auth
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-passport-game-bazel-build
      name: service-main-passport-game-bazel-build
      namespace: default
      rerun_command: +test service-main-passport-game-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/passport-game
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-passport-game
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-passport-game-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/passport-game
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-passport-game-bazel-test
      name: service-main-passport-game-bazel-test
      namespace: default
      rerun_command: +test service-main-passport-game-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/passport-game
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-passport-game
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-passport-game-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/passport-game
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-passport-game-lint
      name: service-main-passport-game-lint
      namespace: default
      rerun_command: +test service-main-passport-game-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/passport-game/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-passport-game
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-passport-game-lint,?($|\s.*)
      trusted_labels:
      - service/main/passport-game
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-point-bazel-build
      name: service-main-point-bazel-build
      namespace: default
      rerun_command: +test service-main-point-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/point
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-point
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-point-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/point
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-point-bazel-test
      name: service-main-point-bazel-test
      namespace: default
      rerun_command: +test service-main-point-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/point
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-point
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-point-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/point
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-point-lint
      name: service-main-point-lint
      namespace: default
      rerun_command: +test service-main-point-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/point/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-point
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-point-lint,?($|\s.*)
      trusted_labels:
      - service/main/point
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-push-bazel-build
      name: service-main-push-bazel-build
      namespace: default
      rerun_command: +test service-main-push-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/push
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-push
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-push-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/push
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-push-bazel-test
      name: service-main-push-bazel-test
      namespace: default
      rerun_command: +test service-main-push-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/push
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-push
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-push-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/push
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-push-lint
      name: service-main-push-lint
      namespace: default
      rerun_command: +test service-main-push-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/push/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-push
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-push-lint,?($|\s.*)
      trusted_labels:
      - service/main/push
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-push-strategy-bazel-build
      name: service-main-push-strategy-bazel-build
      namespace: default
      rerun_command: +test service-main-push-strategy-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/push-strategy
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-push-strategy
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-push-strategy-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/push-strategy
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-push-strategy-bazel-test
      name: service-main-push-strategy-bazel-test
      namespace: default
      rerun_command: +test service-main-push-strategy-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/push-strategy
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-push-strategy
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-push-strategy-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/push-strategy
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-push-strategy-lint
      name: service-main-push-strategy-lint
      namespace: default
      rerun_command: +test service-main-push-strategy-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/push-strategy/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-push-strategy
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-push-strategy-lint,?($|\s.*)
      trusted_labels:
      - service/main/push-strategy
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-rank-bazel-build
      name: service-main-rank-bazel-build
      namespace: default
      rerun_command: +test service-main-rank-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/rank
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-rank
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-rank-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/rank
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-rank-bazel-test
      name: service-main-rank-bazel-test
      namespace: default
      rerun_command: +test service-main-rank-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/rank
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-rank
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-rank-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/rank
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-rank-lint
      name: service-main-rank-lint
      namespace: default
      rerun_command: +test service-main-rank-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/rank/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-rank
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-rank-lint,?($|\s.*)
      trusted_labels:
      - service/main/rank
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-relation-bazel-build
      name: service-main-relation-bazel-build
      namespace: default
      rerun_command: +test service-main-relation-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/relation
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-relation
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-relation-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/relation
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-relation-bazel-test
      name: service-main-relation-bazel-test
      namespace: default
      rerun_command: +test service-main-relation-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/relation
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-relation
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-relation-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/relation
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-relation-lint
      name: service-main-relation-lint
      namespace: default
      rerun_command: +test service-main-relation-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/relation/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-relation
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-relation-lint,?($|\s.*)
      trusted_labels:
      - service/main/relation
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-reply-feed-bazel-build
      name: service-main-reply-feed-bazel-build
      namespace: default
      rerun_command: +test service-main-reply-feed-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/reply-feed
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-reply-feed
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-reply-feed-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/reply-feed
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-reply-feed-bazel-test
      name: service-main-reply-feed-bazel-test
      namespace: default
      rerun_command: +test service-main-reply-feed-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/reply-feed
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-reply-feed
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-reply-feed-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/reply-feed
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-reply-feed-lint
      name: service-main-reply-feed-lint
      namespace: default
      rerun_command: +test service-main-reply-feed-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/reply-feed/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-reply-feed
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-reply-feed-lint,?($|\s.*)
      trusted_labels:
      - service/main/reply-feed
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-resource-bazel-build
      name: service-main-resource-bazel-build
      namespace: default
      rerun_command: +test service-main-resource-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/resource
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-resource
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-resource-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/resource
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-resource-bazel-test
      name: service-main-resource-bazel-test
      namespace: default
      rerun_command: +test service-main-resource-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/resource
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-resource
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-resource-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/resource
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-resource-lint
      name: service-main-resource-lint
      namespace: default
      rerun_command: +test service-main-resource-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/resource/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-resource
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-resource-lint,?($|\s.*)
      trusted_labels:
      - service/main/resource
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-riot-search-bazel-build
      name: service-main-riot-search-bazel-build
      namespace: default
      rerun_command: +test service-main-riot-search-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/riot-search
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-riot-search
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-riot-search-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/riot-search
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-riot-search-bazel-test
      name: service-main-riot-search-bazel-test
      namespace: default
      rerun_command: +test service-main-riot-search-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/riot-search
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-riot-search
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-riot-search-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/riot-search
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-riot-search-lint
      name: service-main-riot-search-lint
      namespace: default
      rerun_command: +test service-main-riot-search-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/riot-search/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-riot-search
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-riot-search-lint,?($|\s.*)
      trusted_labels:
      - service/main/riot-search
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-search-bazel-build
      name: service-main-search-bazel-build
      namespace: default
      rerun_command: +test service-main-search-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/search
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-search
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-search-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/search
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-search-bazel-test
      name: service-main-search-bazel-test
      namespace: default
      rerun_command: +test service-main-search-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/search
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-search
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-search-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/search
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-search-lint
      name: service-main-search-lint
      namespace: default
      rerun_command: +test service-main-search-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/search/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-search
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-search-lint,?($|\s.*)
      trusted_labels:
      - service/main/search
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-secure-bazel-build
      name: service-main-secure-bazel-build
      namespace: default
      rerun_command: +test service-main-secure-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/secure
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-secure
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-secure-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/secure
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-secure-bazel-test
      name: service-main-secure-bazel-test
      namespace: default
      rerun_command: +test service-main-secure-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/secure
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-secure
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-secure-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/secure
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-secure-lint
      name: service-main-secure-lint
      namespace: default
      rerun_command: +test service-main-secure-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/secure/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-secure
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-secure-lint,?($|\s.*)
      trusted_labels:
      - service/main/secure
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-seq-server-bazel-build
      name: service-main-seq-server-bazel-build
      namespace: default
      rerun_command: +test service-main-seq-server-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/seq-server
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-seq-server
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-seq-server-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/seq-server
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-seq-server-bazel-test
      name: service-main-seq-server-bazel-test
      namespace: default
      rerun_command: +test service-main-seq-server-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/seq-server
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-seq-server
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-seq-server-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/seq-server
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-seq-server-lint
      name: service-main-seq-server-lint
      namespace: default
      rerun_command: +test service-main-seq-server-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/seq-server/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-seq-server
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-seq-server-lint,?($|\s.*)
      trusted_labels:
      - service/main/seq-server
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-share-bazel-build
      name: service-main-share-bazel-build
      namespace: default
      rerun_command: +test service-main-share-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/share
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-share
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-share-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/share
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-share-bazel-test
      name: service-main-share-bazel-test
      namespace: default
      rerun_command: +test service-main-share-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/share
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-share
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-share-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/share
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-share-lint
      name: service-main-share-lint
      namespace: default
      rerun_command: +test service-main-share-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/share/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-share
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-share-lint,?($|\s.*)
      trusted_labels:
      - service/main/share
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-sms-bazel-build
      name: service-main-sms-bazel-build
      namespace: default
      rerun_command: +test service-main-sms-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/sms
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-sms
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-sms-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/sms
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-sms-bazel-test
      name: service-main-sms-bazel-test
      namespace: default
      rerun_command: +test service-main-sms-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/sms
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-sms
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-sms-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/sms
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-sms-lint
      name: service-main-sms-lint
      namespace: default
      rerun_command: +test service-main-sms-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/sms/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-sms
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-sms-lint,?($|\s.*)
      trusted_labels:
      - service/main/sms
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-spy-bazel-build
      name: service-main-spy-bazel-build
      namespace: default
      rerun_command: +test service-main-spy-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/spy
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-spy
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-spy-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/spy
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-spy-bazel-test
      name: service-main-spy-bazel-test
      namespace: default
      rerun_command: +test service-main-spy-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/spy
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-spy
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-spy-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/spy
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-spy-lint
      name: service-main-spy-lint
      namespace: default
      rerun_command: +test service-main-spy-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/spy/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-spy
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-spy-lint,?($|\s.*)
      trusted_labels:
      - service/main/spy
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-tag-bazel-build
      name: service-main-tag-bazel-build
      namespace: default
      rerun_command: +test service-main-tag-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/tag
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-tag
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-tag-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/tag
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-tag-bazel-test
      name: service-main-tag-bazel-test
      namespace: default
      rerun_command: +test service-main-tag-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/tag
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-tag
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-tag-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/tag
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-tag-lint
      name: service-main-tag-lint
      namespace: default
      rerun_command: +test service-main-tag-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/tag/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-tag
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-tag-lint,?($|\s.*)
      trusted_labels:
      - service/main/tag
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-thumbup-bazel-build
      name: service-main-thumbup-bazel-build
      namespace: default
      rerun_command: +test service-main-thumbup-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/thumbup
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-thumbup
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-thumbup-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/thumbup
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-thumbup-bazel-test
      name: service-main-thumbup-bazel-test
      namespace: default
      rerun_command: +test service-main-thumbup-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/thumbup
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-thumbup
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-thumbup-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/thumbup
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-thumbup-lint
      name: service-main-thumbup-lint
      namespace: default
      rerun_command: +test service-main-thumbup-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/thumbup/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-thumbup
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-thumbup-lint,?($|\s.*)
      trusted_labels:
      - service/main/thumbup
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-tv-bazel-build
      name: service-main-tv-bazel-build
      namespace: default
      rerun_command: +test service-main-tv-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/tv
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-tv
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-tv-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/tv
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-tv-bazel-test
      name: service-main-tv-bazel-test
      namespace: default
      rerun_command: +test service-main-tv-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/tv
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-tv
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-tv-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/tv
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-tv-lint
      name: service-main-tv-lint
      namespace: default
      rerun_command: +test service-main-tv-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/tv/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-tv
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-tv-lint,?($|\s.*)
      trusted_labels:
      - service/main/tv
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-ugcpay-bazel-build
      name: service-main-ugcpay-bazel-build
      namespace: default
      rerun_command: +test service-main-ugcpay-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/ugcpay
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-ugcpay
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-ugcpay-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/ugcpay
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-ugcpay-bazel-test
      name: service-main-ugcpay-bazel-test
      namespace: default
      rerun_command: +test service-main-ugcpay-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/ugcpay
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-ugcpay
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-ugcpay-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/ugcpay
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-ugcpay-lint
      name: service-main-ugcpay-lint
      namespace: default
      rerun_command: +test service-main-ugcpay-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/ugcpay/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-ugcpay
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-ugcpay-lint,?($|\s.*)
      trusted_labels:
      - service/main/ugcpay
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-up-bazel-build
      name: service-main-up-bazel-build
      namespace: default
      rerun_command: +test service-main-up-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/up
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-up
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-up-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/up
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-up-bazel-test
      name: service-main-up-bazel-test
      namespace: default
      rerun_command: +test service-main-up-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/up
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-up
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-up-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/up
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-up-lint
      name: service-main-up-lint
      namespace: default
      rerun_command: +test service-main-up-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/up/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-up
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-up-lint,?($|\s.*)
      trusted_labels:
      - service/main/up
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-upcredit-bazel-build
      name: service-main-upcredit-bazel-build
      namespace: default
      rerun_command: +test service-main-upcredit-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/upcredit
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-upcredit
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-upcredit-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/upcredit
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-upcredit-bazel-test
      name: service-main-upcredit-bazel-test
      namespace: default
      rerun_command: +test service-main-upcredit-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/upcredit
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-upcredit
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-upcredit-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/upcredit
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-upcredit-lint
      name: service-main-upcredit-lint
      namespace: default
      rerun_command: +test service-main-upcredit-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/upcredit/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-upcredit
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-upcredit-lint,?($|\s.*)
      trusted_labels:
      - service/main/upcredit
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-usersuit-bazel-build
      name: service-main-usersuit-bazel-build
      namespace: default
      rerun_command: +test service-main-usersuit-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/usersuit
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-usersuit
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-usersuit-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/usersuit
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-usersuit-bazel-test
      name: service-main-usersuit-bazel-test
      namespace: default
      rerun_command: +test service-main-usersuit-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/usersuit
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-usersuit
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-usersuit-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/usersuit
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-usersuit-lint
      name: service-main-usersuit-lint
      namespace: default
      rerun_command: +test service-main-usersuit-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/usersuit/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-usersuit
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-usersuit-lint,?($|\s.*)
      trusted_labels:
      - service/main/usersuit
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-videoup-bazel-build
      name: service-main-videoup-bazel-build
      namespace: default
      rerun_command: +test service-main-videoup-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/videoup
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-videoup
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-videoup-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/videoup
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-videoup-bazel-test
      name: service-main-videoup-bazel-test
      namespace: default
      rerun_command: +test service-main-videoup-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/videoup
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-videoup
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-videoup-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/videoup
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-videoup-lint
      name: service-main-videoup-lint
      namespace: default
      rerun_command: +test service-main-videoup-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/videoup/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-videoup
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-videoup-lint,?($|\s.*)
      trusted_labels:
      - service/main/videoup
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-vip-bazel-build
      name: service-main-vip-bazel-build
      namespace: default
      rerun_command: +test service-main-vip-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/vip
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-vip
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-vip-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/vip
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-vip-bazel-test
      name: service-main-vip-bazel-test
      namespace: default
      rerun_command: +test service-main-vip-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/vip
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-vip
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-vip-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/vip
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-vip-lint
      name: service-main-vip-lint
      namespace: default
      rerun_command: +test service-main-vip-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/vip/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-vip
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-vip-lint,?($|\s.*)
      trusted_labels:
      - service/main/vip
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-vipinfo-bazel-build
      name: service-main-vipinfo-bazel-build
      namespace: default
      rerun_command: +test service-main-vipinfo-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/vipinfo
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-vipinfo
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-vipinfo-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/vipinfo
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-vipinfo-bazel-test
      name: service-main-vipinfo-bazel-test
      namespace: default
      rerun_command: +test service-main-vipinfo-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/vipinfo
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-vipinfo
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-vipinfo-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/vipinfo
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-vipinfo-lint
      name: service-main-vipinfo-lint
      namespace: default
      rerun_command: +test service-main-vipinfo-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/vipinfo/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-vipinfo
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-vipinfo-lint,?($|\s.*)
      trusted_labels:
      - service/main/vipinfo
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-workflow-bazel-build
      name: service-main-workflow-bazel-build
      namespace: default
      rerun_command: +test service-main-workflow-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/main/workflow
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-workflow
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-workflow-bazel-build,?($|\s.*)
      trusted_labels:
      - service/main/workflow
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-workflow-bazel-test
      name: service-main-workflow-bazel-test
      namespace: default
      rerun_command: +test service-main-workflow-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/main/workflow
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-main-workflow
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-workflow-bazel-test,?($|\s.*)
      trusted_labels:
      - service/main/workflow
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-main-workflow-lint
      name: service-main-workflow-lint
      namespace: default
      rerun_command: +test service-main-workflow-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/main/workflow/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-main-workflow
          resources: {}
      trigger: (?m)^\+test( | .* )service-main-workflow-lint,?($|\s.*)
      trusted_labels:
      - service/main/workflow
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-openplatform-abtest-bazel-build
      name: service-openplatform-abtest-bazel-build
      namespace: default
      rerun_command: +test service-openplatform-abtest-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/openplatform/abtest
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-openplatform-abtest
          resources: {}
      trigger: (?m)^\+test( | .* )service-openplatform-abtest-bazel-build,?($|\s.*)
      trusted_labels:
      - service/openplatform/abtest
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-openplatform-abtest-bazel-test
      name: service-openplatform-abtest-bazel-test
      namespace: default
      rerun_command: +test service-openplatform-abtest-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/openplatform/abtest
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-openplatform-abtest
          resources: {}
      trigger: (?m)^\+test( | .* )service-openplatform-abtest-bazel-test,?($|\s.*)
      trusted_labels:
      - service/openplatform/abtest
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-openplatform-abtest-lint
      name: service-openplatform-abtest-lint
      namespace: default
      rerun_command: +test service-openplatform-abtest-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/openplatform/abtest/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-openplatform-abtest
          resources: {}
      trigger: (?m)^\+test( | .* )service-openplatform-abtest-lint,?($|\s.*)
      trusted_labels:
      - service/openplatform/abtest
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-openplatform-anti-fraud-bazel-build
      name: service-openplatform-anti-fraud-bazel-build
      namespace: default
      rerun_command: +test service-openplatform-anti-fraud-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/openplatform/anti-fraud
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-openplatform-anti-fraud
          resources: {}
      trigger: (?m)^\+test( | .* )service-openplatform-anti-fraud-bazel-build,?($|\s.*)
      trusted_labels:
      - service/openplatform/anti-fraud
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-openplatform-anti-fraud-bazel-test
      name: service-openplatform-anti-fraud-bazel-test
      namespace: default
      rerun_command: +test service-openplatform-anti-fraud-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/openplatform/anti-fraud
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-openplatform-anti-fraud
          resources: {}
      trigger: (?m)^\+test( | .* )service-openplatform-anti-fraud-bazel-test,?($|\s.*)
      trusted_labels:
      - service/openplatform/anti-fraud
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-openplatform-anti-fraud-lint
      name: service-openplatform-anti-fraud-lint
      namespace: default
      rerun_command: +test service-openplatform-anti-fraud-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/openplatform/anti-fraud/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-openplatform-anti-fraud
          resources: {}
      trigger: (?m)^\+test( | .* )service-openplatform-anti-fraud-lint,?($|\s.*)
      trusted_labels:
      - service/openplatform/anti-fraud
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-openplatform-pgc-season-bazel-build
      name: service-openplatform-pgc-season-bazel-build
      namespace: default
      rerun_command: +test service-openplatform-pgc-season-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/openplatform/pgc-season
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-openplatform-pgc-season
          resources: {}
      trigger: (?m)^\+test( | .* )service-openplatform-pgc-season-bazel-build,?($|\s.*)
      trusted_labels:
      - service/openplatform/pgc-season
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-openplatform-pgc-season-bazel-test
      name: service-openplatform-pgc-season-bazel-test
      namespace: default
      rerun_command: +test service-openplatform-pgc-season-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/openplatform/pgc-season
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-openplatform-pgc-season
          resources: {}
      trigger: (?m)^\+test( | .* )service-openplatform-pgc-season-bazel-test,?($|\s.*)
      trusted_labels:
      - service/openplatform/pgc-season
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-openplatform-pgc-season-lint
      name: service-openplatform-pgc-season-lint
      namespace: default
      rerun_command: +test service-openplatform-pgc-season-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/openplatform/pgc-season/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-openplatform-pgc-season
          resources: {}
      trigger: (?m)^\+test( | .* )service-openplatform-pgc-season-lint,?($|\s.*)
      trusted_labels:
      - service/openplatform/pgc-season
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-openplatform-ticket-item-bazel-build
      name: service-openplatform-ticket-item-bazel-build
      namespace: default
      rerun_command: +test service-openplatform-ticket-item-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/openplatform/ticket-item
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-openplatform-ticket-item
          resources: {}
      trigger: (?m)^\+test( | .* )service-openplatform-ticket-item-bazel-build,?($|\s.*)
      trusted_labels:
      - service/openplatform/ticket-item
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-openplatform-ticket-item-bazel-test
      name: service-openplatform-ticket-item-bazel-test
      namespace: default
      rerun_command: +test service-openplatform-ticket-item-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/openplatform/ticket-item
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-openplatform-ticket-item
          resources: {}
      trigger: (?m)^\+test( | .* )service-openplatform-ticket-item-bazel-test,?($|\s.*)
      trusted_labels:
      - service/openplatform/ticket-item
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-openplatform-ticket-item-lint
      name: service-openplatform-ticket-item-lint
      namespace: default
      rerun_command: +test service-openplatform-ticket-item-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/openplatform/ticket-item/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-openplatform-ticket-item
          resources: {}
      trigger: (?m)^\+test( | .* )service-openplatform-ticket-item-lint,?($|\s.*)
      trusted_labels:
      - service/openplatform/ticket-item
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-openplatform-ticket-sales-bazel-build
      name: service-openplatform-ticket-sales-bazel-build
      namespace: default
      rerun_command: +test service-openplatform-ticket-sales-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/openplatform/ticket-sales
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-openplatform-ticket-sales
          resources: {}
      trigger: (?m)^\+test( | .* )service-openplatform-ticket-sales-bazel-build,?($|\s.*)
      trusted_labels:
      - service/openplatform/ticket-sales
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-openplatform-ticket-sales-bazel-test
      name: service-openplatform-ticket-sales-bazel-test
      namespace: default
      rerun_command: +test service-openplatform-ticket-sales-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/openplatform/ticket-sales
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-openplatform-ticket-sales
          resources: {}
      trigger: (?m)^\+test( | .* )service-openplatform-ticket-sales-bazel-test,?($|\s.*)
      trusted_labels:
      - service/openplatform/ticket-sales
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-openplatform-ticket-sales-lint
      name: service-openplatform-ticket-sales-lint
      namespace: default
      rerun_command: +test service-openplatform-ticket-sales-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/openplatform/ticket-sales/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-openplatform-ticket-sales
          resources: {}
      trigger: (?m)^\+test( | .* )service-openplatform-ticket-sales-lint,?($|\s.*)
      trusted_labels:
      - service/openplatform/ticket-sales
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-ops-log-agent-bazel-build
      name: service-ops-log-agent-bazel-build
      namespace: default
      rerun_command: +test service-ops-log-agent-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/ops/log-agent
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-ops-log-agent
          resources: {}
      trigger: (?m)^\+test( | .* )service-ops-log-agent-bazel-build,?($|\s.*)
      trusted_labels:
      - service/ops/log-agent
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-ops-log-agent-bazel-test
      name: service-ops-log-agent-bazel-test
      namespace: default
      rerun_command: +test service-ops-log-agent-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/ops/log-agent
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-ops-log-agent
          resources: {}
      trigger: (?m)^\+test( | .* )service-ops-log-agent-bazel-test,?($|\s.*)
      trusted_labels:
      - service/ops/log-agent
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-ops-log-agent-lint
      name: service-ops-log-agent-lint
      namespace: default
      rerun_command: +test service-ops-log-agent-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/ops/log-agent/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-ops-log-agent
          resources: {}
      trigger: (?m)^\+test( | .* )service-ops-log-agent-lint,?($|\s.*)
      trusted_labels:
      - service/ops/log-agent
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-video-stream-mng-bazel-build
      name: service-video-stream-mng-bazel-build
      namespace: default
      rerun_command: +test service-video-stream-mng-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/service/video/stream-mng
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-video-stream-mng
          resources: {}
      trigger: (?m)^\+test( | .* )service-video-stream-mng-bazel-build,?($|\s.*)
      trusted_labels:
      - service/video/stream-mng
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-video-stream-mng-bazel-test
      name: service-video-stream-mng-bazel-test
      namespace: default
      rerun_command: +test service-video-stream-mng-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/service/video/stream-mng
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: service-video-stream-mng
          resources: {}
      trigger: (?m)^\+test( | .* )service-video-stream-mng-bazel-test,?($|\s.*)
      trusted_labels:
      - service/video/stream-mng
    - agent: kubernetes
      always_run: true
      cluster: default
      context: service-video-stream-mng-lint
      name: service-video-stream-mng-lint
      namespace: default
      rerun_command: +test service-video-stream-mng-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/service/video/stream-mng/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: service-video-stream-mng
          resources: {}
      trigger: (?m)^\+test( | .* )service-video-stream-mng-lint,?($|\s.*)
      trusted_labels:
      - service/video/stream-mng
    - agent: kubernetes
      always_run: true
      cluster: default
      context: tool-mkprow-bazel-build
      name: tool-mkprow-bazel-build
      namespace: default
      rerun_command: +test tool-mkprow-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/tool/mkprow
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: tool-mkprow
          resources: {}
      trigger: (?m)^\+test( | .* )tool-mkprow-bazel-build,?($|\s.*)
      trusted_labels:
      - tool/mkprow
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: tool-mkprow-bazel-test
      name: tool-mkprow-bazel-test
      namespace: default
      rerun_command: +test tool-mkprow-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/tool/mkprow
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: tool-mkprow
          resources: {}
      trigger: (?m)^\+test( | .* )tool-mkprow-bazel-test,?($|\s.*)
      trusted_labels:
      - tool/mkprow
    - agent: kubernetes
      always_run: true
      cluster: default
      context: tool-mkprow-lint
      name: tool-mkprow-lint
      namespace: default
      rerun_command: +test tool-mkprow-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/tool/mkprow/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: tool-mkprow
          resources: {}
      trigger: (?m)^\+test( | .* )tool-mkprow-lint,?($|\s.*)
      trusted_labels:
      - tool/mkprow
    - agent: kubernetes
      always_run: true
      cluster: default
      context: tool-owner-bazel-build
      name: tool-owner-bazel-build
      namespace: default
      rerun_command: +test tool-owner-bazel-build
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - bazel-build
          - WHAT=app/tool/owner
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: tool-owner
          resources: {}
      trigger: (?m)^\+test( | .* )tool-owner-bazel-build,?($|\s.*)
      trusted_labels:
      - tool/owner
      untrusted_labels:
      - library
      - new-project
    - agent: kubernetes
      always_run: true
      cluster: default
      context: tool-owner-bazel-test
      name: tool-owner-bazel-test
      namespace: default
      rerun_command: +test tool-owner-bazel-test
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - ./build/unit-test.sh app/tool/owner
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: tool-owner
          resources: {}
      trigger: (?m)^\+test( | .* )tool-owner-bazel-test,?($|\s.*)
      trusted_labels:
      - tool/owner
    - agent: kubernetes
      always_run: true
      cluster: default
      context: tool-owner-lint
      name: tool-owner-lint
      namespace: default
      rerun_command: +test tool-owner-lint
      run_pr_pushed: true
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/go/src/go-common
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - gometalinter ./app/tool/owner/...
          image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
          name: tool-owner
          resources: {}
      trigger: (?m)^\+test( | .* )tool-owner-lint,?($|\s.*)
      trusted_labels:
      - tool/owner
    - agent: kubernetes
      always_run: true
      cluster: default
      context: go_common_build
      name: go_common_build
      namespace: default
      rerun_command: /test go_common_build
      run_pr_pushed: false
      spec:
        containers:
        - args:
          - --id=$(BUILD_ID)
          - --job=$(JOB_NAME)
          - --root=/root
          - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
          - --command
          - make
          - ci-bazel-build
          image: hub.bilibili.co/k8s-prow/build:v20181018-53e2a28a1-dirty
          name: go_common_build
          resources: {}
      trigger: (?m)^/test( | .* )go_common_build,?($|\s.*)
      trusted_labels:
      - library
      - new-project
    run_pr_pushed: false
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/go/src/go-common
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/update-bazel.sh
        image: hub.bilibili.co/k8s-prow/golint:v20181216-121e13014-dirty
        name: go_common_make_update
        resources: {}
    trigger: (?m)^/test( | .* )go_common_make_update,?($|\s.*)
prowjob_namespace: default
push_gateway: {}
sinker: {}
tide:
  context_options: {}
  max_goroutines: 20
