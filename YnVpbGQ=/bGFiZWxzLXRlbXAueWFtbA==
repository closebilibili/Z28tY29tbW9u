default:
  labels:
    - color: 0ffa16
      description: Indicates a PR has been approved by an approver from all required OWNERS files.
      name: approved
      target: prs
      prowPlugin: approve
      addedBy: approvers
    - color: fef2c0
      description: Indicates a cherrypick PR into a release branch has been approved by the release branch manager. # Consumed by the kubernetes/kubernetes cherrypick-queue.
      name: cherrypick-approved
      target: prs
      addedBy: humans
    - color: fef2c0
      description: Denotes a PR to master as a candidate for cherry picking into a release branch.
      name: cherrypick-candidate
      target: prs
      addedBy: humans
    - color: d455d0
      description: Indicates an issue is a duplicate of other open issue.
      name: triage/duplicate
      target: both
      addedBy: humans
    - color: d455d0
      description: Indicates an issue needs more information in order to work on it.
      name: triage/needs-information
      target: both
      addedBy: humans
    - color: d455d0
      description: Indicates an issue can not be reproduced as described.
      name: triage/not-reproducible
      target: both
      addedBy: humans
    - color: d455d0
      description: Indicates an issue that is a support question.
      name: triage/support
      target: both
      addedBy: humans
    - color: d455d0
      description: Indicates an issue that can not or will not be resolved.
      name: triage/unresolved
      target: both
      addedBy: humans
    - color: c0ff4a
      description: Denotes an issue or PR intended to be handled by the code of conduct committee. # (as of yet non-existent)
      name: committee/conduct
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: c0ff4a
      description: Denotes an issue or PR intended to be handled by the steering committee.
      name: committee/steering
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: e11d21
      description: Indicates the PR's author has not signed the CNCF CLA.
      name: 'cncf-cla: no'
      target: prs
      prowPlugin: cla
      addedBy: prow
    - color: bfe5bf
      description: Indicates the PR's author has signed the CNCF CLA.
      name: 'cncf-cla: yes'
      target: prs
      prowPlugin: cla
      addedBy: prow
    - color: e11d21
      description: DEPRECATED. Indicates that a PR should not merge. Label can only be manually applied/removed.
      name: do-not-merge
      target: prs
      addedBy: humans
    - color: e11d21
      description: Indicates that a PR should not merge because it touches files in blocked paths.
      name: do-not-merge/blocked-paths
      target: prs
      prowPlugin: blockade
      addedBy: prow
    - color: e11d21
      description: Indicates that a PR is not yet approved to merge into a release branch.
      name: do-not-merge/cherry-pick-not-approved
      target: prs
      addedBy: mungegithub cherrypick-label-unapproved munger
    - color: e11d21
      description: Indicates that a PR should not merge because someone has issued a /hold command.
      name: do-not-merge/hold
      target: prs
      prowPlugin: hold
      addedBy: anyone
    - color: e11d21
      description: Indicates that a PR should not merge because it has an invalid OWNERS file in it.
      name: do-not-merge/invalid-owners-file
      target: prs
      prowPlugin: verify-owners
      addedBy: prow
    - color: e11d21
      description: Indicates that a PR should not merge because it's missing one of the release note labels.
      name: do-not-merge/release-note-label-needed
      target: prs
      prowPlugin: releasenote
      addedBy: prow
    - color: e11d21
      description: Indicates that a PR should not merge because it is a work in progress.
      name: do-not-merge/work-in-progress
      target: prs
      prowPlugin: wip
      addedBy: prow
    - color: 7057ff
      description: Denotes an issue ready for a new contributor, according to the "help wanted" guidelines.
      name: 'good first issue'
      target: issues
      prowPlugin: help
      addedBy: anyone
    - color: 006b75
      description: Denotes an issue that needs help from a contributor. Must meet "help wanted" guidelines.
      name: 'help wanted'
      target: issues
      prowPlugin: help
      addedBy: anyone
    - color: e11d21
      description: Categorizes issue or PR as related to a bug.
      name: kind/bug
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: c7def8
      description: Categorizes issue or PR as related to cleaning up code, process, or technical debt.
      name: kind/cleanup
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: c7def8
      description: Categorizes issue or PR as related to design.
      name: kind/design
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: c7def8
      description: Categorizes issue or PR as related to documentation.
      name: kind/documentation
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: e11d21
      description: Categorizes issue or PR as related to a consistently or frequently failing test.
      name: kind/failing-test
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: c7def8
      description: Categorizes issue or PR as related to a new feature.
      name: kind/feature
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: f7c6c7
      description: Categorizes issue or PR as related to a flaky test.
      name: kind/flake
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: 15dd18
      description: Indicates that a PR is ready to be merged.
      name: lgtm
      target: prs
      prowPlugin: lgtm
      addedBy: reviewers or members
    - color: d3e2f0
      description: Indicates that an issue or PR should not be auto-closed due to staleness.
      name: lifecycle/frozen
      target: both
      prowPlugin: lifecycle
      addedBy: anyone
    - color: 8fc951
      description: Indicates that an issue or PR is actively being worked on by a contributor.
      name: lifecycle/active
      target: both
      prowPlugin: lifecycle
      addedBy: anyone
    - color: "604460"
      description: Denotes an issue or PR that has aged beyond stale and will be auto-closed.
      name: lifecycle/rotten
      target: both
      prowPlugin: lifecycle
      addedBy: anyone or [@fejta-bot](https://github.com/fejta-bot) via [periodic-test-infra-rotten prowjob](https://prow.k8s.io/?job=periodic-test-infra-rotten)
    - color: "795548"
      description: Denotes an issue or PR has remained open with no activity and has become stale.
      name: lifecycle/stale
      addedBy: anyone or [@fejta-bot](https://github.com/fejta-bot) via [periodic-test-infra-stale prowjob](https://prow.k8s.io/?job=periodic-test-infra-stale)
    - color: BDBDBD
      description: Indicates a PR cannot be merged because it has merge conflicts with HEAD.
      name: needs-rebase
      target: prs
      prowPlugin: needs-rebase
      addedBy: prow
    - color: fef2c0
      description: Lowest priority. Possibly useful, but not yet enough support to actually get it done. # These are mostly place-holders for potentially good ideas, so that they don't get completely forgotten, and can be referenced /deduped every time they come up.
      name: priority/awaiting-more-evidence
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: fbca04
      description: Higher priority than priority/awaiting-more-evidence. # There appears to be general agreement that this would be good to have, but we may not have anyone available to work on it right now or in the immediate future. Community contributions would be most welcome in the mean time (although it might take a while to get them reviewed if reviewers are fully occupied with higher priority issues, for example immediately before a release).
      name: priority/backlog
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: e11d21
      description: Highest priority. Must be actively worked on as someone's top priority right now. # Stuff is burning. If it's not being actively worked on, someone is expected to drop what they're doing immediately to work on it. Team leaders are responsible for making sure that all the issues, labeled with this priority, in their area are being actively worked on. Examples include user-visible bugs in core features, broken builds or tests and critical security issues.
      name: priority/critical-urgent
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: eb6420
      description: Important over the long term, but may not be staffed and/or may need multiple releases to complete.
      name: priority/important-longterm
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: eb6420
      description: Must be staffed and worked on either currently, or very soon, ideally in time for the next release.
      name: priority/important-soon
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: ffaa00
      description: DEPRECATED. # Bumps a PR up in priority in the submit-queue for kubernetes/kubernetes because that PR blocks others by being a dependency for other pending changes. This will stop having any effect once kubernetes/kubernetes migrates away from the submit queue.
      name: queue/blocks-others
      target: prs
      addedBy: humans
    - color: ffaa00
      description: DEPRECATED. # Bumps a PR up in priority in the submit-queue for kubernetes/kubernetes because that PR that contains a critical fix, and will merge even if e2e tests are failing. This will stop having any effect once kubernetes/kubernetes migrates away from the submit queue.
      name: queue/critical-fix
      target: prs
      addedBy: humans
    - color: ffaa00
      description: DEPRECATED. # Bumps a PR up in priority in the submit-queue for kubernetes/kubernetes because that PR that will fix or unblock the submit queue. This will stop having any effect once kubernetes/kubernetes migrates away from the submit queue.
      name: queue/fix
      target: prs
      addedBy: humans
    - color: ffaa00
      description: DEPRECATED. # Bumps a PR up in priority in the submit-queue for kubernetes/kubernetes because that PR that has had difficulty getting merged because merges ahead of it have forced it to be rebased multiple times. This will stop having any effect once kubernetes/kubernetes migrates away from the submit queue.
      name: queue/multiple-rebases
      target: prs
      addedBy: humans
    - color: c2e0c6
      description: Denotes a PR that will be considered when it comes time to generate release notes.
      name: release-note
      target: prs
      prowPlugin: releasenote
      addedBy: prow
    - color: c2e0c6
      description: Denotes a PR that introduces potentially breaking changes that require user action. # These actions will be specifically called out when it comes time to generate release notes.
      name: release-note-action-required
      target: prs
      prowPlugin: releasenote
      addedBy: prow
    - color: c2e0c6
      description: Denotes a PR that doesn't merit a release note. # will be ignored when it comes time to generate release notes.
      name: release-note-none
      target: prs
      prowPlugin: releasenote
      addedBy: prow or member or author
    - color: eb6420
      description: Indicates that a PR doesn't need to be retested prior to merge. # At present only submit-queue consumes this label. Unclear whether we're going to modify tide to respect this or not ([kubernetes/test-infra#5334](https://github.com/kubernetes/test-infra/issues/5334))
      name: retest-not-required
      target: prs
      addedBy: humans
    - color: fbca04
      description: Indicates that a PR doesn't need to be retested prior to merge because it only changes docs. # At present only submit-queue consumes this label. Unclear whether we're going to modify tide to respect this or not ([kubernetes/test-infra#7195](https://github.com/kubernetes/test-infra/issues/7195))
      name: retest-not-required-docs-only
      target: prs
      prowPlugin: docs-no-retest
      addedBy: prow
    - color: ee9900
      description: Denotes a PR that changes 100-499 lines, ignoring generated files.
      name: size/L
      target: prs
      prowPlugin: size
      addedBy: prow
    - color: eebb00
      description: Denotes a PR that changes 30-99 lines, ignoring generated files.
      name: size/M
      target: prs
      prowPlugin: size
      addedBy: prow
    - color: 77bb00
      description: Denotes a PR that changes 10-29 lines, ignoring generated files.
      name: size/S
      target: prs
      prowPlugin: size
      addedBy: prow
    - color: ee5500
      description: Denotes a PR that changes 500-999 lines, ignoring generated files.
      name: size/XL
      target: prs
      prowPlugin: size
      addedBy: prow
    - color: "009900"
      description: Denotes a PR that changes 0-9 lines, ignoring generated files.
      name: size/XS
      target: prs
      prowPlugin: size
      addedBy: prow
    - color: ee0000
      description: Denotes a PR that changes 1000+ lines, ignoring generated files.
      name: size/XXL
      target: prs
      prowPlugin: size
      addedBy: prow
    - color: fef2c0
      description: Used during release burndown. Denotes an issue or PR is approved to be part of the release # A bot will warn then kick issues out of the milestone that lack this label.
      name: status/approved-for-milestone
      target: both
      prowPlugin: milestonestatus
      addedBy: "members of a configurable github team. default: [@kubernetes/kubernetes-milestone-maintainers](https://github.com/orgs/kubernetes/teams/kubernetes-milestone-maintainers/members)"
    - color: fef2c0
      description: Used during release burndown. Denotes that an issue is actively being worked.
      name: status/in-progress
      target: both
      prowPlugin: milestonestatus
      addedBy: "members of a configurable github team. default: [@kubernetes/kubernetes-milestone-maintainers](https://github.com/orgs/kubernetes/teams/kubernetes-milestone-maintainers/members)"
    - color: fef2c0
      description: Used during release burndown. Denotes that a fix for an issue is actively being reviewed.
      name: status/in-review
      target: both
      prowPlugin: milestonestatus
      addedBy: "members of a configurable github team. default: [@kubernetes/kubernetes-milestone-maintainers](https://github.com/orgs/kubernetes/teams/kubernetes-milestone-maintainers/members)"
    - color: eb6420
      description: library
      name: library
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: f1f442
      description: Live Department
      name: live
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: f1f442
      description: MTC 
      name: main
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: f1f442
      description: Ops Department
      name: ops
      target: both
      prowPlugin: label
      addedBy: anyone  
    - color: f1f442
      description: EP Department
      name: ep
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: f1f442
      description: Openplatform Department
      name: openplatform
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: f1f442
      description: BBQ Department
      name: bbq
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: f1f442
      description: Video Department
      name: video
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: ffb3a7
      description: business application
      name: business
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: ffb3a7
      description: admin 
      name: admin
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: ffb3a7
      description: common 
      name: common
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: ffb3a7
      description: infra 
      name: infra
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: ffb3a7
      description: interface 
      name: interface
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: ffb3a7
      description: job 
      name: job
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: ffb3a7
      description: service 
      name: service
      target: both
      prowPlugin: label
      addedBy: anyone 
    - color: ffb3a7
      description: tool 
      name: tool
      target: both
      prowPlugin: label
      addedBy: anyone          
    - color: ffb3a7
      description: vendor 
      name: vendor
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: 4B0082
      description: create a new project
      name: new-project
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: 4B0082
      description: create a new project
      name: new-main-job-project
      target: both
      prowPlugin: label
      addedBy: anyone
    - color: 4B0082
      description: create a new project
      name: new-main-service-project
      target: both
      prowPlugin: label
      addedBy: anyone      
    - color: 4B0082
      description: create a new project
      name: new-main-interface-project
      target: both
      prowPlugin: label
      addedBy: anyone 
    - color: 4B0082
      description: create a new project
      name: new-main-admin-project
      target: both
      prowPlugin: label
      addedBy: anyone                     
    - color: 0052cc
      description: Issues or PRs related to config
      name: area/chore
      target: both
      addedBy: label