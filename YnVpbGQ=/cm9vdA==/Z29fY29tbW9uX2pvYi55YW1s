branch-protection: {}
build-status:
  db:
    active: 0
    idle: 0
    idleTimeout: 0
    ip: ""
    name: ""
    password: ""
    port: ""
    username: ""
deck:
  spyglass: {}
gerrit: {}
hdfs: {}
owners_dir_blacklist:
  default: null
  repos: null
plank: {}
presubmits:
  platform/go-common:
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-bbq-comment-bazel-build
    name: admin-bbq-comment-bazel-build
    namespace: default
    rerun_command: +test admin-bbq-comment-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/bbq/comment
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-bbq-comment-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-bbq-comment-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/bbq/comment
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-bbq-comment-bazel-test
    name: admin-bbq-comment-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-bbq-comment-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/bbq/comment
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-bbq-comment-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-bbq-comment-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/bbq/comment
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-bbq-comment-lint
    name: admin-bbq-comment-lint
    namespace: default
    optional: true
    rerun_command: +test admin-bbq-comment-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/bbq/comment/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-bbq-comment-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-bbq-comment-lint,?($|\s.*)
    trusted_labels:
    - admin/bbq/comment
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-ep-marthe-bazel-build
    name: admin-ep-marthe-bazel-build
    namespace: default
    rerun_command: +test admin-ep-marthe-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/ep/marthe
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-ep-marthe-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-ep-marthe-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/ep/marthe
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-ep-marthe-bazel-test
    name: admin-ep-marthe-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-ep-marthe-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/ep/marthe
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-ep-marthe-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-ep-marthe-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/ep/marthe
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-ep-marthe-lint
    name: admin-ep-marthe-lint
    namespace: default
    optional: true
    rerun_command: +test admin-ep-marthe-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/ep/marthe/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-ep-marthe-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-ep-marthe-lint,?($|\s.*)
    trusted_labels:
    - admin/ep/marthe
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-ep-melloi-bazel-build
    name: admin-ep-melloi-bazel-build
    namespace: default
    rerun_command: +test admin-ep-melloi-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/ep/melloi
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-ep-melloi-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-ep-melloi-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/ep/melloi
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-ep-melloi-bazel-test
    name: admin-ep-melloi-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-ep-melloi-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/ep/melloi
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-ep-melloi-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-ep-melloi-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/ep/melloi
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-ep-melloi-lint
    name: admin-ep-melloi-lint
    namespace: default
    optional: true
    rerun_command: +test admin-ep-melloi-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/ep/melloi/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-ep-melloi-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-ep-melloi-lint,?($|\s.*)
    trusted_labels:
    - admin/ep/melloi
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-ep-merlin-bazel-build
    name: admin-ep-merlin-bazel-build
    namespace: default
    rerun_command: +test admin-ep-merlin-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/ep/merlin
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-ep-merlin-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-ep-merlin-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/ep/merlin
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-ep-merlin-bazel-test
    name: admin-ep-merlin-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-ep-merlin-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/ep/merlin
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-ep-merlin-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-ep-merlin-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/ep/merlin
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-ep-merlin-lint
    name: admin-ep-merlin-lint
    namespace: default
    optional: true
    rerun_command: +test admin-ep-merlin-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/ep/merlin/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-ep-merlin-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-ep-merlin-lint,?($|\s.*)
    trusted_labels:
    - admin/ep/merlin
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-ep-saga-bazel-build
    name: admin-ep-saga-bazel-build
    namespace: default
    rerun_command: +test admin-ep-saga-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/ep/saga
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-ep-saga-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-ep-saga-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/ep/saga
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-ep-saga-bazel-test
    name: admin-ep-saga-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-ep-saga-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/ep/saga
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-ep-saga-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-ep-saga-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/ep/saga
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-ep-saga-lint
    name: admin-ep-saga-lint
    namespace: default
    optional: true
    rerun_command: +test admin-ep-saga-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/ep/saga/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-ep-saga-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-ep-saga-lint,?($|\s.*)
    trusted_labels:
    - admin/ep/saga
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-ep-tapd-bazel-build
    name: admin-ep-tapd-bazel-build
    namespace: default
    rerun_command: +test admin-ep-tapd-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/ep/tapd
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-ep-tapd-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-ep-tapd-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/ep/tapd
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-ep-tapd-bazel-test
    name: admin-ep-tapd-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-ep-tapd-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/ep/tapd
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-ep-tapd-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-ep-tapd-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/ep/tapd
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-ep-tapd-lint
    name: admin-ep-tapd-lint
    namespace: default
    optional: true
    rerun_command: +test admin-ep-tapd-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/ep/tapd/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-ep-tapd-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-ep-tapd-lint,?($|\s.*)
    trusted_labels:
    - admin/ep/tapd
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-live-live-admin-bazel-build
    name: admin-live-live-admin-bazel-build
    namespace: default
    rerun_command: +test admin-live-live-admin-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/live/live-admin
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-live-live-admin-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-live-live-admin-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/live/live-admin
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-live-live-admin-bazel-test
    name: admin-live-live-admin-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-live-live-admin-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/live/live-admin
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-live-live-admin-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-live-live-admin-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/live/live-admin
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-live-live-admin-lint
    name: admin-live-live-admin-lint
    namespace: default
    optional: true
    rerun_command: +test admin-live-live-admin-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/live/live-admin/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-live-live-admin-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-live-live-admin-lint,?($|\s.*)
    trusted_labels:
    - admin/live/live-admin
  - agent: kubernetes
    always_run: true
    cluster: default
    context: new-admin-main-project-bazel-build
    name: new-admin-main-project-bazel-build
    namespace: default
    rerun_command: +test new-admin-main-project-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - app
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: new-admin-main-project-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )new-admin-main-project-bazel-build,?($|\s.*)
    trusted_labels:
    - new-admin-main-project
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: new-admin-main-project-bazel-test
    name: new-admin-main-project-bazel-test
    namespace: default
    optional: true
    rerun_command: +test new-admin-main-project-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: new-admin-main-project-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )new-admin-main-project-bazel-test,?($|\s.*)
    trusted_labels:
    - new-admin-main-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: new-admin-main-project-lint
    name: new-admin-main-project-lint
    namespace: default
    optional: true
    rerun_command: +test new-admin-main-project-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - app
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: new-admin-main-project-lint
        resources: {}
    trigger: (?m)^\+test( | .* )new-admin-main-project-lint,?($|\s.*)
    trusted_labels:
    - new-admin-main-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-activity-bazel-build
    name: admin-main-activity-bazel-build
    namespace: default
    rerun_command: +test admin-main-activity-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/activity
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-activity-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-activity-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/activity
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-activity-bazel-test
    name: admin-main-activity-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-activity-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/activity
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-activity-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-activity-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/activity
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-activity-lint
    name: admin-main-activity-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-activity-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/activity/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-activity-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-activity-lint,?($|\s.*)
    trusted_labels:
    - admin/main/activity
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-aegis-bazel-build
    name: admin-main-aegis-bazel-build
    namespace: default
    rerun_command: +test admin-main-aegis-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/aegis
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-aegis-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-aegis-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/aegis
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-aegis-bazel-test
    name: admin-main-aegis-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-aegis-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/aegis
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-aegis-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-aegis-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/aegis
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-aegis-lint
    name: admin-main-aegis-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-aegis-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/aegis/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-aegis-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-aegis-lint,?($|\s.*)
    trusted_labels:
    - admin/main/aegis
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-answer-bazel-build
    name: admin-main-answer-bazel-build
    namespace: default
    rerun_command: +test admin-main-answer-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/answer
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-answer-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-answer-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/answer
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-answer-bazel-test
    name: admin-main-answer-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-answer-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/answer
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-answer-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-answer-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/answer
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-answer-lint
    name: admin-main-answer-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-answer-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/answer/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-answer-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-answer-lint,?($|\s.*)
    trusted_labels:
    - admin/main/answer
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-apm-bazel-build
    name: admin-main-apm-bazel-build
    namespace: default
    rerun_command: +test admin-main-apm-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/apm
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-apm-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-apm-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/apm
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-apm-bazel-test
    name: admin-main-apm-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-apm-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/apm
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-apm-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-apm-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/apm
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-apm-lint
    name: admin-main-apm-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-apm-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/apm/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-apm-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-apm-lint,?($|\s.*)
    trusted_labels:
    - admin/main/apm
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-app-bazel-build
    name: admin-main-app-bazel-build
    namespace: default
    rerun_command: +test admin-main-app-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/app
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-app-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-app-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/app
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-app-bazel-test
    name: admin-main-app-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-app-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/app
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-app-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-app-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/app
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-app-lint
    name: admin-main-app-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-app-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/app/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-app-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-app-lint,?($|\s.*)
    trusted_labels:
    - admin/main/app
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-appstatic-bazel-build
    name: admin-main-appstatic-bazel-build
    namespace: default
    rerun_command: +test admin-main-appstatic-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/appstatic
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-appstatic-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-appstatic-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/appstatic
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-appstatic-bazel-test
    name: admin-main-appstatic-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-appstatic-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/appstatic
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-appstatic-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-appstatic-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/appstatic
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-appstatic-lint
    name: admin-main-appstatic-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-appstatic-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/appstatic/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-appstatic-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-appstatic-lint,?($|\s.*)
    trusted_labels:
    - admin/main/appstatic
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-bfs-bazel-build
    name: admin-main-bfs-bazel-build
    namespace: default
    rerun_command: +test admin-main-bfs-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/bfs
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-bfs-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-bfs-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/bfs
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-bfs-bazel-test
    name: admin-main-bfs-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-bfs-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/bfs
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-bfs-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-bfs-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/bfs
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-bfs-lint
    name: admin-main-bfs-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-bfs-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/bfs/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-bfs-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-bfs-lint,?($|\s.*)
    trusted_labels:
    - admin/main/bfs
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-block-bazel-build
    name: admin-main-block-bazel-build
    namespace: default
    rerun_command: +test admin-main-block-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/block
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-block-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-block-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/block
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-block-bazel-test
    name: admin-main-block-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-block-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/block
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-block-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-block-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/block
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-block-lint
    name: admin-main-block-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-block-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/block/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-block-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-block-lint,?($|\s.*)
    trusted_labels:
    - admin/main/block
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-cache-bazel-build
    name: admin-main-cache-bazel-build
    namespace: default
    rerun_command: +test admin-main-cache-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/cache
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-cache-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-cache-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/cache
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-cache-bazel-test
    name: admin-main-cache-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-cache-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/cache
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-cache-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-cache-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/cache
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-cache-lint
    name: admin-main-cache-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-cache-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/cache/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-cache-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-cache-lint,?($|\s.*)
    trusted_labels:
    - admin/main/cache
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-card-bazel-build
    name: admin-main-card-bazel-build
    namespace: default
    rerun_command: +test admin-main-card-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/card
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-card-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-card-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/card
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-card-bazel-test
    name: admin-main-card-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-card-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/card
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-card-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-card-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/card
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-card-lint
    name: admin-main-card-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-card-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/card/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-card-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-card-lint,?($|\s.*)
    trusted_labels:
    - admin/main/card
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-config-bazel-build
    name: admin-main-config-bazel-build
    namespace: default
    rerun_command: +test admin-main-config-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/config
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-config-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-config-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/config
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-config-bazel-test
    name: admin-main-config-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-config-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/config
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-config-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-config-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/config
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-config-lint
    name: admin-main-config-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-config-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/config/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-config-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-config-lint,?($|\s.*)
    trusted_labels:
    - admin/main/config
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-coupon-bazel-build
    name: admin-main-coupon-bazel-build
    namespace: default
    rerun_command: +test admin-main-coupon-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/coupon
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-coupon-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-coupon-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/coupon
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-coupon-bazel-test
    name: admin-main-coupon-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-coupon-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/coupon
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-coupon-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-coupon-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/coupon
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-coupon-lint
    name: admin-main-coupon-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-coupon-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/coupon/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-coupon-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-coupon-lint,?($|\s.*)
    trusted_labels:
    - admin/main/coupon
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-creative-bazel-build
    name: admin-main-creative-bazel-build
    namespace: default
    rerun_command: +test admin-main-creative-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/creative
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-creative-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-creative-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/creative
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-creative-bazel-test
    name: admin-main-creative-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-creative-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/creative
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-creative-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-creative-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/creative
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-creative-lint
    name: admin-main-creative-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-creative-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/creative/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-creative-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-creative-lint,?($|\s.*)
    trusted_labels:
    - admin/main/creative
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-credit-bazel-build
    name: admin-main-credit-bazel-build
    namespace: default
    rerun_command: +test admin-main-credit-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/credit
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-credit-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-credit-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/credit
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-credit-bazel-test
    name: admin-main-credit-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-credit-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/credit
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-credit-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-credit-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/credit
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-credit-lint
    name: admin-main-credit-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-credit-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/credit/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-credit-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-credit-lint,?($|\s.*)
    trusted_labels:
    - admin/main/credit
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-dm-bazel-build
    name: admin-main-dm-bazel-build
    namespace: default
    rerun_command: +test admin-main-dm-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/dm
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-dm-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-dm-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/dm
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-dm-bazel-test
    name: admin-main-dm-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-dm-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/dm
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-dm-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-dm-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/dm
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-dm-lint
    name: admin-main-dm-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-dm-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/dm/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-dm-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-dm-lint,?($|\s.*)
    trusted_labels:
    - admin/main/dm
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-esports-bazel-build
    name: admin-main-esports-bazel-build
    namespace: default
    rerun_command: +test admin-main-esports-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/esports
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-esports-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-esports-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/esports
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-esports-bazel-test
    name: admin-main-esports-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-esports-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/esports
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-esports-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-esports-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/esports
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-esports-lint
    name: admin-main-esports-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-esports-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/esports/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-esports-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-esports-lint,?($|\s.*)
    trusted_labels:
    - admin/main/esports
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-feed-bazel-build
    name: admin-main-feed-bazel-build
    namespace: default
    rerun_command: +test admin-main-feed-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-feed-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-feed-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/feed
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-feed-bazel-test
    name: admin-main-feed-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-feed-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-feed-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-feed-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-feed-lint
    name: admin-main-feed-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-feed-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/feed/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-feed-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-feed-lint,?($|\s.*)
    trusted_labels:
    - admin/main/feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-filter-bazel-build
    name: admin-main-filter-bazel-build
    namespace: default
    rerun_command: +test admin-main-filter-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/filter
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-filter-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-filter-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/filter
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-filter-bazel-test
    name: admin-main-filter-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-filter-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/filter
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-filter-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-filter-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/filter
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-filter-lint
    name: admin-main-filter-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-filter-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/filter/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-filter-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-filter-lint,?($|\s.*)
    trusted_labels:
    - admin/main/filter
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-growup-bazel-build
    name: admin-main-growup-bazel-build
    namespace: default
    rerun_command: +test admin-main-growup-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/growup
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-growup-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-growup-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/growup
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-growup-bazel-test
    name: admin-main-growup-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-growup-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/growup
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-growup-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-growup-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/growup
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-growup-lint
    name: admin-main-growup-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-growup-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/growup/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-growup-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-growup-lint,?($|\s.*)
    trusted_labels:
    - admin/main/growup
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-laser-bazel-build
    name: admin-main-laser-bazel-build
    namespace: default
    rerun_command: +test admin-main-laser-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/laser
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-laser-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-laser-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/laser
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-laser-bazel-test
    name: admin-main-laser-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-laser-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/laser
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-laser-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-laser-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/laser
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-laser-lint
    name: admin-main-laser-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-laser-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/laser/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-laser-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-laser-lint,?($|\s.*)
    trusted_labels:
    - admin/main/laser
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-macross-bazel-build
    name: admin-main-macross-bazel-build
    namespace: default
    rerun_command: +test admin-main-macross-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/macross
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-macross-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-macross-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/macross
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-macross-bazel-test
    name: admin-main-macross-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-macross-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/macross
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-macross-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-macross-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/macross
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-macross-lint
    name: admin-main-macross-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-macross-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/macross/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-macross-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-macross-lint,?($|\s.*)
    trusted_labels:
    - admin/main/macross
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-manager-bazel-build
    name: admin-main-manager-bazel-build
    namespace: default
    rerun_command: +test admin-main-manager-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/manager
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-manager-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-manager-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/manager
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-manager-bazel-test
    name: admin-main-manager-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-manager-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/manager
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-manager-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-manager-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/manager
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-manager-lint
    name: admin-main-manager-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-manager-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/manager/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-manager-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-manager-lint,?($|\s.*)
    trusted_labels:
    - admin/main/manager
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-mcn-bazel-build
    name: admin-main-mcn-bazel-build
    namespace: default
    rerun_command: +test admin-main-mcn-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/mcn
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-mcn-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-mcn-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/mcn
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-mcn-bazel-test
    name: admin-main-mcn-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-mcn-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/mcn
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-mcn-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-mcn-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/mcn
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-mcn-lint
    name: admin-main-mcn-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-mcn-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/mcn/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-mcn-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-mcn-lint,?($|\s.*)
    trusted_labels:
    - admin/main/mcn
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-member-bazel-build
    name: admin-main-member-bazel-build
    namespace: default
    rerun_command: +test admin-main-member-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/member
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-member-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-member-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/member
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-member-bazel-test
    name: admin-main-member-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-member-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/member
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-member-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-member-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/member
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-member-lint
    name: admin-main-member-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-member-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/member/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-member-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-member-lint,?($|\s.*)
    trusted_labels:
    - admin/main/member
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-open-bazel-build
    name: admin-main-open-bazel-build
    namespace: default
    rerun_command: +test admin-main-open-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/open
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-open-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-open-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/open
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-open-bazel-test
    name: admin-main-open-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-open-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/open
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-open-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-open-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/open
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-open-lint
    name: admin-main-open-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-open-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/open/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-open-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-open-lint,?($|\s.*)
    trusted_labels:
    - admin/main/open
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-passport-bazel-build
    name: admin-main-passport-bazel-build
    namespace: default
    rerun_command: +test admin-main-passport-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/passport
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-passport-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-passport-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/passport
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-passport-bazel-test
    name: admin-main-passport-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-passport-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/passport
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-passport-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-passport-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/passport
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-passport-lint
    name: admin-main-passport-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-passport-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/passport/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-passport-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-passport-lint,?($|\s.*)
    trusted_labels:
    - admin/main/passport
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-point-bazel-build
    name: admin-main-point-bazel-build
    namespace: default
    rerun_command: +test admin-main-point-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/point
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-point-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-point-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/point
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-point-bazel-test
    name: admin-main-point-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-point-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/point
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-point-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-point-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/point
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-point-lint
    name: admin-main-point-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-point-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/point/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-point-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-point-lint,?($|\s.*)
    trusted_labels:
    - admin/main/point
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-push-bazel-build
    name: admin-main-push-bazel-build
    namespace: default
    rerun_command: +test admin-main-push-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/push
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-push-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-push-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/push
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-push-bazel-test
    name: admin-main-push-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-push-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/push
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-push-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-push-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/push
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-push-lint
    name: admin-main-push-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-push-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/push/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-push-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-push-lint,?($|\s.*)
    trusted_labels:
    - admin/main/push
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-relation-bazel-build
    name: admin-main-relation-bazel-build
    namespace: default
    rerun_command: +test admin-main-relation-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/relation
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-relation-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-relation-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/relation
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-relation-bazel-test
    name: admin-main-relation-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-relation-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/relation
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-relation-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-relation-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/relation
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-relation-lint
    name: admin-main-relation-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-relation-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/relation/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-relation-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-relation-lint,?($|\s.*)
    trusted_labels:
    - admin/main/relation
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-reply-bazel-build
    name: admin-main-reply-bazel-build
    namespace: default
    rerun_command: +test admin-main-reply-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/reply
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-reply-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-reply-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/reply
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-reply-bazel-test
    name: admin-main-reply-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-reply-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/reply
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-reply-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-reply-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/reply
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-reply-lint
    name: admin-main-reply-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-reply-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/reply/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-reply-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-reply-lint,?($|\s.*)
    trusted_labels:
    - admin/main/reply
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-search-bazel-build
    name: admin-main-search-bazel-build
    namespace: default
    rerun_command: +test admin-main-search-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/search
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-search-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-search-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/search
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-search-bazel-test
    name: admin-main-search-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-search-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/search
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-search-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-search-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/search
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-search-lint
    name: admin-main-search-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-search-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/search/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-search-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-search-lint,?($|\s.*)
    trusted_labels:
    - admin/main/search
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-sms-bazel-build
    name: admin-main-sms-bazel-build
    namespace: default
    rerun_command: +test admin-main-sms-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/sms
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-sms-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-sms-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/sms
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-sms-bazel-test
    name: admin-main-sms-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-sms-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/sms
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-sms-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-sms-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/sms
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-sms-lint
    name: admin-main-sms-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-sms-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/sms/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-sms-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-sms-lint,?($|\s.*)
    trusted_labels:
    - admin/main/sms
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-space-bazel-build
    name: admin-main-space-bazel-build
    namespace: default
    rerun_command: +test admin-main-space-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/space
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-space-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-space-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/space
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-space-bazel-test
    name: admin-main-space-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-space-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/space
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-space-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-space-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/space
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-space-lint
    name: admin-main-space-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-space-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/space/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-space-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-space-lint,?($|\s.*)
    trusted_labels:
    - admin/main/space
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-spy-bazel-build
    name: admin-main-spy-bazel-build
    namespace: default
    rerun_command: +test admin-main-spy-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/spy
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-spy-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-spy-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/spy
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-spy-bazel-test
    name: admin-main-spy-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-spy-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/spy
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-spy-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-spy-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/spy
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-spy-lint
    name: admin-main-spy-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-spy-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/spy/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-spy-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-spy-lint,?($|\s.*)
    trusted_labels:
    - admin/main/spy
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-tag-bazel-build
    name: admin-main-tag-bazel-build
    namespace: default
    rerun_command: +test admin-main-tag-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/tag
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-tag-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-tag-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/tag
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-tag-bazel-test
    name: admin-main-tag-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-tag-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/tag
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-tag-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-tag-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/tag
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-tag-lint
    name: admin-main-tag-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-tag-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/tag/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-tag-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-tag-lint,?($|\s.*)
    trusted_labels:
    - admin/main/tag
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-tv-bazel-build
    name: admin-main-tv-bazel-build
    namespace: default
    rerun_command: +test admin-main-tv-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/tv
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-tv-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-tv-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/tv
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-tv-bazel-test
    name: admin-main-tv-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-tv-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/tv
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-tv-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-tv-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/tv
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-tv-lint
    name: admin-main-tv-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-tv-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/tv/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-tv-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-tv-lint,?($|\s.*)
    trusted_labels:
    - admin/main/tv
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-up-bazel-build
    name: admin-main-up-bazel-build
    namespace: default
    rerun_command: +test admin-main-up-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/up
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-up-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-up-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/up
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-up-bazel-test
    name: admin-main-up-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-up-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/up
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-up-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-up-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/up
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-up-lint
    name: admin-main-up-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-up-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/up/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-up-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-up-lint,?($|\s.*)
    trusted_labels:
    - admin/main/up
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-up-rating-bazel-build
    name: admin-main-up-rating-bazel-build
    namespace: default
    rerun_command: +test admin-main-up-rating-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/up-rating
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-up-rating-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-up-rating-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/up-rating
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-up-rating-bazel-test
    name: admin-main-up-rating-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-up-rating-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/up-rating
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-up-rating-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-up-rating-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/up-rating
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-up-rating-lint
    name: admin-main-up-rating-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-up-rating-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/up-rating/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-up-rating-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-up-rating-lint,?($|\s.*)
    trusted_labels:
    - admin/main/up-rating
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-upload-bazel-build
    name: admin-main-upload-bazel-build
    namespace: default
    rerun_command: +test admin-main-upload-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/upload
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-upload-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-upload-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/upload
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-upload-bazel-test
    name: admin-main-upload-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-upload-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/upload
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-upload-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-upload-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/upload
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-upload-lint
    name: admin-main-upload-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-upload-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/upload/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-upload-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-upload-lint,?($|\s.*)
    trusted_labels:
    - admin/main/upload
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-usersuit-bazel-build
    name: admin-main-usersuit-bazel-build
    namespace: default
    rerun_command: +test admin-main-usersuit-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/usersuit
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-usersuit-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-usersuit-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/usersuit
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-usersuit-bazel-test
    name: admin-main-usersuit-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-usersuit-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/usersuit
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-usersuit-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-usersuit-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/usersuit
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-usersuit-lint
    name: admin-main-usersuit-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-usersuit-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/usersuit/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-usersuit-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-usersuit-lint,?($|\s.*)
    trusted_labels:
    - admin/main/usersuit
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-videoup-bazel-build
    name: admin-main-videoup-bazel-build
    namespace: default
    rerun_command: +test admin-main-videoup-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/videoup
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-videoup-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-videoup-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/videoup
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-videoup-bazel-test
    name: admin-main-videoup-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-videoup-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/videoup
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-videoup-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-videoup-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/videoup
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-videoup-lint
    name: admin-main-videoup-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-videoup-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/videoup/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-videoup-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-videoup-lint,?($|\s.*)
    trusted_labels:
    - admin/main/videoup
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-videoup-task-bazel-build
    name: admin-main-videoup-task-bazel-build
    namespace: default
    rerun_command: +test admin-main-videoup-task-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/videoup-task
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-videoup-task-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-videoup-task-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/videoup-task
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-videoup-task-bazel-test
    name: admin-main-videoup-task-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-videoup-task-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/videoup-task
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-videoup-task-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-videoup-task-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/videoup-task
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-videoup-task-lint
    name: admin-main-videoup-task-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-videoup-task-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/videoup-task/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-videoup-task-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-videoup-task-lint,?($|\s.*)
    trusted_labels:
    - admin/main/videoup-task
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-vip-bazel-build
    name: admin-main-vip-bazel-build
    namespace: default
    rerun_command: +test admin-main-vip-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/vip
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-vip-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-vip-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/vip
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-vip-bazel-test
    name: admin-main-vip-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-vip-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/vip
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-vip-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-vip-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/vip
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-vip-lint
    name: admin-main-vip-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-vip-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/vip/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-vip-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-vip-lint,?($|\s.*)
    trusted_labels:
    - admin/main/vip
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-workflow-bazel-build
    name: admin-main-workflow-bazel-build
    namespace: default
    rerun_command: +test admin-main-workflow-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/main/workflow
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-workflow-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-workflow-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/main/workflow
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-workflow-bazel-test
    name: admin-main-workflow-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-main-workflow-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/main/workflow
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-workflow-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-workflow-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/main/workflow
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-main-workflow-lint
    name: admin-main-workflow-lint
    namespace: default
    optional: true
    rerun_command: +test admin-main-workflow-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/main/workflow/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-main-workflow-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-main-workflow-lint,?($|\s.*)
    trusted_labels:
    - admin/main/workflow
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-openplatform-sug-bazel-build
    name: admin-openplatform-sug-bazel-build
    namespace: default
    rerun_command: +test admin-openplatform-sug-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/admin/openplatform/sug
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-openplatform-sug-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )admin-openplatform-sug-bazel-build,?($|\s.*)
    trusted_labels:
    - admin/openplatform/sug
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-openplatform-sug-bazel-test
    name: admin-openplatform-sug-bazel-test
    namespace: default
    optional: true
    rerun_command: +test admin-openplatform-sug-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/admin/openplatform/sug
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-openplatform-sug-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )admin-openplatform-sug-bazel-test,?($|\s.*)
    trusted_labels:
    - admin/openplatform/sug
  - agent: kubernetes
    always_run: true
    cluster: default
    context: admin-openplatform-sug-lint
    name: admin-openplatform-sug-lint
    namespace: default
    optional: true
    rerun_command: +test admin-openplatform-sug-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/admin/openplatform/sug/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: admin-openplatform-sug-lint
        resources: {}
    trigger: (?m)^\+test( | .* )admin-openplatform-sug-lint,?($|\s.*)
    trusted_labels:
    - admin/openplatform/sug
  - agent: kubernetes
    always_run: true
    cluster: default
    context: infra-canal-bazel-build
    name: infra-canal-bazel-build
    namespace: default
    rerun_command: +test infra-canal-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/infra/canal
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: infra-canal-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )infra-canal-bazel-build,?($|\s.*)
    trusted_labels:
    - infra/canal
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: infra-canal-bazel-test
    name: infra-canal-bazel-test
    namespace: default
    optional: true
    rerun_command: +test infra-canal-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/infra/canal
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: infra-canal-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )infra-canal-bazel-test,?($|\s.*)
    trusted_labels:
    - infra/canal
  - agent: kubernetes
    always_run: true
    cluster: default
    context: infra-canal-lint
    name: infra-canal-lint
    namespace: default
    optional: true
    rerun_command: +test infra-canal-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/infra/canal/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: infra-canal-lint
        resources: {}
    trigger: (?m)^\+test( | .* )infra-canal-lint,?($|\s.*)
    trusted_labels:
    - infra/canal
  - agent: kubernetes
    always_run: true
    cluster: default
    context: infra-config-bazel-build
    name: infra-config-bazel-build
    namespace: default
    rerun_command: +test infra-config-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/infra/config
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: infra-config-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )infra-config-bazel-build,?($|\s.*)
    trusted_labels:
    - infra/config
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: infra-config-bazel-test
    name: infra-config-bazel-test
    namespace: default
    optional: true
    rerun_command: +test infra-config-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/infra/config
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: infra-config-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )infra-config-bazel-test,?($|\s.*)
    trusted_labels:
    - infra/config
  - agent: kubernetes
    always_run: true
    cluster: default
    context: infra-config-lint
    name: infra-config-lint
    namespace: default
    optional: true
    rerun_command: +test infra-config-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/infra/config/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: infra-config-lint
        resources: {}
    trigger: (?m)^\+test( | .* )infra-config-lint,?($|\s.*)
    trusted_labels:
    - infra/config
  - agent: kubernetes
    always_run: true
    cluster: default
    context: infra-databus-bazel-build
    name: infra-databus-bazel-build
    namespace: default
    rerun_command: +test infra-databus-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/infra/databus
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: infra-databus-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )infra-databus-bazel-build,?($|\s.*)
    trusted_labels:
    - infra/databus
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: infra-databus-bazel-test
    name: infra-databus-bazel-test
    namespace: default
    optional: true
    rerun_command: +test infra-databus-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/infra/databus
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: infra-databus-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )infra-databus-bazel-test,?($|\s.*)
    trusted_labels:
    - infra/databus
  - agent: kubernetes
    always_run: true
    cluster: default
    context: infra-databus-lint
    name: infra-databus-lint
    namespace: default
    optional: true
    rerun_command: +test infra-databus-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/infra/databus/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: infra-databus-lint
        resources: {}
    trigger: (?m)^\+test( | .* )infra-databus-lint,?($|\s.*)
    trusted_labels:
    - infra/databus
  - agent: kubernetes
    always_run: true
    cluster: default
    context: infra-discovery-bazel-build
    name: infra-discovery-bazel-build
    namespace: default
    rerun_command: +test infra-discovery-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/infra/discovery
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: infra-discovery-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )infra-discovery-bazel-build,?($|\s.*)
    trusted_labels:
    - infra/discovery
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: infra-discovery-bazel-test
    name: infra-discovery-bazel-test
    namespace: default
    optional: true
    rerun_command: +test infra-discovery-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/infra/discovery
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: infra-discovery-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )infra-discovery-bazel-test,?($|\s.*)
    trusted_labels:
    - infra/discovery
  - agent: kubernetes
    always_run: true
    cluster: default
    context: infra-discovery-lint
    name: infra-discovery-lint
    namespace: default
    optional: true
    rerun_command: +test infra-discovery-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/infra/discovery/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: infra-discovery-lint
        resources: {}
    trigger: (?m)^\+test( | .* )infra-discovery-lint,?($|\s.*)
    trusted_labels:
    - infra/discovery
  - agent: kubernetes
    always_run: true
    cluster: default
    context: infra-notify-bazel-build
    name: infra-notify-bazel-build
    namespace: default
    rerun_command: +test infra-notify-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/infra/notify
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: infra-notify-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )infra-notify-bazel-build,?($|\s.*)
    trusted_labels:
    - infra/notify
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: infra-notify-bazel-test
    name: infra-notify-bazel-test
    namespace: default
    optional: true
    rerun_command: +test infra-notify-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/infra/notify
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: infra-notify-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )infra-notify-bazel-test,?($|\s.*)
    trusted_labels:
    - infra/notify
  - agent: kubernetes
    always_run: true
    cluster: default
    context: infra-notify-lint
    name: infra-notify-lint
    namespace: default
    optional: true
    rerun_command: +test infra-notify-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/infra/notify/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: infra-notify-lint
        resources: {}
    trigger: (?m)^\+test( | .* )infra-notify-lint,?($|\s.*)
    trusted_labels:
    - infra/notify
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-app-bbq-bazel-build
    name: interface-bbq-app-bbq-bazel-build
    namespace: default
    rerun_command: +test interface-bbq-app-bbq-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/bbq/app-bbq
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-app-bbq-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-app-bbq-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/bbq/app-bbq
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-app-bbq-bazel-test
    name: interface-bbq-app-bbq-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-app-bbq-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/bbq/app-bbq
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-app-bbq-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-app-bbq-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/bbq/app-bbq
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-app-bbq-lint
    name: interface-bbq-app-bbq-lint
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-app-bbq-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/bbq/app-bbq/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-app-bbq-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-app-bbq-lint,?($|\s.*)
    trusted_labels:
    - interface/bbq/app-bbq
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-bullet-bazel-build
    name: interface-bbq-bullet-bazel-build
    namespace: default
    rerun_command: +test interface-bbq-bullet-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/bbq/bullet
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-bullet-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-bullet-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/bbq/bullet
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-bullet-bazel-test
    name: interface-bbq-bullet-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-bullet-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/bbq/bullet
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-bullet-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-bullet-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/bbq/bullet
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-bullet-lint
    name: interface-bbq-bullet-lint
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-bullet-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/bbq/bullet/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-bullet-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-bullet-lint,?($|\s.*)
    trusted_labels:
    - interface/bbq/bullet
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-comment-bazel-build
    name: interface-bbq-comment-bazel-build
    namespace: default
    rerun_command: +test interface-bbq-comment-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/bbq/comment
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-comment-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-comment-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/bbq/comment
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-comment-bazel-test
    name: interface-bbq-comment-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-comment-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/bbq/comment
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-comment-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-comment-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/bbq/comment
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-comment-lint
    name: interface-bbq-comment-lint
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-comment-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/bbq/comment/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-comment-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-comment-lint,?($|\s.*)
    trusted_labels:
    - interface/bbq/comment
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-feed-bazel-build
    name: interface-bbq-feed-bazel-build
    namespace: default
    rerun_command: +test interface-bbq-feed-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/bbq/feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-feed-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-feed-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/bbq/feed
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-feed-bazel-test
    name: interface-bbq-feed-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-feed-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/bbq/feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-feed-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-feed-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/bbq/feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-feed-lint
    name: interface-bbq-feed-lint
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-feed-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/bbq/feed/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-feed-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-feed-lint,?($|\s.*)
    trusted_labels:
    - interface/bbq/feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-notice-bazel-build
    name: interface-bbq-notice-bazel-build
    namespace: default
    rerun_command: +test interface-bbq-notice-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/bbq/notice
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-notice-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-notice-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/bbq/notice
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-notice-bazel-test
    name: interface-bbq-notice-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-notice-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/bbq/notice
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-notice-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-notice-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/bbq/notice
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-notice-lint
    name: interface-bbq-notice-lint
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-notice-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/bbq/notice/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-notice-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-notice-lint,?($|\s.*)
    trusted_labels:
    - interface/bbq/notice
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-search-bazel-build
    name: interface-bbq-search-bazel-build
    namespace: default
    rerun_command: +test interface-bbq-search-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/bbq/search
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-search-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-search-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/bbq/search
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-search-bazel-test
    name: interface-bbq-search-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-search-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/bbq/search
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-search-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-search-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/bbq/search
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-search-lint
    name: interface-bbq-search-lint
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-search-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/bbq/search/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-search-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-search-lint,?($|\s.*)
    trusted_labels:
    - interface/bbq/search
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-topic-bazel-build
    name: interface-bbq-topic-bazel-build
    namespace: default
    rerun_command: +test interface-bbq-topic-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/bbq/topic
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-topic-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-topic-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/bbq/topic
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-topic-bazel-test
    name: interface-bbq-topic-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-topic-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/bbq/topic
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-topic-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-topic-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/bbq/topic
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-topic-lint
    name: interface-bbq-topic-lint
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-topic-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/bbq/topic/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-topic-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-topic-lint,?($|\s.*)
    trusted_labels:
    - interface/bbq/topic
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-user-bazel-build
    name: interface-bbq-user-bazel-build
    namespace: default
    rerun_command: +test interface-bbq-user-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/bbq/user
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-user-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-user-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/bbq/user
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-user-bazel-test
    name: interface-bbq-user-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-user-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/bbq/user
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-user-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-user-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/bbq/user
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-user-lint
    name: interface-bbq-user-lint
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-user-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/bbq/user/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-user-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-user-lint,?($|\s.*)
    trusted_labels:
    - interface/bbq/user
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-video-bazel-build
    name: interface-bbq-video-bazel-build
    namespace: default
    rerun_command: +test interface-bbq-video-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/bbq/video
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-video-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-video-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/bbq/video
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-video-bazel-test
    name: interface-bbq-video-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-video-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/bbq/video
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-video-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-video-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/bbq/video
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-video-lint
    name: interface-bbq-video-lint
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-video-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/bbq/video/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-video-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-video-lint,?($|\s.*)
    trusted_labels:
    - interface/bbq/video
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-wechat-bazel-build
    name: interface-bbq-wechat-bazel-build
    namespace: default
    rerun_command: +test interface-bbq-wechat-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/bbq/wechat
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-wechat-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-wechat-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/bbq/wechat
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-wechat-bazel-test
    name: interface-bbq-wechat-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-wechat-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/bbq/wechat
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-wechat-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-wechat-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/bbq/wechat
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-bbq-wechat-lint
    name: interface-bbq-wechat-lint
    namespace: default
    optional: true
    rerun_command: +test interface-bbq-wechat-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/bbq/wechat/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-bbq-wechat-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-bbq-wechat-lint,?($|\s.*)
    trusted_labels:
    - interface/bbq/wechat
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-app-blink-bazel-build
    name: interface-live-app-blink-bazel-build
    namespace: default
    rerun_command: +test interface-live-app-blink-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/live/app-blink
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-app-blink-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-app-blink-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/live/app-blink
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-app-blink-bazel-test
    name: interface-live-app-blink-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-live-app-blink-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/live/app-blink
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-app-blink-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-app-blink-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/live/app-blink
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-app-blink-lint
    name: interface-live-app-blink-lint
    namespace: default
    optional: true
    rerun_command: +test interface-live-app-blink-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/live/app-blink/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-app-blink-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-app-blink-lint,?($|\s.*)
    trusted_labels:
    - interface/live/app-blink
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-app-interface-bazel-build
    name: interface-live-app-interface-bazel-build
    namespace: default
    rerun_command: +test interface-live-app-interface-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/live/app-interface
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-app-interface-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-app-interface-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/live/app-interface
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-app-interface-bazel-test
    name: interface-live-app-interface-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-live-app-interface-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/live/app-interface
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-app-interface-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-app-interface-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/live/app-interface
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-app-interface-lint
    name: interface-live-app-interface-lint
    namespace: default
    optional: true
    rerun_command: +test interface-live-app-interface-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/live/app-interface/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-app-interface-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-app-interface-lint,?($|\s.*)
    trusted_labels:
    - interface/live/app-interface
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-app-room-bazel-build
    name: interface-live-app-room-bazel-build
    namespace: default
    rerun_command: +test interface-live-app-room-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/live/app-room
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-app-room-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-app-room-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/live/app-room
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-app-room-bazel-test
    name: interface-live-app-room-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-live-app-room-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/live/app-room
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-app-room-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-app-room-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/live/app-room
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-app-room-lint
    name: interface-live-app-room-lint
    namespace: default
    optional: true
    rerun_command: +test interface-live-app-room-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/live/app-room/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-app-room-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-app-room-lint,?($|\s.*)
    trusted_labels:
    - interface/live/app-room
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-app-ucenter-bazel-build
    name: interface-live-app-ucenter-bazel-build
    namespace: default
    rerun_command: +test interface-live-app-ucenter-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/live/app-ucenter
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-app-ucenter-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-app-ucenter-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/live/app-ucenter
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-app-ucenter-bazel-test
    name: interface-live-app-ucenter-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-live-app-ucenter-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/live/app-ucenter
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-app-ucenter-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-app-ucenter-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/live/app-ucenter
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-app-ucenter-lint
    name: interface-live-app-ucenter-lint
    namespace: default
    optional: true
    rerun_command: +test interface-live-app-ucenter-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/live/app-ucenter/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-app-ucenter-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-app-ucenter-lint,?($|\s.*)
    trusted_labels:
    - interface/live/app-ucenter
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-live-demo-bazel-build
    name: interface-live-live-demo-bazel-build
    namespace: default
    rerun_command: +test interface-live-live-demo-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/live/live-demo
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-live-demo-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-live-demo-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/live/live-demo
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-live-demo-bazel-test
    name: interface-live-live-demo-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-live-live-demo-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/live/live-demo
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-live-demo-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-live-demo-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/live/live-demo
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-live-demo-lint
    name: interface-live-live-demo-lint
    namespace: default
    optional: true
    rerun_command: +test interface-live-live-demo-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/live/live-demo/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-live-demo-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-live-demo-lint,?($|\s.*)
    trusted_labels:
    - interface/live/live-demo
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-lottery-interface-bazel-build
    name: interface-live-lottery-interface-bazel-build
    namespace: default
    rerun_command: +test interface-live-lottery-interface-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/live/lottery-interface
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-lottery-interface-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-lottery-interface-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/live/lottery-interface
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-lottery-interface-bazel-test
    name: interface-live-lottery-interface-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-live-lottery-interface-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/live/lottery-interface
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-lottery-interface-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-lottery-interface-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/live/lottery-interface
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-lottery-interface-lint
    name: interface-live-lottery-interface-lint
    namespace: default
    optional: true
    rerun_command: +test interface-live-lottery-interface-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/live/lottery-interface/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-lottery-interface-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-lottery-interface-lint,?($|\s.*)
    trusted_labels:
    - interface/live/lottery-interface
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-open-interface-bazel-build
    name: interface-live-open-interface-bazel-build
    namespace: default
    rerun_command: +test interface-live-open-interface-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/live/open-interface
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-open-interface-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-open-interface-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/live/open-interface
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-open-interface-bazel-test
    name: interface-live-open-interface-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-live-open-interface-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/live/open-interface
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-open-interface-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-open-interface-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/live/open-interface
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-open-interface-lint
    name: interface-live-open-interface-lint
    namespace: default
    optional: true
    rerun_command: +test interface-live-open-interface-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/live/open-interface/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-open-interface-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-open-interface-lint,?($|\s.*)
    trusted_labels:
    - interface/live/open-interface
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-push-live-bazel-build
    name: interface-live-push-live-bazel-build
    namespace: default
    rerun_command: +test interface-live-push-live-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/live/push-live
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-push-live-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-push-live-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/live/push-live
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-push-live-bazel-test
    name: interface-live-push-live-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-live-push-live-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/live/push-live
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-push-live-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-push-live-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/live/push-live
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-push-live-lint
    name: interface-live-push-live-lint
    namespace: default
    optional: true
    rerun_command: +test interface-live-push-live-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/live/push-live/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-push-live-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-push-live-lint,?($|\s.*)
    trusted_labels:
    - interface/live/push-live
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-web-room-bazel-build
    name: interface-live-web-room-bazel-build
    namespace: default
    rerun_command: +test interface-live-web-room-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/live/web-room
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-web-room-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-web-room-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/live/web-room
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-web-room-bazel-test
    name: interface-live-web-room-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-live-web-room-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/live/web-room
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-web-room-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-web-room-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/live/web-room
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-web-room-lint
    name: interface-live-web-room-lint
    namespace: default
    optional: true
    rerun_command: +test interface-live-web-room-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/live/web-room/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-web-room-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-web-room-lint,?($|\s.*)
    trusted_labels:
    - interface/live/web-room
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-web-ucenter-bazel-build
    name: interface-live-web-ucenter-bazel-build
    namespace: default
    rerun_command: +test interface-live-web-ucenter-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/live/web-ucenter
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-web-ucenter-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-web-ucenter-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/live/web-ucenter
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-web-ucenter-bazel-test
    name: interface-live-web-ucenter-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-live-web-ucenter-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/live/web-ucenter
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-web-ucenter-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-web-ucenter-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/live/web-ucenter
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-live-web-ucenter-lint
    name: interface-live-web-ucenter-lint
    namespace: default
    optional: true
    rerun_command: +test interface-live-web-ucenter-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/live/web-ucenter/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-live-web-ucenter-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-live-web-ucenter-lint,?($|\s.*)
    trusted_labels:
    - interface/live/web-ucenter
  - agent: kubernetes
    always_run: true
    cluster: default
    context: new-interface-main-project-bazel-build
    name: new-interface-main-project-bazel-build
    namespace: default
    rerun_command: +test new-interface-main-project-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - app
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: new-interface-main-project-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )new-interface-main-project-bazel-build,?($|\s.*)
    trusted_labels:
    - new-interface-main-project
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: new-interface-main-project-bazel-test
    name: new-interface-main-project-bazel-test
    namespace: default
    optional: true
    rerun_command: +test new-interface-main-project-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: new-interface-main-project-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )new-interface-main-project-bazel-test,?($|\s.*)
    trusted_labels:
    - new-interface-main-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: new-interface-main-project-lint
    name: new-interface-main-project-lint
    namespace: default
    optional: true
    rerun_command: +test new-interface-main-project-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - app
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: new-interface-main-project-lint
        resources: {}
    trigger: (?m)^\+test( | .* )new-interface-main-project-lint,?($|\s.*)
    trusted_labels:
    - new-interface-main-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-account-bazel-build
    name: interface-main-account-bazel-build
    namespace: default
    rerun_command: +test interface-main-account-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/account
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-account-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-account-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/account
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-account-bazel-test
    name: interface-main-account-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-account-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/account
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-account-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-account-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/account
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-account-lint
    name: interface-main-account-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-account-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/account/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-account-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-account-lint,?($|\s.*)
    trusted_labels:
    - interface/main/account
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-activity-bazel-build
    name: interface-main-activity-bazel-build
    namespace: default
    rerun_command: +test interface-main-activity-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/activity
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-activity-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-activity-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/activity
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-activity-bazel-test
    name: interface-main-activity-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-activity-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/activity
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-activity-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-activity-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/activity
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-activity-lint
    name: interface-main-activity-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-activity-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/activity/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-activity-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-activity-lint,?($|\s.*)
    trusted_labels:
    - interface/main/activity
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-answer-bazel-build
    name: interface-main-answer-bazel-build
    namespace: default
    rerun_command: +test interface-main-answer-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/answer
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-answer-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-answer-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/answer
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-answer-bazel-test
    name: interface-main-answer-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-answer-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/answer
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-answer-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-answer-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/answer
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-answer-lint
    name: interface-main-answer-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-answer-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/answer/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-answer-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-answer-lint,?($|\s.*)
    trusted_labels:
    - interface/main/answer
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-card-bazel-build
    name: interface-main-app-card-bazel-build
    namespace: default
    rerun_command: +test interface-main-app-card-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/app-card
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-card-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-card-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/app-card
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-card-bazel-test
    name: interface-main-app-card-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-card-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/app-card
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-card-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-card-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/app-card
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-card-lint
    name: interface-main-app-card-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-card-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/app-card/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-card-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-card-lint,?($|\s.*)
    trusted_labels:
    - interface/main/app-card
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-channel-bazel-build
    name: interface-main-app-channel-bazel-build
    namespace: default
    rerun_command: +test interface-main-app-channel-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/app-channel
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-channel-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-channel-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/app-channel
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-channel-bazel-test
    name: interface-main-app-channel-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-channel-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/app-channel
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-channel-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-channel-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/app-channel
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-channel-lint
    name: interface-main-app-channel-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-channel-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/app-channel/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-channel-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-channel-lint,?($|\s.*)
    trusted_labels:
    - interface/main/app-channel
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-feed-bazel-build
    name: interface-main-app-feed-bazel-build
    namespace: default
    rerun_command: +test interface-main-app-feed-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/app-feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-feed-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-feed-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/app-feed
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-feed-bazel-test
    name: interface-main-app-feed-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-feed-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/app-feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-feed-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-feed-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/app-feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-feed-lint
    name: interface-main-app-feed-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-feed-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/app-feed/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-feed-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-feed-lint,?($|\s.*)
    trusted_labels:
    - interface/main/app-feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-interface-bazel-build
    name: interface-main-app-interface-bazel-build
    namespace: default
    rerun_command: +test interface-main-app-interface-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/app-interface
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-interface-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-interface-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/app-interface
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-interface-bazel-test
    name: interface-main-app-interface-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-interface-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/app-interface
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-interface-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-interface-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/app-interface
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-interface-lint
    name: interface-main-app-interface-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-interface-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/app-interface/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-interface-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-interface-lint,?($|\s.*)
    trusted_labels:
    - interface/main/app-interface
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-intl-bazel-build
    name: interface-main-app-intl-bazel-build
    namespace: default
    rerun_command: +test interface-main-app-intl-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/app-intl
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-intl-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-intl-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/app-intl
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-intl-bazel-test
    name: interface-main-app-intl-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-intl-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/app-intl
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-intl-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-intl-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/app-intl
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-intl-lint
    name: interface-main-app-intl-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-intl-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/app-intl/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-intl-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-intl-lint,?($|\s.*)
    trusted_labels:
    - interface/main/app-intl
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-player-bazel-build
    name: interface-main-app-player-bazel-build
    namespace: default
    rerun_command: +test interface-main-app-player-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/app-player
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-player-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-player-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/app-player
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-player-bazel-test
    name: interface-main-app-player-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-player-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/app-player
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-player-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-player-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/app-player
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-player-lint
    name: interface-main-app-player-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-player-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/app-player/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-player-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-player-lint,?($|\s.*)
    trusted_labels:
    - interface/main/app-player
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-resource-bazel-build
    name: interface-main-app-resource-bazel-build
    namespace: default
    rerun_command: +test interface-main-app-resource-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/app-resource
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-resource-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-resource-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/app-resource
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-resource-bazel-test
    name: interface-main-app-resource-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-resource-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/app-resource
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-resource-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-resource-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/app-resource
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-resource-lint
    name: interface-main-app-resource-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-resource-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/app-resource/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-resource-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-resource-lint,?($|\s.*)
    trusted_labels:
    - interface/main/app-resource
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-show-bazel-build
    name: interface-main-app-show-bazel-build
    namespace: default
    rerun_command: +test interface-main-app-show-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/app-show
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-show-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-show-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/app-show
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-show-bazel-test
    name: interface-main-app-show-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-show-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/app-show
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-show-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-show-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/app-show
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-show-lint
    name: interface-main-app-show-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-show-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/app-show/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-show-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-show-lint,?($|\s.*)
    trusted_labels:
    - interface/main/app-show
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-tag-bazel-build
    name: interface-main-app-tag-bazel-build
    namespace: default
    rerun_command: +test interface-main-app-tag-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/app-tag
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-tag-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-tag-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/app-tag
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-tag-bazel-test
    name: interface-main-app-tag-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-tag-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/app-tag
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-tag-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-tag-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/app-tag
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-tag-lint
    name: interface-main-app-tag-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-tag-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/app-tag/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-tag-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-tag-lint,?($|\s.*)
    trusted_labels:
    - interface/main/app-tag
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-view-bazel-build
    name: interface-main-app-view-bazel-build
    namespace: default
    rerun_command: +test interface-main-app-view-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/app-view
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-view-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-view-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/app-view
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-view-bazel-test
    name: interface-main-app-view-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-view-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/app-view
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-view-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-view-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/app-view
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-view-lint
    name: interface-main-app-view-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-view-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/app-view/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-view-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-view-lint,?($|\s.*)
    trusted_labels:
    - interface/main/app-view
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-wall-bazel-build
    name: interface-main-app-wall-bazel-build
    namespace: default
    rerun_command: +test interface-main-app-wall-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/app-wall
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-wall-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-wall-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/app-wall
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-wall-bazel-test
    name: interface-main-app-wall-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-wall-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/app-wall
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-wall-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-wall-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/app-wall
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-app-wall-lint
    name: interface-main-app-wall-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-app-wall-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/app-wall/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-app-wall-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-app-wall-lint,?($|\s.*)
    trusted_labels:
    - interface/main/app-wall
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-broadcast-bazel-build
    name: interface-main-broadcast-bazel-build
    namespace: default
    rerun_command: +test interface-main-broadcast-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/broadcast
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-broadcast-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-broadcast-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/broadcast
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-broadcast-bazel-test
    name: interface-main-broadcast-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-broadcast-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/broadcast
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-broadcast-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-broadcast-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/broadcast
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-broadcast-lint
    name: interface-main-broadcast-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-broadcast-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/broadcast/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-broadcast-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-broadcast-lint,?($|\s.*)
    trusted_labels:
    - interface/main/broadcast
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-captcha-bazel-build
    name: interface-main-captcha-bazel-build
    namespace: default
    rerun_command: +test interface-main-captcha-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/captcha
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-captcha-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-captcha-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/captcha
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-captcha-bazel-test
    name: interface-main-captcha-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-captcha-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/captcha
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-captcha-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-captcha-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/captcha
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-captcha-lint
    name: interface-main-captcha-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-captcha-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/captcha/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-captcha-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-captcha-lint,?($|\s.*)
    trusted_labels:
    - interface/main/captcha
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-creative-bazel-build
    name: interface-main-creative-bazel-build
    namespace: default
    rerun_command: +test interface-main-creative-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/creative
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-creative-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-creative-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/creative
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-creative-bazel-test
    name: interface-main-creative-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-creative-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/creative
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-creative-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-creative-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/creative
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-creative-lint
    name: interface-main-creative-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-creative-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/creative/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-creative-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-creative-lint,?($|\s.*)
    trusted_labels:
    - interface/main/creative
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-credit-bazel-build
    name: interface-main-credit-bazel-build
    namespace: default
    rerun_command: +test interface-main-credit-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/credit
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-credit-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-credit-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/credit
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-credit-bazel-test
    name: interface-main-credit-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-credit-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/credit
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-credit-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-credit-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/credit
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-credit-lint
    name: interface-main-credit-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-credit-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/credit/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-credit-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-credit-lint,?($|\s.*)
    trusted_labels:
    - interface/main/credit
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-dm-bazel-build
    name: interface-main-dm-bazel-build
    namespace: default
    rerun_command: +test interface-main-dm-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/dm
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-dm-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-dm-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/dm
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-dm-bazel-test
    name: interface-main-dm-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-dm-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/dm
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-dm-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-dm-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/dm
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-dm-lint
    name: interface-main-dm-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-dm-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/dm/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-dm-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-dm-lint,?($|\s.*)
    trusted_labels:
    - interface/main/dm
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-dm2-bazel-build
    name: interface-main-dm2-bazel-build
    namespace: default
    rerun_command: +test interface-main-dm2-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/dm2
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-dm2-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-dm2-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/dm2
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-dm2-bazel-test
    name: interface-main-dm2-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-dm2-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/dm2
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-dm2-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-dm2-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/dm2
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-dm2-lint
    name: interface-main-dm2-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-dm2-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/dm2/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-dm2-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-dm2-lint,?($|\s.*)
    trusted_labels:
    - interface/main/dm2
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-esports-bazel-build
    name: interface-main-esports-bazel-build
    namespace: default
    rerun_command: +test interface-main-esports-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/esports
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-esports-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-esports-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/esports
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-esports-bazel-test
    name: interface-main-esports-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-esports-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/esports
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-esports-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-esports-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/esports
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-esports-lint
    name: interface-main-esports-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-esports-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/esports/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-esports-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-esports-lint,?($|\s.*)
    trusted_labels:
    - interface/main/esports
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-favorite-bazel-build
    name: interface-main-favorite-bazel-build
    namespace: default
    rerun_command: +test interface-main-favorite-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/favorite
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-favorite-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-favorite-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/favorite
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-favorite-bazel-test
    name: interface-main-favorite-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-favorite-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/favorite
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-favorite-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-favorite-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/favorite
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-favorite-lint
    name: interface-main-favorite-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-favorite-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/favorite/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-favorite-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-favorite-lint,?($|\s.*)
    trusted_labels:
    - interface/main/favorite
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-feedback-bazel-build
    name: interface-main-feedback-bazel-build
    namespace: default
    rerun_command: +test interface-main-feedback-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/feedback
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-feedback-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-feedback-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/feedback
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-feedback-bazel-test
    name: interface-main-feedback-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-feedback-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/feedback
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-feedback-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-feedback-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/feedback
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-feedback-lint
    name: interface-main-feedback-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-feedback-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/feedback/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-feedback-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-feedback-lint,?($|\s.*)
    trusted_labels:
    - interface/main/feedback
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-growup-bazel-build
    name: interface-main-growup-bazel-build
    namespace: default
    rerun_command: +test interface-main-growup-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/growup
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-growup-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-growup-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/growup
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-growup-bazel-test
    name: interface-main-growup-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-growup-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/growup
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-growup-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-growup-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/growup
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-growup-lint
    name: interface-main-growup-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-growup-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/growup/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-growup-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-growup-lint,?($|\s.*)
    trusted_labels:
    - interface/main/growup
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-history-bazel-build
    name: interface-main-history-bazel-build
    namespace: default
    rerun_command: +test interface-main-history-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/history
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-history-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-history-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/history
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-history-bazel-test
    name: interface-main-history-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-history-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/history
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-history-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-history-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/history
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-history-lint
    name: interface-main-history-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-history-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/history/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-history-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-history-lint,?($|\s.*)
    trusted_labels:
    - interface/main/history
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-kvo-bazel-build
    name: interface-main-kvo-bazel-build
    namespace: default
    rerun_command: +test interface-main-kvo-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/kvo
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-kvo-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-kvo-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/kvo
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-kvo-bazel-test
    name: interface-main-kvo-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-kvo-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/kvo
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-kvo-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-kvo-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/kvo
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-kvo-lint
    name: interface-main-kvo-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-kvo-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/kvo/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-kvo-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-kvo-lint,?($|\s.*)
    trusted_labels:
    - interface/main/kvo
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-laser-bazel-build
    name: interface-main-laser-bazel-build
    namespace: default
    rerun_command: +test interface-main-laser-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/laser
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-laser-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-laser-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/laser
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-laser-bazel-test
    name: interface-main-laser-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-laser-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/laser
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-laser-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-laser-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/laser
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-laser-lint
    name: interface-main-laser-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-laser-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/laser/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-laser-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-laser-lint,?($|\s.*)
    trusted_labels:
    - interface/main/laser
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-mcn-bazel-build
    name: interface-main-mcn-bazel-build
    namespace: default
    rerun_command: +test interface-main-mcn-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/mcn
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-mcn-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-mcn-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/mcn
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-mcn-bazel-test
    name: interface-main-mcn-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-mcn-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/mcn
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-mcn-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-mcn-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/mcn
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-mcn-lint
    name: interface-main-mcn-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-mcn-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/mcn/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-mcn-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-mcn-lint,?($|\s.*)
    trusted_labels:
    - interface/main/mcn
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-passport-login-bazel-build
    name: interface-main-passport-login-bazel-build
    namespace: default
    rerun_command: +test interface-main-passport-login-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/passport-login
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-passport-login-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-passport-login-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/passport-login
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-passport-login-bazel-test
    name: interface-main-passport-login-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-passport-login-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/passport-login
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-passport-login-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-passport-login-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/passport-login
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-passport-login-lint
    name: interface-main-passport-login-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-passport-login-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/passport-login/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-passport-login-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-passport-login-lint,?($|\s.*)
    trusted_labels:
    - interface/main/passport-login
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-player-bazel-build
    name: interface-main-player-bazel-build
    namespace: default
    rerun_command: +test interface-main-player-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/player
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-player-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-player-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/player
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-player-bazel-test
    name: interface-main-player-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-player-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/player
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-player-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-player-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/player
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-player-lint
    name: interface-main-player-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-player-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/player/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-player-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-player-lint,?($|\s.*)
    trusted_labels:
    - interface/main/player
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-playlist-bazel-build
    name: interface-main-playlist-bazel-build
    namespace: default
    rerun_command: +test interface-main-playlist-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/playlist
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-playlist-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-playlist-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/playlist
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-playlist-bazel-test
    name: interface-main-playlist-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-playlist-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/playlist
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-playlist-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-playlist-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/playlist
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-playlist-lint
    name: interface-main-playlist-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-playlist-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/playlist/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-playlist-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-playlist-lint,?($|\s.*)
    trusted_labels:
    - interface/main/playlist
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-push-bazel-build
    name: interface-main-push-bazel-build
    namespace: default
    rerun_command: +test interface-main-push-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/push
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-push-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-push-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/push
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-push-bazel-test
    name: interface-main-push-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-push-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/push
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-push-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-push-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/push
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-push-lint
    name: interface-main-push-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-push-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/push/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-push-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-push-lint,?($|\s.*)
    trusted_labels:
    - interface/main/push
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-push-archive-bazel-build
    name: interface-main-push-archive-bazel-build
    namespace: default
    rerun_command: +test interface-main-push-archive-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/push-archive
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-push-archive-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-push-archive-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/push-archive
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-push-archive-bazel-test
    name: interface-main-push-archive-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-push-archive-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/push-archive
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-push-archive-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-push-archive-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/push-archive
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-push-archive-lint
    name: interface-main-push-archive-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-push-archive-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/push-archive/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-push-archive-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-push-archive-lint,?($|\s.*)
    trusted_labels:
    - interface/main/push-archive
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-reply-bazel-build
    name: interface-main-reply-bazel-build
    namespace: default
    rerun_command: +test interface-main-reply-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/reply
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-reply-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-reply-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/reply
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-reply-bazel-test
    name: interface-main-reply-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-reply-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/reply
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-reply-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-reply-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/reply
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-reply-lint
    name: interface-main-reply-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-reply-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/reply/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-reply-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-reply-lint,?($|\s.*)
    trusted_labels:
    - interface/main/reply
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-report-click-bazel-build
    name: interface-main-report-click-bazel-build
    namespace: default
    rerun_command: +test interface-main-report-click-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/report-click
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-report-click-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-report-click-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/report-click
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-report-click-bazel-test
    name: interface-main-report-click-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-report-click-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/report-click
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-report-click-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-report-click-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/report-click
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-report-click-lint
    name: interface-main-report-click-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-report-click-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/report-click/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-report-click-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-report-click-lint,?($|\s.*)
    trusted_labels:
    - interface/main/report-click
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-shorturl-bazel-build
    name: interface-main-shorturl-bazel-build
    namespace: default
    rerun_command: +test interface-main-shorturl-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/shorturl
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-shorturl-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-shorturl-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/shorturl
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-shorturl-bazel-test
    name: interface-main-shorturl-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-shorturl-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/shorturl
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-shorturl-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-shorturl-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/shorturl
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-shorturl-lint
    name: interface-main-shorturl-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-shorturl-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/shorturl/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-shorturl-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-shorturl-lint,?($|\s.*)
    trusted_labels:
    - interface/main/shorturl
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-space-bazel-build
    name: interface-main-space-bazel-build
    namespace: default
    rerun_command: +test interface-main-space-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/space
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-space-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-space-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/space
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-space-bazel-test
    name: interface-main-space-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-space-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/space
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-space-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-space-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/space
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-space-lint
    name: interface-main-space-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-space-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/space/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-space-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-space-lint,?($|\s.*)
    trusted_labels:
    - interface/main/space
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-spread-bazel-build
    name: interface-main-spread-bazel-build
    namespace: default
    rerun_command: +test interface-main-spread-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/spread
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-spread-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-spread-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/spread
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-spread-bazel-test
    name: interface-main-spread-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-spread-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/spread
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-spread-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-spread-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/spread
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-spread-lint
    name: interface-main-spread-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-spread-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/spread/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-spread-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-spread-lint,?($|\s.*)
    trusted_labels:
    - interface/main/spread
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-tag-bazel-build
    name: interface-main-tag-bazel-build
    namespace: default
    rerun_command: +test interface-main-tag-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/tag
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-tag-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-tag-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/tag
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-tag-bazel-test
    name: interface-main-tag-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-tag-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/tag
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-tag-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-tag-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/tag
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-tag-lint
    name: interface-main-tag-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-tag-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/tag/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-tag-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-tag-lint,?($|\s.*)
    trusted_labels:
    - interface/main/tag
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-tv-bazel-build
    name: interface-main-tv-bazel-build
    namespace: default
    rerun_command: +test interface-main-tv-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/tv
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-tv-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-tv-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/tv
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-tv-bazel-test
    name: interface-main-tv-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-tv-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/tv
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-tv-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-tv-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/tv
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-tv-lint
    name: interface-main-tv-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-tv-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/tv/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-tv-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-tv-lint,?($|\s.*)
    trusted_labels:
    - interface/main/tv
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-ugcpay-bazel-build
    name: interface-main-ugcpay-bazel-build
    namespace: default
    rerun_command: +test interface-main-ugcpay-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/ugcpay
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-ugcpay-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-ugcpay-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/ugcpay
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-ugcpay-bazel-test
    name: interface-main-ugcpay-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-ugcpay-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/ugcpay
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-ugcpay-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-ugcpay-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/ugcpay
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-ugcpay-lint
    name: interface-main-ugcpay-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-ugcpay-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/ugcpay/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-ugcpay-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-ugcpay-lint,?($|\s.*)
    trusted_labels:
    - interface/main/ugcpay
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-ugcpay-rank-bazel-build
    name: interface-main-ugcpay-rank-bazel-build
    namespace: default
    rerun_command: +test interface-main-ugcpay-rank-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/ugcpay-rank
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-ugcpay-rank-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-ugcpay-rank-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/ugcpay-rank
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-ugcpay-rank-bazel-test
    name: interface-main-ugcpay-rank-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-ugcpay-rank-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/ugcpay-rank
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-ugcpay-rank-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-ugcpay-rank-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/ugcpay-rank
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-ugcpay-rank-lint
    name: interface-main-ugcpay-rank-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-ugcpay-rank-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/ugcpay-rank/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-ugcpay-rank-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-ugcpay-rank-lint,?($|\s.*)
    trusted_labels:
    - interface/main/ugcpay-rank
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-up-rating-bazel-build
    name: interface-main-up-rating-bazel-build
    namespace: default
    rerun_command: +test interface-main-up-rating-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/up-rating
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-up-rating-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-up-rating-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/up-rating
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-up-rating-bazel-test
    name: interface-main-up-rating-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-up-rating-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/up-rating
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-up-rating-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-up-rating-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/up-rating
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-up-rating-lint
    name: interface-main-up-rating-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-up-rating-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/up-rating/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-up-rating-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-up-rating-lint,?($|\s.*)
    trusted_labels:
    - interface/main/up-rating
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-upload-bazel-build
    name: interface-main-upload-bazel-build
    namespace: default
    rerun_command: +test interface-main-upload-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/upload
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-upload-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-upload-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/upload
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-upload-bazel-test
    name: interface-main-upload-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-upload-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/upload
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-upload-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-upload-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/upload
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-upload-lint
    name: interface-main-upload-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-upload-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/upload/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-upload-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-upload-lint,?($|\s.*)
    trusted_labels:
    - interface/main/upload
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-videoup-bazel-build
    name: interface-main-videoup-bazel-build
    namespace: default
    rerun_command: +test interface-main-videoup-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/videoup
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-videoup-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-videoup-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/videoup
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-videoup-bazel-test
    name: interface-main-videoup-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-videoup-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/videoup
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-videoup-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-videoup-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/videoup
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-videoup-lint
    name: interface-main-videoup-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-videoup-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/videoup/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-videoup-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-videoup-lint,?($|\s.*)
    trusted_labels:
    - interface/main/videoup
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-web-bazel-build
    name: interface-main-web-bazel-build
    namespace: default
    rerun_command: +test interface-main-web-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/web
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-web-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-web-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/web
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-web-bazel-test
    name: interface-main-web-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-web-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/web
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-web-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-web-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/web
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-web-lint
    name: interface-main-web-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-web-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/web/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-web-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-web-lint,?($|\s.*)
    trusted_labels:
    - interface/main/web
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-web-feed-bazel-build
    name: interface-main-web-feed-bazel-build
    namespace: default
    rerun_command: +test interface-main-web-feed-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/web-feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-web-feed-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-web-feed-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/web-feed
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-web-feed-bazel-test
    name: interface-main-web-feed-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-web-feed-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/web-feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-web-feed-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-web-feed-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/web-feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-web-feed-lint
    name: interface-main-web-feed-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-web-feed-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/web-feed/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-web-feed-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-web-feed-lint,?($|\s.*)
    trusted_labels:
    - interface/main/web-feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-web-goblin-bazel-build
    name: interface-main-web-goblin-bazel-build
    namespace: default
    rerun_command: +test interface-main-web-goblin-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/web-goblin
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-web-goblin-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-web-goblin-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/web-goblin
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-web-goblin-bazel-test
    name: interface-main-web-goblin-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-web-goblin-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/web-goblin
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-web-goblin-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-web-goblin-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/web-goblin
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-web-goblin-lint
    name: interface-main-web-goblin-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-web-goblin-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/web-goblin/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-web-goblin-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-web-goblin-lint,?($|\s.*)
    trusted_labels:
    - interface/main/web-goblin
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-web-show-bazel-build
    name: interface-main-web-show-bazel-build
    namespace: default
    rerun_command: +test interface-main-web-show-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/main/web-show
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-web-show-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-web-show-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/main/web-show
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-web-show-bazel-test
    name: interface-main-web-show-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-main-web-show-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/main/web-show
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-web-show-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-web-show-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/main/web-show
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-main-web-show-lint
    name: interface-main-web-show-lint
    namespace: default
    optional: true
    rerun_command: +test interface-main-web-show-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/main/web-show/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-main-web-show-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-main-web-show-lint,?($|\s.*)
    trusted_labels:
    - interface/main/web-show
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-openplatform-article-bazel-build
    name: interface-openplatform-article-bazel-build
    namespace: default
    rerun_command: +test interface-openplatform-article-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/openplatform/article
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-openplatform-article-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-openplatform-article-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/openplatform/article
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-openplatform-article-bazel-test
    name: interface-openplatform-article-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-openplatform-article-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/openplatform/article
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-openplatform-article-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-openplatform-article-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/openplatform/article
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-openplatform-article-lint
    name: interface-openplatform-article-lint
    namespace: default
    optional: true
    rerun_command: +test interface-openplatform-article-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/openplatform/article/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-openplatform-article-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-openplatform-article-lint,?($|\s.*)
    trusted_labels:
    - interface/openplatform/article
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-openplatform-monitor-end-bazel-build
    name: interface-openplatform-monitor-end-bazel-build
    namespace: default
    rerun_command: +test interface-openplatform-monitor-end-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/openplatform/monitor-end
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-openplatform-monitor-end-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-openplatform-monitor-end-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/openplatform/monitor-end
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-openplatform-monitor-end-bazel-test
    name: interface-openplatform-monitor-end-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-openplatform-monitor-end-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/openplatform/monitor-end
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-openplatform-monitor-end-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-openplatform-monitor-end-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/openplatform/monitor-end
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-openplatform-monitor-end-lint
    name: interface-openplatform-monitor-end-lint
    namespace: default
    optional: true
    rerun_command: +test interface-openplatform-monitor-end-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/openplatform/monitor-end/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-openplatform-monitor-end-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-openplatform-monitor-end-lint,?($|\s.*)
    trusted_labels:
    - interface/openplatform/monitor-end
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-openplatform-seo-bazel-build
    name: interface-openplatform-seo-bazel-build
    namespace: default
    rerun_command: +test interface-openplatform-seo-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/openplatform/seo
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-openplatform-seo-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-openplatform-seo-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/openplatform/seo
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-openplatform-seo-bazel-test
    name: interface-openplatform-seo-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-openplatform-seo-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/openplatform/seo
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-openplatform-seo-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-openplatform-seo-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/openplatform/seo
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-openplatform-seo-lint
    name: interface-openplatform-seo-lint
    namespace: default
    optional: true
    rerun_command: +test interface-openplatform-seo-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/openplatform/seo/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-openplatform-seo-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-openplatform-seo-lint,?($|\s.*)
    trusted_labels:
    - interface/openplatform/seo
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-video-portal-bazel-build
    name: interface-video-portal-bazel-build
    namespace: default
    rerun_command: +test interface-video-portal-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/interface/video/portal
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-video-portal-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )interface-video-portal-bazel-build,?($|\s.*)
    trusted_labels:
    - interface/video/portal
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-video-portal-bazel-test
    name: interface-video-portal-bazel-test
    namespace: default
    optional: true
    rerun_command: +test interface-video-portal-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/interface/video/portal
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-video-portal-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )interface-video-portal-bazel-test,?($|\s.*)
    trusted_labels:
    - interface/video/portal
  - agent: kubernetes
    always_run: true
    cluster: default
    context: interface-video-portal-lint
    name: interface-video-portal-lint
    namespace: default
    optional: true
    rerun_command: +test interface-video-portal-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/interface/video/portal/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: interface-video-portal-lint
        resources: {}
    trigger: (?m)^\+test( | .* )interface-video-portal-lint,?($|\s.*)
    trusted_labels:
    - interface/video/portal
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-bbq-cms-bazel-build
    name: job-bbq-cms-bazel-build
    namespace: default
    rerun_command: +test job-bbq-cms-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/bbq/cms
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-bbq-cms-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-bbq-cms-bazel-build,?($|\s.*)
    trusted_labels:
    - job/bbq/cms
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-bbq-cms-bazel-test
    name: job-bbq-cms-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-bbq-cms-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/bbq/cms
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-bbq-cms-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-bbq-cms-bazel-test,?($|\s.*)
    trusted_labels:
    - job/bbq/cms
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-bbq-cms-lint
    name: job-bbq-cms-lint
    namespace: default
    optional: true
    rerun_command: +test job-bbq-cms-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/bbq/cms/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-bbq-cms-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-bbq-cms-lint,?($|\s.*)
    trusted_labels:
    - job/bbq/cms
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-bbq-comment-bazel-build
    name: job-bbq-comment-bazel-build
    namespace: default
    rerun_command: +test job-bbq-comment-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/bbq/comment
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-bbq-comment-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-bbq-comment-bazel-build,?($|\s.*)
    trusted_labels:
    - job/bbq/comment
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-bbq-comment-bazel-test
    name: job-bbq-comment-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-bbq-comment-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/bbq/comment
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-bbq-comment-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-bbq-comment-bazel-test,?($|\s.*)
    trusted_labels:
    - job/bbq/comment
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-bbq-comment-lint
    name: job-bbq-comment-lint
    namespace: default
    optional: true
    rerun_command: +test job-bbq-comment-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/bbq/comment/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-bbq-comment-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-bbq-comment-lint,?($|\s.*)
    trusted_labels:
    - job/bbq/comment
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-bbq-recall-bazel-build
    name: job-bbq-recall-bazel-build
    namespace: default
    rerun_command: +test job-bbq-recall-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/bbq/recall
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-bbq-recall-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-bbq-recall-bazel-build,?($|\s.*)
    trusted_labels:
    - job/bbq/recall
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-bbq-recall-bazel-test
    name: job-bbq-recall-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-bbq-recall-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/bbq/recall
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-bbq-recall-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-bbq-recall-bazel-test,?($|\s.*)
    trusted_labels:
    - job/bbq/recall
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-bbq-recall-lint
    name: job-bbq-recall-lint
    namespace: default
    optional: true
    rerun_command: +test job-bbq-recall-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/bbq/recall/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-bbq-recall-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-bbq-recall-lint,?($|\s.*)
    trusted_labels:
    - job/bbq/recall
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-bbq-video-bazel-build
    name: job-bbq-video-bazel-build
    namespace: default
    rerun_command: +test job-bbq-video-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/bbq/video
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-bbq-video-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-bbq-video-bazel-build,?($|\s.*)
    trusted_labels:
    - job/bbq/video
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-bbq-video-bazel-test
    name: job-bbq-video-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-bbq-video-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/bbq/video
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-bbq-video-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-bbq-video-bazel-test,?($|\s.*)
    trusted_labels:
    - job/bbq/video
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-bbq-video-lint
    name: job-bbq-video-lint
    namespace: default
    optional: true
    rerun_command: +test job-bbq-video-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/bbq/video/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-bbq-video-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-bbq-video-lint,?($|\s.*)
    trusted_labels:
    - job/bbq/video
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-live-gift-bazel-build
    name: job-live-gift-bazel-build
    namespace: default
    rerun_command: +test job-live-gift-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/live/gift
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-live-gift-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-live-gift-bazel-build,?($|\s.*)
    trusted_labels:
    - job/live/gift
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-live-gift-bazel-test
    name: job-live-gift-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-live-gift-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/live/gift
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-live-gift-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-live-gift-bazel-test,?($|\s.*)
    trusted_labels:
    - job/live/gift
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-live-gift-lint
    name: job-live-gift-lint
    namespace: default
    optional: true
    rerun_command: +test job-live-gift-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/live/gift/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-live-gift-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-live-gift-lint,?($|\s.*)
    trusted_labels:
    - job/live/gift
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-live-push-search-bazel-build
    name: job-live-push-search-bazel-build
    namespace: default
    rerun_command: +test job-live-push-search-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/live/push-search
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-live-push-search-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-live-push-search-bazel-build,?($|\s.*)
    trusted_labels:
    - job/live/push-search
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-live-push-search-bazel-test
    name: job-live-push-search-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-live-push-search-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/live/push-search
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-live-push-search-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-live-push-search-bazel-test,?($|\s.*)
    trusted_labels:
    - job/live/push-search
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-live-push-search-lint
    name: job-live-push-search-lint
    namespace: default
    optional: true
    rerun_command: +test job-live-push-search-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/live/push-search/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-live-push-search-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-live-push-search-lint,?($|\s.*)
    trusted_labels:
    - job/live/push-search
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-live-recommend-job-bazel-build
    name: job-live-recommend-job-bazel-build
    namespace: default
    rerun_command: +test job-live-recommend-job-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/live/recommend-job
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-live-recommend-job-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-live-recommend-job-bazel-build,?($|\s.*)
    trusted_labels:
    - job/live/recommend-job
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-live-recommend-job-bazel-test
    name: job-live-recommend-job-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-live-recommend-job-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/live/recommend-job
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-live-recommend-job-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-live-recommend-job-bazel-test,?($|\s.*)
    trusted_labels:
    - job/live/recommend-job
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-live-recommend-job-lint
    name: job-live-recommend-job-lint
    namespace: default
    optional: true
    rerun_command: +test job-live-recommend-job-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/live/recommend-job/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-live-recommend-job-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-live-recommend-job-lint,?($|\s.*)
    trusted_labels:
    - job/live/recommend-job
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-live-wallet-bazel-build
    name: job-live-wallet-bazel-build
    namespace: default
    rerun_command: +test job-live-wallet-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/live/wallet
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-live-wallet-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-live-wallet-bazel-build,?($|\s.*)
    trusted_labels:
    - job/live/wallet
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-live-wallet-bazel-test
    name: job-live-wallet-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-live-wallet-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/live/wallet
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-live-wallet-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-live-wallet-bazel-test,?($|\s.*)
    trusted_labels:
    - job/live/wallet
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-live-wallet-lint
    name: job-live-wallet-lint
    namespace: default
    optional: true
    rerun_command: +test job-live-wallet-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/live/wallet/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-live-wallet-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-live-wallet-lint,?($|\s.*)
    trusted_labels:
    - job/live/wallet
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-live-xlottery-bazel-build
    name: job-live-xlottery-bazel-build
    namespace: default
    rerun_command: +test job-live-xlottery-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/live/xlottery
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-live-xlottery-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-live-xlottery-bazel-build,?($|\s.*)
    trusted_labels:
    - job/live/xlottery
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-live-xlottery-bazel-test
    name: job-live-xlottery-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-live-xlottery-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/live/xlottery
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-live-xlottery-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-live-xlottery-bazel-test,?($|\s.*)
    trusted_labels:
    - job/live/xlottery
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-live-xlottery-lint
    name: job-live-xlottery-lint
    namespace: default
    optional: true
    rerun_command: +test job-live-xlottery-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/live/xlottery/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-live-xlottery-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-live-xlottery-lint,?($|\s.*)
    trusted_labels:
    - job/live/xlottery
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-live-xroom-feed-bazel-build
    name: job-live-xroom-feed-bazel-build
    namespace: default
    rerun_command: +test job-live-xroom-feed-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/live/xroom-feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-live-xroom-feed-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-live-xroom-feed-bazel-build,?($|\s.*)
    trusted_labels:
    - job/live/xroom-feed
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-live-xroom-feed-bazel-test
    name: job-live-xroom-feed-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-live-xroom-feed-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/live/xroom-feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-live-xroom-feed-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-live-xroom-feed-bazel-test,?($|\s.*)
    trusted_labels:
    - job/live/xroom-feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-live-xroom-feed-lint
    name: job-live-xroom-feed-lint
    namespace: default
    optional: true
    rerun_command: +test job-live-xroom-feed-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/live/xroom-feed/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-live-xroom-feed-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-live-xroom-feed-lint,?($|\s.*)
    trusted_labels:
    - job/live/xroom-feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: new-job-main-project-bazel-build
    name: new-job-main-project-bazel-build
    namespace: default
    rerun_command: +test new-job-main-project-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - app
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: new-job-main-project-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )new-job-main-project-bazel-build,?($|\s.*)
    trusted_labels:
    - new-job-main-project
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: new-job-main-project-bazel-test
    name: new-job-main-project-bazel-test
    namespace: default
    optional: true
    rerun_command: +test new-job-main-project-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: new-job-main-project-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )new-job-main-project-bazel-test,?($|\s.*)
    trusted_labels:
    - new-job-main-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: new-job-main-project-lint
    name: new-job-main-project-lint
    namespace: default
    optional: true
    rerun_command: +test new-job-main-project-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - app
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: new-job-main-project-lint
        resources: {}
    trigger: (?m)^\+test( | .* )new-job-main-project-lint,?($|\s.*)
    trusted_labels:
    - new-job-main-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-account-recovery-bazel-build
    name: job-main-account-recovery-bazel-build
    namespace: default
    rerun_command: +test job-main-account-recovery-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/account-recovery
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-account-recovery-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-account-recovery-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/account-recovery
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-account-recovery-bazel-test
    name: job-main-account-recovery-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-account-recovery-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/account-recovery
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-account-recovery-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-account-recovery-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/account-recovery
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-account-recovery-lint
    name: job-main-account-recovery-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-account-recovery-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/account-recovery/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-account-recovery-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-account-recovery-lint,?($|\s.*)
    trusted_labels:
    - job/main/account-recovery
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-account-summary-bazel-build
    name: job-main-account-summary-bazel-build
    namespace: default
    rerun_command: +test job-main-account-summary-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/account-summary
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-account-summary-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-account-summary-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/account-summary
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-account-summary-bazel-test
    name: job-main-account-summary-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-account-summary-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/account-summary
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-account-summary-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-account-summary-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/account-summary
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-account-summary-lint
    name: job-main-account-summary-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-account-summary-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/account-summary/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-account-summary-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-account-summary-lint,?($|\s.*)
    trusted_labels:
    - job/main/account-summary
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-activity-bazel-build
    name: job-main-activity-bazel-build
    namespace: default
    rerun_command: +test job-main-activity-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/activity
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-activity-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-activity-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/activity
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-activity-bazel-test
    name: job-main-activity-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-activity-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/activity
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-activity-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-activity-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/activity
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-activity-lint
    name: job-main-activity-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-activity-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/activity/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-activity-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-activity-lint,?($|\s.*)
    trusted_labels:
    - job/main/activity
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-aegis-bazel-build
    name: job-main-aegis-bazel-build
    namespace: default
    rerun_command: +test job-main-aegis-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/aegis
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-aegis-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-aegis-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/aegis
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-aegis-bazel-test
    name: job-main-aegis-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-aegis-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/aegis
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-aegis-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-aegis-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/aegis
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-aegis-lint
    name: job-main-aegis-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-aegis-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/aegis/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-aegis-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-aegis-lint,?($|\s.*)
    trusted_labels:
    - job/main/aegis
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-answer-bazel-build
    name: job-main-answer-bazel-build
    namespace: default
    rerun_command: +test job-main-answer-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/answer
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-answer-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-answer-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/answer
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-answer-bazel-test
    name: job-main-answer-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-answer-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/answer
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-answer-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-answer-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/answer
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-answer-lint
    name: job-main-answer-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-answer-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/answer/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-answer-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-answer-lint,?($|\s.*)
    trusted_labels:
    - job/main/answer
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-app-bazel-build
    name: job-main-app-bazel-build
    namespace: default
    rerun_command: +test job-main-app-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/app
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-app-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-app-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/app
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-app-bazel-test
    name: job-main-app-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-app-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/app
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-app-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-app-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/app
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-app-lint
    name: job-main-app-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-app-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/app/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-app-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-app-lint,?($|\s.*)
    trusted_labels:
    - job/main/app
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-app-player-bazel-build
    name: job-main-app-player-bazel-build
    namespace: default
    rerun_command: +test job-main-app-player-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/app-player
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-app-player-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-app-player-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/app-player
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-app-player-bazel-test
    name: job-main-app-player-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-app-player-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/app-player
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-app-player-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-app-player-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/app-player
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-app-player-lint
    name: job-main-app-player-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-app-player-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/app-player/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-app-player-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-app-player-lint,?($|\s.*)
    trusted_labels:
    - job/main/app-player
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-app-wall-bazel-build
    name: job-main-app-wall-bazel-build
    namespace: default
    rerun_command: +test job-main-app-wall-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/app-wall
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-app-wall-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-app-wall-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/app-wall
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-app-wall-bazel-test
    name: job-main-app-wall-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-app-wall-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/app-wall
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-app-wall-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-app-wall-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/app-wall
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-app-wall-lint
    name: job-main-app-wall-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-app-wall-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/app-wall/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-app-wall-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-app-wall-lint,?($|\s.*)
    trusted_labels:
    - job/main/app-wall
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-appstatic-bazel-build
    name: job-main-appstatic-bazel-build
    namespace: default
    rerun_command: +test job-main-appstatic-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/appstatic
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-appstatic-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-appstatic-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/appstatic
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-appstatic-bazel-test
    name: job-main-appstatic-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-appstatic-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/appstatic
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-appstatic-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-appstatic-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/appstatic
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-appstatic-lint
    name: job-main-appstatic-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-appstatic-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/appstatic/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-appstatic-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-appstatic-lint,?($|\s.*)
    trusted_labels:
    - job/main/appstatic
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-archive-bazel-build
    name: job-main-archive-bazel-build
    namespace: default
    rerun_command: +test job-main-archive-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/archive
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-archive-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-archive-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/archive
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-archive-bazel-test
    name: job-main-archive-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-archive-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/archive
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-archive-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-archive-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/archive
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-archive-lint
    name: job-main-archive-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-archive-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/archive/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-archive-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-archive-lint,?($|\s.*)
    trusted_labels:
    - job/main/archive
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-archive-shjd-bazel-build
    name: job-main-archive-shjd-bazel-build
    namespace: default
    rerun_command: +test job-main-archive-shjd-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/archive-shjd
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-archive-shjd-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-archive-shjd-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/archive-shjd
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-archive-shjd-bazel-test
    name: job-main-archive-shjd-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-archive-shjd-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/archive-shjd
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-archive-shjd-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-archive-shjd-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/archive-shjd
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-archive-shjd-lint
    name: job-main-archive-shjd-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-archive-shjd-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/archive-shjd/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-archive-shjd-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-archive-shjd-lint,?($|\s.*)
    trusted_labels:
    - job/main/archive-shjd
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-block-bazel-build
    name: job-main-block-bazel-build
    namespace: default
    rerun_command: +test job-main-block-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/block
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-block-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-block-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/block
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-block-bazel-test
    name: job-main-block-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-block-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/block
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-block-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-block-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/block
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-block-lint
    name: job-main-block-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-block-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/block/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-block-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-block-lint,?($|\s.*)
    trusted_labels:
    - job/main/block
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-broadcast-bazel-build
    name: job-main-broadcast-bazel-build
    namespace: default
    rerun_command: +test job-main-broadcast-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/broadcast
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-broadcast-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-broadcast-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/broadcast
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-broadcast-bazel-test
    name: job-main-broadcast-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-broadcast-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/broadcast
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-broadcast-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-broadcast-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/broadcast
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-broadcast-lint
    name: job-main-broadcast-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-broadcast-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/broadcast/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-broadcast-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-broadcast-lint,?($|\s.*)
    trusted_labels:
    - job/main/broadcast
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-card-bazel-build
    name: job-main-card-bazel-build
    namespace: default
    rerun_command: +test job-main-card-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/card
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-card-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-card-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/card
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-card-bazel-test
    name: job-main-card-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-card-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/card
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-card-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-card-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/card
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-card-lint
    name: job-main-card-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-card-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/card/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-card-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-card-lint,?($|\s.*)
    trusted_labels:
    - job/main/card
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-click-bazel-build
    name: job-main-click-bazel-build
    namespace: default
    rerun_command: +test job-main-click-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/click
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-click-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-click-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/click
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-click-bazel-test
    name: job-main-click-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-click-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/click
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-click-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-click-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/click
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-click-lint
    name: job-main-click-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-click-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/click/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-click-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-click-lint,?($|\s.*)
    trusted_labels:
    - job/main/click
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-coin-bazel-build
    name: job-main-coin-bazel-build
    namespace: default
    rerun_command: +test job-main-coin-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/coin
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-coin-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-coin-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/coin
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-coin-bazel-test
    name: job-main-coin-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-coin-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/coin
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-coin-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-coin-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/coin
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-coin-lint
    name: job-main-coin-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-coin-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/coin/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-coin-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-coin-lint,?($|\s.*)
    trusted_labels:
    - job/main/coin
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-coupon-bazel-build
    name: job-main-coupon-bazel-build
    namespace: default
    rerun_command: +test job-main-coupon-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/coupon
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-coupon-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-coupon-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/coupon
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-coupon-bazel-test
    name: job-main-coupon-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-coupon-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/coupon
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-coupon-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-coupon-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/coupon
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-coupon-lint
    name: job-main-coupon-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-coupon-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/coupon/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-coupon-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-coupon-lint,?($|\s.*)
    trusted_labels:
    - job/main/coupon
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-creative-bazel-build
    name: job-main-creative-bazel-build
    namespace: default
    rerun_command: +test job-main-creative-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/creative
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-creative-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-creative-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/creative
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-creative-bazel-test
    name: job-main-creative-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-creative-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/creative
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-creative-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-creative-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/creative
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-creative-lint
    name: job-main-creative-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-creative-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/creative/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-creative-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-creative-lint,?($|\s.*)
    trusted_labels:
    - job/main/creative
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-credit-bazel-build
    name: job-main-credit-bazel-build
    namespace: default
    rerun_command: +test job-main-credit-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/credit
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-credit-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-credit-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/credit
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-credit-bazel-test
    name: job-main-credit-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-credit-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/credit
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-credit-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-credit-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/credit
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-credit-lint
    name: job-main-credit-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-credit-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/credit/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-credit-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-credit-lint,?($|\s.*)
    trusted_labels:
    - job/main/credit
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-credit-timer-bazel-build
    name: job-main-credit-timer-bazel-build
    namespace: default
    rerun_command: +test job-main-credit-timer-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/credit-timer
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-credit-timer-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-credit-timer-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/credit-timer
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-credit-timer-bazel-test
    name: job-main-credit-timer-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-credit-timer-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/credit-timer
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-credit-timer-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-credit-timer-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/credit-timer
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-credit-timer-lint
    name: job-main-credit-timer-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-credit-timer-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/credit-timer/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-credit-timer-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-credit-timer-lint,?($|\s.*)
    trusted_labels:
    - job/main/credit-timer
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-dm-bazel-build
    name: job-main-dm-bazel-build
    namespace: default
    rerun_command: +test job-main-dm-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/dm
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-dm-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-dm-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/dm
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-dm-bazel-test
    name: job-main-dm-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-dm-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/dm
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-dm-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-dm-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/dm
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-dm-lint
    name: job-main-dm-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-dm-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/dm/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-dm-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-dm-lint,?($|\s.*)
    trusted_labels:
    - job/main/dm
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-dm2-bazel-build
    name: job-main-dm2-bazel-build
    namespace: default
    rerun_command: +test job-main-dm2-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/dm2
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-dm2-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-dm2-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/dm2
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-dm2-bazel-test
    name: job-main-dm2-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-dm2-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/dm2
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-dm2-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-dm2-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/dm2
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-dm2-lint
    name: job-main-dm2-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-dm2-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/dm2/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-dm2-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-dm2-lint,?($|\s.*)
    trusted_labels:
    - job/main/dm2
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-favorite-bazel-build
    name: job-main-favorite-bazel-build
    namespace: default
    rerun_command: +test job-main-favorite-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/favorite
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-favorite-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-favorite-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/favorite
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-favorite-bazel-test
    name: job-main-favorite-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-favorite-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/favorite
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-favorite-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-favorite-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/favorite
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-favorite-lint
    name: job-main-favorite-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-favorite-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/favorite/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-favorite-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-favorite-lint,?($|\s.*)
    trusted_labels:
    - job/main/favorite
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-feed-bazel-build
    name: job-main-feed-bazel-build
    namespace: default
    rerun_command: +test job-main-feed-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-feed-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-feed-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/feed
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-feed-bazel-test
    name: job-main-feed-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-feed-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-feed-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-feed-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-feed-lint
    name: job-main-feed-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-feed-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/feed/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-feed-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-feed-lint,?($|\s.*)
    trusted_labels:
    - job/main/feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-figure-bazel-build
    name: job-main-figure-bazel-build
    namespace: default
    rerun_command: +test job-main-figure-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/figure
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-figure-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-figure-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/figure
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-figure-bazel-test
    name: job-main-figure-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-figure-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/figure
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-figure-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-figure-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/figure
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-figure-lint
    name: job-main-figure-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-figure-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/figure/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-figure-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-figure-lint,?($|\s.*)
    trusted_labels:
    - job/main/figure
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-figure-timer-bazel-build
    name: job-main-figure-timer-bazel-build
    namespace: default
    rerun_command: +test job-main-figure-timer-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/figure-timer
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-figure-timer-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-figure-timer-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/figure-timer
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-figure-timer-bazel-test
    name: job-main-figure-timer-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-figure-timer-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/figure-timer
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-figure-timer-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-figure-timer-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/figure-timer
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-figure-timer-lint
    name: job-main-figure-timer-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-figure-timer-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/figure-timer/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-figure-timer-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-figure-timer-lint,?($|\s.*)
    trusted_labels:
    - job/main/figure-timer
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-growup-bazel-build
    name: job-main-growup-bazel-build
    namespace: default
    rerun_command: +test job-main-growup-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/growup
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-growup-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-growup-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/growup
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-growup-bazel-test
    name: job-main-growup-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-growup-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/growup
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-growup-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-growup-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/growup
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-growup-lint
    name: job-main-growup-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-growup-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/growup/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-growup-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-growup-lint,?($|\s.*)
    trusted_labels:
    - job/main/growup
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-history-bazel-build
    name: job-main-history-bazel-build
    namespace: default
    rerun_command: +test job-main-history-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/history
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-history-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-history-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/history
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-history-bazel-test
    name: job-main-history-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-history-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/history
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-history-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-history-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/history
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-history-lint
    name: job-main-history-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-history-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/history/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-history-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-history-lint,?($|\s.*)
    trusted_labels:
    - job/main/history
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-identify-bazel-build
    name: job-main-identify-bazel-build
    namespace: default
    rerun_command: +test job-main-identify-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/identify
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-identify-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-identify-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/identify
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-identify-bazel-test
    name: job-main-identify-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-identify-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/identify
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-identify-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-identify-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/identify
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-identify-lint
    name: job-main-identify-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-identify-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/identify/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-identify-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-identify-lint,?($|\s.*)
    trusted_labels:
    - job/main/identify
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-mcn-bazel-build
    name: job-main-mcn-bazel-build
    namespace: default
    rerun_command: +test job-main-mcn-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/mcn
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-mcn-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-mcn-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/mcn
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-mcn-bazel-test
    name: job-main-mcn-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-mcn-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/mcn
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-mcn-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-mcn-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/mcn
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-mcn-lint
    name: job-main-mcn-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-mcn-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/mcn/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-mcn-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-mcn-lint,?($|\s.*)
    trusted_labels:
    - job/main/mcn
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-member-bazel-build
    name: job-main-member-bazel-build
    namespace: default
    rerun_command: +test job-main-member-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/member
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-member-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-member-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/member
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-member-bazel-test
    name: job-main-member-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-member-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/member
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-member-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-member-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/member
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-member-lint
    name: job-main-member-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-member-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/member/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-member-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-member-lint,?($|\s.*)
    trusted_labels:
    - job/main/member
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-member-cache-bazel-build
    name: job-main-member-cache-bazel-build
    namespace: default
    rerun_command: +test job-main-member-cache-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/member-cache
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-member-cache-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-member-cache-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/member-cache
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-member-cache-bazel-test
    name: job-main-member-cache-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-member-cache-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/member-cache
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-member-cache-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-member-cache-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/member-cache
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-member-cache-lint
    name: job-main-member-cache-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-member-cache-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/member-cache/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-member-cache-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-member-cache-lint,?($|\s.*)
    trusted_labels:
    - job/main/member-cache
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-bazel-build
    name: job-main-passport-bazel-build
    namespace: default
    rerun_command: +test job-main-passport-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/passport
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/passport
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-bazel-test
    name: job-main-passport-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-passport-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/passport
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/passport
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-lint
    name: job-main-passport-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-passport-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/passport/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-lint,?($|\s.*)
    trusted_labels:
    - job/main/passport
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-auth-bazel-build
    name: job-main-passport-auth-bazel-build
    namespace: default
    rerun_command: +test job-main-passport-auth-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/passport-auth
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-auth-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-auth-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/passport-auth
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-auth-bazel-test
    name: job-main-passport-auth-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-passport-auth-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/passport-auth
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-auth-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-auth-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/passport-auth
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-auth-lint
    name: job-main-passport-auth-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-passport-auth-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/passport-auth/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-auth-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-auth-lint,?($|\s.*)
    trusted_labels:
    - job/main/passport-auth
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-encrypt-bazel-build
    name: job-main-passport-encrypt-bazel-build
    namespace: default
    rerun_command: +test job-main-passport-encrypt-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/passport-encrypt
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-encrypt-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-encrypt-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/passport-encrypt
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-encrypt-bazel-test
    name: job-main-passport-encrypt-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-passport-encrypt-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/passport-encrypt
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-encrypt-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-encrypt-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/passport-encrypt
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-encrypt-lint
    name: job-main-passport-encrypt-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-passport-encrypt-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/passport-encrypt/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-encrypt-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-encrypt-lint,?($|\s.*)
    trusted_labels:
    - job/main/passport-encrypt
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-game-cloud-bazel-build
    name: job-main-passport-game-cloud-bazel-build
    namespace: default
    rerun_command: +test job-main-passport-game-cloud-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/passport-game-cloud
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-game-cloud-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-game-cloud-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/passport-game-cloud
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-game-cloud-bazel-test
    name: job-main-passport-game-cloud-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-passport-game-cloud-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/passport-game-cloud
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-game-cloud-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-game-cloud-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/passport-game-cloud
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-game-cloud-lint
    name: job-main-passport-game-cloud-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-passport-game-cloud-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/passport-game-cloud/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-game-cloud-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-game-cloud-lint,?($|\s.*)
    trusted_labels:
    - job/main/passport-game-cloud
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-game-data-bazel-build
    name: job-main-passport-game-data-bazel-build
    namespace: default
    rerun_command: +test job-main-passport-game-data-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/passport-game-data
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-game-data-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-game-data-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/passport-game-data
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-game-data-bazel-test
    name: job-main-passport-game-data-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-passport-game-data-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/passport-game-data
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-game-data-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-game-data-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/passport-game-data
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-game-data-lint
    name: job-main-passport-game-data-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-passport-game-data-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/passport-game-data/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-game-data-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-game-data-lint,?($|\s.*)
    trusted_labels:
    - job/main/passport-game-data
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-game-local-bazel-build
    name: job-main-passport-game-local-bazel-build
    namespace: default
    rerun_command: +test job-main-passport-game-local-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/passport-game-local
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-game-local-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-game-local-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/passport-game-local
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-game-local-bazel-test
    name: job-main-passport-game-local-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-passport-game-local-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/passport-game-local
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-game-local-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-game-local-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/passport-game-local
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-game-local-lint
    name: job-main-passport-game-local-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-passport-game-local-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/passport-game-local/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-game-local-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-game-local-lint,?($|\s.*)
    trusted_labels:
    - job/main/passport-game-local
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-sns-bazel-build
    name: job-main-passport-sns-bazel-build
    namespace: default
    rerun_command: +test job-main-passport-sns-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/passport-sns
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-sns-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-sns-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/passport-sns
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-sns-bazel-test
    name: job-main-passport-sns-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-passport-sns-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/passport-sns
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-sns-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-sns-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/passport-sns
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-sns-lint
    name: job-main-passport-sns-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-passport-sns-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/passport-sns/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-sns-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-sns-lint,?($|\s.*)
    trusted_labels:
    - job/main/passport-sns
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-user-bazel-build
    name: job-main-passport-user-bazel-build
    namespace: default
    rerun_command: +test job-main-passport-user-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/passport-user
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-user-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-user-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/passport-user
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-user-bazel-test
    name: job-main-passport-user-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-passport-user-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/passport-user
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-user-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-user-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/passport-user
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-user-lint
    name: job-main-passport-user-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-passport-user-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/passport-user/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-user-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-user-lint,?($|\s.*)
    trusted_labels:
    - job/main/passport-user
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-user-compare-bazel-build
    name: job-main-passport-user-compare-bazel-build
    namespace: default
    rerun_command: +test job-main-passport-user-compare-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/passport-user-compare
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-user-compare-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-user-compare-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/passport-user-compare
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-user-compare-bazel-test
    name: job-main-passport-user-compare-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-passport-user-compare-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/passport-user-compare
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-user-compare-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-user-compare-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/passport-user-compare
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-passport-user-compare-lint
    name: job-main-passport-user-compare-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-passport-user-compare-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/passport-user-compare/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-passport-user-compare-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-passport-user-compare-lint,?($|\s.*)
    trusted_labels:
    - job/main/passport-user-compare
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-playlist-bazel-build
    name: job-main-playlist-bazel-build
    namespace: default
    rerun_command: +test job-main-playlist-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/playlist
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-playlist-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-playlist-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/playlist
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-playlist-bazel-test
    name: job-main-playlist-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-playlist-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/playlist
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-playlist-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-playlist-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/playlist
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-playlist-lint
    name: job-main-playlist-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-playlist-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/playlist/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-playlist-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-playlist-lint,?($|\s.*)
    trusted_labels:
    - job/main/playlist
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-point-bazel-build
    name: job-main-point-bazel-build
    namespace: default
    rerun_command: +test job-main-point-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/point
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-point-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-point-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/point
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-point-bazel-test
    name: job-main-point-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-point-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/point
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-point-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-point-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/point
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-point-lint
    name: job-main-point-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-point-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/point/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-point-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-point-lint,?($|\s.*)
    trusted_labels:
    - job/main/point
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-push-bazel-build
    name: job-main-push-bazel-build
    namespace: default
    rerun_command: +test job-main-push-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/push
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-push-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-push-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/push
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-push-bazel-test
    name: job-main-push-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-push-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/push
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-push-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-push-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/push
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-push-lint
    name: job-main-push-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-push-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/push/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-push-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-push-lint,?($|\s.*)
    trusted_labels:
    - job/main/push
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-relation-bazel-build
    name: job-main-relation-bazel-build
    namespace: default
    rerun_command: +test job-main-relation-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/relation
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-relation-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-relation-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/relation
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-relation-bazel-test
    name: job-main-relation-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-relation-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/relation
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-relation-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-relation-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/relation
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-relation-lint
    name: job-main-relation-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-relation-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/relation/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-relation-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-relation-lint,?($|\s.*)
    trusted_labels:
    - job/main/relation
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-relation-cache-bazel-build
    name: job-main-relation-cache-bazel-build
    namespace: default
    rerun_command: +test job-main-relation-cache-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/relation-cache
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-relation-cache-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-relation-cache-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/relation-cache
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-relation-cache-bazel-test
    name: job-main-relation-cache-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-relation-cache-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/relation-cache
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-relation-cache-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-relation-cache-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/relation-cache
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-relation-cache-lint
    name: job-main-relation-cache-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-relation-cache-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/relation-cache/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-relation-cache-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-relation-cache-lint,?($|\s.*)
    trusted_labels:
    - job/main/relation-cache
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-reply-bazel-build
    name: job-main-reply-bazel-build
    namespace: default
    rerun_command: +test job-main-reply-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/reply
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-reply-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-reply-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/reply
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-reply-bazel-test
    name: job-main-reply-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-reply-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/reply
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-reply-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-reply-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/reply
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-reply-lint
    name: job-main-reply-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-reply-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/reply/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-reply-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-reply-lint,?($|\s.*)
    trusted_labels:
    - job/main/reply
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-reply-feed-bazel-build
    name: job-main-reply-feed-bazel-build
    namespace: default
    rerun_command: +test job-main-reply-feed-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/reply-feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-reply-feed-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-reply-feed-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/reply-feed
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-reply-feed-bazel-test
    name: job-main-reply-feed-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-reply-feed-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/reply-feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-reply-feed-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-reply-feed-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/reply-feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-reply-feed-lint
    name: job-main-reply-feed-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-reply-feed-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/reply-feed/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-reply-feed-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-reply-feed-lint,?($|\s.*)
    trusted_labels:
    - job/main/reply-feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-search-bazel-build
    name: job-main-search-bazel-build
    namespace: default
    rerun_command: +test job-main-search-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/search
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-search-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-search-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/search
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-search-bazel-test
    name: job-main-search-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-search-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/search
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-search-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-search-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/search
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-search-lint
    name: job-main-search-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-search-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/search/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-search-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-search-lint,?($|\s.*)
    trusted_labels:
    - job/main/search
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-sms-bazel-build
    name: job-main-sms-bazel-build
    namespace: default
    rerun_command: +test job-main-sms-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/sms
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-sms-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-sms-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/sms
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-sms-bazel-test
    name: job-main-sms-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-sms-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/sms
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-sms-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-sms-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/sms
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-sms-lint
    name: job-main-sms-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-sms-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/sms/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-sms-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-sms-lint,?($|\s.*)
    trusted_labels:
    - job/main/sms
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-spy-bazel-build
    name: job-main-spy-bazel-build
    namespace: default
    rerun_command: +test job-main-spy-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/spy
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-spy-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-spy-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/spy
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-spy-bazel-test
    name: job-main-spy-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-spy-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/spy
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-spy-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-spy-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/spy
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-spy-lint
    name: job-main-spy-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-spy-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/spy/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-spy-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-spy-lint,?($|\s.*)
    trusted_labels:
    - job/main/spy
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-stat-bazel-build
    name: job-main-stat-bazel-build
    namespace: default
    rerun_command: +test job-main-stat-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/stat
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-stat-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-stat-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/stat
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-stat-bazel-test
    name: job-main-stat-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-stat-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/stat
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-stat-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-stat-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/stat
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-stat-lint
    name: job-main-stat-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-stat-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/stat/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-stat-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-stat-lint,?($|\s.*)
    trusted_labels:
    - job/main/stat
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-tag-bazel-build
    name: job-main-tag-bazel-build
    namespace: default
    rerun_command: +test job-main-tag-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/tag
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-tag-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-tag-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/tag
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-tag-bazel-test
    name: job-main-tag-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-tag-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/tag
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-tag-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-tag-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/tag
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-tag-lint
    name: job-main-tag-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-tag-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/tag/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-tag-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-tag-lint,?($|\s.*)
    trusted_labels:
    - job/main/tag
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-tv-bazel-build
    name: job-main-tv-bazel-build
    namespace: default
    rerun_command: +test job-main-tv-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/tv
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-tv-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-tv-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/tv
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-tv-bazel-test
    name: job-main-tv-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-tv-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/tv
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-tv-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-tv-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/tv
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-tv-lint
    name: job-main-tv-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-tv-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/tv/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-tv-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-tv-lint,?($|\s.*)
    trusted_labels:
    - job/main/tv
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-ugcpay-bazel-build
    name: job-main-ugcpay-bazel-build
    namespace: default
    rerun_command: +test job-main-ugcpay-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/ugcpay
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-ugcpay-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-ugcpay-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/ugcpay
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-ugcpay-bazel-test
    name: job-main-ugcpay-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-ugcpay-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/ugcpay
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-ugcpay-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-ugcpay-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/ugcpay
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-ugcpay-lint
    name: job-main-ugcpay-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-ugcpay-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/ugcpay/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-ugcpay-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-ugcpay-lint,?($|\s.*)
    trusted_labels:
    - job/main/ugcpay
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-up-bazel-build
    name: job-main-up-bazel-build
    namespace: default
    rerun_command: +test job-main-up-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/up
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-up-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-up-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/up
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-up-bazel-test
    name: job-main-up-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-up-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/up
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-up-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-up-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/up
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-up-lint
    name: job-main-up-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-up-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/up/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-up-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-up-lint,?($|\s.*)
    trusted_labels:
    - job/main/up
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-up-rating-bazel-build
    name: job-main-up-rating-bazel-build
    namespace: default
    rerun_command: +test job-main-up-rating-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/up-rating
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-up-rating-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-up-rating-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/up-rating
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-up-rating-bazel-test
    name: job-main-up-rating-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-up-rating-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/up-rating
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-up-rating-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-up-rating-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/up-rating
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-up-rating-lint
    name: job-main-up-rating-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-up-rating-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/up-rating/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-up-rating-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-up-rating-lint,?($|\s.*)
    trusted_labels:
    - job/main/up-rating
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-upload-bazel-build
    name: job-main-upload-bazel-build
    namespace: default
    rerun_command: +test job-main-upload-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/upload
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-upload-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-upload-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/upload
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-upload-bazel-test
    name: job-main-upload-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-upload-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/upload
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-upload-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-upload-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/upload
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-upload-lint
    name: job-main-upload-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-upload-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/upload/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-upload-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-upload-lint,?($|\s.*)
    trusted_labels:
    - job/main/upload
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-usersuit-bazel-build
    name: job-main-usersuit-bazel-build
    namespace: default
    rerun_command: +test job-main-usersuit-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/usersuit
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-usersuit-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-usersuit-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/usersuit
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-usersuit-bazel-test
    name: job-main-usersuit-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-usersuit-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/usersuit
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-usersuit-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-usersuit-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/usersuit
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-usersuit-lint
    name: job-main-usersuit-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-usersuit-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/usersuit/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-usersuit-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-usersuit-lint,?($|\s.*)
    trusted_labels:
    - job/main/usersuit
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-videoup-bazel-build
    name: job-main-videoup-bazel-build
    namespace: default
    rerun_command: +test job-main-videoup-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/videoup
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-videoup-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-videoup-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/videoup
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-videoup-bazel-test
    name: job-main-videoup-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-videoup-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/videoup
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-videoup-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-videoup-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/videoup
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-videoup-lint
    name: job-main-videoup-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-videoup-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/videoup/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-videoup-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-videoup-lint,?($|\s.*)
    trusted_labels:
    - job/main/videoup
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-videoup-report-bazel-build
    name: job-main-videoup-report-bazel-build
    namespace: default
    rerun_command: +test job-main-videoup-report-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/videoup-report
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-videoup-report-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-videoup-report-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/videoup-report
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-videoup-report-bazel-test
    name: job-main-videoup-report-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-videoup-report-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/videoup-report
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-videoup-report-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-videoup-report-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/videoup-report
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-videoup-report-lint
    name: job-main-videoup-report-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-videoup-report-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/videoup-report/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-videoup-report-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-videoup-report-lint,?($|\s.*)
    trusted_labels:
    - job/main/videoup-report
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-vip-bazel-build
    name: job-main-vip-bazel-build
    namespace: default
    rerun_command: +test job-main-vip-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/vip
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-vip-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-vip-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/vip
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-vip-bazel-test
    name: job-main-vip-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-vip-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/vip
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-vip-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-vip-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/vip
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-vip-lint
    name: job-main-vip-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-vip-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/vip/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-vip-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-vip-lint,?($|\s.*)
    trusted_labels:
    - job/main/vip
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-web-goblin-bazel-build
    name: job-main-web-goblin-bazel-build
    namespace: default
    rerun_command: +test job-main-web-goblin-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/web-goblin
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-web-goblin-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-web-goblin-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/web-goblin
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-web-goblin-bazel-test
    name: job-main-web-goblin-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-web-goblin-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/web-goblin
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-web-goblin-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-web-goblin-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/web-goblin
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-web-goblin-lint
    name: job-main-web-goblin-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-web-goblin-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/web-goblin/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-web-goblin-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-web-goblin-lint,?($|\s.*)
    trusted_labels:
    - job/main/web-goblin
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-workflow-bazel-build
    name: job-main-workflow-bazel-build
    namespace: default
    rerun_command: +test job-main-workflow-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/main/workflow
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-workflow-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-workflow-bazel-build,?($|\s.*)
    trusted_labels:
    - job/main/workflow
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-workflow-bazel-test
    name: job-main-workflow-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-main-workflow-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/main/workflow
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-workflow-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-workflow-bazel-test,?($|\s.*)
    trusted_labels:
    - job/main/workflow
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-main-workflow-lint
    name: job-main-workflow-lint
    namespace: default
    optional: true
    rerun_command: +test job-main-workflow-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/main/workflow/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-main-workflow-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-main-workflow-lint,?($|\s.*)
    trusted_labels:
    - job/main/workflow
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-openplatform-article-bazel-build
    name: job-openplatform-article-bazel-build
    namespace: default
    rerun_command: +test job-openplatform-article-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/openplatform/article
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-openplatform-article-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-openplatform-article-bazel-build,?($|\s.*)
    trusted_labels:
    - job/openplatform/article
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-openplatform-article-bazel-test
    name: job-openplatform-article-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-openplatform-article-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/openplatform/article
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-openplatform-article-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-openplatform-article-bazel-test,?($|\s.*)
    trusted_labels:
    - job/openplatform/article
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-openplatform-article-lint
    name: job-openplatform-article-lint
    namespace: default
    optional: true
    rerun_command: +test job-openplatform-article-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/openplatform/article/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-openplatform-article-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-openplatform-article-lint,?($|\s.*)
    trusted_labels:
    - job/openplatform/article
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-openplatform-open-market-bazel-build
    name: job-openplatform-open-market-bazel-build
    namespace: default
    rerun_command: +test job-openplatform-open-market-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/openplatform/open-market
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-openplatform-open-market-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-openplatform-open-market-bazel-build,?($|\s.*)
    trusted_labels:
    - job/openplatform/open-market
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-openplatform-open-market-bazel-test
    name: job-openplatform-open-market-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-openplatform-open-market-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/openplatform/open-market
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-openplatform-open-market-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-openplatform-open-market-bazel-test,?($|\s.*)
    trusted_labels:
    - job/openplatform/open-market
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-openplatform-open-market-lint
    name: job-openplatform-open-market-lint
    namespace: default
    optional: true
    rerun_command: +test job-openplatform-open-market-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/openplatform/open-market/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-openplatform-open-market-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-openplatform-open-market-lint,?($|\s.*)
    trusted_labels:
    - job/openplatform/open-market
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-openplatform-open-sug-bazel-build
    name: job-openplatform-open-sug-bazel-build
    namespace: default
    rerun_command: +test job-openplatform-open-sug-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/job/openplatform/open-sug
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-openplatform-open-sug-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )job-openplatform-open-sug-bazel-build,?($|\s.*)
    trusted_labels:
    - job/openplatform/open-sug
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-openplatform-open-sug-bazel-test
    name: job-openplatform-open-sug-bazel-test
    namespace: default
    optional: true
    rerun_command: +test job-openplatform-open-sug-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/job/openplatform/open-sug
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-openplatform-open-sug-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )job-openplatform-open-sug-bazel-test,?($|\s.*)
    trusted_labels:
    - job/openplatform/open-sug
  - agent: kubernetes
    always_run: true
    cluster: default
    context: job-openplatform-open-sug-lint
    name: job-openplatform-open-sug-lint
    namespace: default
    optional: true
    rerun_command: +test job-openplatform-open-sug-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/job/openplatform/open-sug/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: job-openplatform-open-sug-lint
        resources: {}
    trigger: (?m)^\+test( | .* )job-openplatform-open-sug-lint,?($|\s.*)
    trusted_labels:
    - job/openplatform/open-sug
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-cms-bazel-build
    name: service-bbq-cms-bazel-build
    namespace: default
    rerun_command: +test service-bbq-cms-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/bbq/cms
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-cms-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-cms-bazel-build,?($|\s.*)
    trusted_labels:
    - service/bbq/cms
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-cms-bazel-test
    name: service-bbq-cms-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-bbq-cms-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/bbq/cms
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-cms-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-cms-bazel-test,?($|\s.*)
    trusted_labels:
    - service/bbq/cms
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-cms-lint
    name: service-bbq-cms-lint
    namespace: default
    optional: true
    rerun_command: +test service-bbq-cms-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/bbq/cms/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-cms-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-cms-lint,?($|\s.*)
    trusted_labels:
    - service/bbq/cms
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-comment-bazel-build
    name: service-bbq-comment-bazel-build
    namespace: default
    rerun_command: +test service-bbq-comment-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/bbq/comment
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-comment-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-comment-bazel-build,?($|\s.*)
    trusted_labels:
    - service/bbq/comment
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-comment-bazel-test
    name: service-bbq-comment-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-bbq-comment-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/bbq/comment
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-comment-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-comment-bazel-test,?($|\s.*)
    trusted_labels:
    - service/bbq/comment
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-comment-lint
    name: service-bbq-comment-lint
    namespace: default
    optional: true
    rerun_command: +test service-bbq-comment-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/bbq/comment/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-comment-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-comment-lint,?($|\s.*)
    trusted_labels:
    - service/bbq/comment
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-common-bazel-build
    name: service-bbq-common-bazel-build
    namespace: default
    rerun_command: +test service-bbq-common-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/bbq/common
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-common-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-common-bazel-build,?($|\s.*)
    trusted_labels:
    - service/bbq/common
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-common-bazel-test
    name: service-bbq-common-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-bbq-common-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/bbq/common
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-common-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-common-bazel-test,?($|\s.*)
    trusted_labels:
    - service/bbq/common
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-common-lint
    name: service-bbq-common-lint
    namespace: default
    optional: true
    rerun_command: +test service-bbq-common-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/bbq/common/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-common-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-common-lint,?($|\s.*)
    trusted_labels:
    - service/bbq/common
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-notice-service-bazel-build
    name: service-bbq-notice-service-bazel-build
    namespace: default
    rerun_command: +test service-bbq-notice-service-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/bbq/notice-service
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-notice-service-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-notice-service-bazel-build,?($|\s.*)
    trusted_labels:
    - service/bbq/notice-service
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-notice-service-bazel-test
    name: service-bbq-notice-service-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-bbq-notice-service-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/bbq/notice-service
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-notice-service-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-notice-service-bazel-test,?($|\s.*)
    trusted_labels:
    - service/bbq/notice-service
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-notice-service-lint
    name: service-bbq-notice-service-lint
    namespace: default
    optional: true
    rerun_command: +test service-bbq-notice-service-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/bbq/notice-service/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-notice-service-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-notice-service-lint,?($|\s.*)
    trusted_labels:
    - service/bbq/notice-service
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-push-bazel-build
    name: service-bbq-push-bazel-build
    namespace: default
    rerun_command: +test service-bbq-push-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/bbq/push
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-push-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-push-bazel-build,?($|\s.*)
    trusted_labels:
    - service/bbq/push
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-push-bazel-test
    name: service-bbq-push-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-bbq-push-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/bbq/push
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-push-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-push-bazel-test,?($|\s.*)
    trusted_labels:
    - service/bbq/push
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-push-lint
    name: service-bbq-push-lint
    namespace: default
    optional: true
    rerun_command: +test service-bbq-push-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/bbq/push/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-push-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-push-lint,?($|\s.*)
    trusted_labels:
    - service/bbq/push
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-recsys-bazel-build
    name: service-bbq-recsys-bazel-build
    namespace: default
    rerun_command: +test service-bbq-recsys-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/bbq/recsys
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-recsys-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-recsys-bazel-build,?($|\s.*)
    trusted_labels:
    - service/bbq/recsys
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-recsys-bazel-test
    name: service-bbq-recsys-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-bbq-recsys-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/bbq/recsys
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-recsys-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-recsys-bazel-test,?($|\s.*)
    trusted_labels:
    - service/bbq/recsys
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-recsys-lint
    name: service-bbq-recsys-lint
    namespace: default
    optional: true
    rerun_command: +test service-bbq-recsys-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/bbq/recsys/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-recsys-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-recsys-lint,?($|\s.*)
    trusted_labels:
    - service/bbq/recsys
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-recsys-recall-bazel-build
    name: service-bbq-recsys-recall-bazel-build
    namespace: default
    rerun_command: +test service-bbq-recsys-recall-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/bbq/recsys-recall
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-recsys-recall-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-recsys-recall-bazel-build,?($|\s.*)
    trusted_labels:
    - service/bbq/recsys-recall
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-recsys-recall-bazel-test
    name: service-bbq-recsys-recall-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-bbq-recsys-recall-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/bbq/recsys-recall
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-recsys-recall-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-recsys-recall-bazel-test,?($|\s.*)
    trusted_labels:
    - service/bbq/recsys-recall
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-recsys-recall-lint
    name: service-bbq-recsys-recall-lint
    namespace: default
    optional: true
    rerun_command: +test service-bbq-recsys-recall-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/bbq/recsys-recall/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-recsys-recall-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-recsys-recall-lint,?($|\s.*)
    trusted_labels:
    - service/bbq/recsys-recall
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-search-bazel-build
    name: service-bbq-search-bazel-build
    namespace: default
    rerun_command: +test service-bbq-search-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/bbq/search
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-search-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-search-bazel-build,?($|\s.*)
    trusted_labels:
    - service/bbq/search
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-search-bazel-test
    name: service-bbq-search-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-bbq-search-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/bbq/search
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-search-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-search-bazel-test,?($|\s.*)
    trusted_labels:
    - service/bbq/search
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-search-lint
    name: service-bbq-search-lint
    namespace: default
    optional: true
    rerun_command: +test service-bbq-search-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/bbq/search/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-search-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-search-lint,?($|\s.*)
    trusted_labels:
    - service/bbq/search
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-sys-msg-bazel-build
    name: service-bbq-sys-msg-bazel-build
    namespace: default
    rerun_command: +test service-bbq-sys-msg-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/bbq/sys-msg
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-sys-msg-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-sys-msg-bazel-build,?($|\s.*)
    trusted_labels:
    - service/bbq/sys-msg
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-sys-msg-bazel-test
    name: service-bbq-sys-msg-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-bbq-sys-msg-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/bbq/sys-msg
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-sys-msg-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-sys-msg-bazel-test,?($|\s.*)
    trusted_labels:
    - service/bbq/sys-msg
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-sys-msg-lint
    name: service-bbq-sys-msg-lint
    namespace: default
    optional: true
    rerun_command: +test service-bbq-sys-msg-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/bbq/sys-msg/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-sys-msg-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-sys-msg-lint,?($|\s.*)
    trusted_labels:
    - service/bbq/sys-msg
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-topic-bazel-build
    name: service-bbq-topic-bazel-build
    namespace: default
    rerun_command: +test service-bbq-topic-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/bbq/topic
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-topic-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-topic-bazel-build,?($|\s.*)
    trusted_labels:
    - service/bbq/topic
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-topic-bazel-test
    name: service-bbq-topic-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-bbq-topic-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/bbq/topic
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-topic-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-topic-bazel-test,?($|\s.*)
    trusted_labels:
    - service/bbq/topic
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-topic-lint
    name: service-bbq-topic-lint
    namespace: default
    optional: true
    rerun_command: +test service-bbq-topic-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/bbq/topic/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-topic-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-topic-lint,?($|\s.*)
    trusted_labels:
    - service/bbq/topic
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-user-bazel-build
    name: service-bbq-user-bazel-build
    namespace: default
    rerun_command: +test service-bbq-user-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/bbq/user
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-user-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-user-bazel-build,?($|\s.*)
    trusted_labels:
    - service/bbq/user
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-user-bazel-test
    name: service-bbq-user-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-bbq-user-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/bbq/user
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-user-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-user-bazel-test,?($|\s.*)
    trusted_labels:
    - service/bbq/user
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-user-lint
    name: service-bbq-user-lint
    namespace: default
    optional: true
    rerun_command: +test service-bbq-user-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/bbq/user/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-user-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-user-lint,?($|\s.*)
    trusted_labels:
    - service/bbq/user
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-video-bazel-build
    name: service-bbq-video-bazel-build
    namespace: default
    rerun_command: +test service-bbq-video-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/bbq/video
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-video-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-video-bazel-build,?($|\s.*)
    trusted_labels:
    - service/bbq/video
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-video-bazel-test
    name: service-bbq-video-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-bbq-video-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/bbq/video
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-video-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-video-bazel-test,?($|\s.*)
    trusted_labels:
    - service/bbq/video
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-video-lint
    name: service-bbq-video-lint
    namespace: default
    optional: true
    rerun_command: +test service-bbq-video-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/bbq/video/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-video-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-video-lint,?($|\s.*)
    trusted_labels:
    - service/bbq/video
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-video-image-bazel-build
    name: service-bbq-video-image-bazel-build
    namespace: default
    rerun_command: +test service-bbq-video-image-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/bbq/video-image
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-video-image-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-video-image-bazel-build,?($|\s.*)
    trusted_labels:
    - service/bbq/video-image
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-video-image-bazel-test
    name: service-bbq-video-image-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-bbq-video-image-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/bbq/video-image
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-video-image-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-video-image-bazel-test,?($|\s.*)
    trusted_labels:
    - service/bbq/video-image
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-bbq-video-image-lint
    name: service-bbq-video-image-lint
    namespace: default
    optional: true
    rerun_command: +test service-bbq-video-image-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/bbq/video-image/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-bbq-video-image-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-bbq-video-image-lint,?($|\s.*)
    trusted_labels:
    - service/bbq/video-image
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-ep-footman-bazel-build
    name: service-ep-footman-bazel-build
    namespace: default
    rerun_command: +test service-ep-footman-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/ep/footman
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-ep-footman-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-ep-footman-bazel-build,?($|\s.*)
    trusted_labels:
    - service/ep/footman
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-ep-footman-bazel-test
    name: service-ep-footman-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-ep-footman-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/ep/footman
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-ep-footman-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-ep-footman-bazel-test,?($|\s.*)
    trusted_labels:
    - service/ep/footman
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-ep-footman-lint
    name: service-ep-footman-lint
    namespace: default
    optional: true
    rerun_command: +test service-ep-footman-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/ep/footman/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-ep-footman-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-ep-footman-lint,?($|\s.*)
    trusted_labels:
    - service/ep/footman
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-ep-saga-agent-bazel-build
    name: service-ep-saga-agent-bazel-build
    namespace: default
    rerun_command: +test service-ep-saga-agent-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/ep/saga-agent
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-ep-saga-agent-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-ep-saga-agent-bazel-build,?($|\s.*)
    trusted_labels:
    - service/ep/saga-agent
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-ep-saga-agent-bazel-test
    name: service-ep-saga-agent-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-ep-saga-agent-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/ep/saga-agent
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-ep-saga-agent-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-ep-saga-agent-bazel-test,?($|\s.*)
    trusted_labels:
    - service/ep/saga-agent
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-ep-saga-agent-lint
    name: service-ep-saga-agent-lint
    namespace: default
    optional: true
    rerun_command: +test service-ep-saga-agent-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/ep/saga-agent/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-ep-saga-agent-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-ep-saga-agent-lint,?($|\s.*)
    trusted_labels:
    - service/ep/saga-agent
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-activity-bazel-build
    name: service-live-activity-bazel-build
    namespace: default
    rerun_command: +test service-live-activity-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/activity
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-activity-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-activity-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/activity
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-activity-bazel-test
    name: service-live-activity-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-activity-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/activity
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-activity-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-activity-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/activity
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-activity-lint
    name: service-live-activity-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-activity-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/activity/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-activity-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-activity-lint,?($|\s.*)
    trusted_labels:
    - service/live/activity
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-broadcast-proxy-bazel-build
    name: service-live-broadcast-proxy-bazel-build
    namespace: default
    rerun_command: +test service-live-broadcast-proxy-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/broadcast-proxy
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-broadcast-proxy-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-broadcast-proxy-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/broadcast-proxy
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-broadcast-proxy-bazel-test
    name: service-live-broadcast-proxy-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-broadcast-proxy-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/broadcast-proxy
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-broadcast-proxy-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-broadcast-proxy-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/broadcast-proxy
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-broadcast-proxy-lint
    name: service-live-broadcast-proxy-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-broadcast-proxy-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/broadcast-proxy/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-broadcast-proxy-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-broadcast-proxy-lint,?($|\s.*)
    trusted_labels:
    - service/live/broadcast-proxy
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-dao-anchor-bazel-build
    name: service-live-dao-anchor-bazel-build
    namespace: default
    rerun_command: +test service-live-dao-anchor-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/dao-anchor
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-dao-anchor-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-dao-anchor-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/dao-anchor
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-dao-anchor-bazel-test
    name: service-live-dao-anchor-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-dao-anchor-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/dao-anchor
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-dao-anchor-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-dao-anchor-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/dao-anchor
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-dao-anchor-lint
    name: service-live-dao-anchor-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-dao-anchor-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/dao-anchor/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-dao-anchor-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-dao-anchor-lint,?($|\s.*)
    trusted_labels:
    - service/live/dao-anchor
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-fans_medal-bazel-build
    name: service-live-fans_medal-bazel-build
    namespace: default
    rerun_command: +test service-live-fans_medal-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/fans_medal
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-fans_medal-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-fans_medal-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/fans_medal
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-fans_medal-bazel-test
    name: service-live-fans_medal-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-fans_medal-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/fans_medal
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-fans_medal-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-fans_medal-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/fans_medal
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-fans_medal-lint
    name: service-live-fans_medal-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-fans_medal-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/fans_medal/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-fans_medal-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-fans_medal-lint,?($|\s.*)
    trusted_labels:
    - service/live/fans_medal
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-gift-bazel-build
    name: service-live-gift-bazel-build
    namespace: default
    rerun_command: +test service-live-gift-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/gift
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-gift-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-gift-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/gift
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-gift-bazel-test
    name: service-live-gift-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-gift-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/gift
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-gift-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-gift-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/gift
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-gift-lint
    name: service-live-gift-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-gift-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/gift/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-gift-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-gift-lint,?($|\s.*)
    trusted_labels:
    - service/live/gift
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-grpc-demo-bazel-build
    name: service-live-grpc-demo-bazel-build
    namespace: default
    rerun_command: +test service-live-grpc-demo-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/grpc-demo
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-grpc-demo-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-grpc-demo-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/grpc-demo
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-grpc-demo-bazel-test
    name: service-live-grpc-demo-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-grpc-demo-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/grpc-demo
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-grpc-demo-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-grpc-demo-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/grpc-demo
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-grpc-demo-lint
    name: service-live-grpc-demo-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-grpc-demo-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/grpc-demo/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-grpc-demo-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-grpc-demo-lint,?($|\s.*)
    trusted_labels:
    - service/live/grpc-demo
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-live-dm-bazel-build
    name: service-live-live-dm-bazel-build
    namespace: default
    rerun_command: +test service-live-live-dm-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/live-dm
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-live-dm-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-live-dm-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/live-dm
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-live-dm-bazel-test
    name: service-live-live-dm-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-live-dm-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/live-dm
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-live-dm-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-live-dm-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/live-dm
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-live-dm-lint
    name: service-live-live-dm-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-live-dm-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/live-dm/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-live-dm-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-live-dm-lint,?($|\s.*)
    trusted_labels:
    - service/live/live-dm
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-live_riskcontrol-bazel-build
    name: service-live-live_riskcontrol-bazel-build
    namespace: default
    rerun_command: +test service-live-live_riskcontrol-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/live_riskcontrol
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-live_riskcontrol-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-live_riskcontrol-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/live_riskcontrol
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-live_riskcontrol-bazel-test
    name: service-live-live_riskcontrol-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-live_riskcontrol-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/live_riskcontrol
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-live_riskcontrol-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-live_riskcontrol-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/live_riskcontrol
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-live_riskcontrol-lint
    name: service-live-live_riskcontrol-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-live_riskcontrol-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/live_riskcontrol/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-live_riskcontrol-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-live_riskcontrol-lint,?($|\s.*)
    trusted_labels:
    - service/live/live_riskcontrol
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-rankdb-bazel-build
    name: service-live-rankdb-bazel-build
    namespace: default
    rerun_command: +test service-live-rankdb-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/rankdb
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-rankdb-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-rankdb-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/rankdb
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-rankdb-bazel-test
    name: service-live-rankdb-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-rankdb-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/rankdb
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-rankdb-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-rankdb-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/rankdb
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-rankdb-lint
    name: service-live-rankdb-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-rankdb-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/rankdb/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-rankdb-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-rankdb-lint,?($|\s.*)
    trusted_labels:
    - service/live/rankdb
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-recommend-bazel-build
    name: service-live-recommend-bazel-build
    namespace: default
    rerun_command: +test service-live-recommend-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/recommend
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-recommend-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-recommend-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/recommend
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-recommend-bazel-test
    name: service-live-recommend-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-recommend-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/recommend
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-recommend-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-recommend-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/recommend
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-recommend-lint
    name: service-live-recommend-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-recommend-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/recommend/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-recommend-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-recommend-lint,?($|\s.*)
    trusted_labels:
    - service/live/recommend
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-resource-bazel-build
    name: service-live-resource-bazel-build
    namespace: default
    rerun_command: +test service-live-resource-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/resource
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-resource-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-resource-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/resource
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-resource-bazel-test
    name: service-live-resource-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-resource-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/resource
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-resource-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-resource-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/resource
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-resource-lint
    name: service-live-resource-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-resource-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/resource/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-resource-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-resource-lint,?($|\s.*)
    trusted_labels:
    - service/live/resource
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-rtc-bazel-build
    name: service-live-rtc-bazel-build
    namespace: default
    rerun_command: +test service-live-rtc-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/rtc
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-rtc-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-rtc-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/rtc
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-rtc-bazel-test
    name: service-live-rtc-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-rtc-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/rtc
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-rtc-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-rtc-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/rtc
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-rtc-lint
    name: service-live-rtc-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-rtc-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/rtc/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-rtc-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-rtc-lint,?($|\s.*)
    trusted_labels:
    - service/live/rtc
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-userexp-bazel-build
    name: service-live-userexp-bazel-build
    namespace: default
    rerun_command: +test service-live-userexp-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/userexp
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-userexp-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-userexp-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/userexp
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-userexp-bazel-test
    name: service-live-userexp-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-userexp-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/userexp
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-userexp-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-userexp-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/userexp
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-userexp-lint
    name: service-live-userexp-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-userexp-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/userexp/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-userexp-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-userexp-lint,?($|\s.*)
    trusted_labels:
    - service/live/userexp
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-wallet-bazel-build
    name: service-live-wallet-bazel-build
    namespace: default
    rerun_command: +test service-live-wallet-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/wallet
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-wallet-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-wallet-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/wallet
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-wallet-bazel-test
    name: service-live-wallet-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-wallet-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/wallet
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-wallet-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-wallet-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/wallet
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-wallet-lint
    name: service-live-wallet-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-wallet-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/wallet/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-wallet-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-wallet-lint,?($|\s.*)
    trusted_labels:
    - service/live/wallet
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xanchor-bazel-build
    name: service-live-xanchor-bazel-build
    namespace: default
    rerun_command: +test service-live-xanchor-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/xanchor
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xanchor-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xanchor-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/xanchor
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xanchor-bazel-test
    name: service-live-xanchor-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-xanchor-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/xanchor
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xanchor-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xanchor-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/xanchor
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xanchor-lint
    name: service-live-xanchor-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-xanchor-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/xanchor/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xanchor-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xanchor-lint,?($|\s.*)
    trusted_labels:
    - service/live/xanchor
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xcaptcha-bazel-build
    name: service-live-xcaptcha-bazel-build
    namespace: default
    rerun_command: +test service-live-xcaptcha-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/xcaptcha
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xcaptcha-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xcaptcha-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/xcaptcha
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xcaptcha-bazel-test
    name: service-live-xcaptcha-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-xcaptcha-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/xcaptcha
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xcaptcha-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xcaptcha-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/xcaptcha
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xcaptcha-lint
    name: service-live-xcaptcha-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-xcaptcha-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/xcaptcha/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xcaptcha-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xcaptcha-lint,?($|\s.*)
    trusted_labels:
    - service/live/xcaptcha
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xfansmedal-bazel-build
    name: service-live-xfansmedal-bazel-build
    namespace: default
    rerun_command: +test service-live-xfansmedal-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/xfansmedal
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xfansmedal-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xfansmedal-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/xfansmedal
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xfansmedal-bazel-test
    name: service-live-xfansmedal-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-xfansmedal-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/xfansmedal
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xfansmedal-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xfansmedal-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/xfansmedal
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xfansmedal-lint
    name: service-live-xfansmedal-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-xfansmedal-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/xfansmedal/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xfansmedal-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xfansmedal-lint,?($|\s.*)
    trusted_labels:
    - service/live/xfansmedal
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xlottery-bazel-build
    name: service-live-xlottery-bazel-build
    namespace: default
    rerun_command: +test service-live-xlottery-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/xlottery
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xlottery-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xlottery-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/xlottery
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xlottery-bazel-test
    name: service-live-xlottery-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-xlottery-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/xlottery
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xlottery-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xlottery-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/xlottery
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xlottery-lint
    name: service-live-xlottery-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-xlottery-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/xlottery/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xlottery-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xlottery-lint,?($|\s.*)
    trusted_labels:
    - service/live/xlottery
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xrewardcenter-bazel-build
    name: service-live-xrewardcenter-bazel-build
    namespace: default
    rerun_command: +test service-live-xrewardcenter-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/xrewardcenter
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xrewardcenter-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xrewardcenter-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/xrewardcenter
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xrewardcenter-bazel-test
    name: service-live-xrewardcenter-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-xrewardcenter-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/xrewardcenter
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xrewardcenter-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xrewardcenter-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/xrewardcenter
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xrewardcenter-lint
    name: service-live-xrewardcenter-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-xrewardcenter-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/xrewardcenter/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xrewardcenter-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xrewardcenter-lint,?($|\s.*)
    trusted_labels:
    - service/live/xrewardcenter
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xroom-bazel-build
    name: service-live-xroom-bazel-build
    namespace: default
    rerun_command: +test service-live-xroom-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/xroom
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xroom-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xroom-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/xroom
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xroom-bazel-test
    name: service-live-xroom-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-xroom-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/xroom
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xroom-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xroom-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/xroom
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xroom-lint
    name: service-live-xroom-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-xroom-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/xroom/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xroom-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xroom-lint,?($|\s.*)
    trusted_labels:
    - service/live/xroom
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xroom-feed-bazel-build
    name: service-live-xroom-feed-bazel-build
    namespace: default
    rerun_command: +test service-live-xroom-feed-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/xroom-feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xroom-feed-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xroom-feed-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/xroom-feed
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xroom-feed-bazel-test
    name: service-live-xroom-feed-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-xroom-feed-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/xroom-feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xroom-feed-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xroom-feed-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/xroom-feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xroom-feed-lint
    name: service-live-xroom-feed-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-xroom-feed-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/xroom-feed/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xroom-feed-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xroom-feed-lint,?($|\s.*)
    trusted_labels:
    - service/live/xroom-feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xuser-bazel-build
    name: service-live-xuser-bazel-build
    namespace: default
    rerun_command: +test service-live-xuser-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/xuser
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xuser-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xuser-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/xuser
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xuser-bazel-test
    name: service-live-xuser-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-xuser-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/xuser
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xuser-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xuser-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/xuser
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xuser-lint
    name: service-live-xuser-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-xuser-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/xuser/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xuser-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xuser-lint,?($|\s.*)
    trusted_labels:
    - service/live/xuser
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xuserex-bazel-build
    name: service-live-xuserex-bazel-build
    namespace: default
    rerun_command: +test service-live-xuserex-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/xuserex
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xuserex-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xuserex-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/xuserex
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xuserex-bazel-test
    name: service-live-xuserex-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-xuserex-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/xuserex
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xuserex-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xuserex-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/xuserex
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-xuserex-lint
    name: service-live-xuserex-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-xuserex-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/xuserex/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-xuserex-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-xuserex-lint,?($|\s.*)
    trusted_labels:
    - service/live/xuserex
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-zeus-bazel-build
    name: service-live-zeus-bazel-build
    namespace: default
    rerun_command: +test service-live-zeus-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/live/zeus
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-zeus-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-zeus-bazel-build,?($|\s.*)
    trusted_labels:
    - service/live/zeus
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-zeus-bazel-test
    name: service-live-zeus-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-live-zeus-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/live/zeus
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-zeus-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-zeus-bazel-test,?($|\s.*)
    trusted_labels:
    - service/live/zeus
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-live-zeus-lint
    name: service-live-zeus-lint
    namespace: default
    optional: true
    rerun_command: +test service-live-zeus-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/live/zeus/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-live-zeus-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-live-zeus-lint,?($|\s.*)
    trusted_labels:
    - service/live/zeus
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-account-bazel-build
    name: service-main-account-bazel-build
    namespace: default
    rerun_command: +test service-main-account-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/account
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-account-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-account-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/account
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-account-bazel-test
    name: service-main-account-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-account-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/account
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-account-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-account-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/account
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-account-lint
    name: service-main-account-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-account-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/account/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-account-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-account-lint,?($|\s.*)
    trusted_labels:
    - service/main/account
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-account-recovery-bazel-build
    name: service-main-account-recovery-bazel-build
    namespace: default
    rerun_command: +test service-main-account-recovery-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/account-recovery
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-account-recovery-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-account-recovery-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/account-recovery
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-account-recovery-bazel-test
    name: service-main-account-recovery-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-account-recovery-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/account-recovery
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-account-recovery-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-account-recovery-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/account-recovery
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-account-recovery-lint
    name: service-main-account-recovery-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-account-recovery-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/account-recovery/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-account-recovery-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-account-recovery-lint,?($|\s.*)
    trusted_labels:
    - service/main/account-recovery
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-antispam-bazel-build
    name: service-main-antispam-bazel-build
    namespace: default
    rerun_command: +test service-main-antispam-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/antispam
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-antispam-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-antispam-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/antispam
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-antispam-bazel-test
    name: service-main-antispam-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-antispam-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/antispam
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-antispam-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-antispam-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/antispam
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-antispam-lint
    name: service-main-antispam-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-antispam-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/antispam/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-antispam-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-antispam-lint,?($|\s.*)
    trusted_labels:
    - service/main/antispam
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-archive-bazel-build
    name: service-main-archive-bazel-build
    namespace: default
    rerun_command: +test service-main-archive-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/archive
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-archive-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-archive-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/archive
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-archive-bazel-test
    name: service-main-archive-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-archive-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/archive
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-archive-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-archive-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/archive
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-archive-lint
    name: service-main-archive-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-archive-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/archive/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-archive-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-archive-lint,?($|\s.*)
    trusted_labels:
    - service/main/archive
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-assist-bazel-build
    name: service-main-assist-bazel-build
    namespace: default
    rerun_command: +test service-main-assist-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/assist
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-assist-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-assist-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/assist
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-assist-bazel-test
    name: service-main-assist-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-assist-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/assist
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-assist-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-assist-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/assist
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-assist-lint
    name: service-main-assist-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-assist-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/assist/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-assist-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-assist-lint,?($|\s.*)
    trusted_labels:
    - service/main/assist
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-bns-bazel-build
    name: service-main-bns-bazel-build
    namespace: default
    rerun_command: +test service-main-bns-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/bns
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-bns-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-bns-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/bns
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-bns-bazel-test
    name: service-main-bns-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-bns-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/bns
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-bns-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-bns-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/bns
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-bns-lint
    name: service-main-bns-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-bns-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/bns/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-bns-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-bns-lint,?($|\s.*)
    trusted_labels:
    - service/main/bns
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-broadcast-bazel-build
    name: service-main-broadcast-bazel-build
    namespace: default
    rerun_command: +test service-main-broadcast-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/broadcast
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-broadcast-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-broadcast-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/broadcast
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-broadcast-bazel-test
    name: service-main-broadcast-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-broadcast-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/broadcast
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-broadcast-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-broadcast-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/broadcast
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-broadcast-lint
    name: service-main-broadcast-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-broadcast-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/broadcast/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-broadcast-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-broadcast-lint,?($|\s.*)
    trusted_labels:
    - service/main/broadcast
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-card-bazel-build
    name: service-main-card-bazel-build
    namespace: default
    rerun_command: +test service-main-card-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/card
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-card-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-card-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/card
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-card-bazel-test
    name: service-main-card-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-card-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/card
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-card-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-card-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/card
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-card-lint
    name: service-main-card-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-card-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/card/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-card-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-card-lint,?($|\s.*)
    trusted_labels:
    - service/main/card
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-coin-bazel-build
    name: service-main-coin-bazel-build
    namespace: default
    rerun_command: +test service-main-coin-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/coin
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-coin-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-coin-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/coin
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-coin-bazel-test
    name: service-main-coin-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-coin-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/coin
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-coin-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-coin-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/coin
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-coin-lint
    name: service-main-coin-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-coin-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/coin/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-coin-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-coin-lint,?($|\s.*)
    trusted_labels:
    - service/main/coin
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-coupon-bazel-build
    name: service-main-coupon-bazel-build
    namespace: default
    rerun_command: +test service-main-coupon-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/coupon
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-coupon-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-coupon-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/coupon
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-coupon-bazel-test
    name: service-main-coupon-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-coupon-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/coupon
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-coupon-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-coupon-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/coupon
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-coupon-lint
    name: service-main-coupon-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-coupon-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/coupon/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-coupon-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-coupon-lint,?($|\s.*)
    trusted_labels:
    - service/main/coupon
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-dapper-bazel-build
    name: service-main-dapper-bazel-build
    namespace: default
    rerun_command: +test service-main-dapper-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/dapper
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-dapper-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-dapper-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/dapper
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-dapper-bazel-test
    name: service-main-dapper-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-dapper-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/dapper
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-dapper-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-dapper-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/dapper
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-dapper-lint
    name: service-main-dapper-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-dapper-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/dapper/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-dapper-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-dapper-lint,?($|\s.*)
    trusted_labels:
    - service/main/dapper
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-dapper-query-bazel-build
    name: service-main-dapper-query-bazel-build
    namespace: default
    rerun_command: +test service-main-dapper-query-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/dapper-query
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-dapper-query-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-dapper-query-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/dapper-query
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-dapper-query-bazel-test
    name: service-main-dapper-query-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-dapper-query-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/dapper-query
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-dapper-query-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-dapper-query-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/dapper-query
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-dapper-query-lint
    name: service-main-dapper-query-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-dapper-query-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/dapper-query/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-dapper-query-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-dapper-query-lint,?($|\s.*)
    trusted_labels:
    - service/main/dapper-query
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-dynamic-bazel-build
    name: service-main-dynamic-bazel-build
    namespace: default
    rerun_command: +test service-main-dynamic-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/dynamic
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-dynamic-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-dynamic-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/dynamic
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-dynamic-bazel-test
    name: service-main-dynamic-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-dynamic-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/dynamic
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-dynamic-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-dynamic-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/dynamic
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-dynamic-lint
    name: service-main-dynamic-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-dynamic-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/dynamic/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-dynamic-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-dynamic-lint,?($|\s.*)
    trusted_labels:
    - service/main/dynamic
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-favorite-bazel-build
    name: service-main-favorite-bazel-build
    namespace: default
    rerun_command: +test service-main-favorite-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/favorite
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-favorite-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-favorite-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/favorite
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-favorite-bazel-test
    name: service-main-favorite-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-favorite-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/favorite
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-favorite-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-favorite-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/favorite
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-favorite-lint
    name: service-main-favorite-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-favorite-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/favorite/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-favorite-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-favorite-lint,?($|\s.*)
    trusted_labels:
    - service/main/favorite
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-feed-bazel-build
    name: service-main-feed-bazel-build
    namespace: default
    rerun_command: +test service-main-feed-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-feed-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-feed-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/feed
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-feed-bazel-test
    name: service-main-feed-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-feed-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-feed-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-feed-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-feed-lint
    name: service-main-feed-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-feed-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/feed/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-feed-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-feed-lint,?($|\s.*)
    trusted_labels:
    - service/main/feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-figure-bazel-build
    name: service-main-figure-bazel-build
    namespace: default
    rerun_command: +test service-main-figure-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/figure
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-figure-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-figure-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/figure
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-figure-bazel-test
    name: service-main-figure-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-figure-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/figure
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-figure-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-figure-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/figure
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-figure-lint
    name: service-main-figure-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-figure-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/figure/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-figure-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-figure-lint,?($|\s.*)
    trusted_labels:
    - service/main/figure
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-filter-bazel-build
    name: service-main-filter-bazel-build
    namespace: default
    rerun_command: +test service-main-filter-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/filter
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-filter-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-filter-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/filter
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-filter-bazel-test
    name: service-main-filter-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-filter-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/filter
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-filter-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-filter-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/filter
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-filter-lint
    name: service-main-filter-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-filter-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/filter/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-filter-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-filter-lint,?($|\s.*)
    trusted_labels:
    - service/main/filter
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-history-bazel-build
    name: service-main-history-bazel-build
    namespace: default
    rerun_command: +test service-main-history-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/history
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-history-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-history-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/history
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-history-bazel-test
    name: service-main-history-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-history-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/history
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-history-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-history-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/history
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-history-lint
    name: service-main-history-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-history-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/history/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-history-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-history-lint,?($|\s.*)
    trusted_labels:
    - service/main/history
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-identify-bazel-build
    name: service-main-identify-bazel-build
    namespace: default
    rerun_command: +test service-main-identify-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/identify
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-identify-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-identify-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/identify
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-identify-bazel-test
    name: service-main-identify-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-identify-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/identify
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-identify-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-identify-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/identify
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-identify-lint
    name: service-main-identify-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-identify-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/identify/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-identify-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-identify-lint,?($|\s.*)
    trusted_labels:
    - service/main/identify
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-identify-game-bazel-build
    name: service-main-identify-game-bazel-build
    namespace: default
    rerun_command: +test service-main-identify-game-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/identify-game
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-identify-game-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-identify-game-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/identify-game
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-identify-game-bazel-test
    name: service-main-identify-game-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-identify-game-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/identify-game
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-identify-game-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-identify-game-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/identify-game
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-identify-game-lint
    name: service-main-identify-game-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-identify-game-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/identify-game/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-identify-game-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-identify-game-lint,?($|\s.*)
    trusted_labels:
    - service/main/identify-game
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-location-bazel-build
    name: service-main-location-bazel-build
    namespace: default
    rerun_command: +test service-main-location-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/location
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-location-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-location-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/location
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-location-bazel-test
    name: service-main-location-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-location-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/location
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-location-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-location-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/location
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-location-lint
    name: service-main-location-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-location-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/location/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-location-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-location-lint,?($|\s.*)
    trusted_labels:
    - service/main/location
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-member-bazel-build
    name: service-main-member-bazel-build
    namespace: default
    rerun_command: +test service-main-member-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/member
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-member-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-member-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/member
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-member-bazel-test
    name: service-main-member-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-member-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/member
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-member-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-member-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/member
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-member-lint
    name: service-main-member-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-member-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/member/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-member-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-member-lint,?($|\s.*)
    trusted_labels:
    - service/main/member
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-msm-bazel-build
    name: service-main-msm-bazel-build
    namespace: default
    rerun_command: +test service-main-msm-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/msm
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-msm-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-msm-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/msm
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-msm-bazel-test
    name: service-main-msm-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-msm-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/msm
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-msm-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-msm-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/msm
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-msm-lint
    name: service-main-msm-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-msm-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/msm/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-msm-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-msm-lint,?($|\s.*)
    trusted_labels:
    - service/main/msm
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-open-bazel-build
    name: service-main-open-bazel-build
    namespace: default
    rerun_command: +test service-main-open-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/open
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-open-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-open-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/open
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-open-bazel-test
    name: service-main-open-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-open-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/open
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-open-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-open-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/open
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-open-lint
    name: service-main-open-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-open-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/open/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-open-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-open-lint,?($|\s.*)
    trusted_labels:
    - service/main/open
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-passport-bazel-build
    name: service-main-passport-bazel-build
    namespace: default
    rerun_command: +test service-main-passport-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/passport
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-passport-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-passport-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/passport
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-passport-bazel-test
    name: service-main-passport-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-passport-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/passport
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-passport-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-passport-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/passport
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-passport-lint
    name: service-main-passport-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-passport-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/passport/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-passport-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-passport-lint,?($|\s.*)
    trusted_labels:
    - service/main/passport
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-passport-auth-bazel-build
    name: service-main-passport-auth-bazel-build
    namespace: default
    rerun_command: +test service-main-passport-auth-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/passport-auth
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-passport-auth-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-passport-auth-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/passport-auth
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-passport-auth-bazel-test
    name: service-main-passport-auth-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-passport-auth-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/passport-auth
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-passport-auth-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-passport-auth-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/passport-auth
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-passport-auth-lint
    name: service-main-passport-auth-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-passport-auth-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/passport-auth/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-passport-auth-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-passport-auth-lint,?($|\s.*)
    trusted_labels:
    - service/main/passport-auth
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-passport-game-bazel-build
    name: service-main-passport-game-bazel-build
    namespace: default
    rerun_command: +test service-main-passport-game-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/passport-game
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-passport-game-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-passport-game-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/passport-game
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-passport-game-bazel-test
    name: service-main-passport-game-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-passport-game-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/passport-game
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-passport-game-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-passport-game-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/passport-game
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-passport-game-lint
    name: service-main-passport-game-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-passport-game-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/passport-game/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-passport-game-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-passport-game-lint,?($|\s.*)
    trusted_labels:
    - service/main/passport-game
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-passport-sns-bazel-build
    name: service-main-passport-sns-bazel-build
    namespace: default
    rerun_command: +test service-main-passport-sns-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/passport-sns
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-passport-sns-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-passport-sns-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/passport-sns
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-passport-sns-bazel-test
    name: service-main-passport-sns-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-passport-sns-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/passport-sns
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-passport-sns-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-passport-sns-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/passport-sns
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-passport-sns-lint
    name: service-main-passport-sns-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-passport-sns-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/passport-sns/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-passport-sns-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-passport-sns-lint,?($|\s.*)
    trusted_labels:
    - service/main/passport-sns
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-point-bazel-build
    name: service-main-point-bazel-build
    namespace: default
    rerun_command: +test service-main-point-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/point
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-point-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-point-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/point
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-point-bazel-test
    name: service-main-point-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-point-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/point
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-point-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-point-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/point
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-point-lint
    name: service-main-point-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-point-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/point/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-point-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-point-lint,?($|\s.*)
    trusted_labels:
    - service/main/point
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-push-bazel-build
    name: service-main-push-bazel-build
    namespace: default
    rerun_command: +test service-main-push-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/push
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-push-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-push-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/push
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-push-bazel-test
    name: service-main-push-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-push-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/push
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-push-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-push-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/push
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-push-lint
    name: service-main-push-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-push-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/push/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-push-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-push-lint,?($|\s.*)
    trusted_labels:
    - service/main/push
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-push-strategy-bazel-build
    name: service-main-push-strategy-bazel-build
    namespace: default
    rerun_command: +test service-main-push-strategy-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/push-strategy
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-push-strategy-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-push-strategy-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/push-strategy
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-push-strategy-bazel-test
    name: service-main-push-strategy-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-push-strategy-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/push-strategy
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-push-strategy-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-push-strategy-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/push-strategy
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-push-strategy-lint
    name: service-main-push-strategy-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-push-strategy-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/push-strategy/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-push-strategy-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-push-strategy-lint,?($|\s.*)
    trusted_labels:
    - service/main/push-strategy
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-rank-bazel-build
    name: service-main-rank-bazel-build
    namespace: default
    rerun_command: +test service-main-rank-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/rank
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-rank-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-rank-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/rank
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-rank-bazel-test
    name: service-main-rank-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-rank-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/rank
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-rank-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-rank-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/rank
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-rank-lint
    name: service-main-rank-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-rank-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/rank/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-rank-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-rank-lint,?($|\s.*)
    trusted_labels:
    - service/main/rank
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-relation-bazel-build
    name: service-main-relation-bazel-build
    namespace: default
    rerun_command: +test service-main-relation-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/relation
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-relation-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-relation-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/relation
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-relation-bazel-test
    name: service-main-relation-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-relation-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/relation
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-relation-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-relation-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/relation
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-relation-lint
    name: service-main-relation-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-relation-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/relation/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-relation-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-relation-lint,?($|\s.*)
    trusted_labels:
    - service/main/relation
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-reply-feed-bazel-build
    name: service-main-reply-feed-bazel-build
    namespace: default
    rerun_command: +test service-main-reply-feed-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/reply-feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-reply-feed-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-reply-feed-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/reply-feed
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-reply-feed-bazel-test
    name: service-main-reply-feed-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-reply-feed-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/reply-feed
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-reply-feed-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-reply-feed-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/reply-feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-reply-feed-lint
    name: service-main-reply-feed-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-reply-feed-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/reply-feed/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-reply-feed-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-reply-feed-lint,?($|\s.*)
    trusted_labels:
    - service/main/reply-feed
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-resource-bazel-build
    name: service-main-resource-bazel-build
    namespace: default
    rerun_command: +test service-main-resource-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/resource
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-resource-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-resource-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/resource
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-resource-bazel-test
    name: service-main-resource-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-resource-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/resource
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-resource-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-resource-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/resource
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-resource-lint
    name: service-main-resource-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-resource-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/resource/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-resource-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-resource-lint,?($|\s.*)
    trusted_labels:
    - service/main/resource
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-riot-search-bazel-build
    name: service-main-riot-search-bazel-build
    namespace: default
    rerun_command: +test service-main-riot-search-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/riot-search
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-riot-search-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-riot-search-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/riot-search
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-riot-search-bazel-test
    name: service-main-riot-search-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-riot-search-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/riot-search
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-riot-search-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-riot-search-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/riot-search
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-riot-search-lint
    name: service-main-riot-search-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-riot-search-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/riot-search/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-riot-search-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-riot-search-lint,?($|\s.*)
    trusted_labels:
    - service/main/riot-search
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-search-bazel-build
    name: service-main-search-bazel-build
    namespace: default
    rerun_command: +test service-main-search-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/search
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-search-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-search-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/search
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-search-bazel-test
    name: service-main-search-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-search-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/search
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-search-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-search-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/search
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-search-lint
    name: service-main-search-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-search-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/search/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-search-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-search-lint,?($|\s.*)
    trusted_labels:
    - service/main/search
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-secure-bazel-build
    name: service-main-secure-bazel-build
    namespace: default
    rerun_command: +test service-main-secure-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/secure
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-secure-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-secure-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/secure
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-secure-bazel-test
    name: service-main-secure-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-secure-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/secure
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-secure-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-secure-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/secure
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-secure-lint
    name: service-main-secure-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-secure-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/secure/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-secure-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-secure-lint,?($|\s.*)
    trusted_labels:
    - service/main/secure
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-seq-server-bazel-build
    name: service-main-seq-server-bazel-build
    namespace: default
    rerun_command: +test service-main-seq-server-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/seq-server
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-seq-server-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-seq-server-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/seq-server
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-seq-server-bazel-test
    name: service-main-seq-server-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-seq-server-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/seq-server
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-seq-server-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-seq-server-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/seq-server
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-seq-server-lint
    name: service-main-seq-server-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-seq-server-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/seq-server/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-seq-server-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-seq-server-lint,?($|\s.*)
    trusted_labels:
    - service/main/seq-server
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-share-bazel-build
    name: service-main-share-bazel-build
    namespace: default
    rerun_command: +test service-main-share-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/share
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-share-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-share-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/share
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-share-bazel-test
    name: service-main-share-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-share-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/share
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-share-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-share-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/share
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-share-lint
    name: service-main-share-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-share-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/share/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-share-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-share-lint,?($|\s.*)
    trusted_labels:
    - service/main/share
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-sms-bazel-build
    name: service-main-sms-bazel-build
    namespace: default
    rerun_command: +test service-main-sms-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/sms
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-sms-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-sms-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/sms
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-sms-bazel-test
    name: service-main-sms-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-sms-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/sms
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-sms-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-sms-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/sms
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-sms-lint
    name: service-main-sms-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-sms-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/sms/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-sms-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-sms-lint,?($|\s.*)
    trusted_labels:
    - service/main/sms
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-spy-bazel-build
    name: service-main-spy-bazel-build
    namespace: default
    rerun_command: +test service-main-spy-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/spy
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-spy-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-spy-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/spy
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-spy-bazel-test
    name: service-main-spy-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-spy-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/spy
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-spy-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-spy-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/spy
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-spy-lint
    name: service-main-spy-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-spy-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/spy/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-spy-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-spy-lint,?($|\s.*)
    trusted_labels:
    - service/main/spy
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-tag-bazel-build
    name: service-main-tag-bazel-build
    namespace: default
    rerun_command: +test service-main-tag-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/tag
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-tag-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-tag-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/tag
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-tag-bazel-test
    name: service-main-tag-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-tag-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/tag
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-tag-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-tag-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/tag
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-tag-lint
    name: service-main-tag-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-tag-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/tag/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-tag-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-tag-lint,?($|\s.*)
    trusted_labels:
    - service/main/tag
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-thumbup-bazel-build
    name: service-main-thumbup-bazel-build
    namespace: default
    rerun_command: +test service-main-thumbup-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/thumbup
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-thumbup-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-thumbup-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/thumbup
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-thumbup-bazel-test
    name: service-main-thumbup-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-thumbup-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/thumbup
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-thumbup-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-thumbup-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/thumbup
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-thumbup-lint
    name: service-main-thumbup-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-thumbup-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/thumbup/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-thumbup-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-thumbup-lint,?($|\s.*)
    trusted_labels:
    - service/main/thumbup
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-tv-bazel-build
    name: service-main-tv-bazel-build
    namespace: default
    rerun_command: +test service-main-tv-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/tv
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-tv-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-tv-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/tv
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-tv-bazel-test
    name: service-main-tv-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-tv-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/tv
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-tv-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-tv-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/tv
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-tv-lint
    name: service-main-tv-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-tv-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/tv/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-tv-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-tv-lint,?($|\s.*)
    trusted_labels:
    - service/main/tv
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-ugcpay-bazel-build
    name: service-main-ugcpay-bazel-build
    namespace: default
    rerun_command: +test service-main-ugcpay-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/ugcpay
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-ugcpay-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-ugcpay-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/ugcpay
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-ugcpay-bazel-test
    name: service-main-ugcpay-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-ugcpay-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/ugcpay
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-ugcpay-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-ugcpay-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/ugcpay
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-ugcpay-lint
    name: service-main-ugcpay-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-ugcpay-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/ugcpay/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-ugcpay-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-ugcpay-lint,?($|\s.*)
    trusted_labels:
    - service/main/ugcpay
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-ugcpay-rank-bazel-build
    name: service-main-ugcpay-rank-bazel-build
    namespace: default
    rerun_command: +test service-main-ugcpay-rank-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/ugcpay-rank
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-ugcpay-rank-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-ugcpay-rank-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/ugcpay-rank
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-ugcpay-rank-bazel-test
    name: service-main-ugcpay-rank-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-ugcpay-rank-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/ugcpay-rank
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-ugcpay-rank-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-ugcpay-rank-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/ugcpay-rank
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-ugcpay-rank-lint
    name: service-main-ugcpay-rank-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-ugcpay-rank-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/ugcpay-rank/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-ugcpay-rank-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-ugcpay-rank-lint,?($|\s.*)
    trusted_labels:
    - service/main/ugcpay-rank
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-up-bazel-build
    name: service-main-up-bazel-build
    namespace: default
    rerun_command: +test service-main-up-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/up
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-up-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-up-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/up
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-up-bazel-test
    name: service-main-up-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-up-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/up
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-up-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-up-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/up
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-up-lint
    name: service-main-up-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-up-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/up/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-up-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-up-lint,?($|\s.*)
    trusted_labels:
    - service/main/up
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-upcredit-bazel-build
    name: service-main-upcredit-bazel-build
    namespace: default
    rerun_command: +test service-main-upcredit-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/upcredit
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-upcredit-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-upcredit-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/upcredit
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-upcredit-bazel-test
    name: service-main-upcredit-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-upcredit-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/upcredit
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-upcredit-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-upcredit-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/upcredit
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-upcredit-lint
    name: service-main-upcredit-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-upcredit-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/upcredit/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-upcredit-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-upcredit-lint,?($|\s.*)
    trusted_labels:
    - service/main/upcredit
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-usersuit-bazel-build
    name: service-main-usersuit-bazel-build
    namespace: default
    rerun_command: +test service-main-usersuit-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/usersuit
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-usersuit-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-usersuit-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/usersuit
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-usersuit-bazel-test
    name: service-main-usersuit-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-usersuit-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/usersuit
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-usersuit-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-usersuit-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/usersuit
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-usersuit-lint
    name: service-main-usersuit-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-usersuit-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/usersuit/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-usersuit-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-usersuit-lint,?($|\s.*)
    trusted_labels:
    - service/main/usersuit
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-videoup-bazel-build
    name: service-main-videoup-bazel-build
    namespace: default
    rerun_command: +test service-main-videoup-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/videoup
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-videoup-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-videoup-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/videoup
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-videoup-bazel-test
    name: service-main-videoup-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-videoup-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/videoup
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-videoup-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-videoup-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/videoup
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-videoup-lint
    name: service-main-videoup-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-videoup-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/videoup/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-videoup-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-videoup-lint,?($|\s.*)
    trusted_labels:
    - service/main/videoup
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-vip-bazel-build
    name: service-main-vip-bazel-build
    namespace: default
    rerun_command: +test service-main-vip-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/vip
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-vip-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-vip-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/vip
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-vip-bazel-test
    name: service-main-vip-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-vip-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/vip
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-vip-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-vip-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/vip
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-vip-lint
    name: service-main-vip-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-vip-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/vip/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-vip-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-vip-lint,?($|\s.*)
    trusted_labels:
    - service/main/vip
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-vipinfo-bazel-build
    name: service-main-vipinfo-bazel-build
    namespace: default
    rerun_command: +test service-main-vipinfo-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/vipinfo
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-vipinfo-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-vipinfo-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/vipinfo
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-vipinfo-bazel-test
    name: service-main-vipinfo-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-vipinfo-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/vipinfo
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-vipinfo-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-vipinfo-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/vipinfo
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-vipinfo-lint
    name: service-main-vipinfo-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-vipinfo-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/vipinfo/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-vipinfo-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-vipinfo-lint,?($|\s.*)
    trusted_labels:
    - service/main/vipinfo
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-workflow-bazel-build
    name: service-main-workflow-bazel-build
    namespace: default
    rerun_command: +test service-main-workflow-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/main/workflow
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-workflow-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-workflow-bazel-build,?($|\s.*)
    trusted_labels:
    - service/main/workflow
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-workflow-bazel-test
    name: service-main-workflow-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-main-workflow-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/main/workflow
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-workflow-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-workflow-bazel-test,?($|\s.*)
    trusted_labels:
    - service/main/workflow
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-main-workflow-lint
    name: service-main-workflow-lint
    namespace: default
    optional: true
    rerun_command: +test service-main-workflow-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/main/workflow/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-main-workflow-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-main-workflow-lint,?($|\s.*)
    trusted_labels:
    - service/main/workflow
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-openplatform-abtest-bazel-build
    name: service-openplatform-abtest-bazel-build
    namespace: default
    rerun_command: +test service-openplatform-abtest-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/openplatform/abtest
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-openplatform-abtest-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-openplatform-abtest-bazel-build,?($|\s.*)
    trusted_labels:
    - service/openplatform/abtest
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-openplatform-abtest-bazel-test
    name: service-openplatform-abtest-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-openplatform-abtest-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/openplatform/abtest
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-openplatform-abtest-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-openplatform-abtest-bazel-test,?($|\s.*)
    trusted_labels:
    - service/openplatform/abtest
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-openplatform-abtest-lint
    name: service-openplatform-abtest-lint
    namespace: default
    optional: true
    rerun_command: +test service-openplatform-abtest-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/openplatform/abtest/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-openplatform-abtest-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-openplatform-abtest-lint,?($|\s.*)
    trusted_labels:
    - service/openplatform/abtest
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-openplatform-anti-fraud-bazel-build
    name: service-openplatform-anti-fraud-bazel-build
    namespace: default
    rerun_command: +test service-openplatform-anti-fraud-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/openplatform/anti-fraud
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-openplatform-anti-fraud-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-openplatform-anti-fraud-bazel-build,?($|\s.*)
    trusted_labels:
    - service/openplatform/anti-fraud
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-openplatform-anti-fraud-bazel-test
    name: service-openplatform-anti-fraud-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-openplatform-anti-fraud-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/openplatform/anti-fraud
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-openplatform-anti-fraud-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-openplatform-anti-fraud-bazel-test,?($|\s.*)
    trusted_labels:
    - service/openplatform/anti-fraud
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-openplatform-anti-fraud-lint
    name: service-openplatform-anti-fraud-lint
    namespace: default
    optional: true
    rerun_command: +test service-openplatform-anti-fraud-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/openplatform/anti-fraud/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-openplatform-anti-fraud-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-openplatform-anti-fraud-lint,?($|\s.*)
    trusted_labels:
    - service/openplatform/anti-fraud
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-openplatform-pgc-season-bazel-build
    name: service-openplatform-pgc-season-bazel-build
    namespace: default
    rerun_command: +test service-openplatform-pgc-season-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/openplatform/pgc-season
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-openplatform-pgc-season-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-openplatform-pgc-season-bazel-build,?($|\s.*)
    trusted_labels:
    - service/openplatform/pgc-season
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-openplatform-pgc-season-bazel-test
    name: service-openplatform-pgc-season-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-openplatform-pgc-season-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/openplatform/pgc-season
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-openplatform-pgc-season-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-openplatform-pgc-season-bazel-test,?($|\s.*)
    trusted_labels:
    - service/openplatform/pgc-season
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-openplatform-pgc-season-lint
    name: service-openplatform-pgc-season-lint
    namespace: default
    optional: true
    rerun_command: +test service-openplatform-pgc-season-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/openplatform/pgc-season/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-openplatform-pgc-season-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-openplatform-pgc-season-lint,?($|\s.*)
    trusted_labels:
    - service/openplatform/pgc-season
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-openplatform-ticket-item-bazel-build
    name: service-openplatform-ticket-item-bazel-build
    namespace: default
    rerun_command: +test service-openplatform-ticket-item-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/openplatform/ticket-item
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-openplatform-ticket-item-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-openplatform-ticket-item-bazel-build,?($|\s.*)
    trusted_labels:
    - service/openplatform/ticket-item
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-openplatform-ticket-item-bazel-test
    name: service-openplatform-ticket-item-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-openplatform-ticket-item-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/openplatform/ticket-item
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-openplatform-ticket-item-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-openplatform-ticket-item-bazel-test,?($|\s.*)
    trusted_labels:
    - service/openplatform/ticket-item
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-openplatform-ticket-item-lint
    name: service-openplatform-ticket-item-lint
    namespace: default
    optional: true
    rerun_command: +test service-openplatform-ticket-item-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/openplatform/ticket-item/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-openplatform-ticket-item-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-openplatform-ticket-item-lint,?($|\s.*)
    trusted_labels:
    - service/openplatform/ticket-item
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-openplatform-ticket-sales-bazel-build
    name: service-openplatform-ticket-sales-bazel-build
    namespace: default
    rerun_command: +test service-openplatform-ticket-sales-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/openplatform/ticket-sales
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-openplatform-ticket-sales-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-openplatform-ticket-sales-bazel-build,?($|\s.*)
    trusted_labels:
    - service/openplatform/ticket-sales
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-openplatform-ticket-sales-bazel-test
    name: service-openplatform-ticket-sales-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-openplatform-ticket-sales-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/openplatform/ticket-sales
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-openplatform-ticket-sales-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-openplatform-ticket-sales-bazel-test,?($|\s.*)
    trusted_labels:
    - service/openplatform/ticket-sales
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-openplatform-ticket-sales-lint
    name: service-openplatform-ticket-sales-lint
    namespace: default
    optional: true
    rerun_command: +test service-openplatform-ticket-sales-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/openplatform/ticket-sales/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-openplatform-ticket-sales-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-openplatform-ticket-sales-lint,?($|\s.*)
    trusted_labels:
    - service/openplatform/ticket-sales
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-ops-log-agent-bazel-build
    name: service-ops-log-agent-bazel-build
    namespace: default
    rerun_command: +test service-ops-log-agent-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/ops/log-agent
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-ops-log-agent-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-ops-log-agent-bazel-build,?($|\s.*)
    trusted_labels:
    - service/ops/log-agent
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-ops-log-agent-bazel-test
    name: service-ops-log-agent-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-ops-log-agent-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/ops/log-agent
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-ops-log-agent-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-ops-log-agent-bazel-test,?($|\s.*)
    trusted_labels:
    - service/ops/log-agent
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-ops-log-agent-lint
    name: service-ops-log-agent-lint
    namespace: default
    optional: true
    rerun_command: +test service-ops-log-agent-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/ops/log-agent/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-ops-log-agent-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-ops-log-agent-lint,?($|\s.*)
    trusted_labels:
    - service/ops/log-agent
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-video-stream-mng-bazel-build
    name: service-video-stream-mng-bazel-build
    namespace: default
    rerun_command: +test service-video-stream-mng-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/service/video/stream-mng
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-video-stream-mng-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )service-video-stream-mng-bazel-build,?($|\s.*)
    trusted_labels:
    - service/video/stream-mng
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-video-stream-mng-bazel-test
    name: service-video-stream-mng-bazel-test
    namespace: default
    optional: true
    rerun_command: +test service-video-stream-mng-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/service/video/stream-mng
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-video-stream-mng-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )service-video-stream-mng-bazel-test,?($|\s.*)
    trusted_labels:
    - service/video/stream-mng
  - agent: kubernetes
    always_run: true
    cluster: default
    context: service-video-stream-mng-lint
    name: service-video-stream-mng-lint
    namespace: default
    optional: true
    rerun_command: +test service-video-stream-mng-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/service/video/stream-mng/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: service-video-stream-mng-lint
        resources: {}
    trigger: (?m)^\+test( | .* )service-video-stream-mng-lint,?($|\s.*)
    trusted_labels:
    - service/video/stream-mng
  - agent: kubernetes
    always_run: true
    cluster: default
    context: tool-mkprow-bazel-build
    name: tool-mkprow-bazel-build
    namespace: default
    rerun_command: +test tool-mkprow-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/tool/mkprow
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: tool-mkprow-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )tool-mkprow-bazel-build,?($|\s.*)
    trusted_labels:
    - tool/mkprow
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: tool-mkprow-bazel-test
    name: tool-mkprow-bazel-test
    namespace: default
    optional: true
    rerun_command: +test tool-mkprow-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/tool/mkprow
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: tool-mkprow-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )tool-mkprow-bazel-test,?($|\s.*)
    trusted_labels:
    - tool/mkprow
  - agent: kubernetes
    always_run: true
    cluster: default
    context: tool-mkprow-lint
    name: tool-mkprow-lint
    namespace: default
    optional: true
    rerun_command: +test tool-mkprow-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/tool/mkprow/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: tool-mkprow-lint
        resources: {}
    trigger: (?m)^\+test( | .* )tool-mkprow-lint,?($|\s.*)
    trusted_labels:
    - tool/mkprow
  - agent: kubernetes
    always_run: true
    cluster: default
    context: tool-owner-bazel-build
    name: tool-owner-bazel-build
    namespace: default
    rerun_command: +test tool-owner-bazel-build
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - bazel-build
        - WHAT=app/tool/owner
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: tool-owner-bazel-build
        resources: {}
    trigger: (?m)^\+test( | .* )tool-owner-bazel-build,?($|\s.*)
    trusted_labels:
    - tool/owner
    untrusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: tool-owner-bazel-test
    name: tool-owner-bazel-test
    namespace: default
    optional: true
    rerun_command: +test tool-owner-bazel-test
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/unit_test.sh
        - app/tool/owner
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: tool-owner-bazel-test
        resources: {}
    trigger: (?m)^\+test( | .* )tool-owner-bazel-test,?($|\s.*)
    trusted_labels:
    - tool/owner
  - agent: kubernetes
    always_run: true
    cluster: default
    context: tool-owner-lint
    name: tool-owner-lint
    namespace: default
    optional: true
    rerun_command: +test tool-owner-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./app/tool/owner/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: tool-owner-lint
        resources: {}
    trigger: (?m)^\+test( | .* )tool-owner-lint,?($|\s.*)
    trusted_labels:
    - tool/owner
  - agent: kubernetes
    always_run: true
    cluster: default
    context: library-cache-memcache-lint
    name: library-cache-memcache-lint
    namespace: default
    optional: true
    rerun_command: +test library-cache-memcache-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./library/cache/memcache/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: library-cache-memcache-lint
        resources: {}
    trigger: (?m)^\+test( | .* )library-cache-memcache-lint,?($|\s.*)
    trusted_labels:
    - library/cache/memcache
  - agent: kubernetes
    always_run: true
    cluster: default
    context: library-cache-redis-lint
    name: library-cache-redis-lint
    namespace: default
    optional: true
    rerun_command: +test library-cache-redis-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./library/cache/redis/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: library-cache-redis-lint
        resources: {}
    trigger: (?m)^\+test( | .* )library-cache-redis-lint,?($|\s.*)
    trusted_labels:
    - library/cache/redis
  - agent: kubernetes
    always_run: true
    cluster: default
    context: library-container-pool-lint
    name: library-container-pool-lint
    namespace: default
    optional: true
    rerun_command: +test library-container-pool-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./library/container/pool/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: library-container-pool-lint
        resources: {}
    trigger: (?m)^\+test( | .* )library-container-pool-lint,?($|\s.*)
    trusted_labels:
    - library/container/pool
  - agent: kubernetes
    always_run: true
    cluster: default
    context: library-database-bfs-lint
    name: library-database-bfs-lint
    namespace: default
    optional: true
    rerun_command: +test library-database-bfs-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./library/database/bfs/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: library-database-bfs-lint
        resources: {}
    trigger: (?m)^\+test( | .* )library-database-bfs-lint,?($|\s.*)
    trusted_labels:
    - library/database/bfs
  - agent: kubernetes
    always_run: true
    cluster: default
    context: library-database-elastic-lint
    name: library-database-elastic-lint
    namespace: default
    optional: true
    rerun_command: +test library-database-elastic-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./library/database/elastic/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: library-database-elastic-lint
        resources: {}
    trigger: (?m)^\+test( | .* )library-database-elastic-lint,?($|\s.*)
    trusted_labels:
    - library/database/elastic
  - agent: kubernetes
    always_run: true
    cluster: default
    context: library-database-sql-lint
    name: library-database-sql-lint
    namespace: default
    optional: true
    rerun_command: +test library-database-sql-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./library/database/sql/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: library-database-sql-lint
        resources: {}
    trigger: (?m)^\+test( | .* )library-database-sql-lint,?($|\s.*)
    trusted_labels:
    - library/database/sql
  - agent: kubernetes
    always_run: true
    cluster: default
    context: library-database-tidb-lint
    name: library-database-tidb-lint
    namespace: default
    optional: true
    rerun_command: +test library-database-tidb-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./library/database/tidb/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: library-database-tidb-lint
        resources: {}
    trigger: (?m)^\+test( | .* )library-database-tidb-lint,?($|\s.*)
    trusted_labels:
    - library/database/tidb
  - agent: kubernetes
    always_run: true
    cluster: default
    context: library-ecode-lint
    name: library-ecode-lint
    namespace: default
    optional: true
    rerun_command: +test library-ecode-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./library/ecode/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: library-ecode-lint
        resources: {}
    trigger: (?m)^\+test( | .* )library-ecode-lint,?($|\s.*)
    trusted_labels:
    - library/ecode
  - agent: kubernetes
    always_run: true
    cluster: default
    context: library-exp-feature-lint
    name: library-exp-feature-lint
    namespace: default
    optional: true
    rerun_command: +test library-exp-feature-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./library/exp/feature/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: library-exp-feature-lint
        resources: {}
    trigger: (?m)^\+test( | .* )library-exp-feature-lint,?($|\s.*)
    trusted_labels:
    - library/exp/feature
  - agent: kubernetes
    always_run: true
    cluster: default
    context: library-log-lint
    name: library-log-lint
    namespace: default
    optional: true
    rerun_command: +test library-log-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./library/log/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: library-log-lint
        resources: {}
    trigger: (?m)^\+test( | .* )library-log-lint,?($|\s.*)
    trusted_labels:
    - library/log
  - agent: kubernetes
    always_run: true
    cluster: default
    context: library-stat-lint
    name: library-stat-lint
    namespace: default
    optional: true
    rerun_command: +test library-stat-lint
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/verify-lint.sh
        - ./library/stat/...
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: library-stat-lint
        resources: {}
    trigger: (?m)^\+test( | .* )library-stat-lint,?($|\s.*)
    trusted_labels:
    - library/stat
  - agent: kubernetes
    always_run: true
    cluster: default
    context: go-common-make-update
    name: go-common-make-update
    namespace: default
    rerun_command: +test go-common-make-update
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - ./build/update-bazel.sh
        image: hub.bilibili.co/k8s-prow/golint:v20190123123017-77f54bb27
        imagePullPolicy: IfNotPresent
        name: go-common-make-update
        resources: {}
    trigger: (?m)^\+test( | .* )go-common-make-update,?($|\s.*)
  - agent: kubernetes
    always_run: true
    cluster: default
    context: go-common-build-common
    name: go-common-build-common
    namespace: default
    rerun_command: +test go-common-build-common
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - ci-bazel-build-common
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: go-common-build-common
        resources: {}
    trigger: (?m)^\+test( | .* )go-common-build-common,?($|\s.*)
    trusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: go-common-build-infra
    name: go-common-build-infra
    namespace: default
    rerun_command: +test go-common-build-infra
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - ci-bazel-build-infra
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: go-common-build-infra
        resources: {}
    trigger: (?m)^\+test( | .* )go-common-build-infra,?($|\s.*)
    trusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: go-common-build-tool
    name: go-common-build-tool
    namespace: default
    rerun_command: +test go-common-build-tool
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - ci-bazel-build-tool
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: go-common-build-tool
        resources: {}
    trigger: (?m)^\+test( | .* )go-common-build-tool,?($|\s.*)
    trusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: go-common-build-live
    name: go-common-build-live
    namespace: default
    rerun_command: +test go-common-build-live
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - ci-bazel-build-live
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: go-common-build-live
        resources: {}
    trigger: (?m)^\+test( | .* )go-common-build-live,?($|\s.*)
    trusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: go-common-build-ep
    name: go-common-build-ep
    namespace: default
    rerun_command: +test go-common-build-ep
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - ci-bazel-build-ep
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: go-common-build-ep
        resources: {}
    trigger: (?m)^\+test( | .* )go-common-build-ep,?($|\s.*)
    trusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: go-common-build-openplatform
    name: go-common-build-openplatform
    namespace: default
    rerun_command: +test go-common-build-openplatform
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - ci-bazel-build-openplatform
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: go-common-build-openplatform
        resources: {}
    trigger: (?m)^\+test( | .* )go-common-build-openplatform,?($|\s.*)
    trusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: go-common-build-bbq
    name: go-common-build-bbq
    namespace: default
    rerun_command: +test go-common-build-bbq
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - ci-bazel-build-bbq
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: go-common-build-bbq
        resources: {}
    trigger: (?m)^\+test( | .* )go-common-build-bbq,?($|\s.*)
    trusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: go-common-build-video
    name: go-common-build-video
    namespace: default
    rerun_command: +test go-common-build-video
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - ci-bazel-build-video
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: go-common-build-video
        resources: {}
    trigger: (?m)^\+test( | .* )go-common-build-video,?($|\s.*)
    trusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: go-common-build-ops
    name: go-common-build-ops
    namespace: default
    rerun_command: +test go-common-build-ops
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - ci-bazel-build-ops
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: go-common-build-ops
        resources: {}
    trigger: (?m)^\+test( | .* )go-common-build-ops,?($|\s.*)
    trusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: go-common-build-library
    name: go-common-build-library
    namespace: default
    rerun_command: +test go-common-build-library
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - ci-bazel-build-library
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: go-common-build-library
        resources: {}
    trigger: (?m)^\+test( | .* )go-common-build-library,?($|\s.*)
    trusted_labels:
    - library
    - new-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: go-common-build-service-main
    name: go-common-build-service-main
    namespace: default
    rerun_command: +test go-common-build-service-main
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - ci-bazel-build-service-main
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: go-common-build-service-main
        resources: {}
    trigger: (?m)^\+test( | .* )go-common-build-service-main,?($|\s.*)
    trusted_labels:
    - library
    - new-service-main-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: go-common-build-interface-main
    name: go-common-build-interface-main
    namespace: default
    rerun_command: +test go-common-build-interface-main
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - ci-bazel-build-interface-main
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: go-common-build-interface-main
        resources: {}
    trigger: (?m)^\+test( | .* )go-common-build-interface-main,?($|\s.*)
    trusted_labels:
    - library
    - new-interface-main-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: go-common-build-job-main
    name: go-common-build-job-main
    namespace: default
    rerun_command: +test go-common-build-job-main
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - ci-bazel-build-job-main
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: go-common-build-job-main
        resources: {}
    trigger: (?m)^\+test( | .* )go-common-build-job-main,?($|\s.*)
    trusted_labels:
    - library
    - new-job-main-project
  - agent: kubernetes
    always_run: true
    cluster: default
    context: go-common-build-admin-main
    name: go-common-build-admin-main
    namespace: default
    rerun_command: +test go-common-build-admin-main
    run_pr_pushed: true
    spec:
      containers:
      - args:
        - --id=$(BUILD_ID)
        - --job=$(JOB_NAME)
        - --root=/root/go/src
        - --repo=git.bilibili.co/$(REPO_OWNER)/$(REPO_NAME)=$(PULL_REFS)
        - --command
        - make
        - ci-bazel-build-admin-main
        image: hub.bilibili.co/k8s-prow/bazelbuild:v20190123123430-77f54bb27
        imagePullPolicy: IfNotPresent
        name: go-common-build-admin-main
        resources: {}
    trigger: (?m)^\+test( | .* )go-common-build-admin-main,?($|\s.*)
    trusted_labels:
    - library
    - new-admin-main-project
push_gateway: {}
sinker: {}
tide:
  context_options: {}
